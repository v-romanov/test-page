/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! regenerator-runtime */ "./node_modules/regenerator-runtime/runtime.js");


/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/Core/CellArray.js":
/*!***************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/Core/CellArray.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "STATIC": () => (/* binding */ STATIC),
/* harmony export */   "default": () => (/* binding */ vtkCellArray$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _DataArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DataArray.js */ "./node_modules/@kitware/vtk.js/Common/Core/DataArray.js");
/* harmony import */ var _DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DataArray/Constants.js */ "./node_modules/@kitware/vtk.js/Common/Core/DataArray/Constants.js");





function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
// Global methods
// ----------------------------------------------------------------------------

function extractCellSizes(cellArray) {
  var currentIdx = 0;
  return cellArray.filter(function (value, index) {
    if (index === currentIdx) {
      currentIdx += value + 1;
      return true;
    }

    return false;
  });
}

function getNumberOfCells(cellArray) {
  return extractCellSizes(cellArray).length;
} // ----------------------------------------------------------------------------
// Static API
// ----------------------------------------------------------------------------


var STATIC = {
  extractCellSizes: extractCellSizes,
  getNumberOfCells: getNumberOfCells
}; // ----------------------------------------------------------------------------
// vtkCellArray methods
// ----------------------------------------------------------------------------

function vtkCellArray(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkCellArray');

  publicAPI.getNumberOfCells = function (recompute) {
    if (model.numberOfCells !== undefined && !recompute) {
      return model.numberOfCells;
    }

    model.cellSizes = extractCellSizes(model.values);
    model.numberOfCells = model.cellSizes.length;
    return model.numberOfCells;
  };

  publicAPI.getCellSizes = function (recompute) {
    if (model.cellSizes !== undefined && !recompute) {
      return model.cellSizes;
    }

    model.cellSizes = extractCellSizes(model.values);
    return model.cellSizes;
  };

  var superSetData = publicAPI.setData;

  publicAPI.setData = function (typedArray) {
    superSetData(typedArray, 1);
    model.numberOfCells = undefined;
    model.cellSizes = undefined;
  };
  /**
   * Returns the point indexes at the given location as a subarray.
   */


  publicAPI.getCell = function (loc) {
    var cellLoc = loc;
    var numberOfPoints = model.values[cellLoc++];
    return model.values.subarray(cellLoc, cellLoc + numberOfPoints);
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


function defaultValues(initialValues) {
  return _objectSpread({
    empty: true,
    numberOfComponents: 1,
    dataType: _DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_3__.VtkDataTypes.UNSIGNED_INT
  }, initialValues);
} // ----------------------------------------------------------------------------


function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  _DataArray_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(publicAPI, model, defaultValues(initialValues));
  vtkCellArray(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkCellArray'); // ----------------------------------------------------------------------------

var vtkCellArray$1 = _objectSpread({
  newInstance: newInstance,
  extend: extend
}, STATIC);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/Core/ClassHierarchy.js":
/*!********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/Core/ClassHierarchy.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ClassHierarchy)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/get */ "./node_modules/@babel/runtime/helpers/esm/get.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/wrapNativeSuper */ "./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js");









function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var ClassHierarchy = /*#__PURE__*/function (_Array) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__["default"])(ClassHierarchy, _Array);

  var _super = _createSuper(ClassHierarchy);

  function ClassHierarchy() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__["default"])(this, ClassHierarchy);

    return _super.apply(this, arguments);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__["default"])(ClassHierarchy, [{
    key: "push",
    value: function push() {
      var _this = this,
          _get2;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      // no perf issue since args.length should be small
      var newArgs = args.filter(function (arg) {
        return !_this.includes(arg);
      });
      return (_get2 = (0,_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__["default"])((0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__["default"])(ClassHierarchy.prototype), "push", this)).call.apply(_get2, [this].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(newArgs)));
    }
  }]);

  return ClassHierarchy;
}( /*#__PURE__*/(0,_babel_runtime_helpers_wrapNativeSuper__WEBPACK_IMPORTED_MODULE_7__["default"])(Array));




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/Core/DataArray.js":
/*!***************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/Core/DataArray.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "STATIC": () => (/* binding */ STATIC),
/* harmony export */   "default": () => (/* binding */ vtkDataArray$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DataArray/Constants.js */ "./node_modules/@kitware/vtk.js/Common/Core/DataArray/Constants.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Math_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");





function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var DefaultDataType = _DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_1__["default"].DefaultDataType;
var TUPLE_HOLDER = []; // ----------------------------------------------------------------------------
// Global methods
// ----------------------------------------------------------------------------

function createRangeHelper() {
  var min = Number.MAX_VALUE;
  var max = -Number.MAX_VALUE;
  var count = 0;
  var sum = 0;
  return {
    add: function add(value) {
      if (min > value) {
        min = value;
      }

      if (max < value) {
        max = value;
      }

      count++;
      sum += value;
    },
    get: function get() {
      return {
        min: min,
        max: max,
        count: count,
        sum: sum,
        mean: sum / count
      };
    },
    getRange: function getRange() {
      return {
        min: min,
        max: max
      };
    }
  };
}

function computeRange(values) {
  var component = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var numberOfComponents = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  var helper = createRangeHelper();
  var size = values.length;
  var value = 0;

  if (component < 0 && numberOfComponents > 1) {
    // Compute magnitude
    for (var i = 0; i < size; i += numberOfComponents) {
      value = 0;

      for (var j = 0; j < numberOfComponents; j++) {
        value += values[i + j] * values[i + j];
      }

      value = Math.pow(value, 0.5);
      helper.add(value);
    }

    return helper.getRange();
  }

  var offset = component < 0 ? 0 : component;

  for (var _i = offset; _i < size; _i += numberOfComponents) {
    helper.add(values[_i]);
  }

  return helper.getRange();
}

function ensureRangeSize(rangeArray) {
  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var ranges = rangeArray || []; // Pad ranges with null value to get the

  while (ranges.length <= size) {
    ranges.push(null);
  }

  return ranges;
}

function getDataType(typedArray) {
  // Expects toString() to return "[object ...Array]"
  return Object.prototype.toString.call(typedArray).slice(8, -1);
}

function getMaxNorm(normArray) {
  var numComps = normArray.getNumberOfComponents();
  var maxNorm = 0.0;

  for (var i = 0; i < normArray.getNumberOfTuples(); ++i) {
    var norm$1 = (0,_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.n)(normArray.getTuple(i), numComps);

    if (norm$1 > maxNorm) {
      maxNorm = norm$1;
    }
  }

  return maxNorm;
} // ----------------------------------------------------------------------------
// Static API
// ----------------------------------------------------------------------------


var STATIC = {
  computeRange: computeRange,
  createRangeHelper: createRangeHelper,
  getDataType: getDataType,
  getMaxNorm: getMaxNorm
}; // ----------------------------------------------------------------------------
// vtkDataArray methods
// ----------------------------------------------------------------------------

function vtkDataArray(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkDataArray');

  function dataChange() {
    model.ranges = null;
    publicAPI.modified();
  }

  publicAPI.getElementComponentSize = function () {
    return model.values.BYTES_PER_ELEMENT;
  }; // Description:
  // Return the data component at the location specified by tupleIdx and
  // compIdx.


  publicAPI.getComponent = function (tupleIdx) {
    var compIdx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    return model.values[tupleIdx * model.numberOfComponents + compIdx];
  }; // Description:
  // Set the data component at the location specified by tupleIdx and compIdx
  // to value.
  // Note that i is less than NumberOfTuples and j is less than
  //  NumberOfComponents. Make sure enough memory has been allocated
  // (use SetNumberOfTuples() and SetNumberOfComponents()).


  publicAPI.setComponent = function (tupleIdx, compIdx, value) {
    if (value !== model.values[tupleIdx * model.numberOfComponents + compIdx]) {
      model.values[tupleIdx * model.numberOfComponents + compIdx] = value;
      dataChange();
    }
  };

  publicAPI.getData = function () {
    return model.values;
  };

  publicAPI.getRange = function () {
    var componentIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;
    var rangeIdx = componentIndex < 0 ? model.numberOfComponents : componentIndex;
    var range = null;

    if (!model.ranges) {
      model.ranges = ensureRangeSize(model.ranges, model.numberOfComponents);
    }

    range = model.ranges[rangeIdx];

    if (range) {
      model.rangeTuple[0] = range.min;
      model.rangeTuple[1] = range.max;
      return model.rangeTuple;
    } // Need to compute ranges...


    range = computeRange(model.values, componentIndex, model.numberOfComponents);
    model.ranges[rangeIdx] = range;
    model.rangeTuple[0] = range.min;
    model.rangeTuple[1] = range.max;
    return model.rangeTuple;
  };

  publicAPI.setRange = function (rangeValue, componentIndex) {
    if (!model.ranges) {
      model.ranges = ensureRangeSize(model.ranges, model.numberOfComponents);
    }

    var range = {
      min: rangeValue.min,
      max: rangeValue.max
    };
    model.ranges[componentIndex] = range;
    model.rangeTuple[0] = range.min;
    model.rangeTuple[1] = range.max;
    return model.rangeTuple;
  };

  publicAPI.setTuple = function (idx, tuple) {
    var offset = idx * model.numberOfComponents;

    for (var i = 0; i < model.numberOfComponents; i++) {
      model.values[offset + i] = tuple[i];
    }
  };

  publicAPI.getTuple = function (idx) {
    var tupleToFill = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : TUPLE_HOLDER;
    var numberOfComponents = model.numberOfComponents || 1;

    if (tupleToFill.length !== numberOfComponents) {
      tupleToFill.length = numberOfComponents;
    }

    var offset = idx * numberOfComponents; // Check most common component sizes first
    // to avoid doing a for loop if possible

    if (numberOfComponents === 1) {
      tupleToFill[0] = model.values[offset];
    } else if (numberOfComponents === 2) {
      tupleToFill[0] = model.values[offset];
      tupleToFill[1] = model.values[offset + 1];
    } else if (numberOfComponents === 3) {
      tupleToFill[0] = model.values[offset];
      tupleToFill[1] = model.values[offset + 1];
      tupleToFill[2] = model.values[offset + 2];
    } else if (numberOfComponents === 4) {
      tupleToFill[0] = model.values[offset];
      tupleToFill[1] = model.values[offset + 1];
      tupleToFill[2] = model.values[offset + 2];
      tupleToFill[3] = model.values[offset + 3];
    } else {
      for (var i = 0; i < numberOfComponents; i++) {
        tupleToFill[i] = model.values[offset + i];
      }
    }

    return tupleToFill;
  };

  publicAPI.getTupleLocation = function () {
    var idx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
    return idx * model.numberOfComponents;
  };

  publicAPI.getNumberOfComponents = function () {
    return model.numberOfComponents;
  };

  publicAPI.getNumberOfValues = function () {
    return model.values.length;
  };

  publicAPI.getNumberOfTuples = function () {
    return model.values.length / model.numberOfComponents;
  };

  publicAPI.getDataType = function () {
    return model.dataType;
  };
  /* eslint-disable no-use-before-define */


  publicAPI.newClone = function () {
    return newInstance({
      empty: true,
      name: model.name,
      dataType: model.dataType,
      numberOfComponents: model.numberOfComponents
    });
  };
  /* eslint-enable no-use-before-define */


  publicAPI.getName = function () {
    if (!model.name) {
      publicAPI.modified();
      model.name = "vtkDataArray".concat(publicAPI.getMTime());
    }

    return model.name;
  };

  publicAPI.setData = function (typedArray, numberOfComponents) {
    model.values = typedArray;
    model.size = typedArray.length;
    model.dataType = getDataType(typedArray);

    if (numberOfComponents) {
      model.numberOfComponents = numberOfComponents;
    }

    if (model.size % model.numberOfComponents !== 0) {
      model.numberOfComponents = 1;
    }

    dataChange();
  }; // Override serialization support


  publicAPI.getState = function () {
    var jsonArchive = _objectSpread(_objectSpread({}, model), {}, {
      vtkClass: publicAPI.getClassName()
    }); // Convert typed array to regular array


    jsonArchive.values = Array.from(jsonArchive.values);
    delete jsonArchive.buffer; // Clean any empty data

    Object.keys(jsonArchive).forEach(function (keyName) {
      if (!jsonArchive[keyName]) {
        delete jsonArchive[keyName];
      }
    }); // Sort resulting object by key name

    var sortedObj = {};
    Object.keys(jsonArchive).sort().forEach(function (name) {
      sortedObj[name] = jsonArchive[name];
    }); // Remove mtime

    if (sortedObj.mtime) {
      delete sortedObj.mtime;
    }

    return sortedObj;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  name: '',
  numberOfComponents: 1,
  size: 0,
  dataType: DefaultDataType,
  rangeTuple: [0, 0] // values: null,
  // ranges: null,

}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues);

  if (!model.empty && !model.values && !model.size) {
    throw new TypeError('Cannot create vtkDataArray object without: size > 0, values');
  }

  if (!model.values) {
    model.values = (0,_macros_js__WEBPACK_IMPORTED_MODULE_2__.newTypedArray)(model.dataType, model.size);
  } else if (Array.isArray(model.values)) {
    model.values = (0,_macros_js__WEBPACK_IMPORTED_MODULE_2__.newTypedArrayFrom)(model.dataType, model.values);
  }

  if (model.values) {
    model.size = model.values.length;
    model.dataType = getDataType(model.values);
  } // Object methods


  (0,_macros_js__WEBPACK_IMPORTED_MODULE_2__.obj)(publicAPI, model);
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_2__.set)(publicAPI, model, ['name', 'numberOfComponents']); // Object specific methods

  vtkDataArray(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = (0,_macros_js__WEBPACK_IMPORTED_MODULE_2__.newInstance)(extend, 'vtkDataArray'); // ----------------------------------------------------------------------------

var vtkDataArray$1 = _objectSpread(_objectSpread({
  newInstance: newInstance,
  extend: extend
}, STATIC), _DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_1__["default"]);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/Core/DataArray/Constants.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/Core/DataArray/Constants.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DataTypeByteSize": () => (/* binding */ DataTypeByteSize),
/* harmony export */   "DefaultDataType": () => (/* binding */ DefaultDataType),
/* harmony export */   "VtkDataTypes": () => (/* binding */ VtkDataTypes),
/* harmony export */   "default": () => (/* binding */ Constants)
/* harmony export */ });
var DataTypeByteSize = {
  Int8Array: 1,
  Uint8Array: 1,
  Uint8ClampedArray: 1,
  Int16Array: 2,
  Uint16Array: 2,
  Int32Array: 4,
  Uint32Array: 4,
  Float32Array: 4,
  Float64Array: 8
};
var VtkDataTypes = {
  VOID: '',
  // not sure to know what that should be
  CHAR: 'Int8Array',
  SIGNED_CHAR: 'Int8Array',
  UNSIGNED_CHAR: 'Uint8Array',
  SHORT: 'Int16Array',
  UNSIGNED_SHORT: 'Uint16Array',
  INT: 'Int32Array',
  UNSIGNED_INT: 'Uint32Array',
  FLOAT: 'Float32Array',
  DOUBLE: 'Float64Array'
};
var DefaultDataType = VtkDataTypes.FLOAT;
var Constants = {
  DefaultDataType: DefaultDataType,
  DataTypeByteSize: DataTypeByteSize,
  VtkDataTypes: VtkDataTypes
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/Core/HalfFloat.js":
/*!***************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/Core/HalfFloat.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ HalfFloat)
/* harmony export */ });
/* eslint-disable no-bitwise */
var floatView = new Float32Array(1);
var int32View = new Int32Array(floatView.buffer);
/* eslint-disable no-bitwise */

/* This method is faster than the OpenEXR implementation (very often
 * used, eg. in Ogre), with the additional benefit of rounding, inspired
 * by James Tursa?s half-precision code. */

function toHalf(val) {
  floatView[0] = val;
  var x = int32View[0];
  var bits = x >> 16 & 0x8000;
  /* Get the sign */

  var m = x >> 12 & 0x07ff;
  /* Keep one extra bit for rounding */

  var e = x >> 23 & 0xff;
  /* Using int is faster here */

  /* If zero, or denormal, or exponent underflows too much for a denormal
   * half, return signed zero. */

  if (e < 103) {
    return bits;
  }
  /* If NaN, return NaN. If Inf or exponent overflow, return Inf. */


  if (e > 142) {
    bits |= 0x7c00;
    /* If exponent was 0xff and one mantissa bit was set, it means NaN,
     * not Inf, so make sure we set one mantissa bit too. */

    bits |= (e === 255 ? 0 : 1) && x & 0x007fffff;
    return bits;
  }
  /* If exponent underflows but not too much, return a denormal */


  if (e < 113) {
    m |= 0x0800;
    /* Extra rounding may overflow and set mantissa to 0 and exponent
     * to 1, which is OK. */

    bits |= (m >> 114 - e) + (m >> 113 - e & 1);
    return bits;
  }

  bits |= e - 112 << 10 | m >> 1;
  /* Extra rounding. An overflow will set mantissa to 0 and increment
   * the exponent, which is OK. */

  bits += m & 1;
  return bits;
}

function fromHalf(h) {
  var s = (h & 0x8000) >> 15;
  var e = (h & 0x7c00) >> 10;
  var f = h & 0x03ff;

  if (e === 0) {
    return (s ? -1 : 1) * Math.pow(2, -14) * (f / Math.pow(2, 10));
  }

  if (e === 0x1f) {
    return f ? NaN : (s ? -1 : 1) * Infinity;
  }

  return (s ? -1 : 1) * Math.pow(2, e - 15) * (1 + f / Math.pow(2, 10));
}

var HalfFloat = {
  fromHalf: fromHalf,
  toHalf: toHalf
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/Core/ImageHelper.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/Core/ImageHelper.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ImageHelper)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
/* harmony import */ var _DataModel_ImageData_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../DataModel/ImageData.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/ImageData.js");
/* harmony import */ var _DataArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DataArray.js */ "./node_modules/@kitware/vtk.js/Common/Core/DataArray.js");




/**
 * Takes a canvas and converts it to a vtkImageData.
 *
 * Optionally supply a bounding box to get a particular subset of the canvas.
 *
 * @param canvas       The HTML canvas to convert
 * @param boundingBox  A bounding box of type [top, left, width, height]
 */

function canvasToImageData(canvas) {
  var boundingBox = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0, 0, 0];

  var _boundingBox = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__["default"])(boundingBox, 4),
      top = _boundingBox[0],
      left = _boundingBox[1],
      width = _boundingBox[2],
      height = _boundingBox[3];

  var ctxt = canvas.getContext('2d');
  var idata = ctxt.getImageData(top, left, width || canvas.width, height || canvas.height);
  var imageData = _DataModel_ImageData_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance({
    type: 'vtkImageData'
  });
  imageData.setOrigin(0, 0, 0);
  imageData.setSpacing(1, 1, 1);
  imageData.setExtent(0, (width || canvas.width) - 1, 0, (height || canvas.height) - 1, 0, 0);
  var scalars = _DataArray_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance({
    numberOfComponents: 4,
    values: new Uint8Array(idata.data.buffer)
  });
  scalars.setName('scalars');
  imageData.getPointData().setScalars(scalars);
  return imageData;
}
/**
 * Converts an Image object to a vtkImageData.
 */


function imageToImageData(image) {
  var transform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    flipX: false,
    flipY: false,
    rotate: 0
  };
  var canvas = document.createElement('canvas');
  canvas.width = image.width;
  canvas.height = image.height;
  var ctx = canvas.getContext('2d');
  var flipX = transform.flipX,
      flipY = transform.flipY,
      rotate = transform.rotate;
  ctx.translate(canvas.width / 2, canvas.height / 2);
  ctx.scale(flipX ? -1 : 1, flipY ? -1 : 1);
  ctx.rotate(rotate * Math.PI / 180);
  ctx.drawImage(image, -image.width / 2, -image.height / 2);
  return canvasToImageData(canvas);
}

var ImageHelper = {
  canvasToImageData: canvasToImageData,
  imageToImageData: imageToImageData
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/Core/LookupTable.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/Core/LookupTable.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkLookupTable$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Math_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");
/* harmony import */ var _ScalarsToColors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ScalarsToColors.js */ "./node_modules/@kitware/vtk.js/Common/Core/ScalarsToColors.js");
/* harmony import */ var _ScalarsToColors_Constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ScalarsToColors/Constants.js */ "./node_modules/@kitware/vtk.js/Common/Core/ScalarsToColors/Constants.js");
/* harmony import */ var _DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DataArray/Constants.js */ "./node_modules/@kitware/vtk.js/Common/Core/DataArray/Constants.js");






var vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].vtkErrorMacro; // ----------------------------------------------------------------------------
// Global methods
// ----------------------------------------------------------------------------
// Add module-level functions or api that you want to expose statically via
// the next section...
// ----------------------------------------------------------------------------
// Static API
// ----------------------------------------------------------------------------

var BELOW_RANGE_COLOR_INDEX = 0;
var ABOVE_RANGE_COLOR_INDEX = 1;
var NAN_COLOR_INDEX = 2; // ----------------------------------------------------------------------------
// vtkMyClass methods
// ----------------------------------------------------------------------------

function vtkLookupTable(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkLookupTable'); //----------------------------------------------------------------------------
  // Description:
  // Return true if all of the values defining the mapping have an opacity
  // equal to 1. Default implementation return true.

  publicAPI.isOpaque = function () {
    if (model.opaqueFlagBuildTime.getMTime() < publicAPI.getMTime()) {
      var opaque = true;

      if (model.nanColor[3] < 1.0) {
        opaque = 0;
      }

      if (model.useBelowRangeColor && model.belowRangeColor[3] < 1.0) {
        opaque = 0;
      }

      if (model.useAboveRangeColor && model.aboveRangeColor[3] < 1.0) {
        opaque = 0;
      }

      for (var i = 3; i < model.table.length && opaque; i += 4) {
        if (model.table[i] < 255) {
          opaque = false;
        }
      }

      model.opaqueFlag = opaque;
      model.opaqueFlagBuildTime.modified();
    }

    return model.opaqueFlag;
  };

  publicAPI.usingLogScale = function () {
    return false;
  }; //----------------------------------------------------------------------------


  publicAPI.getNumberOfAvailableColors = function () {
    return model.table.length;
  }; //----------------------------------------------------------------------------
  // Apply shift/scale to the scalar value v and return the index.


  publicAPI.linearIndexLookup = function (v, p) {
    var dIndex = 0;

    if (v < p.range[0]) {
      dIndex = p.maxIndex + BELOW_RANGE_COLOR_INDEX + 1.5;
    } else if (v > p.range[1]) {
      dIndex = p.maxIndex + ABOVE_RANGE_COLOR_INDEX + 1.5;
    } else {
      dIndex = (v + p.shift) * p.scale; // This conditional is needed because when v is very close to
      // p.Range[1], it may map above p.MaxIndex in the linear mapping
      // above.

      dIndex = dIndex < p.maxIndex ? dIndex : p.maxIndex;
    }

    return Math.floor(dIndex);
  };

  publicAPI.linearLookup = function (v, table, p) {
    var index = 0;

    if ((0,_Math_index_js__WEBPACK_IMPORTED_MODULE_1__.i)(v)) {
      index = Math.floor(p.maxIndex + 1.5 + NAN_COLOR_INDEX);
    } else {
      index = publicAPI.linearIndexLookup(v, p);
    }

    var offset = 4 * index;
    return [table[offset], table[offset + 1], table[offset + 2], table[offset + 3]];
  };

  publicAPI.indexedLookupFunction = function (v, table, p) {
    var index = publicAPI.getAnnotatedValueIndexInternal(v);

    if (index === -1) {
      index = model.numberOfColors + NAN_COLOR_INDEX;
    }

    var offset = 4 * index;
    return [table[offset], table[offset + 1], table[offset + 2], table[offset + 3]];
  }; //----------------------------------------------------------------------------


  publicAPI.lookupShiftAndScale = function (range, p) {
    p.shift = -range[0];
    p.scale = Number.MAX_VALUE;

    if (range[1] > range[0]) {
      p.scale = (p.maxIndex + 1) / (range[1] - range[0]);
    }
  }; // Public API methods


  publicAPI.mapScalarsThroughTable = function (input, output, outFormat, inputOffset) {
    var lookupFunc = publicAPI.linearLookup;

    if (model.indexedLookup) {
      lookupFunc = publicAPI.indexedLookupFunction;
    }

    var trange = publicAPI.getMappingRange();
    var p = {
      maxIndex: publicAPI.getNumberOfColors() - 1,
      range: trange,
      shift: 0.0,
      scale: 0.0
    };
    publicAPI.lookupShiftAndScale(trange, p);
    var alpha = publicAPI.getAlpha();
    var length = input.getNumberOfTuples();
    var inIncr = input.getNumberOfComponents();
    var outputV = output.getData();
    var inputV = input.getData();

    if (alpha >= 1.0) {
      if (outFormat === _ScalarsToColors_Constants_js__WEBPACK_IMPORTED_MODULE_3__.ScalarMappingTarget.RGBA) {
        for (var i = 0; i < length; i++) {
          var cptr = lookupFunc(inputV[i * inIncr + inputOffset], model.table, p);
          outputV[i * 4] = cptr[0];
          outputV[i * 4 + 1] = cptr[1];
          outputV[i * 4 + 2] = cptr[2];
          outputV[i * 4 + 3] = cptr[3];
        }
      }
    } else {
      /* eslint-disable no-lonely-if */
      if (outFormat === _ScalarsToColors_Constants_js__WEBPACK_IMPORTED_MODULE_3__.ScalarMappingTarget.RGBA) {
        for (var _i = 0; _i < length; _i++) {
          var _cptr = lookupFunc(inputV[_i * inIncr + inputOffset], model.table, p);

          outputV[_i * 4] = _cptr[0];
          outputV[_i * 4 + 1] = _cptr[1];
          outputV[_i * 4 + 2] = _cptr[2];
          outputV[_i * 4 + 3] = Math.floor(_cptr[3] * alpha + 0.5);
        }
      }
    } // alpha blending

  };

  publicAPI.forceBuild = function () {
    var hinc = 0.0;
    var sinc = 0.0;
    var vinc = 0.0;
    var ainc = 0.0;
    var maxIndex = model.numberOfColors - 1;

    if (maxIndex) {
      hinc = (model.hueRange[1] - model.hueRange[0]) / maxIndex;
      sinc = (model.saturationRange[1] - model.saturationRange[0]) / maxIndex;
      vinc = (model.valueRange[1] - model.valueRange[0]) / maxIndex;
      ainc = (model.alphaRange[1] - model.alphaRange[0]) / maxIndex;
    }

    var hsv = [];
    var rgba = [];

    for (var i = 0; i <= maxIndex; i++) {
      hsv[0] = model.hueRange[0] + i * hinc;
      hsv[1] = model.saturationRange[0] + i * sinc;
      hsv[2] = model.valueRange[0] + i * vinc;
      (0,_Math_index_js__WEBPACK_IMPORTED_MODULE_1__.h)(hsv, rgba);
      rgba[3] = model.alphaRange[0] + i * ainc; //  case VTK_RAMP_LINEAR:

      model.table[i * 4] = rgba[0] * 255.0 + 0.5;
      model.table[i * 4 + 1] = rgba[1] * 255.0 + 0.5;
      model.table[i * 4 + 2] = rgba[2] * 255.0 + 0.5;
      model.table[i * 4 + 3] = rgba[3] * 255.0 + 0.5;
    }

    publicAPI.buildSpecialColors();
    model.buildTime.modified();
  };

  publicAPI.setTable = function (table) {
    if (table.getNumberOfComponents() !== 4) {
      vtkErrorMacro('Expected 4 components for RGBA colors');
      return;
    }

    if (table.getDataType() !== _DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_4__.VtkDataTypes.UNSIGNED_CHAR) {
      vtkErrorMacro('Expected unsigned char values for RGBA colors');
      return;
    }

    model.numberOfColors = table.getNumberOfTuples();
    var data = table.getData();

    for (var i = 0; i < data.length; i++) {
      model.table[i] = data[i];
    }

    publicAPI.buildSpecialColors();
    model.insertTime.modified();
    publicAPI.modified();
  };

  publicAPI.buildSpecialColors = function () {
    // Add "special" colors (NaN, below range, above range) to table here.
    var numberOfColors = model.numberOfColors;
    var tptr = model.table;
    var base = (numberOfColors + BELOW_RANGE_COLOR_INDEX) * 4; // Below range color

    if (model.useBelowRangeColor || numberOfColors === 0) {
      tptr[base] = model.belowRangeColor[0] * 255.0 + 0.5;
      tptr[base + 1] = model.belowRangeColor[1] * 255.0 + 0.5;
      tptr[base + 2] = model.belowRangeColor[2] * 255.0 + 0.5;
      tptr[base + 3] = model.belowRangeColor[3] * 255.0 + 0.5;
    } else {
      // Duplicate the first color in the table.
      tptr[base] = tptr[0];
      tptr[base + 1] = tptr[1];
      tptr[base + 2] = tptr[2];
      tptr[base + 3] = tptr[3];
    } // Above range color


    base = (numberOfColors + ABOVE_RANGE_COLOR_INDEX) * 4;

    if (model.useAboveRangeColor || numberOfColors === 0) {
      tptr[base] = model.aboveRangeColor[0] * 255.0 + 0.5;
      tptr[base + 1] = model.aboveRangeColor[1] * 255.0 + 0.5;
      tptr[base + 2] = model.aboveRangeColor[2] * 255.0 + 0.5;
      tptr[base + 3] = model.aboveRangeColor[3] * 255.0 + 0.5;
    } else {
      // Duplicate the last color in the table.
      tptr[base] = tptr[4 * (numberOfColors - 1) + 0];
      tptr[base + 1] = tptr[4 * (numberOfColors - 1) + 1];
      tptr[base + 2] = tptr[4 * (numberOfColors - 1) + 2];
      tptr[base + 3] = tptr[4 * (numberOfColors - 1) + 3];
    } // Always use NanColor


    base = (numberOfColors + NAN_COLOR_INDEX) * 4;
    tptr[base] = model.nanColor[0] * 255.0 + 0.5;
    tptr[base + 1] = model.nanColor[1] * 255.0 + 0.5;
    tptr[base + 2] = model.nanColor[2] * 255.0 + 0.5;
    tptr[base + 3] = model.nanColor[3] * 255.0 + 0.5;
  };

  publicAPI.build = function () {
    if (model.table.length < 1 || publicAPI.getMTime() > model.buildTime.getMTime() && model.insertTime.getMTime() <= model.buildTime.getMTime()) {
      publicAPI.forceBuild();
    }
  };

  if (model.table.length > 0) {
    // ensure insertTime is more recently modified than buildTime if
    // a table is provided via the constructor
    model.insertTime.modified();
  }
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  numberOfColors: 256,
  // table: null,
  hueRange: [0.0, 0.66667],
  saturationRange: [1.0, 1.0],
  valueRange: [1.0, 1.0],
  alphaRange: [1.0, 1.0],
  nanColor: [0.5, 0.0, 0.0, 1.0],
  belowRangeColor: [0.0, 0.0, 0.0, 1.0],
  aboveRangeColor: [1.0, 1.0, 1.0, 1.0],
  useAboveRangeColor: false,
  useBelowRangeColor: false,
  alpha: 1.0 // buildTime: null,
  // opaqueFlagBuildTime: null,
  // insertTime: null,

}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _ScalarsToColors_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(publicAPI, model, initialValues); // Internal objects initialization

  if (!model.table) {
    model.table = [];
  }

  model.buildTime = {};
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(model.buildTime);
  model.opaqueFlagBuildTime = {};
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(model.opaqueFlagBuildTime, {
    mtime: 0
  });
  model.insertTime = {};
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(model.insertTime, {
    mtime: 0
  }); // Create get-only macros

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].get(publicAPI, model, ['buildTime']); // Create get-set macros

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['numberOfColors', 'useAboveRangeColor', 'useBelowRangeColor']); // Create set macros for array (needs to know size)

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setArray(publicAPI, model, ['alphaRange', 'hueRange', 'saturationRange', 'valueRange'], 2);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setArray(publicAPI, model, ['nanColor', 'belowRangeColor', 'aboveRangeColor'], 4); // Create get macros for array

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].getArray(publicAPI, model, ['hueRange', 'saturationRange', 'valueRange', 'alphaRange', 'nanColor', 'belowRangeColor', 'aboveRangeColor']); // For more macro methods, see "Sources/macros.js"
  // Object specific methods

  vtkLookupTable(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkLookupTable'); // ----------------------------------------------------------------------------

var vtkLookupTable$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/Core/Math.js":
/*!**********************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/Core/Math.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LUFactor3x3": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.ae),
/* harmony export */   "LUSolve3x3": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.af),
/* harmony export */   "Pi": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.T),
/* harmony export */   "add": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.k),
/* harmony export */   "angleBetweenVectors": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.R),
/* harmony export */   "areBoundsInitialized": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.O),
/* harmony export */   "areEquals": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.z),
/* harmony export */   "areMatricesEqual": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.a),
/* harmony export */   "arrayMax": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.Y),
/* harmony export */   "arrayMin": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.X),
/* harmony export */   "arrayRange": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.C),
/* harmony export */   "beginCombination": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.a0),
/* harmony export */   "binomial": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.$),
/* harmony export */   "boundsIsWithinOtherBounds": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.aJ),
/* harmony export */   "ceil": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.U),
/* harmony export */   "ceilLog2": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.Z),
/* harmony export */   "clampAndNormalizeValue": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.aF),
/* harmony export */   "clampValue": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.A),
/* harmony export */   "clampVector": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.e),
/* harmony export */   "computeBoundsFromPoints": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.c),
/* harmony export */   "createUninitializedBounds": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.M),
/* harmony export */   "cross": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.j),
/* harmony export */   "default": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.q),
/* harmony export */   "degreesFromRadians": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.y),
/* harmony export */   "determinant2x2": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.m),
/* harmony export */   "determinant3x3": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.x),
/* harmony export */   "diagonalize3x3": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.ar),
/* harmony export */   "distance2BetweenPoints": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.f),
/* harmony export */   "dot": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.d),
/* harmony export */   "dot2D": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.a8),
/* harmony export */   "estimateMatrixCondition": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.aw),
/* harmony export */   "extentIsWithinOtherExtent": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.aI),
/* harmony export */   "factorial": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__._),
/* harmony export */   "float2CssRGBA": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.aS),
/* harmony export */   "floatRGB2HexCode": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.aR),
/* harmony export */   "floatToHex2": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.aQ),
/* harmony export */   "floor": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.I),
/* harmony export */   "gaussian": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.a4),
/* harmony export */   "gaussianAmplitude": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.aa),
/* harmony export */   "gaussianWeight": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.ab),
/* harmony export */   "getAdjustedScalarRange": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.aH),
/* harmony export */   "getMajorAxisIndex": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.D),
/* harmony export */   "getScalarTypeFittingRange": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.aG),
/* harmony export */   "getSeed": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.a3),
/* harmony export */   "hex2float": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.aA),
/* harmony export */   "hsv2rgb": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.h),
/* harmony export */   "identity3x3": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.al),
/* harmony export */   "inf": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.aM),
/* harmony export */   "invert3x3": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.ak),
/* harmony export */   "invertMatrix": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.av),
/* harmony export */   "isFinite": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.aO),
/* harmony export */   "isInf": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.E),
/* harmony export */   "isNaN": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.aP),
/* harmony export */   "isNan": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.i),
/* harmony export */   "isPowerOfTwo": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.P),
/* harmony export */   "jacobi": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.ax),
/* harmony export */   "jacobiN": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.o),
/* harmony export */   "lab2rgb": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.H),
/* harmony export */   "lab2xyz": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.aB),
/* harmony export */   "linearSolve3x3": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.ag),
/* harmony export */   "luFactorLinearSystem": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.at),
/* harmony export */   "luSolveLinearSystem": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.au),
/* harmony export */   "matrix3x3ToQuaternion": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.ao),
/* harmony export */   "max": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.W),
/* harmony export */   "min": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.V),
/* harmony export */   "multiply3x3_mat3": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.ah),
/* harmony export */   "multiply3x3_vect3": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.N),
/* harmony export */   "multiplyAccumulate": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.Q),
/* harmony export */   "multiplyAccumulate2D": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.a6),
/* harmony export */   "multiplyMatrix": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.ai),
/* harmony export */   "multiplyQuaternion": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.ap),
/* harmony export */   "multiplyScalar": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.t),
/* harmony export */   "multiplyScalar2D": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.a5),
/* harmony export */   "nearestPowerOfTwo": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.K),
/* harmony export */   "negInf": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.aN),
/* harmony export */   "nextCombination": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.a1),
/* harmony export */   "norm": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.n),
/* harmony export */   "norm2D": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.ad),
/* harmony export */   "normalize": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.l),
/* harmony export */   "normalize2D": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.L),
/* harmony export */   "orthogonalize3x3": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.aq),
/* harmony export */   "outer": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.a7),
/* harmony export */   "outer2D": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.ac),
/* harmony export */   "perpendiculars": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.p),
/* harmony export */   "pointIsWithinBounds": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.aK),
/* harmony export */   "projectVector": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.B),
/* harmony export */   "projectVector2D": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.a9),
/* harmony export */   "quaternionToMatrix3x3": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.am),
/* harmony export */   "radiansFromDegrees": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.r),
/* harmony export */   "random": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.w),
/* harmony export */   "randomSeed": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.a2),
/* harmony export */   "rgb2hsv": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.F),
/* harmony export */   "rgb2lab": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.G),
/* harmony export */   "rgb2xyz": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.aE),
/* harmony export */   "round": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.J),
/* harmony export */   "roundNumber": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.an),
/* harmony export */   "roundVector": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.b),
/* harmony export */   "signedAngleBetweenVectors": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.S),
/* harmony export */   "singularValueDecomposition3x3": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.as),
/* harmony export */   "solve3PointCircle": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.aL),
/* harmony export */   "solveHomogeneousLeastSquares": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.ay),
/* harmony export */   "solveLeastSquares": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.az),
/* harmony export */   "solveLinearSystem": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.s),
/* harmony export */   "subtract": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.g),
/* harmony export */   "transpose3x3": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.aj),
/* harmony export */   "uninitializeBounds": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.u),
/* harmony export */   "xyz2lab": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.aC),
/* harmony export */   "xyz2rgb": () => (/* reexport safe */ _Math_index_js__WEBPACK_IMPORTED_MODULE_3__.aD)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
/* harmony import */ var _vendor_seedrandom_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../vendor/seedrandom/index.js */ "./node_modules/@kitware/vtk.js/vendor/seedrandom/index.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Math_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");






/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/Core/Math/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$": () => (/* binding */ binomial),
/* harmony export */   "A": () => (/* binding */ clampValue),
/* harmony export */   "B": () => (/* binding */ projectVector),
/* harmony export */   "C": () => (/* binding */ arrayRange),
/* harmony export */   "D": () => (/* binding */ getMajorAxisIndex),
/* harmony export */   "E": () => (/* binding */ isInf),
/* harmony export */   "F": () => (/* binding */ rgb2hsv),
/* harmony export */   "G": () => (/* binding */ rgb2lab),
/* harmony export */   "H": () => (/* binding */ lab2rgb),
/* harmony export */   "I": () => (/* binding */ floor),
/* harmony export */   "J": () => (/* binding */ round),
/* harmony export */   "K": () => (/* binding */ nearestPowerOfTwo),
/* harmony export */   "L": () => (/* binding */ normalize2D),
/* harmony export */   "M": () => (/* binding */ createUninitializedBounds),
/* harmony export */   "N": () => (/* binding */ multiply3x3_vect3),
/* harmony export */   "O": () => (/* binding */ areBoundsInitialized),
/* harmony export */   "P": () => (/* binding */ isPowerOfTwo),
/* harmony export */   "Q": () => (/* binding */ multiplyAccumulate),
/* harmony export */   "R": () => (/* binding */ angleBetweenVectors),
/* harmony export */   "S": () => (/* binding */ signedAngleBetweenVectors),
/* harmony export */   "T": () => (/* binding */ Pi),
/* harmony export */   "U": () => (/* binding */ ceil),
/* harmony export */   "V": () => (/* binding */ min),
/* harmony export */   "W": () => (/* binding */ max),
/* harmony export */   "X": () => (/* binding */ arrayMin),
/* harmony export */   "Y": () => (/* binding */ arrayMax),
/* harmony export */   "Z": () => (/* binding */ ceilLog2),
/* harmony export */   "_": () => (/* binding */ factorial),
/* harmony export */   "a": () => (/* binding */ areMatricesEqual),
/* harmony export */   "a0": () => (/* binding */ beginCombination),
/* harmony export */   "a1": () => (/* binding */ nextCombination),
/* harmony export */   "a2": () => (/* binding */ randomSeed),
/* harmony export */   "a3": () => (/* binding */ getSeed),
/* harmony export */   "a4": () => (/* binding */ gaussian),
/* harmony export */   "a5": () => (/* binding */ multiplyScalar2D),
/* harmony export */   "a6": () => (/* binding */ multiplyAccumulate2D),
/* harmony export */   "a7": () => (/* binding */ outer),
/* harmony export */   "a8": () => (/* binding */ dot2D),
/* harmony export */   "a9": () => (/* binding */ projectVector2D),
/* harmony export */   "aA": () => (/* binding */ hex2float),
/* harmony export */   "aB": () => (/* binding */ lab2xyz),
/* harmony export */   "aC": () => (/* binding */ xyz2lab),
/* harmony export */   "aD": () => (/* binding */ xyz2rgb),
/* harmony export */   "aE": () => (/* binding */ rgb2xyz),
/* harmony export */   "aF": () => (/* binding */ clampAndNormalizeValue),
/* harmony export */   "aG": () => (/* binding */ getScalarTypeFittingRange),
/* harmony export */   "aH": () => (/* binding */ getAdjustedScalarRange),
/* harmony export */   "aI": () => (/* binding */ extentIsWithinOtherExtent),
/* harmony export */   "aJ": () => (/* binding */ boundsIsWithinOtherBounds),
/* harmony export */   "aK": () => (/* binding */ pointIsWithinBounds),
/* harmony export */   "aL": () => (/* binding */ solve3PointCircle),
/* harmony export */   "aM": () => (/* binding */ inf),
/* harmony export */   "aN": () => (/* binding */ negInf),
/* harmony export */   "aO": () => (/* binding */ isFinite),
/* harmony export */   "aP": () => (/* binding */ isNaN),
/* harmony export */   "aQ": () => (/* binding */ floatToHex2),
/* harmony export */   "aR": () => (/* binding */ floatRGB2HexCode),
/* harmony export */   "aS": () => (/* binding */ float2CssRGBA),
/* harmony export */   "aa": () => (/* binding */ gaussianAmplitude),
/* harmony export */   "ab": () => (/* binding */ gaussianWeight),
/* harmony export */   "ac": () => (/* binding */ outer2D),
/* harmony export */   "ad": () => (/* binding */ norm2D),
/* harmony export */   "ae": () => (/* binding */ LUFactor3x3),
/* harmony export */   "af": () => (/* binding */ LUSolve3x3),
/* harmony export */   "ag": () => (/* binding */ linearSolve3x3),
/* harmony export */   "ah": () => (/* binding */ multiply3x3_mat3),
/* harmony export */   "ai": () => (/* binding */ multiplyMatrix),
/* harmony export */   "aj": () => (/* binding */ transpose3x3),
/* harmony export */   "ak": () => (/* binding */ invert3x3),
/* harmony export */   "al": () => (/* binding */ identity3x3),
/* harmony export */   "am": () => (/* binding */ quaternionToMatrix3x3),
/* harmony export */   "an": () => (/* binding */ roundNumber),
/* harmony export */   "ao": () => (/* binding */ matrix3x3ToQuaternion),
/* harmony export */   "ap": () => (/* binding */ multiplyQuaternion),
/* harmony export */   "aq": () => (/* binding */ orthogonalize3x3),
/* harmony export */   "ar": () => (/* binding */ diagonalize3x3),
/* harmony export */   "as": () => (/* binding */ singularValueDecomposition3x3),
/* harmony export */   "at": () => (/* binding */ luFactorLinearSystem),
/* harmony export */   "au": () => (/* binding */ luSolveLinearSystem),
/* harmony export */   "av": () => (/* binding */ invertMatrix),
/* harmony export */   "aw": () => (/* binding */ estimateMatrixCondition),
/* harmony export */   "ax": () => (/* binding */ jacobi),
/* harmony export */   "ay": () => (/* binding */ solveHomogeneousLeastSquares),
/* harmony export */   "az": () => (/* binding */ solveLeastSquares),
/* harmony export */   "b": () => (/* binding */ roundVector),
/* harmony export */   "c": () => (/* binding */ computeBoundsFromPoints),
/* harmony export */   "d": () => (/* binding */ dot),
/* harmony export */   "e": () => (/* binding */ clampVector),
/* harmony export */   "f": () => (/* binding */ distance2BetweenPoints),
/* harmony export */   "g": () => (/* binding */ subtract),
/* harmony export */   "h": () => (/* binding */ hsv2rgb),
/* harmony export */   "i": () => (/* binding */ isNan),
/* harmony export */   "j": () => (/* binding */ cross),
/* harmony export */   "k": () => (/* binding */ add),
/* harmony export */   "l": () => (/* binding */ normalize),
/* harmony export */   "m": () => (/* binding */ determinant2x2),
/* harmony export */   "n": () => (/* binding */ norm),
/* harmony export */   "o": () => (/* binding */ jacobiN),
/* harmony export */   "p": () => (/* binding */ perpendiculars),
/* harmony export */   "q": () => (/* binding */ vtkMath),
/* harmony export */   "r": () => (/* binding */ radiansFromDegrees),
/* harmony export */   "s": () => (/* binding */ solveLinearSystem),
/* harmony export */   "t": () => (/* binding */ multiplyScalar),
/* harmony export */   "u": () => (/* binding */ uninitializeBounds),
/* harmony export */   "v": () => (/* binding */ vtkMath$1),
/* harmony export */   "w": () => (/* binding */ random),
/* harmony export */   "x": () => (/* binding */ determinant3x3),
/* harmony export */   "y": () => (/* binding */ degreesFromRadians),
/* harmony export */   "z": () => (/* binding */ areEquals)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
/* harmony import */ var _vendor_seedrandom_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../vendor/seedrandom/index.js */ "./node_modules/@kitware/vtk.js/vendor/seedrandom/index.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");




var vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_2__["default"].vtkErrorMacro,
    vtkWarningMacro = _macros_js__WEBPACK_IMPORTED_MODULE_2__["default"].vtkWarningMacro; // ----------------------------------------------------------------------------

/* eslint-disable camelcase                                                  */

/* eslint-disable no-cond-assign                                             */

/* eslint-disable no-bitwise                                                 */

/* eslint-disable no-multi-assign                                            */
// ----------------------------------------------------------------------------

var randomSeedValue = 0;
var VTK_MAX_ROTATIONS = 20;
var VTK_SMALL_NUMBER = 1.0e-12;

function notImplemented(method) {
  return function () {
    return vtkErrorMacro("vtkMath::".concat(method, " - NOT IMPLEMENTED"));
  };
}

function vtkSwapVectors3(v1, v2) {
  for (var i = 0; i < 3; i++) {
    var tmp = v1[i];
    v1[i] = v2[i];
    v2[i] = tmp;
  }
}

function createArray() {
  var size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;
  var array = [];

  while (array.length < size) {
    array.push(0);
  }

  return array;
} // ----------------------------------------------------------------------------
// Global methods
// ----------------------------------------------------------------------------


var Pi = function Pi() {
  return Math.PI;
};
function radiansFromDegrees(deg) {
  return deg / 180 * Math.PI;
}
function degreesFromRadians(rad) {
  return rad * 180 / Math.PI;
}
var round = Math.round,
    floor = Math.floor,
    ceil = Math.ceil,
    min = Math.min,
    max = Math.max;
function arrayMin(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  var minValue = Infinity;

  for (var i = offset, len = arr.length; i < len; i += stride) {
    if (arr[i] < minValue) {
      minValue = arr[i];
    }
  }

  return minValue;
}
function arrayMax(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  var maxValue = -Infinity;

  for (var i = offset, len = arr.length; i < len; i += stride) {
    if (maxValue < arr[i]) {
      maxValue = arr[i];
    }
  }

  return maxValue;
}
function arrayRange(arr) {
  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var stride = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  var minValue = Infinity;
  var maxValue = -Infinity;

  for (var i = offset, len = arr.length; i < len; i += stride) {
    if (arr[i] < minValue) {
      minValue = arr[i];
    }

    if (maxValue < arr[i]) {
      maxValue = arr[i];
    }
  }

  return [minValue, maxValue];
}
var ceilLog2 = notImplemented('ceilLog2');
var factorial = notImplemented('factorial');
function nearestPowerOfTwo(xi) {
  var v = 1;

  while (v < xi) {
    v *= 2;
  }

  return v;
}
function isPowerOfTwo(x) {
  return x === nearestPowerOfTwo(x);
}
function binomial(m, n) {
  var r = 1;

  for (var i = 1; i <= n; ++i) {
    r *= (m - i + 1) / i;
  }

  return Math.floor(r);
}
function beginCombination(m, n) {
  if (m < n) {
    return 0;
  }

  var r = createArray(n);

  for (var i = 0; i < n; ++i) {
    r[i] = i;
  }

  return r;
}
function nextCombination(m, n, r) {
  var status = 0;

  for (var i = n - 1; i >= 0; --i) {
    if (r[i] < m - n + i) {
      var j = r[i] + 1;

      while (i < n) {
        r[i++] = j++;
      }

      status = 1;
      break;
    }
  }

  return status;
}
function randomSeed(seed) {
  (0,_vendor_seedrandom_index_js__WEBPACK_IMPORTED_MODULE_1__.s)("".concat(seed), {
    global: true
  });
  randomSeedValue = seed;
}
function getSeed() {
  return randomSeedValue;
}
function random() {
  var minValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  var maxValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var delta = maxValue - minValue;
  return minValue + delta * Math.random();
}
var gaussian = notImplemented('gaussian'); // Vect3 operations

function add(a, b, out) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  return out;
}
function subtract(a, b, out) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  return out;
}
function multiplyScalar(vec, scalar) {
  vec[0] *= scalar;
  vec[1] *= scalar;
  vec[2] *= scalar;
  return vec;
}
function multiplyScalar2D(vec, scalar) {
  vec[0] *= scalar;
  vec[1] *= scalar;
  return vec;
}
function multiplyAccumulate(a, b, scalar, out) {
  out[0] = a[0] + b[0] * scalar;
  out[1] = a[1] + b[1] * scalar;
  out[2] = a[2] + b[2] * scalar;
  return out;
}
function multiplyAccumulate2D(a, b, scalar, out) {
  out[0] = a[0] + b[0] * scalar;
  out[1] = a[1] + b[1] * scalar;
  return out;
}
function dot(x, y) {
  return x[0] * y[0] + x[1] * y[1] + x[2] * y[2];
}
function outer(x, y, out_3x3) {
  for (var i = 0; i < 3; i++) {
    for (var j = 0; j < 3; j++) {
      out_3x3[i][j] = x[i] * y[j];
    }
  }
}
function cross(x, y, out) {
  var Zx = x[1] * y[2] - x[2] * y[1];
  var Zy = x[2] * y[0] - x[0] * y[2];
  var Zz = x[0] * y[1] - x[1] * y[0];
  out[0] = Zx;
  out[1] = Zy;
  out[2] = Zz;
  return out;
}
function norm(x) {
  var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;

  switch (n) {
    case 1:
      return Math.abs(x);

    case 2:
      return Math.sqrt(x[0] * x[0] + x[1] * x[1]);

    case 3:
      return Math.sqrt(x[0] * x[0] + x[1] * x[1] + x[2] * x[2]);

    default:
      {
        var sum = 0;

        for (var i = 0; i < n; i++) {
          sum += x[i] * x[i];
        }

        return Math.sqrt(sum);
      }
  }
}
function normalize(x) {
  var den = norm(x);

  if (den !== 0.0) {
    x[0] /= den;
    x[1] /= den;
    x[2] /= den;
  }

  return den;
}
function perpendiculars(x, y, z, theta) {
  var x2 = x[0] * x[0];
  var y2 = x[1] * x[1];
  var z2 = x[2] * x[2];
  var r = Math.sqrt(x2 + y2 + z2);
  var dx;
  var dy;
  var dz; // transpose the vector to avoid divide-by-zero error

  if (x2 > y2 && x2 > z2) {
    dx = 0;
    dy = 1;
    dz = 2;
  } else if (y2 > z2) {
    dx = 1;
    dy = 2;
    dz = 0;
  } else {
    dx = 2;
    dy = 0;
    dz = 1;
  }

  var a = x[dx] / r;
  var b = x[dy] / r;
  var c = x[dz] / r;
  var tmp = Math.sqrt(a * a + c * c);

  if (theta !== 0) {
    var sintheta = Math.sin(theta);
    var costheta = Math.cos(theta);

    if (y) {
      y[dx] = (c * costheta - a * b * sintheta) / tmp;
      y[dy] = sintheta * tmp;
      y[dz] = (-(a * costheta) - b * c * sintheta) / tmp;
    }

    if (z) {
      z[dx] = (-(c * sintheta) - a * b * costheta) / tmp;
      z[dy] = costheta * tmp;
      z[dz] = (a * sintheta - b * c * costheta) / tmp;
    }
  } else {
    if (y) {
      y[dx] = c / tmp;
      y[dy] = 0;
      y[dz] = -a / tmp;
    }

    if (z) {
      z[dx] = -a * b / tmp;
      z[dy] = tmp;
      z[dz] = -b * c / tmp;
    }
  }
}
function projectVector(a, b, projection) {
  var bSquared = dot(b, b);

  if (bSquared === 0) {
    projection[0] = 0;
    projection[1] = 0;
    projection[2] = 0;
    return false;
  }

  var scale = dot(a, b) / bSquared;

  for (var i = 0; i < 3; i++) {
    projection[i] = b[i];
  }

  multiplyScalar(projection, scale);
  return true;
}
function dot2D(x, y) {
  return x[0] * y[0] + x[1] * y[1];
}
function projectVector2D(a, b, projection) {
  var bSquared = dot2D(b, b);

  if (bSquared === 0) {
    projection[0] = 0;
    projection[1] = 0;
    return false;
  }

  var scale = dot2D(a, b) / bSquared;

  for (var i = 0; i < 2; i++) {
    projection[i] = b[i];
  }

  multiplyScalar2D(projection, scale);
  return true;
}
function distance2BetweenPoints(x, y) {
  return (x[0] - y[0]) * (x[0] - y[0]) + (x[1] - y[1]) * (x[1] - y[1]) + (x[2] - y[2]) * (x[2] - y[2]);
}
function angleBetweenVectors(v1, v2) {
  var crossVect = [0, 0, 0];
  cross(v1, v2, crossVect);
  return Math.atan2(norm(crossVect), dot(v1, v2));
}
function signedAngleBetweenVectors(v1, v2, vN) {
  var crossVect = [0, 0, 0];
  cross(v1, v2, crossVect);
  var angle = Math.atan2(norm(crossVect), dot(v1, v2));
  return dot(crossVect, vN) >= 0 ? angle : -angle;
}
function gaussianAmplitude(mean, variance, position) {
  var distanceFromMean = Math.abs(mean - position);
  return 1 / Math.sqrt(2 * Math.PI * variance) * Math.exp(-Math.pow(distanceFromMean, 2) / (2 * variance));
}
function gaussianWeight(mean, variance, position) {
  var distanceFromMean = Math.abs(mean - position);
  return Math.exp(-Math.pow(distanceFromMean, 2) / (2 * variance));
}
function outer2D(x, y, out_2x2) {
  for (var i = 0; i < 2; i++) {
    for (var j = 0; j < 2; j++) {
      out_2x2[i][j] = x[i] * y[j];
    }
  }
}
function norm2D(x2D) {
  return Math.sqrt(x2D[0] * x2D[0] + x2D[1] * x2D[1]);
}
function normalize2D(x) {
  var den = norm2D(x);

  if (den !== 0.0) {
    x[0] /= den;
    x[1] /= den;
  }

  return den;
}
function determinant2x2() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  if (args.length === 2) {
    return args[0][0] * args[1][1] - args[1][0] * args[0][1];
  }

  if (args.length === 4) {
    return args[0] * args[3] - args[1] * args[2];
  }

  return Number.NaN;
}
function LUFactor3x3(mat_3x3, index_3) {
  var maxI;
  var tmp;
  var largest;
  var scale = [0, 0, 0]; // Loop over rows to get implicit scaling information

  for (var i = 0; i < 3; i++) {
    largest = Math.abs(mat_3x3[i][0]);

    if ((tmp = Math.abs(mat_3x3[i][1])) > largest) {
      largest = tmp;
    }

    if ((tmp = Math.abs(mat_3x3[i][2])) > largest) {
      largest = tmp;
    }

    scale[i] = 1 / largest;
  } // Loop over all columns using Crout's method
  // first column


  largest = scale[0] * Math.abs(mat_3x3[0][0]);
  maxI = 0;

  if ((tmp = scale[1] * Math.abs(mat_3x3[1][0])) >= largest) {
    largest = tmp;
    maxI = 1;
  }

  if ((tmp = scale[2] * Math.abs(mat_3x3[2][0])) >= largest) {
    maxI = 2;
  }

  if (maxI !== 0) {
    vtkSwapVectors3(mat_3x3[maxI], mat_3x3[0]);
    scale[maxI] = scale[0];
  }

  index_3[0] = maxI;
  mat_3x3[1][0] /= mat_3x3[0][0];
  mat_3x3[2][0] /= mat_3x3[0][0]; // second column

  mat_3x3[1][1] -= mat_3x3[1][0] * mat_3x3[0][1];
  mat_3x3[2][1] -= mat_3x3[2][0] * mat_3x3[0][1];
  largest = scale[1] * Math.abs(mat_3x3[1][1]);
  maxI = 1;

  if ((tmp = scale[2] * Math.abs(mat_3x3[2][1])) >= largest) {
    maxI = 2;
    vtkSwapVectors3(mat_3x3[2], mat_3x3[1]);
    scale[2] = scale[1];
  }

  index_3[1] = maxI;
  mat_3x3[2][1] /= mat_3x3[1][1]; // third column

  mat_3x3[1][2] -= mat_3x3[1][0] * mat_3x3[0][2];
  mat_3x3[2][2] -= mat_3x3[2][0] * mat_3x3[0][2] + mat_3x3[2][1] * mat_3x3[1][2];
  index_3[2] = 2;
}
function LUSolve3x3(mat_3x3, index_3, x_3) {
  // forward substitution
  var sum = x_3[index_3[0]];
  x_3[index_3[0]] = x_3[0];
  x_3[0] = sum;
  sum = x_3[index_3[1]];
  x_3[index_3[1]] = x_3[1];
  x_3[1] = sum - mat_3x3[1][0] * x_3[0];
  sum = x_3[index_3[2]];
  x_3[index_3[2]] = x_3[2];
  x_3[2] = sum - mat_3x3[2][0] * x_3[0] - mat_3x3[2][1] * x_3[1]; // back substitution

  x_3[2] /= mat_3x3[2][2];
  x_3[1] = (x_3[1] - mat_3x3[1][2] * x_3[2]) / mat_3x3[1][1];
  x_3[0] = (x_3[0] - mat_3x3[0][1] * x_3[1] - mat_3x3[0][2] * x_3[2]) / mat_3x3[0][0];
}
function linearSolve3x3(mat_3x3, x_3, y_3) {
  var a1 = mat_3x3[0][0];
  var b1 = mat_3x3[0][1];
  var c1 = mat_3x3[0][2];
  var a2 = mat_3x3[1][0];
  var b2 = mat_3x3[1][1];
  var c2 = mat_3x3[1][2];
  var a3 = mat_3x3[2][0];
  var b3 = mat_3x3[2][1];
  var c3 = mat_3x3[2][2]; // Compute the adjoint

  var d1 = +determinant2x2(b2, b3, c2, c3);
  var d2 = -determinant2x2(a2, a3, c2, c3);
  var d3 = +determinant2x2(a2, a3, b2, b3);
  var e1 = -determinant2x2(b1, b3, c1, c3);
  var e2 = +determinant2x2(a1, a3, c1, c3);
  var e3 = -determinant2x2(a1, a3, b1, b3);
  var f1 = +determinant2x2(b1, b2, c1, c2);
  var f2 = -determinant2x2(a1, a2, c1, c2);
  var f3 = +determinant2x2(a1, a2, b1, b2); // Compute the determinant

  var det = a1 * d1 + b1 * d2 + c1 * d3; // Multiply by the adjoint

  var v1 = d1 * x_3[0] + e1 * x_3[1] + f1 * x_3[2];
  var v2 = d2 * x_3[0] + e2 * x_3[1] + f2 * x_3[2];
  var v3 = d3 * x_3[0] + e3 * x_3[1] + f3 * x_3[2]; // Divide by the determinant

  y_3[0] = v1 / det;
  y_3[1] = v2 / det;
  y_3[2] = v3 / det;
}
function multiply3x3_vect3(mat_3x3, in_3, out_3) {
  var x = mat_3x3[0][0] * in_3[0] + mat_3x3[0][1] * in_3[1] + mat_3x3[0][2] * in_3[2];
  var y = mat_3x3[1][0] * in_3[0] + mat_3x3[1][1] * in_3[1] + mat_3x3[1][2] * in_3[2];
  var z = mat_3x3[2][0] * in_3[0] + mat_3x3[2][1] * in_3[1] + mat_3x3[2][2] * in_3[2];
  out_3[0] = x;
  out_3[1] = y;
  out_3[2] = z;
}
function multiply3x3_mat3(a_3x3, b_3x3, out_3x3) {
  var tmp = [[0, 0, 0], [0, 0, 0], [0, 0, 0]];

  for (var i = 0; i < 3; i++) {
    tmp[0][i] = a_3x3[0][0] * b_3x3[0][i] + a_3x3[0][1] * b_3x3[1][i] + a_3x3[0][2] * b_3x3[2][i];
    tmp[1][i] = a_3x3[1][0] * b_3x3[0][i] + a_3x3[1][1] * b_3x3[1][i] + a_3x3[1][2] * b_3x3[2][i];
    tmp[2][i] = a_3x3[2][0] * b_3x3[0][i] + a_3x3[2][1] * b_3x3[1][i] + a_3x3[2][2] * b_3x3[2][i];
  }

  for (var j = 0; j < 3; j++) {
    out_3x3[j][0] = tmp[j][0];
    out_3x3[j][1] = tmp[j][1];
    out_3x3[j][2] = tmp[j][2];
  }
}
function multiplyMatrix(a, b, rowA, colA, rowB, colB, out_rowXcol) {
  // we need colA == rowB
  if (colA !== rowB) {
    vtkErrorMacro('Number of columns of A must match number of rows of B.');
  } // output matrix is rowA*colB
  // output row


  for (var i = 0; i < rowA; i++) {
    // output col
    for (var j = 0; j < colB; j++) {
      out_rowXcol[i][j] = 0; // sum for this point

      for (var k = 0; k < colA; k++) {
        out_rowXcol[i][j] += a[i][k] * b[k][j];
      }
    }
  }
}
function transpose3x3(in_3x3, outT_3x3) {
  var tmp;
  tmp = in_3x3[1][0];
  outT_3x3[1][0] = in_3x3[0][1];
  outT_3x3[0][1] = tmp;
  tmp = in_3x3[2][0];
  outT_3x3[2][0] = in_3x3[0][2];
  outT_3x3[0][2] = tmp;
  tmp = in_3x3[2][1];
  outT_3x3[2][1] = in_3x3[1][2];
  outT_3x3[1][2] = tmp;
  outT_3x3[0][0] = in_3x3[0][0];
  outT_3x3[1][1] = in_3x3[1][1];
  outT_3x3[2][2] = in_3x3[2][2];
}
function invert3x3(in_3x3, outI_3x3) {
  var a1 = in_3x3[0][0];
  var b1 = in_3x3[0][1];
  var c1 = in_3x3[0][2];
  var a2 = in_3x3[1][0];
  var b2 = in_3x3[1][1];
  var c2 = in_3x3[1][2];
  var a3 = in_3x3[2][0];
  var b3 = in_3x3[2][1];
  var c3 = in_3x3[2][2]; // Compute the adjoint

  var d1 = +determinant2x2(b2, b3, c2, c3);
  var d2 = -determinant2x2(a2, a3, c2, c3);
  var d3 = +determinant2x2(a2, a3, b2, b3);
  var e1 = -determinant2x2(b1, b3, c1, c3);
  var e2 = +determinant2x2(a1, a3, c1, c3);
  var e3 = -determinant2x2(a1, a3, b1, b3);
  var f1 = +determinant2x2(b1, b2, c1, c2);
  var f2 = -determinant2x2(a1, a2, c1, c2);
  var f3 = +determinant2x2(a1, a2, b1, b2); // Divide by the determinant

  var det = a1 * d1 + b1 * d2 + c1 * d3;
  outI_3x3[0][0] = d1 / det;
  outI_3x3[1][0] = d2 / det;
  outI_3x3[2][0] = d3 / det;
  outI_3x3[0][1] = e1 / det;
  outI_3x3[1][1] = e2 / det;
  outI_3x3[2][1] = e3 / det;
  outI_3x3[0][2] = f1 / det;
  outI_3x3[1][2] = f2 / det;
  outI_3x3[2][2] = f3 / det;
}
function identity3x3(mat_3x3) {
  for (var i = 0; i < 3; i++) {
    mat_3x3[i][0] = mat_3x3[i][1] = mat_3x3[i][2] = 0;
    mat_3x3[i][i] = 1;
  }
}
function determinant3x3(mat_3x3) {
  return mat_3x3[0][0] * mat_3x3[1][1] * mat_3x3[2][2] + mat_3x3[1][0] * mat_3x3[2][1] * mat_3x3[0][2] + mat_3x3[2][0] * mat_3x3[0][1] * mat_3x3[1][2] - mat_3x3[0][0] * mat_3x3[2][1] * mat_3x3[1][2] - mat_3x3[1][0] * mat_3x3[0][1] * mat_3x3[2][2] - mat_3x3[2][0] * mat_3x3[1][1] * mat_3x3[0][2];
}
function quaternionToMatrix3x3(quat_4, mat_3x3) {
  var ww = quat_4[0] * quat_4[0];
  var wx = quat_4[0] * quat_4[1];
  var wy = quat_4[0] * quat_4[2];
  var wz = quat_4[0] * quat_4[3];
  var xx = quat_4[1] * quat_4[1];
  var yy = quat_4[2] * quat_4[2];
  var zz = quat_4[3] * quat_4[3];
  var xy = quat_4[1] * quat_4[2];
  var xz = quat_4[1] * quat_4[3];
  var yz = quat_4[2] * quat_4[3];
  var rr = xx + yy + zz; // normalization factor, just in case quaternion was not normalized

  var f = 1 / (ww + rr);
  var s = (ww - rr) * f;
  f *= 2;
  mat_3x3[0][0] = xx * f + s;
  mat_3x3[1][0] = (xy + wz) * f;
  mat_3x3[2][0] = (xz - wy) * f;
  mat_3x3[0][1] = (xy - wz) * f;
  mat_3x3[1][1] = yy * f + s;
  mat_3x3[2][1] = (yz + wx) * f;
  mat_3x3[0][2] = (xz + wy) * f;
  mat_3x3[1][2] = (yz - wx) * f;
  mat_3x3[2][2] = zz * f + s;
}
/**
 * Returns true if elements of both arrays are equals.
 * @param {Array} a an array of numbers (vector, point, matrix...)
 * @param {Array} b an array of numbers (vector, point, matrix...)
 * @param {Number} eps tolerance
 */

function areEquals(a, b) {
  var eps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1e-6;

  if (a.length !== b.length) {
    return false;
  }

  function isEqual(element, index) {
    return Math.abs(element - b[index]) <= eps;
  }

  return a.every(isEqual);
}
var areMatricesEqual = areEquals;
function roundNumber(num) {
  var digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  if (!"".concat(num).includes('e')) {
    return +"".concat(Math.round("".concat(num, "e+").concat(digits)), "e-").concat(digits);
  }

  var arr = "".concat(num).split('e');
  var sig = '';

  if (+arr[1] + digits > 0) {
    sig = '+';
  }

  return +"".concat(Math.round("".concat(+arr[0], "e").concat(sig).concat(+arr[1] + digits)), "e-").concat(digits);
}
function roundVector(vector) {
  var out = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var digits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  out[0] = roundNumber(vector[0], digits);
  out[1] = roundNumber(vector[1], digits);
  out[2] = roundNumber(vector[2], digits);
  return out;
}
function jacobiN(a, n, w, v) {
  var i;
  var j;
  var k;
  var iq;
  var ip;
  var numPos;
  var tresh;
  var theta;
  var t;
  var tau;
  var sm;
  var s;
  var h;
  var g;
  var c;
  var tmp;
  var b = createArray(n);
  var z = createArray(n);

  var vtkROTATE = function vtkROTATE(aa, ii, jj, kk, ll) {
    g = aa[ii][jj];
    h = aa[kk][ll];
    aa[ii][jj] = g - s * (h + g * tau);
    aa[kk][ll] = h + s * (g - h * tau);
  }; // initialize


  for (ip = 0; ip < n; ip++) {
    for (iq = 0; iq < n; iq++) {
      v[ip][iq] = 0.0;
    }

    v[ip][ip] = 1.0;
  }

  for (ip = 0; ip < n; ip++) {
    b[ip] = w[ip] = a[ip][ip];
    z[ip] = 0.0;
  } // begin rotation sequence


  for (i = 0; i < VTK_MAX_ROTATIONS; i++) {
    sm = 0.0;

    for (ip = 0; ip < n - 1; ip++) {
      for (iq = ip + 1; iq < n; iq++) {
        sm += Math.abs(a[ip][iq]);
      }
    }

    if (sm === 0.0) {
      break;
    } // first 3 sweeps


    if (i < 3) {
      tresh = 0.2 * sm / (n * n);
    } else {
      tresh = 0.0;
    }

    for (ip = 0; ip < n - 1; ip++) {
      for (iq = ip + 1; iq < n; iq++) {
        g = 100.0 * Math.abs(a[ip][iq]); // after 4 sweeps

        if (i > 3 && Math.abs(w[ip]) + g === Math.abs(w[ip]) && Math.abs(w[iq]) + g === Math.abs(w[iq])) {
          a[ip][iq] = 0.0;
        } else if (Math.abs(a[ip][iq]) > tresh) {
          h = w[iq] - w[ip];

          if (Math.abs(h) + g === Math.abs(h)) {
            t = a[ip][iq] / h;
          } else {
            theta = 0.5 * h / a[ip][iq];
            t = 1.0 / (Math.abs(theta) + Math.sqrt(1.0 + theta * theta));

            if (theta < 0.0) {
              t = -t;
            }
          }

          c = 1.0 / Math.sqrt(1 + t * t);
          s = t * c;
          tau = s / (1.0 + c);
          h = t * a[ip][iq];
          z[ip] -= h;
          z[iq] += h;
          w[ip] -= h;
          w[iq] += h;
          a[ip][iq] = 0.0; // ip already shifted left by 1 unit

          for (j = 0; j <= ip - 1; j++) {
            vtkROTATE(a, j, ip, j, iq);
          } // ip and iq already shifted left by 1 unit


          for (j = ip + 1; j <= iq - 1; j++) {
            vtkROTATE(a, ip, j, j, iq);
          } // iq already shifted left by 1 unit


          for (j = iq + 1; j < n; j++) {
            vtkROTATE(a, ip, j, iq, j);
          }

          for (j = 0; j < n; j++) {
            vtkROTATE(v, j, ip, j, iq);
          }
        }
      }
    }

    for (ip = 0; ip < n; ip++) {
      b[ip] += z[ip];
      w[ip] = b[ip];
      z[ip] = 0.0;
    }
  } // this is NEVER called


  if (i >= VTK_MAX_ROTATIONS) {
    vtkWarningMacro('vtkMath::Jacobi: Error extracting eigenfunctions');
    return 0;
  } // sort eigenfunctions: these changes do not affect accuracy


  for (j = 0; j < n - 1; j++) {
    // boundary incorrect
    k = j;
    tmp = w[k];

    for (i = j + 1; i < n; i++) {
      // boundary incorrect, shifted already
      if (w[i] >= tmp) {
        // why exchange if same?
        k = i;
        tmp = w[k];
      }
    }

    if (k !== j) {
      w[k] = w[j];
      w[j] = tmp;

      for (i = 0; i < n; i++) {
        tmp = v[i][j];
        v[i][j] = v[i][k];
        v[i][k] = tmp;
      }
    }
  } // ensure eigenvector consistency (i.e., Jacobi can compute vectors that
  // are negative of one another (.707,.707,0) and (-.707,-.707,0). This can
  // reek havoc in hyperstreamline/other stuff. We will select the most
  // positive eigenvector.


  var ceil_half_n = (n >> 1) + (n & 1);

  for (j = 0; j < n; j++) {
    for (numPos = 0, i = 0; i < n; i++) {
      if (v[i][j] >= 0.0) {
        numPos++;
      }
    } //    if ( numPos < ceil(double(n)/double(2.0)) )


    if (numPos < ceil_half_n) {
      for (i = 0; i < n; i++) {
        v[i][j] *= -1.0;
      }
    }
  }

  return 1;
}
function matrix3x3ToQuaternion(mat_3x3, quat_4) {
  var tmp = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]; // on-diagonal elements

  tmp[0][0] = mat_3x3[0][0] + mat_3x3[1][1] + mat_3x3[2][2];
  tmp[1][1] = mat_3x3[0][0] - mat_3x3[1][1] - mat_3x3[2][2];
  tmp[2][2] = -mat_3x3[0][0] + mat_3x3[1][1] - mat_3x3[2][2];
  tmp[3][3] = -mat_3x3[0][0] - mat_3x3[1][1] + mat_3x3[2][2]; // off-diagonal elements

  tmp[0][1] = tmp[1][0] = mat_3x3[2][1] - mat_3x3[1][2];
  tmp[0][2] = tmp[2][0] = mat_3x3[0][2] - mat_3x3[2][0];
  tmp[0][3] = tmp[3][0] = mat_3x3[1][0] - mat_3x3[0][1];
  tmp[1][2] = tmp[2][1] = mat_3x3[1][0] + mat_3x3[0][1];
  tmp[1][3] = tmp[3][1] = mat_3x3[0][2] + mat_3x3[2][0];
  tmp[2][3] = tmp[3][2] = mat_3x3[2][1] + mat_3x3[1][2];
  var eigenvectors = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];
  var eigenvalues = [0, 0, 0, 0]; // convert into format that JacobiN can use,
  // then use Jacobi to find eigenvalues and eigenvectors

  var NTemp = [0, 0, 0, 0];
  var eigenvectorsTemp = [0, 0, 0, 0];

  for (var i = 0; i < 4; i++) {
    NTemp[i] = tmp[i];
    eigenvectorsTemp[i] = eigenvectors[i];
  }

  jacobiN(NTemp, 4, eigenvalues, eigenvectorsTemp); // the first eigenvector is the one we want

  quat_4[0] = eigenvectors[0][0];
  quat_4[1] = eigenvectors[1][0];
  quat_4[2] = eigenvectors[2][0];
  quat_4[3] = eigenvectors[3][0];
}
function multiplyQuaternion(quat_1, quat_2, quat_out) {
  var ww = quat_1[0] * quat_2[0];
  var wx = quat_1[0] * quat_2[1];
  var wy = quat_1[0] * quat_2[2];
  var wz = quat_1[0] * quat_2[3];
  var xw = quat_1[1] * quat_2[0];
  var xx = quat_1[1] * quat_2[1];
  var xy = quat_1[1] * quat_2[2];
  var xz = quat_1[1] * quat_2[3];
  var yw = quat_1[2] * quat_2[0];
  var yx = quat_1[2] * quat_2[1];
  var yy = quat_1[2] * quat_2[2];
  var yz = quat_1[2] * quat_2[3];
  var zw = quat_1[3] * quat_2[0];
  var zx = quat_1[3] * quat_2[1];
  var zy = quat_1[3] * quat_2[2];
  var zz = quat_1[3] * quat_2[3];
  quat_out[0] = ww - xx - yy - zz;
  quat_out[1] = wx + xw + yz - zy;
  quat_out[2] = wy - xz + yw + zx;
  quat_out[3] = wz + xy - yx + zw;
}
function orthogonalize3x3(a_3x3, out_3x3) {
  // copy the matrix
  for (var i = 0; i < 3; i++) {
    out_3x3[0][i] = a_3x3[0][i];
    out_3x3[1][i] = a_3x3[1][i];
    out_3x3[2][i] = a_3x3[2][i];
  } // Pivot the matrix to improve accuracy


  var scale = createArray(3);
  var index = createArray(3);
  var largest; // Loop over rows to get implicit scaling information

  for (var _i = 0; _i < 3; _i++) {
    var _x = Math.abs(out_3x3[_i][0]);

    var _x2 = Math.abs(out_3x3[_i][1]);

    var _x3 = Math.abs(out_3x3[_i][2]);

    largest = _x2 > _x ? _x2 : _x;
    largest = _x3 > largest ? _x3 : largest;
    scale[_i] = 1;

    if (largest !== 0) {
      scale[_i] /= largest;
    }
  } // first column


  var x1 = Math.abs(out_3x3[0][0]) * scale[0];
  var x2 = Math.abs(out_3x3[1][0]) * scale[1];
  var x3 = Math.abs(out_3x3[2][0]) * scale[2];
  index[0] = 0;
  largest = x1;

  if (x2 >= largest) {
    largest = x2;
    index[0] = 1;
  }

  if (x3 >= largest) {
    index[0] = 2;
  }

  if (index[0] !== 0) {
    vtkSwapVectors3(out_3x3[index[0]], out_3x3[0]);
    scale[index[0]] = scale[0];
  } // second column


  var y2 = Math.abs(out_3x3[1][1]) * scale[1];
  var y3 = Math.abs(out_3x3[2][1]) * scale[2];
  index[1] = 1;
  largest = y2;

  if (y3 >= largest) {
    index[1] = 2;
    vtkSwapVectors3(out_3x3[2], out_3x3[1]);
  } // third column


  index[2] = 2; // A quaternion can only describe a pure rotation, not
  // a rotation with a flip, therefore the flip must be
  // removed before the matrix is converted to a quaternion.

  var flip = 0;

  if (determinant3x3(out_3x3) < 0) {
    flip = 1;

    for (var _i2 = 0; _i2 < 3; _i2++) {
      out_3x3[0][_i2] = -out_3x3[0][_i2];
      out_3x3[1][_i2] = -out_3x3[1][_i2];
      out_3x3[2][_i2] = -out_3x3[2][_i2];
    }
  } // Do orthogonalization using a quaternion intermediate
  // (this, essentially, does the orthogonalization via
  // diagonalization of an appropriately constructed symmetric
  // 4x4 matrix rather than by doing SVD of the 3x3 matrix)


  var quat = createArray(4);
  matrix3x3ToQuaternion(out_3x3, quat);
  quaternionToMatrix3x3(quat, out_3x3); // Put the flip back into the orthogonalized matrix.

  if (flip) {
    for (var _i3 = 0; _i3 < 3; _i3++) {
      out_3x3[0][_i3] = -out_3x3[0][_i3];
      out_3x3[1][_i3] = -out_3x3[1][_i3];
      out_3x3[2][_i3] = -out_3x3[2][_i3];
    }
  } // Undo the pivoting


  if (index[1] !== 1) {
    vtkSwapVectors3(out_3x3[index[1]], out_3x3[1]);
  }

  if (index[0] !== 0) {
    vtkSwapVectors3(out_3x3[index[0]], out_3x3[0]);
  }
}
function diagonalize3x3(a_3x3, w_3, v_3x3) {
  var i;
  var j;
  var k;
  var maxI;
  var tmp;
  var maxVal; // do the matrix[3][3] to **matrix conversion for Jacobi

  var C = [createArray(3), createArray(3), createArray(3)];
  var ATemp = createArray(3);
  var VTemp = createArray(3);

  for (i = 0; i < 3; i++) {
    C[i][0] = a_3x3[i][0];
    C[i][1] = a_3x3[i][1];
    C[i][2] = a_3x3[i][2];
    ATemp[i] = C[i];
    VTemp[i] = v_3x3[i];
  } // diagonalize using Jacobi


  jacobiN(ATemp, 3, w_3, VTemp); // if all the eigenvalues are the same, return identity matrix

  if (w_3[0] === w_3[1] && w_3[0] === w_3[2]) {
    identity3x3(v_3x3);
    return;
  } // transpose temporarily, it makes it easier to sort the eigenvectors


  transpose3x3(v_3x3, v_3x3); // if two eigenvalues are the same, re-orthogonalize to optimally line
  // up the eigenvectors with the x, y, and z axes

  for (i = 0; i < 3; i++) {
    // two eigenvalues are the same
    if (w_3[(i + 1) % 3] === w_3[(i + 2) % 3]) {
      // find maximum element of the independent eigenvector
      maxVal = Math.abs(v_3x3[i][0]);
      maxI = 0;

      for (j = 1; j < 3; j++) {
        if (maxVal < (tmp = Math.abs(v_3x3[i][j]))) {
          maxVal = tmp;
          maxI = j;
        }
      } // swap the eigenvector into its proper position


      if (maxI !== i) {
        tmp = w_3[maxI];
        w_3[maxI] = w_3[i];
        w_3[i] = tmp;
        vtkSwapVectors3(v_3x3[i], v_3x3[maxI]);
      } // maximum element of eigenvector should be positive


      if (v_3x3[maxI][maxI] < 0) {
        v_3x3[maxI][0] = -v_3x3[maxI][0];
        v_3x3[maxI][1] = -v_3x3[maxI][1];
        v_3x3[maxI][2] = -v_3x3[maxI][2];
      } // re-orthogonalize the other two eigenvectors


      j = (maxI + 1) % 3;
      k = (maxI + 2) % 3;
      v_3x3[j][0] = 0.0;
      v_3x3[j][1] = 0.0;
      v_3x3[j][2] = 0.0;
      v_3x3[j][j] = 1.0;
      cross(v_3x3[maxI], v_3x3[j], v_3x3[k]);
      normalize(v_3x3[k]);
      cross(v_3x3[k], v_3x3[maxI], v_3x3[j]); // transpose vectors back to columns

      transpose3x3(v_3x3, v_3x3);
      return;
    }
  } // the three eigenvalues are different, just sort the eigenvectors
  // to align them with the x, y, and z axes
  // find the vector with the largest x element, make that vector
  // the first vector


  maxVal = Math.abs(v_3x3[0][0]);
  maxI = 0;

  for (i = 1; i < 3; i++) {
    if (maxVal < (tmp = Math.abs(v_3x3[i][0]))) {
      maxVal = tmp;
      maxI = i;
    }
  } // swap eigenvalue and eigenvector


  if (maxI !== 0) {
    tmp = w_3[maxI];
    w_3[maxI] = w_3[0];
    w_3[0] = tmp;
    vtkSwapVectors3(v_3x3[maxI], v_3x3[0]);
  } // do the same for the y element


  if (Math.abs(v_3x3[1][1]) < Math.abs(v_3x3[2][1])) {
    tmp = w_3[2];
    w_3[2] = w_3[1];
    w_3[1] = tmp;
    vtkSwapVectors3(v_3x3[2], v_3x3[1]);
  } // ensure that the sign of the eigenvectors is correct


  for (i = 0; i < 2; i++) {
    if (v_3x3[i][i] < 0) {
      v_3x3[i][0] = -v_3x3[i][0];
      v_3x3[i][1] = -v_3x3[i][1];
      v_3x3[i][2] = -v_3x3[i][2];
    }
  } // set sign of final eigenvector to ensure that determinant is positive


  if (determinant3x3(v_3x3) < 0) {
    v_3x3[2][0] = -v_3x3[2][0];
    v_3x3[2][1] = -v_3x3[2][1];
    v_3x3[2][2] = -v_3x3[2][2];
  } // transpose the eigenvectors back again


  transpose3x3(v_3x3, v_3x3);
}
function singularValueDecomposition3x3(a_3x3, u_3x3, w_3, vT_3x3) {
  var i;
  var B = [createArray(3), createArray(3), createArray(3)]; // copy so that A can be used for U or VT without risk

  for (i = 0; i < 3; i++) {
    B[0][i] = a_3x3[0][i];
    B[1][i] = a_3x3[1][i];
    B[2][i] = a_3x3[2][i];
  } // temporarily flip if determinant is negative


  var d = determinant3x3(B);

  if (d < 0) {
    for (i = 0; i < 3; i++) {
      B[0][i] = -B[0][i];
      B[1][i] = -B[1][i];
      B[2][i] = -B[2][i];
    }
  } // orthogonalize, diagonalize, etc.


  orthogonalize3x3(B, u_3x3);
  transpose3x3(B, B);
  multiply3x3_mat3(B, u_3x3, vT_3x3);
  diagonalize3x3(vT_3x3, w_3, vT_3x3);
  multiply3x3_mat3(u_3x3, vT_3x3, u_3x3);
  transpose3x3(vT_3x3, vT_3x3); // re-create the flip

  if (d < 0) {
    w_3[0] = -w_3[0];
    w_3[1] = -w_3[1];
    w_3[2] = -w_3[2];
  }
}
function luFactorLinearSystem(A, index, size) {
  var i;
  var j;
  var k;
  var largest;
  var maxI = 0;
  var sum;
  var temp1;
  var temp2;
  var scale = createArray(size); //
  // Loop over rows to get implicit scaling information
  //

  for (i = 0; i < size; i++) {
    for (largest = 0.0, j = 0; j < size; j++) {
      if ((temp2 = Math.abs(A[i][j])) > largest) {
        largest = temp2;
      }
    }

    if (largest === 0.0) {
      vtkWarningMacro('Unable to factor linear system');
      return 0;
    }

    scale[i] = 1.0 / largest;
  } //
  // Loop over all columns using Crout's method
  //


  for (j = 0; j < size; j++) {
    for (i = 0; i < j; i++) {
      sum = A[i][j];

      for (k = 0; k < i; k++) {
        sum -= A[i][k] * A[k][j];
      }

      A[i][j] = sum;
    } //
    // Begin search for largest pivot element
    //


    for (largest = 0.0, i = j; i < size; i++) {
      sum = A[i][j];

      for (k = 0; k < j; k++) {
        sum -= A[i][k] * A[k][j];
      }

      A[i][j] = sum;

      if ((temp1 = scale[i] * Math.abs(sum)) >= largest) {
        largest = temp1;
        maxI = i;
      }
    } //
    // Check for row interchange
    //


    if (j !== maxI) {
      for (k = 0; k < size; k++) {
        temp1 = A[maxI][k];
        A[maxI][k] = A[j][k];
        A[j][k] = temp1;
      }

      scale[maxI] = scale[j];
    } //
    // Divide by pivot element and perform elimination
    //


    index[j] = maxI;

    if (Math.abs(A[j][j]) <= VTK_SMALL_NUMBER) {
      vtkWarningMacro('Unable to factor linear system');
      return 0;
    }

    if (j !== size - 1) {
      temp1 = 1.0 / A[j][j];

      for (i = j + 1; i < size; i++) {
        A[i][j] *= temp1;
      }
    }
  }

  return 1;
}
function luSolveLinearSystem(A, index, x, size) {
  var i;
  var j;
  var ii;
  var idx;
  var sum; //
  // Proceed with forward and backsubstitution for L and U
  // matrices.  First, forward substitution.
  //

  for (ii = -1, i = 0; i < size; i++) {
    idx = index[i];
    sum = x[idx];
    x[idx] = x[i];

    if (ii >= 0) {
      for (j = ii; j <= i - 1; j++) {
        sum -= A[i][j] * x[j];
      }
    } else if (sum !== 0.0) {
      ii = i;
    }

    x[i] = sum;
  } //
  // Now, back substitution
  //


  for (i = size - 1; i >= 0; i--) {
    sum = x[i];

    for (j = i + 1; j < size; j++) {
      sum -= A[i][j] * x[j];
    }

    x[i] = sum / A[i][i];
  }
}
function solveLinearSystem(A, x, size) {
  // if we solving something simple, just solve it
  if (size === 2) {
    var y = createArray(2);
    var det = determinant2x2(A[0][0], A[0][1], A[1][0], A[1][1]);

    if (det === 0.0) {
      // Unable to solve linear system
      return 0;
    }

    y[0] = (A[1][1] * x[0] - A[0][1] * x[1]) / det;
    y[1] = (-(A[1][0] * x[0]) + A[0][0] * x[1]) / det;
    x[0] = y[0];
    x[1] = y[1];
    return 1;
  }

  if (size === 1) {
    if (A[0][0] === 0.0) {
      // Unable to solve linear system
      return 0;
    }

    x[0] /= A[0][0];
    return 1;
  } //
  // System of equations is not trivial, use Crout's method
  //
  // Check on allocation of working vectors


  var index = createArray(size); // Factor and solve matrix

  if (luFactorLinearSystem(A, index, size) === 0) {
    return 0;
  }

  luSolveLinearSystem(A, index, x, size);
  return 1;
}
function invertMatrix(A, AI, size) {
  var index = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  var column = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
  var tmp1Size = index || createArray(size);
  var tmp2Size = column || createArray(size); // Factor matrix; then begin solving for inverse one column at a time.
  // Note: tmp1Size returned value is used later, tmp2Size is just working
  // memory whose values are not used in LUSolveLinearSystem

  if (luFactorLinearSystem(A, tmp1Size, size) === 0) {
    return 0;
  }

  for (var j = 0; j < size; j++) {
    for (var i = 0; i < size; i++) {
      tmp2Size[i] = 0.0;
    }

    tmp2Size[j] = 1.0;
    luSolveLinearSystem(A, tmp1Size, tmp2Size, size);

    for (var _i4 = 0; _i4 < size; _i4++) {
      AI[_i4][j] = tmp2Size[_i4];
    }
  }

  return 1;
}
function estimateMatrixCondition(A, size) {
  var minValue = +Number.MAX_VALUE;
  var maxValue = -Number.MAX_VALUE; // find the maximum value

  for (var i = 0; i < size; i++) {
    for (var j = i; j < size; j++) {
      if (Math.abs(A[i][j]) > max) {
        maxValue = Math.abs(A[i][j]);
      }
    }
  } // find the minimum diagonal value


  for (var _i5 = 0; _i5 < size; _i5++) {
    if (Math.abs(A[_i5][_i5]) < min) {
      minValue = Math.abs(A[_i5][_i5]);
    }
  }

  if (minValue === 0.0) {
    return Number.MAX_VALUE;
  }

  return maxValue / minValue;
}
function jacobi(a_3x3, w, v) {
  return jacobiN(a_3x3, 3, w, v);
}
function solveHomogeneousLeastSquares(numberOfSamples, xt, xOrder, mt) {
  // check dimensional consistency
  if (numberOfSamples < xOrder) {
    vtkWarningMacro('Insufficient number of samples. Underdetermined.');
    return 0;
  }

  var i;
  var j;
  var k; // set up intermediate variables
  // Allocate matrix to hold X times transpose of X

  var XXt = createArray(xOrder); // size x by x
  // Allocate the array of eigenvalues and eigenvectors

  var eigenvals = createArray(xOrder);
  var eigenvecs = createArray(xOrder); // Clear the upper triangular region (and btw, allocate the eigenvecs as well)

  for (i = 0; i < xOrder; i++) {
    eigenvecs[i] = createArray(xOrder);
    XXt[i] = createArray(xOrder);

    for (j = 0; j < xOrder; j++) {
      XXt[i][j] = 0.0;
    }
  } // Calculate XXt upper half only, due to symmetry


  for (k = 0; k < numberOfSamples; k++) {
    for (i = 0; i < xOrder; i++) {
      for (j = i; j < xOrder; j++) {
        XXt[i][j] += xt[k][i] * xt[k][j];
      }
    }
  } // now fill in the lower half of the XXt matrix


  for (i = 0; i < xOrder; i++) {
    for (j = 0; j < i; j++) {
      XXt[i][j] = XXt[j][i];
    }
  } // Compute the eigenvectors and eigenvalues


  jacobiN(XXt, xOrder, eigenvals, eigenvecs); // Smallest eigenval is at the end of the list (xOrder-1), and solution is
  // corresponding eigenvec.

  for (i = 0; i < xOrder; i++) {
    mt[i][0] = eigenvecs[i][xOrder - 1];
  }

  return 1;
}
function solveLeastSquares(numberOfSamples, xt, xOrder, yt, yOrder, mt) {
  var checkHomogeneous = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;

  // check dimensional consistency
  if (numberOfSamples < xOrder || numberOfSamples < yOrder) {
    vtkWarningMacro('Insufficient number of samples. Underdetermined.');
    return 0;
  }

  var homogenFlags = createArray(yOrder);
  var allHomogeneous = 1;
  var hmt;
  var homogRC = 0;
  var i;
  var j;
  var k;
  var someHomogeneous = 0; // Ok, first init some flags check and see if all the systems are homogeneous

  if (checkHomogeneous) {
    // If Y' is zero, it's a homogeneous system and can't be solved via
    // the pseudoinverse method. Detect this case, warn the user, and
    // invoke SolveHomogeneousLeastSquares instead. Note that it doesn't
    // really make much sense for yOrder to be greater than one in this case,
    // since that's just yOrder occurrences of a 0 vector on the RHS, but
    // we allow it anyway. N
    // Initialize homogeneous flags on a per-right-hand-side basis
    for (j = 0; j < yOrder; j++) {
      homogenFlags[j] = 1;
    }

    for (i = 0; i < numberOfSamples; i++) {
      for (j = 0; j < yOrder; j++) {
        if (Math.abs(yt[i][j]) > VTK_SMALL_NUMBER) {
          allHomogeneous = 0;
          homogenFlags[j] = 0;
        }
      }
    } // If we've got one system, and it's homogeneous, do it and bail out quickly.


    if (allHomogeneous && yOrder === 1) {
      vtkWarningMacro('Detected homogeneous system (Y=0), calling SolveHomogeneousLeastSquares()');
      return solveHomogeneousLeastSquares(numberOfSamples, xt, xOrder, mt);
    } // Ok, we've got more than one system of equations.
    // Figure out if we need to calculate the homogeneous equation solution for
    // any of them.


    if (allHomogeneous) {
      someHomogeneous = 1;
    } else {
      for (j = 0; j < yOrder; j++) {
        if (homogenFlags[j]) {
          someHomogeneous = 1;
        }
      }
    }
  } // If necessary, solve the homogeneous problem


  if (someHomogeneous) {
    // hmt is the homogeneous equation version of mt, the general solution.
    hmt = createArray(xOrder);

    for (j = 0; j < xOrder; j++) {
      // Only allocate 1 here, not yOrder, because here we're going to solve
      // just the one homogeneous equation subset of the entire problem
      hmt[j] = [0];
    } // Ok, solve the homogeneous problem


    homogRC = solveHomogeneousLeastSquares(numberOfSamples, xt, xOrder, hmt);
  } // set up intermediate variables


  var XXt = createArray(xOrder); // size x by x

  var XXtI = createArray(xOrder); // size x by x

  var XYt = createArray(xOrder); // size x by y

  for (i = 0; i < xOrder; i++) {
    XXt[i] = createArray(xOrder);
    XXtI[i] = createArray(xOrder);

    for (j = 0; j < xOrder; j++) {
      XXt[i][j] = 0.0;
      XXtI[i][j] = 0.0;
    }

    XYt[i] = createArray(yOrder);

    for (j = 0; j < yOrder; j++) {
      XYt[i][j] = 0.0;
    }
  } // first find the pseudoinverse matrix


  for (k = 0; k < numberOfSamples; k++) {
    for (i = 0; i < xOrder; i++) {
      // first calculate the XXt matrix, only do the upper half (symmetrical)
      for (j = i; j < xOrder; j++) {
        XXt[i][j] += xt[k][i] * xt[k][j];
      } // now calculate the XYt matrix


      for (j = 0; j < yOrder; j++) {
        XYt[i][j] += xt[k][i] * yt[k][j];
      }
    }
  } // now fill in the lower half of the XXt matrix


  for (i = 0; i < xOrder; i++) {
    for (j = 0; j < i; j++) {
      XXt[i][j] = XXt[j][i];
    }
  }

  var successFlag = invertMatrix(XXt, XXtI, xOrder); // next get the inverse of XXt

  if (successFlag) {
    for (i = 0; i < xOrder; i++) {
      for (j = 0; j < yOrder; j++) {
        mt[i][j] = 0.0;

        for (k = 0; k < xOrder; k++) {
          mt[i][j] += XXtI[i][k] * XYt[k][j];
        }
      }
    }
  } // Fix up any of the solutions that correspond to the homogeneous equation
  // problem.


  if (someHomogeneous) {
    for (j = 0; j < yOrder; j++) {
      if (homogenFlags[j]) {
        // Fix this one
        for (i = 0; i < xOrder; i++) {
          mt[i][j] = hmt[i][0];
        }
      }
    }
  }

  if (someHomogeneous) {
    return homogRC && successFlag;
  }

  return successFlag;
}
function hex2float(hexStr) {
  var outFloatArray = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0.5, 1];

  switch (hexStr.length) {
    case 3:
      // abc => #aabbcc
      outFloatArray[0] = parseInt(hexStr[0], 16) * 17 / 255;
      outFloatArray[1] = parseInt(hexStr[1], 16) * 17 / 255;
      outFloatArray[2] = parseInt(hexStr[2], 16) * 17 / 255;
      return outFloatArray;

    case 4:
      // #abc => #aabbcc
      outFloatArray[0] = parseInt(hexStr[1], 16) * 17 / 255;
      outFloatArray[1] = parseInt(hexStr[2], 16) * 17 / 255;
      outFloatArray[2] = parseInt(hexStr[3], 16) * 17 / 255;
      return outFloatArray;

    case 6:
      // ab01df => #ab01df
      outFloatArray[0] = parseInt(hexStr.substr(0, 2), 16) / 255;
      outFloatArray[1] = parseInt(hexStr.substr(2, 2), 16) / 255;
      outFloatArray[2] = parseInt(hexStr.substr(4, 2), 16) / 255;
      return outFloatArray;

    case 7:
      // #ab01df
      outFloatArray[0] = parseInt(hexStr.substr(1, 2), 16) / 255;
      outFloatArray[1] = parseInt(hexStr.substr(3, 2), 16) / 255;
      outFloatArray[2] = parseInt(hexStr.substr(5, 2), 16) / 255;
      return outFloatArray;

    case 9:
      // #ab01df00
      outFloatArray[0] = parseInt(hexStr.substr(1, 2), 16) / 255;
      outFloatArray[1] = parseInt(hexStr.substr(3, 2), 16) / 255;
      outFloatArray[2] = parseInt(hexStr.substr(5, 2), 16) / 255;
      outFloatArray[3] = parseInt(hexStr.substr(7, 2), 16) / 255;
      return outFloatArray;

    default:
      return outFloatArray;
  }
}
function rgb2hsv(rgb, hsv) {
  var h;
  var s;

  var _rgb = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__["default"])(rgb, 3),
      r = _rgb[0],
      g = _rgb[1],
      b = _rgb[2];

  var onethird = 1.0 / 3.0;
  var onesixth = 1.0 / 6.0;
  var twothird = 2.0 / 3.0;
  var cmax = r;
  var cmin = r;

  if (g > cmax) {
    cmax = g;
  } else if (g < cmin) {
    cmin = g;
  }

  if (b > cmax) {
    cmax = b;
  } else if (b < cmin) {
    cmin = b;
  }

  var v = cmax;

  if (v > 0.0) {
    s = (cmax - cmin) / cmax;
  } else {
    s = 0.0;
  }

  if (s > 0) {
    if (r === cmax) {
      h = onesixth * (g - b) / (cmax - cmin);
    } else if (g === cmax) {
      h = onethird + onesixth * (b - r) / (cmax - cmin);
    } else {
      h = twothird + onesixth * (r - g) / (cmax - cmin);
    }

    if (h < 0.0) {
      h += 1.0;
    }
  } else {
    h = 0.0;
  } // Set the values back to the array


  hsv[0] = h;
  hsv[1] = s;
  hsv[2] = v;
}
function hsv2rgb(hsv, rgb) {
  var _hsv = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__["default"])(hsv, 3),
      h = _hsv[0],
      s = _hsv[1],
      v = _hsv[2];

  var onethird = 1.0 / 3.0;
  var onesixth = 1.0 / 6.0;
  var twothird = 2.0 / 3.0;
  var fivesixth = 5.0 / 6.0;
  var r;
  var g;
  var b; // compute RGB from HSV

  if (h > onesixth && h <= onethird) {
    // green/red
    g = 1.0;
    r = (onethird - h) / onesixth;
    b = 0.0;
  } else if (h > onethird && h <= 0.5) {
    // green/blue
    g = 1.0;
    b = (h - onethird) / onesixth;
    r = 0.0;
  } else if (h > 0.5 && h <= twothird) {
    // blue/green
    b = 1.0;
    g = (twothird - h) / onesixth;
    r = 0.0;
  } else if (h > twothird && h <= fivesixth) {
    // blue/red
    b = 1.0;
    r = (h - twothird) / onesixth;
    g = 0.0;
  } else if (h > fivesixth && h <= 1.0) {
    // red/blue
    r = 1.0;
    b = (1.0 - h) / onesixth;
    g = 0.0;
  } else {
    // red/green
    r = 1.0;
    g = h / onesixth;
    b = 0.0;
  } // add Saturation to the equation.


  r = s * r + (1.0 - s);
  g = s * g + (1.0 - s);
  b = s * b + (1.0 - s);
  r *= v;
  g *= v;
  b *= v; // Assign back to the array

  rgb[0] = r;
  rgb[1] = g;
  rgb[2] = b;
}
function lab2xyz(lab, xyz) {
  // LAB to XYZ
  var _lab = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__["default"])(lab, 3),
      L = _lab[0],
      a = _lab[1],
      b = _lab[2];

  var var_Y = (L + 16) / 116;
  var var_X = a / 500 + var_Y;
  var var_Z = var_Y - b / 200;

  if (Math.pow(var_Y, 3) > 0.008856) {
    var_Y = Math.pow(var_Y, 3);
  } else {
    var_Y = (var_Y - 16.0 / 116.0) / 7.787;
  }

  if (Math.pow(var_X, 3) > 0.008856) {
    var_X = Math.pow(var_X, 3);
  } else {
    var_X = (var_X - 16.0 / 116.0) / 7.787;
  }

  if (Math.pow(var_Z, 3) > 0.008856) {
    var_Z = Math.pow(var_Z, 3);
  } else {
    var_Z = (var_Z - 16.0 / 116.0) / 7.787;
  }

  var ref_X = 0.9505;
  var ref_Y = 1.0;
  var ref_Z = 1.089;
  xyz[0] = ref_X * var_X; // ref_X = 0.9505  Observer= 2 deg Illuminant= D65

  xyz[1] = ref_Y * var_Y; // ref_Y = 1.000

  xyz[2] = ref_Z * var_Z; // ref_Z = 1.089
}
function xyz2lab(xyz, lab) {
  var _xyz = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__["default"])(xyz, 3),
      x = _xyz[0],
      y = _xyz[1],
      z = _xyz[2];

  var ref_X = 0.9505;
  var ref_Y = 1.0;
  var ref_Z = 1.089;
  var var_X = x / ref_X; // ref_X = 0.9505  Observer= 2 deg, Illuminant= D65

  var var_Y = y / ref_Y; // ref_Y = 1.000

  var var_Z = z / ref_Z; // ref_Z = 1.089

  if (var_X > 0.008856) var_X = Math.pow(var_X, 1.0 / 3.0);else var_X = 7.787 * var_X + 16.0 / 116.0;
  if (var_Y > 0.008856) var_Y = Math.pow(var_Y, 1.0 / 3.0);else var_Y = 7.787 * var_Y + 16.0 / 116.0;
  if (var_Z > 0.008856) var_Z = Math.pow(var_Z, 1.0 / 3.0);else var_Z = 7.787 * var_Z + 16.0 / 116.0;
  lab[0] = 116 * var_Y - 16;
  lab[1] = 500 * (var_X - var_Y);
  lab[2] = 200 * (var_Y - var_Z);
}
function xyz2rgb(xyz, rgb) {
  var _xyz2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__["default"])(xyz, 3),
      x = _xyz2[0],
      y = _xyz2[1],
      z = _xyz2[2];

  var r = x * 3.2406 + y * -1.5372 + z * -0.4986;
  var g = x * -0.9689 + y * 1.8758 + z * 0.0415;
  var b = x * 0.0557 + y * -0.204 + z * 1.057; // The following performs a "gamma correction" specified by the sRGB color
  // space.  sRGB is defined by a canonical definition of a display monitor and
  // has been standardized by the International Electrotechnical Commission (IEC
  // 61966-2-1).  The nonlinearity of the correction is designed to make the
  // colors more perceptually uniform.  This color space has been adopted by
  // several applications including Adobe Photoshop and Microsoft Windows color
  // management.  OpenGL is agnostic on its RGB color space, but it is reasonable
  // to assume it is close to this one.

  if (r > 0.0031308) r = 1.055 * Math.pow(r, 1 / 2.4) - 0.055;else r *= 12.92;
  if (g > 0.0031308) g = 1.055 * Math.pow(g, 1 / 2.4) - 0.055;else g *= 12.92;
  if (b > 0.0031308) b = 1.055 * Math.pow(b, 1 / 2.4) - 0.055;else b *= 12.92; // Clip colors. ideally we would do something that is perceptually closest
  // (since we can see colors outside of the display gamut), but this seems to
  // work well enough.

  var maxVal = r;
  if (maxVal < g) maxVal = g;
  if (maxVal < b) maxVal = b;

  if (maxVal > 1.0) {
    r /= maxVal;
    g /= maxVal;
    b /= maxVal;
  }

  if (r < 0) r = 0;
  if (g < 0) g = 0;
  if (b < 0) b = 0; // Push values back to array

  rgb[0] = r;
  rgb[1] = g;
  rgb[2] = b;
}
function rgb2xyz(rgb, xyz) {
  var _rgb2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__["default"])(rgb, 3),
      r = _rgb2[0],
      g = _rgb2[1],
      b = _rgb2[2]; // The following performs a "gamma correction" specified by the sRGB color
  // space.  sRGB is defined by a canonical definition of a display monitor and
  // has been standardized by the International Electrotechnical Commission (IEC
  // 61966-2-1).  The nonlinearity of the correction is designed to make the
  // colors more perceptually uniform.  This color space has been adopted by
  // several applications including Adobe Photoshop and Microsoft Windows color
  // management.  OpenGL is agnostic on its RGB color space, but it is reasonable
  // to assume it is close to this one.


  if (r > 0.04045) r = Math.pow((r + 0.055) / 1.055, 2.4);else r /= 12.92;
  if (g > 0.04045) g = Math.pow((g + 0.055) / 1.055, 2.4);else g /= 12.92;
  if (b > 0.04045) b = Math.pow((b + 0.055) / 1.055, 2.4);else b /= 12.92; // Observer. = 2 deg, Illuminant = D65

  xyz[0] = r * 0.4124 + g * 0.3576 + b * 0.1805;
  xyz[1] = r * 0.2126 + g * 0.7152 + b * 0.0722;
  xyz[2] = r * 0.0193 + g * 0.1192 + b * 0.9505;
}
function rgb2lab(rgb, lab) {
  var xyz = [0, 0, 0];
  rgb2xyz(rgb, xyz);
  xyz2lab(xyz, lab);
}
function lab2rgb(lab, rgb) {
  var xyz = [0, 0, 0];
  lab2xyz(lab, xyz);
  xyz2rgb(xyz, rgb);
}
function uninitializeBounds(bounds) {
  bounds[0] = 1.0;
  bounds[1] = -1.0;
  bounds[2] = 1.0;
  bounds[3] = -1.0;
  bounds[4] = 1.0;
  bounds[5] = -1.0;
}
function areBoundsInitialized(bounds) {
  return !(bounds[1] - bounds[0] < 0.0);
}
function computeBoundsFromPoints(point1, point2, bounds) {
  bounds[0] = Math.min(point1[0], point2[0]);
  bounds[1] = Math.max(point1[0], point2[0]);
  bounds[2] = Math.min(point1[1], point2[1]);
  bounds[3] = Math.max(point1[1], point2[1]);
  bounds[4] = Math.min(point1[2], point2[2]);
  bounds[5] = Math.max(point1[2], point2[2]);
}
function clampValue(value, minValue, maxValue) {
  if (value < minValue) {
    return minValue;
  }

  if (value > maxValue) {
    return maxValue;
  }

  return value;
}
function clampVector(vector, minVector, maxVector) {
  var out = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  out[0] = clampValue(vector[0], minVector[0], maxVector[0]);
  out[1] = clampValue(vector[1], minVector[1], maxVector[1]);
  out[2] = clampValue(vector[2], minVector[2], maxVector[2]);
  return out;
}
function clampAndNormalizeValue(value, range) {
  var result = 0;

  if (range[0] !== range[1]) {
    // clamp
    if (value < range[0]) {
      result = range[0];
    } else if (value > range[1]) {
      result = range[1];
    } else {
      result = value;
    } // normalize


    result = (result - range[0]) / (range[1] - range[0]);
  }

  return result;
}
var getScalarTypeFittingRange = notImplemented('GetScalarTypeFittingRange');
var getAdjustedScalarRange = notImplemented('GetAdjustedScalarRange');
function extentIsWithinOtherExtent(extent1, extent2) {
  if (!extent1 || !extent2) {
    return 0;
  }

  for (var i = 0; i < 6; i += 2) {
    if (extent1[i] < extent2[i] || extent1[i] > extent2[i + 1] || extent1[i + 1] < extent2[i] || extent1[i + 1] > extent2[i + 1]) {
      return 0;
    }
  }

  return 1;
}
function boundsIsWithinOtherBounds(bounds1_6, bounds2_6, delta_3) {
  if (!bounds1_6 || !bounds2_6) {
    return 0;
  }

  for (var i = 0; i < 6; i += 2) {
    if (bounds1_6[i] + delta_3[i / 2] < bounds2_6[i] || bounds1_6[i] - delta_3[i / 2] > bounds2_6[i + 1] || bounds1_6[i + 1] + delta_3[i / 2] < bounds2_6[i] || bounds1_6[i + 1] - delta_3[i / 2] > bounds2_6[i + 1]) {
      return 0;
    }
  }

  return 1;
}
function pointIsWithinBounds(point_3, bounds_6, delta_3) {
  if (!point_3 || !bounds_6 || !delta_3) {
    return 0;
  }

  for (var i = 0; i < 3; i++) {
    if (point_3[i] + delta_3[i] < bounds_6[2 * i] || point_3[i] - delta_3[i] > bounds_6[2 * i + 1]) {
      return 0;
    }
  }

  return 1;
}
function solve3PointCircle(p1, p2, p3, center) {
  var v21 = createArray(3);
  var v32 = createArray(3);
  var v13 = createArray(3);
  var v12 = createArray(3);
  var v23 = createArray(3);
  var v31 = createArray(3);

  for (var i = 0; i < 3; ++i) {
    v21[i] = p1[i] - p2[i];
    v32[i] = p2[i] - p3[i];
    v13[i] = p3[i] - p1[i];
    v12[i] = -v21[i];
    v23[i] = -v32[i];
    v31[i] = -v13[i];
  }

  var norm12 = norm(v12);
  var norm23 = norm(v23);
  var norm13 = norm(v13);
  var crossv21v32 = createArray(3);
  cross(v21, v32, crossv21v32);
  var normCross = norm(crossv21v32);
  var radius = norm12 * norm23 * norm13 / (2 * normCross);
  var normCross22 = 2 * normCross * normCross;
  var alpha = norm23 * norm23 * dot(v21, v31) / normCross22;
  var beta = norm13 * norm13 * dot(v12, v32) / normCross22;
  var gamma = norm12 * norm12 * dot(v13, v23) / normCross22;

  for (var _i6 = 0; _i6 < 3; ++_i6) {
    center[_i6] = alpha * p1[_i6] + beta * p2[_i6] + gamma * p3[_i6];
  }

  return radius;
}
var inf = Infinity;
var negInf = -Infinity;
var isInf = function isInf(value) {
  return !Number.isFinite(value);
};
var isFinite = Number.isFinite,
    isNaN = Number.isNaN;
var isNan = isNaN; // JavaScript - add-on ----------------------

function createUninitializedBounds() {
  return [].concat([Number.MAX_VALUE, -Number.MAX_VALUE, // X
  Number.MAX_VALUE, -Number.MAX_VALUE, // Y
  Number.MAX_VALUE, -Number.MAX_VALUE // Z
  ]);
}
function getMajorAxisIndex(vector) {
  var maxValue = -1;
  var axisIndex = -1;

  for (var i = 0; i < vector.length; i++) {
    var value = Math.abs(vector[i]);

    if (value > maxValue) {
      axisIndex = i;
      maxValue = value;
    }
  }

  return axisIndex;
}
function floatToHex2(value) {
  var integer = Math.floor(value * 255);

  if (integer > 15) {
    return integer.toString(16);
  }

  return "0".concat(integer.toString(16));
}
function floatRGB2HexCode(rgbArray) {
  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '#';
  return "".concat(prefix).concat(rgbArray.map(floatToHex2).join(''));
}

function floatToChar(f) {
  return Math.round(f * 255);
}

function float2CssRGBA(rgbArray) {
  if (rgbArray.length === 3) {
    return "rgb(".concat(rgbArray.map(floatToChar).join(', '), ")");
  }

  return "rgba(".concat(floatToChar(rgbArray[0] || 0), ", ").concat(floatToChar(rgbArray[1] || 0), ", ").concat(floatToChar(rgbArray[2] || 0), ", ").concat(rgbArray[3] || 0, ")");
} // ----------------------------------------------------------------------------
// Only Static API
// ----------------------------------------------------------------------------

var vtkMath = {
  Pi: Pi,
  radiansFromDegrees: radiansFromDegrees,
  degreesFromRadians: degreesFromRadians,
  round: round,
  floor: floor,
  ceil: ceil,
  ceilLog2: ceilLog2,
  min: min,
  max: max,
  arrayMin: arrayMin,
  arrayMax: arrayMax,
  arrayRange: arrayRange,
  isPowerOfTwo: isPowerOfTwo,
  nearestPowerOfTwo: nearestPowerOfTwo,
  factorial: factorial,
  binomial: binomial,
  beginCombination: beginCombination,
  nextCombination: nextCombination,
  randomSeed: randomSeed,
  getSeed: getSeed,
  random: random,
  gaussian: gaussian,
  add: add,
  subtract: subtract,
  multiplyScalar: multiplyScalar,
  multiplyScalar2D: multiplyScalar2D,
  multiplyAccumulate: multiplyAccumulate,
  multiplyAccumulate2D: multiplyAccumulate2D,
  dot: dot,
  outer: outer,
  cross: cross,
  norm: norm,
  normalize: normalize,
  perpendiculars: perpendiculars,
  projectVector: projectVector,
  projectVector2D: projectVector2D,
  distance2BetweenPoints: distance2BetweenPoints,
  angleBetweenVectors: angleBetweenVectors,
  gaussianAmplitude: gaussianAmplitude,
  gaussianWeight: gaussianWeight,
  dot2D: dot2D,
  outer2D: outer2D,
  norm2D: norm2D,
  normalize2D: normalize2D,
  determinant2x2: determinant2x2,
  LUFactor3x3: LUFactor3x3,
  LUSolve3x3: LUSolve3x3,
  linearSolve3x3: linearSolve3x3,
  multiply3x3_vect3: multiply3x3_vect3,
  multiply3x3_mat3: multiply3x3_mat3,
  multiplyMatrix: multiplyMatrix,
  transpose3x3: transpose3x3,
  invert3x3: invert3x3,
  identity3x3: identity3x3,
  determinant3x3: determinant3x3,
  quaternionToMatrix3x3: quaternionToMatrix3x3,
  areEquals: areEquals,
  areMatricesEqual: areMatricesEqual,
  roundNumber: roundNumber,
  roundVector: roundVector,
  matrix3x3ToQuaternion: matrix3x3ToQuaternion,
  multiplyQuaternion: multiplyQuaternion,
  orthogonalize3x3: orthogonalize3x3,
  diagonalize3x3: diagonalize3x3,
  singularValueDecomposition3x3: singularValueDecomposition3x3,
  solveLinearSystem: solveLinearSystem,
  invertMatrix: invertMatrix,
  luFactorLinearSystem: luFactorLinearSystem,
  luSolveLinearSystem: luSolveLinearSystem,
  estimateMatrixCondition: estimateMatrixCondition,
  jacobi: jacobi,
  jacobiN: jacobiN,
  solveHomogeneousLeastSquares: solveHomogeneousLeastSquares,
  solveLeastSquares: solveLeastSquares,
  hex2float: hex2float,
  rgb2hsv: rgb2hsv,
  hsv2rgb: hsv2rgb,
  lab2xyz: lab2xyz,
  xyz2lab: xyz2lab,
  xyz2rgb: xyz2rgb,
  rgb2xyz: rgb2xyz,
  rgb2lab: rgb2lab,
  lab2rgb: lab2rgb,
  uninitializeBounds: uninitializeBounds,
  areBoundsInitialized: areBoundsInitialized,
  computeBoundsFromPoints: computeBoundsFromPoints,
  clampValue: clampValue,
  clampVector: clampVector,
  clampAndNormalizeValue: clampAndNormalizeValue,
  getScalarTypeFittingRange: getScalarTypeFittingRange,
  getAdjustedScalarRange: getAdjustedScalarRange,
  extentIsWithinOtherExtent: extentIsWithinOtherExtent,
  boundsIsWithinOtherBounds: boundsIsWithinOtherBounds,
  pointIsWithinBounds: pointIsWithinBounds,
  solve3PointCircle: solve3PointCircle,
  inf: inf,
  negInf: negInf,
  isInf: isInf,
  isNan: isNaN,
  isNaN: isNaN,
  isFinite: isFinite,
  // JS add-on
  createUninitializedBounds: createUninitializedBounds,
  getMajorAxisIndex: getMajorAxisIndex,
  floatToHex2: floatToHex2,
  floatRGB2HexCode: floatRGB2HexCode,
  float2CssRGBA: float2CssRGBA
};

var vtkMath$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  Pi: Pi,
  radiansFromDegrees: radiansFromDegrees,
  degreesFromRadians: degreesFromRadians,
  round: round,
  floor: floor,
  ceil: ceil,
  min: min,
  max: max,
  arrayMin: arrayMin,
  arrayMax: arrayMax,
  arrayRange: arrayRange,
  ceilLog2: ceilLog2,
  factorial: factorial,
  nearestPowerOfTwo: nearestPowerOfTwo,
  isPowerOfTwo: isPowerOfTwo,
  binomial: binomial,
  beginCombination: beginCombination,
  nextCombination: nextCombination,
  randomSeed: randomSeed,
  getSeed: getSeed,
  random: random,
  gaussian: gaussian,
  add: add,
  subtract: subtract,
  multiplyScalar: multiplyScalar,
  multiplyScalar2D: multiplyScalar2D,
  multiplyAccumulate: multiplyAccumulate,
  multiplyAccumulate2D: multiplyAccumulate2D,
  dot: dot,
  outer: outer,
  cross: cross,
  norm: norm,
  normalize: normalize,
  perpendiculars: perpendiculars,
  projectVector: projectVector,
  dot2D: dot2D,
  projectVector2D: projectVector2D,
  distance2BetweenPoints: distance2BetweenPoints,
  angleBetweenVectors: angleBetweenVectors,
  signedAngleBetweenVectors: signedAngleBetweenVectors,
  gaussianAmplitude: gaussianAmplitude,
  gaussianWeight: gaussianWeight,
  outer2D: outer2D,
  norm2D: norm2D,
  normalize2D: normalize2D,
  determinant2x2: determinant2x2,
  LUFactor3x3: LUFactor3x3,
  LUSolve3x3: LUSolve3x3,
  linearSolve3x3: linearSolve3x3,
  multiply3x3_vect3: multiply3x3_vect3,
  multiply3x3_mat3: multiply3x3_mat3,
  multiplyMatrix: multiplyMatrix,
  transpose3x3: transpose3x3,
  invert3x3: invert3x3,
  identity3x3: identity3x3,
  determinant3x3: determinant3x3,
  quaternionToMatrix3x3: quaternionToMatrix3x3,
  areEquals: areEquals,
  areMatricesEqual: areMatricesEqual,
  roundNumber: roundNumber,
  roundVector: roundVector,
  jacobiN: jacobiN,
  matrix3x3ToQuaternion: matrix3x3ToQuaternion,
  multiplyQuaternion: multiplyQuaternion,
  orthogonalize3x3: orthogonalize3x3,
  diagonalize3x3: diagonalize3x3,
  singularValueDecomposition3x3: singularValueDecomposition3x3,
  luFactorLinearSystem: luFactorLinearSystem,
  luSolveLinearSystem: luSolveLinearSystem,
  solveLinearSystem: solveLinearSystem,
  invertMatrix: invertMatrix,
  estimateMatrixCondition: estimateMatrixCondition,
  jacobi: jacobi,
  solveHomogeneousLeastSquares: solveHomogeneousLeastSquares,
  solveLeastSquares: solveLeastSquares,
  hex2float: hex2float,
  rgb2hsv: rgb2hsv,
  hsv2rgb: hsv2rgb,
  lab2xyz: lab2xyz,
  xyz2lab: xyz2lab,
  xyz2rgb: xyz2rgb,
  rgb2xyz: rgb2xyz,
  rgb2lab: rgb2lab,
  lab2rgb: lab2rgb,
  uninitializeBounds: uninitializeBounds,
  areBoundsInitialized: areBoundsInitialized,
  computeBoundsFromPoints: computeBoundsFromPoints,
  clampValue: clampValue,
  clampVector: clampVector,
  clampAndNormalizeValue: clampAndNormalizeValue,
  getScalarTypeFittingRange: getScalarTypeFittingRange,
  getAdjustedScalarRange: getAdjustedScalarRange,
  extentIsWithinOtherExtent: extentIsWithinOtherExtent,
  boundsIsWithinOtherBounds: boundsIsWithinOtherBounds,
  pointIsWithinBounds: pointIsWithinBounds,
  solve3PointCircle: solve3PointCircle,
  inf: inf,
  negInf: negInf,
  isInf: isInf,
  isFinite: isFinite,
  isNaN: isNaN,
  isNan: isNan,
  createUninitializedBounds: createUninitializedBounds,
  getMajorAxisIndex: getMajorAxisIndex,
  floatToHex2: floatToHex2,
  floatRGB2HexCode: floatRGB2HexCode,
  float2CssRGBA: float2CssRGBA,
  'default': vtkMath
});




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/Core/MatrixBuilder.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/Core/MatrixBuilder.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkMatrixBuilder)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _vendor_gl_matrix_esm_common_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/common.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/common.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js");
/* harmony import */ var _vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/vec3.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/vec3.js");
/* harmony import */ var _Math_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");








var NoOp = function NoOp(v) {
  return v;
};

var IDENTITY = (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.i)(new Float64Array(16));
var EPSILON = 1e-6;

var Transform = /*#__PURE__*/function () {
  function Transform() {
    var useDegree = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__["default"])(this, Transform);

    this.matrix = (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.i)(new Float64Array(16));
    this.tmp = new Float64Array(3);
    this.angleConv = useDegree ? _vendor_gl_matrix_esm_common_js__WEBPACK_IMPORTED_MODULE_3__.t : NoOp;
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__["default"])(Transform, [{
    key: "rotateFromDirections",
    value: function rotateFromDirections(originDirection, targetDirection) {
      var src = new Float64Array(3);
      var dst = new Float64Array(3);
      var transf = new Float64Array(16);
      (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.s)(src, originDirection[0], originDirection[1], originDirection[2]);
      (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.s)(dst, targetDirection[0], targetDirection[1], targetDirection[2]);
      (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.n)(src, src);
      (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.n)(dst, dst);
      var cosAlpha = (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.d)(src, dst);

      if (cosAlpha >= 1) {
        return this;
      }

      (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.c)(this.tmp, src, dst);

      if ((0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.l)(this.tmp) < EPSILON) {
        // cross product is 0, so pick arbitrary axis perpendicular
        // to originDirection.
        (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.c)(this.tmp, [1, 0, 0], originDirection);

        if ((0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.l)(this.tmp) < EPSILON) {
          (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.c)(this.tmp, [0, 1, 0], originDirection);
        }
      }

      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.f)(transf, Math.acos(cosAlpha), this.tmp);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.m)(this.matrix, this.matrix, transf);
      return this;
    }
  }, {
    key: "rotate",
    value: function rotate$1(angle, axis) {
      _vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.s.apply(_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.v, [this.tmp].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(axis)));
      (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.n)(this.tmp, this.tmp);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.r)(this.matrix, this.matrix, this.angleConv(angle), this.tmp);
      return this;
    }
  }, {
    key: "rotateX",
    value: function rotateX$1(angle) {
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.a)(this.matrix, this.matrix, this.angleConv(angle));
      return this;
    }
  }, {
    key: "rotateY",
    value: function rotateY$1(angle) {
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.b)(this.matrix, this.matrix, this.angleConv(angle));
      return this;
    }
  }, {
    key: "rotateZ",
    value: function rotateZ$1(angle) {
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.c)(this.matrix, this.matrix, this.angleConv(angle));
      return this;
    }
  }, {
    key: "translate",
    value: function translate$1(x, y, z) {
      (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.s)(this.tmp, x, y, z);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.t)(this.matrix, this.matrix, this.tmp);
      return this;
    }
  }, {
    key: "scale",
    value: function scale$1(sx, sy, sz) {
      (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.s)(this.tmp, sx, sy, sz);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.s)(this.matrix, this.matrix, this.tmp);
      return this;
    }
  }, {
    key: "multiply",
    value: function multiply$1(mat4x4) {
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.m)(this.matrix, this.matrix, mat4x4);
      return this;
    }
  }, {
    key: "identity",
    value: function identity$1() {
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.i)(this.matrix);
      return this;
    } //-----------

  }, {
    key: "apply",
    value: function apply(typedArray) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var nbIterations = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;

      if ((0,_Math_index_js__WEBPACK_IMPORTED_MODULE_6__.a)(IDENTITY, this.matrix)) {
        // Make sure we can chain apply...
        return this;
      }

      var size = nbIterations === -1 ? typedArray.length : offset + nbIterations * 3;

      for (var i = offset; i < size; i += 3) {
        (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.s)(this.tmp, typedArray[i], typedArray[i + 1], typedArray[i + 2]);
        (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.t)(this.tmp, this.tmp, this.matrix);
        typedArray[i] = this.tmp[0];
        typedArray[i + 1] = this.tmp[1];
        typedArray[i + 2] = this.tmp[2];
      } // Make sure we can chain apply...


      return this;
    }
  }, {
    key: "getMatrix",
    value: function getMatrix() {
      return this.matrix;
    }
  }, {
    key: "setMatrix",
    value: function setMatrix(mat4x4) {
      if (!!mat4x4 && mat4x4.length === 16) {
        (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.d)(this.matrix, mat4x4);
      }

      return this;
    }
  }]);

  return Transform;
}();

function buildFromDegree() {
  return new Transform(true);
}

function buildFromRadian() {
  return new Transform(false);
}

var vtkMatrixBuilder = {
  buildFromDegree: buildFromDegree,
  buildFromRadian: buildFromRadian
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/Core/Points.js":
/*!************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/Core/Points.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkPoints$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _DataArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DataArray.js */ "./node_modules/@kitware/vtk.js/Common/Core/DataArray.js");
/* harmony import */ var _DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DataArray/Constants.js */ "./node_modules/@kitware/vtk.js/Common/Core/DataArray/Constants.js");




var vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].vtkErrorMacro;
var INVALID_BOUNDS = [1, -1, 1, -1, 1, -1]; // ----------------------------------------------------------------------------
// vtkPoints methods
// ----------------------------------------------------------------------------

function vtkPoints(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkPoints'); // Forwarding methods

  publicAPI.getNumberOfPoints = publicAPI.getNumberOfTuples;

  publicAPI.setNumberOfPoints = function (nbPoints) {
    var dimension = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;

    if (publicAPI.getNumberOfPoints() !== nbPoints) {
      model.size = nbPoints * dimension;
      model.values = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newTypedArray(model.dataType, model.size);
      publicAPI.setNumberOfComponents(dimension);
      publicAPI.modified();
    }
  };

  publicAPI.setPoint = function (idx) {
    var offset = idx * model.numberOfComponents;

    for (var i = 0; i < model.numberOfComponents; i++) {
      model.values[offset + i] = i + 1 < 1 || arguments.length <= i + 1 ? undefined : arguments[i + 1];
    }
  };

  publicAPI.getPoint = publicAPI.getTuple;

  publicAPI.getBounds = function () {
    if (publicAPI.getNumberOfComponents() === 3) {
      var _xRange = publicAPI.getRange(0);

      model.bounds[0] = _xRange[0];
      model.bounds[1] = _xRange[1];

      var _yRange = publicAPI.getRange(1);

      model.bounds[2] = _yRange[0];
      model.bounds[3] = _yRange[1];
      var zRange = publicAPI.getRange(2);
      model.bounds[4] = zRange[0];
      model.bounds[5] = zRange[1];
      return model.bounds;
    }

    if (publicAPI.getNumberOfComponents() !== 2) {
      vtkErrorMacro("getBounds called on an array with components of\n        ".concat(publicAPI.getNumberOfComponents()));
      return INVALID_BOUNDS;
    }

    var xRange = publicAPI.getRange(0);
    model.bounds[0] = xRange[0];
    model.bounds[1] = xRange[1];
    var yRange = publicAPI.getRange(1);
    model.bounds[2] = yRange[0];
    model.bounds[3] = yRange[1];
    model.bounds[4] = 0;
    model.bounds[5] = 0;
    return model.bounds;
  }; // Trigger the computation of bounds


  publicAPI.computeBounds = publicAPI.getBounds; // Initialize

  publicAPI.setNumberOfComponents(model.numberOfComponents < 2 ? 3 : model.numberOfComponents);
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  empty: true,
  numberOfComponents: 3,
  dataType: _DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_2__.VtkDataTypes.FLOAT,
  bounds: [1, -1, 1, -1, 1, -1]
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues);
  _DataArray_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues);
  vtkPoints(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkPoints'); // ----------------------------------------------------------------------------

var vtkPoints$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/Core/ScalarsToColors.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/Core/ScalarsToColors.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkScalarsToColors$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _DataArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DataArray.js */ "./node_modules/@kitware/vtk.js/Common/Core/DataArray.js");
/* harmony import */ var _ScalarsToColors_Constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ScalarsToColors/Constants.js */ "./node_modules/@kitware/vtk.js/Common/Core/ScalarsToColors/Constants.js");
/* harmony import */ var _Rendering_Core_Mapper_Constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Rendering/Core/Mapper/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Mapper/Constants.js");






function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var ScalarMappingTarget = _ScalarsToColors_Constants_js__WEBPACK_IMPORTED_MODULE_3__["default"].ScalarMappingTarget,
    VectorMode = _ScalarsToColors_Constants_js__WEBPACK_IMPORTED_MODULE_3__["default"].VectorMode;
var VtkDataTypes = _DataArray_js__WEBPACK_IMPORTED_MODULE_2__["default"].VtkDataTypes;
var ColorMode = _Rendering_Core_Mapper_Constants_js__WEBPACK_IMPORTED_MODULE_4__["default"].ColorMode;
var vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].vtkErrorMacro; // ----------------------------------------------------------------------------
// Global methods
// ----------------------------------------------------------------------------
// Add module-level functions or api that you want to expose statically via
// the next section...
// ----------------------------------------------------------------------------
// Static API
// ----------------------------------------------------------------------------

function intColorToUChar(c) {
  return c;
}

function floatColorToUChar(c) {
  return Math.floor(c * 255.0 + 0.5);
} // ----------------------------------------------------------------------------
// vtkScalarsToColors methods
// ----------------------------------------------------------------------------


function vtkScalarsToColors(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkScalarsToColors');

  publicAPI.setVectorModeToMagnitude = function () {
    return publicAPI.setVectorMode(VectorMode.MAGNITUDE);
  };

  publicAPI.setVectorModeToComponent = function () {
    return publicAPI.setVectorMode(VectorMode.COMPONENT);
  };

  publicAPI.setVectorModeToRGBColors = function () {
    return publicAPI.setVectorMode(VectorMode.RGBCOLORS);
  };

  publicAPI.build = function () {};

  publicAPI.isOpaque = function () {
    return true;
  }; //----------------------------------------------------------------------------


  publicAPI.setAnnotations = function (values, annotations) {
    if (values && !annotations || !values && annotations) {
      return;
    }

    if (values && annotations && values.length !== annotations.length) {
      vtkErrorMacro('Values and annotations do not have the same number of tuples so ignoring');
      return;
    }

    model.annotationArray = [];

    if (annotations && values) {
      var num = annotations.length;

      for (var i = 0; i < num; i++) {
        model.annotationArray.push({
          value: values[i],
          annotation: String(annotations[i])
        });
      }
    }

    publicAPI.updateAnnotatedValueMap();
    publicAPI.modified();
  }; //----------------------------------------------------------------------------


  publicAPI.setAnnotation = function (value, annotation) {
    var i = publicAPI.checkForAnnotatedValue(value);
    var modified = false;

    if (i >= 0) {
      if (model.annotationArray[i].annotation !== annotation) {
        model.annotationArray[i].annotation = annotation;
        modified = true;
      }
    } else {
      model.annotationArray.push({
        value: value,
        annotation: annotation
      });
      i = model.annotationArray.length - 1;
      modified = true;
    }

    if (modified) {
      publicAPI.updateAnnotatedValueMap();
      publicAPI.modified();
    }

    return i;
  }; //----------------------------------------------------------------------------


  publicAPI.getNumberOfAnnotatedValues = function () {
    return model.annotationArray.length;
  }; //----------------------------------------------------------------------------


  publicAPI.getAnnotatedValue = function (idx) {
    if (idx < 0 || idx >= model.annotationArray.length) {
      return null;
    }

    return model.annotationArray[idx].value;
  }; //----------------------------------------------------------------------------


  publicAPI.getAnnotation = function (idx) {
    if (model.annotationArray[idx] === undefined) {
      return null;
    }

    return model.annotationArray[idx].annotation;
  }; //----------------------------------------------------------------------------


  publicAPI.getAnnotatedValueIndex = function (val) {
    return model.annotationArray.length ? publicAPI.checkForAnnotatedValue(val) : -1;
  }; //----------------------------------------------------------------------------


  publicAPI.removeAnnotation = function (value) {
    var i = publicAPI.checkForAnnotatedValue(value);
    var needToRemove = i >= 0;

    if (needToRemove) {
      model.annotationArray.splice(i, 1);
      publicAPI.updateAnnotatedValueMap();
      publicAPI.modified();
    }

    return needToRemove;
  }; //----------------------------------------------------------------------------


  publicAPI.resetAnnotations = function () {
    model.annotationArray = [];
    model.annotatedValueMap = [];
    publicAPI.modified();
  }; //----------------------------------------------------------------------------


  publicAPI.getAnnotationColor = function (val, rgba) {
    if (model.indexedLookup) {
      var i = publicAPI.getAnnotatedValueIndex(val);
      publicAPI.getIndexedColor(i, rgba);
    } else {
      publicAPI.getColor(parseFloat(val), rgba);
      rgba[3] = 1.0;
    }
  }; //----------------------------------------------------------------------------


  publicAPI.checkForAnnotatedValue = function (value) {
    return publicAPI.getAnnotatedValueIndexInternal(value);
  }; //----------------------------------------------------------------------------
  // An unsafe version of vtkScalarsToColors::CheckForAnnotatedValue for
  // internal use (no pointer checks performed)


  publicAPI.getAnnotatedValueIndexInternal = function (value) {
    if (model.annotatedValueMap[value] !== undefined) {
      var na = model.annotationArray.length;
      return model.annotatedValueMap[value] % na;
    } // Treat as a NaN


    return -1;
  }; //----------------------------------------------------------------------------


  publicAPI.getIndexedColor = function (val, rgba) {
    rgba[0] = 0.0;
    rgba[1] = 0.0;
    rgba[2] = 0.0;
    rgba[3] = 0.0;
  }; //----------------------------------------------------------------------------


  publicAPI.updateAnnotatedValueMap = function () {
    model.annotatedValueMap = [];
    var na = model.annotationArray.length;

    for (var i = 0; i < na; i++) {
      model.annotatedValueMap[model.annotationArray[i].value] = i;
    }
  }; // Description:
  // Internal methods that map a data array into a 4-component,
  // unsigned char RGBA array. The color mode determines the behavior
  // of mapping. If ColorMode.DEFAULT is set, then unsigned char
  // data arrays are treated as colors (and converted to RGBA if
  // necessary); If ColorMode.DIRECT_SCALARS is set, then all arrays
  // are treated as colors (integer types are clamped in the range 0-255,
  // floating point arrays are clamped in the range 0.0-1.0. Note 'char' does
  // not have enough values to represent a color so mapping this type is
  // considered an error);
  // otherwise, the data is mapped through this instance
  // of ScalarsToColors. The component argument is used for data
  // arrays with more than one component; it indicates which component
  // to use to do the blending.  When the component argument is -1,
  // then the this object uses its own selected technique to change a
  // vector into a scalar to map.


  publicAPI.mapScalars = function (scalars, colorMode, componentIn) {
    var numberOfComponents = scalars.getNumberOfComponents();
    var newColors = null; // map scalars through lookup table only if needed

    if (colorMode === ColorMode.DEFAULT && scalars.getDataType() === VtkDataTypes.UNSIGNED_CHAR || colorMode === ColorMode.DIRECT_SCALARS && scalars) {
      newColors = publicAPI.convertToRGBA(scalars, numberOfComponents, scalars.getNumberOfTuples());
    } else {
      var newscalars = {
        type: 'vtkDataArray',
        name: 'temp',
        numberOfComponents: 4,
        dataType: VtkDataTypes.UNSIGNED_CHAR
      };
      var s = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newTypedArray(newscalars.dataType, 4 * scalars.getNumberOfTuples());
      newscalars.values = s;
      newscalars.size = s.length;
      newColors = _DataArray_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance(newscalars);
      var component = componentIn; // If mapper did not specify a component, use the VectorMode

      if (component < 0 && numberOfComponents > 1) {
        publicAPI.mapVectorsThroughTable(scalars, newColors, ScalarMappingTarget.RGBA, -1, -1);
      } else {
        if (component < 0) {
          component = 0;
        }

        if (component >= numberOfComponents) {
          component = numberOfComponents - 1;
        } // Map the scalars to colors


        publicAPI.mapScalarsThroughTable(scalars, newColors, ScalarMappingTarget.RGBA, component);
      }
    }

    return newColors;
  };

  publicAPI.mapVectorsToMagnitude = function (input, output, compsToUse) {
    var length = input.getNumberOfTuples();
    var inIncr = input.getNumberOfComponents();
    var outputV = output.getData();
    var inputV = input.getData();

    for (var i = 0; i < length; i++) {
      var sum = 0.0;

      for (var j = 0; j < compsToUse; j++) {
        sum += inputV[i * inIncr + j] * inputV[i * inIncr + j];
      }

      outputV[i] = Math.sqrt(sum);
    }
  }; //----------------------------------------------------------------------------
  // Map a set of vector values through the table


  publicAPI.mapVectorsThroughTable = function (input, output, outputFormat, vectorComponentIn, vectorSizeIn) {
    var vectorMode = publicAPI.getVectorMode();
    var vectorSize = vectorSizeIn;
    var vectorComponent = vectorComponentIn;
    var inComponents = input.getNumberOfComponents();

    if (vectorMode === VectorMode.COMPONENT) {
      // make sure vectorComponent is within allowed range
      if (vectorComponent === -1) {
        // if set to -1, use default value provided by table
        vectorComponent = publicAPI.getVectorComponent();
      }

      if (vectorComponent < 0) {
        vectorComponent = 0;
      }

      if (vectorComponent >= inComponents) {
        vectorComponent = inComponents - 1;
      }
    } else {
      // make sure vectorSize is within allowed range
      if (vectorSize === -1) {
        // if set to -1, use default value provided by table
        vectorSize = publicAPI.getVectorSize();
      }

      if (vectorSize <= 0) {
        vectorComponent = 0;
        vectorSize = inComponents;
      } else {
        if (vectorComponent < 0) {
          vectorComponent = 0;
        }

        if (vectorComponent >= inComponents) {
          vectorComponent = inComponents - 1;
        }

        if (vectorComponent + vectorSize > inComponents) {
          vectorSize = inComponents - vectorComponent;
        }
      }

      if (vectorMode === VectorMode.MAGNITUDE && (inComponents === 1 || vectorSize === 1)) {
        vectorMode = VectorMode.COMPONENT;
      }
    } // increment input pointer to the first component to map


    var inputOffset = 0;

    if (vectorComponent > 0) {
      inputOffset = vectorComponent;
    } // map according to the current vector mode


    switch (vectorMode) {
      case VectorMode.COMPONENT:
        {
          publicAPI.mapScalarsThroughTable(input, output, outputFormat, inputOffset);
          break;
        }

      default:
      case VectorMode.MAGNITUDE:
        {
          var magValues = _DataArray_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance({
            numberOfComponents: 1,
            values: new Float32Array(input.getNumberOfTuples())
          });
          publicAPI.mapVectorsToMagnitude(input, magValues, vectorSize);
          publicAPI.mapScalarsThroughTable(magValues, output, outputFormat, 0);
          break;
        }

      case VectorMode.RGBCOLORS:
        {
          // publicAPI.mapColorsToColors(
          //   input, output, inComponents, vectorSize,
          //   outputFormat);
          break;
        }
    }
  };

  publicAPI.luminanceToRGBA = function (newColors, colors, alpha, convtFun) {
    var a = convtFun(alpha);
    var values = colors.getData();
    var newValues = newColors.getData();
    var size = values.length;
    var component = 0;
    var tuple = 1;
    var count = 0;

    for (var i = component; i < size; i += tuple) {
      var l = convtFun(values[i]);
      newValues[count * 4] = l;
      newValues[count * 4 + 1] = l;
      newValues[count * 4 + 2] = l;
      newValues[count * 4 + 3] = a;
      count++;
    }
  };

  publicAPI.luminanceAlphaToRGBA = function (newColors, colors, alpha, convtFun) {
    var values = colors.getData();
    var newValues = newColors.getData();
    var size = values.length;
    var component = 0;
    var tuple = 2;
    var count = 0;

    for (var i = component; i < size; i += tuple) {
      var l = convtFun(values[i]);
      newValues[count] = l;
      newValues[count + 1] = l;
      newValues[count + 2] = l;
      newValues[count + 3] = convtFun(values[i + 1]) * alpha;
      count += 4;
    }
  };

  publicAPI.rGBToRGBA = function (newColors, colors, alpha, convtFun) {
    var a = floatColorToUChar(alpha);
    var values = colors.getData();
    var newValues = newColors.getData();
    var size = values.length;
    var component = 0;
    var tuple = 3;
    var count = 0;

    for (var i = component; i < size; i += tuple) {
      newValues[count * 4] = convtFun(values[i]);
      newValues[count * 4 + 1] = convtFun(values[i + 1]);
      newValues[count * 4 + 2] = convtFun(values[i + 2]);
      newValues[count * 4 + 3] = a;
      count++;
    }
  };

  publicAPI.rGBAToRGBA = function (newColors, colors, alpha, convtFun) {
    var values = colors.getData();
    var newValues = newColors.getData();
    var size = values.length;
    var component = 0;
    var tuple = 4;
    var count = 0;

    for (var i = component; i < size; i += tuple) {
      newValues[count * 4] = convtFun(values[i]);
      newValues[count * 4 + 1] = convtFun(values[i + 1]);
      newValues[count * 4 + 2] = convtFun(values[i + 2]);
      newValues[count * 4 + 3] = convtFun(values[i + 3]) * alpha;
      count++;
    }
  }; //----------------------------------------------------------------------------


  publicAPI.convertToRGBA = function (colors, numComp, numTuples) {
    var alpha = model.alpha;

    if (numComp === 4 && alpha >= 1.0 && colors.getDataType() === VtkDataTypes.UNSIGNED_CHAR) {
      return colors;
    }

    var newColors = _DataArray_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance({
      numberOfComponents: 4,
      empty: true,
      size: 4 * numTuples,
      dataType: VtkDataTypes.UNSIGNED_CHAR
    });

    if (numTuples <= 0) {
      return newColors;
    }

    alpha = alpha > 0 ? alpha : 0;
    alpha = alpha < 1 ? alpha : 1;
    var convtFun = intColorToUChar;

    if (colors.getDataType() === VtkDataTypes.FLOAT || colors.getDataType() === VtkDataTypes.DOUBLE) {
      convtFun = floatColorToUChar;
    }

    switch (numComp) {
      case 1:
        publicAPI.luminanceToRGBA(newColors, colors, alpha, convtFun);
        break;

      case 2:
        publicAPI.luminanceAlphaToRGBA(newColors, colors, convtFun);
        break;

      case 3:
        publicAPI.rGBToRGBA(newColors, colors, alpha, convtFun);
        break;

      case 4:
        publicAPI.rGBAToRGBA(newColors, colors, alpha, convtFun);
        break;

      default:
        vtkErrorMacro('Cannot convert colors');
        return null;
    }

    return newColors;
  };

  publicAPI.usingLogScale = function () {
    return false;
  };

  publicAPI.getNumberOfAvailableColors = function () {
    return 256 * 256 * 256;
  };

  publicAPI.setRange = function (min, max) {
    return publicAPI.setMappingRange(min, max);
  };

  publicAPI.getRange = function (min, max) {
    return publicAPI.getMappingRange();
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  alpha: 1.0,
  vectorComponent: 0,
  vectorSize: -1,
  vectorMode: VectorMode.COMPONENT,
  mappingRange: null,
  annotationArray: null,
  annotatedValueMap: null,
  indexedLookup: false
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods

  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].obj(publicAPI, model);
  model.mappingRange = [0, 255];
  model.annotationArray = [];
  model.annotatedValueMap = []; // Create get-set macros

  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGet(publicAPI, model, ['vectorSize', 'vectorComponent', 'vectorMode', 'alpha', 'indexedLookup']); // Create set macros for array (needs to know size)

  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setArray(publicAPI, model, ['mappingRange'], 2); // Create get macros for array

  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].getArray(publicAPI, model, ['mappingRange']); // For more macro methods, see "Sources/macros.js"
  // Object specific methods

  vtkScalarsToColors(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkScalarsToColors'); // ----------------------------------------------------------------------------

var vtkScalarsToColors$1 = _objectSpread({
  newInstance: newInstance,
  extend: extend
}, _ScalarsToColors_Constants_js__WEBPACK_IMPORTED_MODULE_3__["default"]);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/Core/ScalarsToColors/Constants.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/Core/ScalarsToColors/Constants.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ScalarMappingTarget": () => (/* binding */ ScalarMappingTarget),
/* harmony export */   "VectorMode": () => (/* binding */ VectorMode),
/* harmony export */   "default": () => (/* binding */ vtkScalarsToColors)
/* harmony export */ });
var VectorMode = {
  MAGNITUDE: 0,
  COMPONENT: 1,
  RGBCOLORS: 2
};
var ScalarMappingTarget = {
  LUMINANCE: 1,
  LUMINANCE_ALPHA: 2,
  RGB: 3,
  RGBA: 4
};
var vtkScalarsToColors = {
  VectorMode: VectorMode,
  ScalarMappingTarget: ScalarMappingTarget
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/DataModel/BoundingBox.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/DataModel/BoundingBox.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "STATIC": () => (/* binding */ STATIC),
/* harmony export */   "addBounds": () => (/* binding */ _addBounds),
/* harmony export */   "addPoint": () => (/* binding */ _addPoint),
/* harmony export */   "computeCornerPoints": () => (/* binding */ _computeCornerPoints),
/* harmony export */   "computeLocalBounds": () => (/* binding */ _computeLocalBounds),
/* harmony export */   "computeScale3": () => (/* binding */ _computeScale),
/* harmony export */   "contains": () => (/* binding */ contains),
/* harmony export */   "containsPoint": () => (/* binding */ _containsPoint),
/* harmony export */   "cutWithPlane": () => (/* binding */ _cutWithPlane),
/* harmony export */   "default": () => (/* binding */ vtkBoundingBox),
/* harmony export */   "equals": () => (/* binding */ _equals),
/* harmony export */   "getCenter": () => (/* binding */ _getCenter),
/* harmony export */   "getCorners": () => (/* binding */ _getCorners),
/* harmony export */   "getDiagonalLength": () => (/* binding */ _getDiagonalLength),
/* harmony export */   "getLength": () => (/* binding */ _getLength),
/* harmony export */   "getLengths": () => (/* binding */ _getLengths),
/* harmony export */   "getMaxLength": () => (/* binding */ _getMaxLength),
/* harmony export */   "getMaxPoint": () => (/* binding */ _getMaxPoint),
/* harmony export */   "getMinPoint": () => (/* binding */ _getMinPoint),
/* harmony export */   "getXRange": () => (/* binding */ _getXRange),
/* harmony export */   "getYRange": () => (/* binding */ _getYRange),
/* harmony export */   "getZRange": () => (/* binding */ _getZRange),
/* harmony export */   "inflate": () => (/* binding */ _inflate),
/* harmony export */   "intersect": () => (/* binding */ _intersect),
/* harmony export */   "intersectBox": () => (/* binding */ _intersectBox),
/* harmony export */   "intersectPlane": () => (/* binding */ _intersectPlane),
/* harmony export */   "intersects": () => (/* binding */ _intersects),
/* harmony export */   "isValid": () => (/* binding */ _isValid),
/* harmony export */   "reset": () => (/* binding */ _reset),
/* harmony export */   "scale": () => (/* binding */ _scale),
/* harmony export */   "setBounds": () => (/* binding */ _setBounds),
/* harmony export */   "setMaxPoint": () => (/* binding */ _setMaxPoint),
/* harmony export */   "setMinPoint": () => (/* binding */ _setMinPoint)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
/* harmony import */ var _Core_Math_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");
/* harmony import */ var _Plane_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Plane.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/Plane.js");








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var INIT_BOUNDS = [Number.MAX_VALUE, -Number.MAX_VALUE, // X
Number.MAX_VALUE, -Number.MAX_VALUE, // Y
Number.MAX_VALUE, -Number.MAX_VALUE // Z
]; // ----------------------------------------------------------------------------
// Global methods
// ----------------------------------------------------------------------------

function _equals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
}

function _isValid(bounds) {
  return bounds[0] <= bounds[1] && bounds[2] <= bounds[3] && bounds[4] <= bounds[5];
}

function _setBounds(bounds, otherBounds) {
  bounds[0] = otherBounds[0];
  bounds[1] = otherBounds[1];
  bounds[2] = otherBounds[2];
  bounds[3] = otherBounds[3];
  bounds[4] = otherBounds[4];
  bounds[5] = otherBounds[5];
  return bounds;
}

function _reset(bounds) {
  return _setBounds(bounds, INIT_BOUNDS);
}

function _addPoint(bounds) {
  var _bounds = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_4__["default"])(bounds, 6),
      xMin = _bounds[0],
      xMax = _bounds[1],
      yMin = _bounds[2],
      yMax = _bounds[3],
      zMin = _bounds[4],
      zMax = _bounds[5];

  bounds[0] = xMin < (arguments.length <= 1 ? undefined : arguments[1]) ? xMin : arguments.length <= 1 ? undefined : arguments[1];
  bounds[1] = xMax > (arguments.length <= 1 ? undefined : arguments[1]) ? xMax : arguments.length <= 1 ? undefined : arguments[1];
  bounds[2] = yMin < (arguments.length <= 2 ? undefined : arguments[2]) ? yMin : arguments.length <= 2 ? undefined : arguments[2];
  bounds[3] = yMax > (arguments.length <= 2 ? undefined : arguments[2]) ? yMax : arguments.length <= 2 ? undefined : arguments[2];
  bounds[4] = zMin < (arguments.length <= 3 ? undefined : arguments[3]) ? zMin : arguments.length <= 3 ? undefined : arguments[3];
  bounds[5] = zMax > (arguments.length <= 3 ? undefined : arguments[3]) ? zMax : arguments.length <= 3 ? undefined : arguments[3];
}

function _addBounds(bounds, xMin, xMax, yMin, yMax, zMin, zMax) {
  var _bounds2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_4__["default"])(bounds, 6),
      _xMin = _bounds2[0],
      _xMax = _bounds2[1],
      _yMin = _bounds2[2],
      _yMax = _bounds2[3],
      _zMin = _bounds2[4],
      _zMax = _bounds2[5];

  if (zMax === undefined) {
    bounds[0] = Math.min(xMin[0], _xMin);
    bounds[1] = Math.max(xMin[1], _xMax);
    bounds[2] = Math.min(xMin[2], _yMin);
    bounds[3] = Math.max(xMin[3], _yMax);
    bounds[4] = Math.min(xMin[4], _zMin);
    bounds[5] = Math.max(xMin[5], _zMax);
  } else {
    bounds[0] = Math.min(xMin, _xMin);
    bounds[1] = Math.max(xMax, _xMax);
    bounds[2] = Math.min(yMin, _yMin);
    bounds[3] = Math.max(yMax, _yMax);
    bounds[4] = Math.min(zMin, _zMin);
    bounds[5] = Math.max(zMax, _zMax);
  }
}

function _setMinPoint(bounds, x, y, z) {
  var _bounds3 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_4__["default"])(bounds, 6),
      xMin = _bounds3[0],
      xMax = _bounds3[1],
      yMin = _bounds3[2],
      yMax = _bounds3[3],
      zMin = _bounds3[4],
      zMax = _bounds3[5];

  bounds[0] = x;
  bounds[1] = x > xMax ? x : xMax;
  bounds[2] = y;
  bounds[3] = y > yMax ? y : yMax;
  bounds[4] = z;
  bounds[5] = z > zMax ? z : zMax;
  return xMin !== x || yMin !== y || zMin !== z;
}

function _setMaxPoint(bounds, x, y, z) {
  var _bounds4 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_4__["default"])(bounds, 6),
      xMin = _bounds4[0],
      xMax = _bounds4[1],
      yMin = _bounds4[2],
      yMax = _bounds4[3],
      zMin = _bounds4[4],
      zMax = _bounds4[5];

  bounds[0] = x < xMin ? x : xMin;
  bounds[1] = x;
  bounds[2] = y < yMin ? y : yMin;
  bounds[3] = y;
  bounds[4] = z < zMin ? z : zMin;
  bounds[5] = z;
  return xMax !== x || yMax !== y || zMax !== z;
}

function _inflate(bounds, delta) {
  bounds[0] -= delta;
  bounds[1] += delta;
  bounds[2] -= delta;
  bounds[3] += delta;
  bounds[4] -= delta;
  bounds[5] += delta;
}

function _scale(bounds, sx, sy, sz) {
  if (!_isValid(bounds)) {
    return false;
  }

  if (sx >= 0.0) {
    bounds[0] *= sx;
    bounds[1] *= sx;
  } else {
    bounds[0] = sx * bounds[1];
    bounds[1] = sx * bounds[0];
  }

  if (sy >= 0.0) {
    bounds[2] *= sy;
    bounds[3] *= sy;
  } else {
    bounds[2] = sy * bounds[3];
    bounds[3] = sy * bounds[2];
  }

  if (sz >= 0.0) {
    bounds[4] *= sz;
    bounds[5] *= sz;
  } else {
    bounds[4] = sz * bounds[5];
    bounds[5] = sz * bounds[4];
  }

  return true;
}

function _getCenter(bounds) {
  return [0.5 * (bounds[0] + bounds[1]), 0.5 * (bounds[2] + bounds[3]), 0.5 * (bounds[4] + bounds[5])];
}

function _getLength(bounds, index) {
  return bounds[index * 2 + 1] - bounds[index * 2];
}

function _getLengths(bounds) {
  return [_getLength(bounds, 0), _getLength(bounds, 1), _getLength(bounds, 2)];
}

function _getXRange(bounds) {
  return bounds.slice(0, 2);
}

function _getYRange(bounds) {
  return bounds.slice(2, 4);
}

function _getZRange(bounds) {
  return bounds.slice(4, 6);
}

function _getMaxLength(bounds) {
  var l = _getLengths(bounds);

  if (l[0] > l[1]) {
    if (l[0] > l[2]) {
      return l[0];
    }

    return l[2];
  }

  if (l[1] > l[2]) {
    return l[1];
  }

  return l[2];
}

function _getDiagonalLength(bounds) {
  if (_isValid(bounds)) {
    var l = _getLengths(bounds);

    return Math.sqrt(l[0] * l[0] + l[1] * l[1] + l[2] * l[2]);
  }

  return null;
}

function _getMinPoint(bounds) {
  return [bounds[0], bounds[2], bounds[4]];
}

function _getMaxPoint(bounds) {
  return [bounds[1], bounds[3], bounds[5]];
}

function oppositeSign(a, b) {
  return a <= 0 && b >= 0 || a >= 0 && b <= 0;
}

function _getCorners(bounds, corners) {
  var count = 0;

  for (var ix = 0; ix < 2; ix++) {
    for (var iy = 2; iy < 4; iy++) {
      for (var iz = 4; iz < 6; iz++) {
        corners[count] = [bounds[ix], bounds[iy], bounds[iz]];
        count++;
      }
    }
  }
} // Computes the two corners with minimal and miximal coordinates

function _computeCornerPoints(bounds, point1, point2) {
  point1[0] = bounds[0];
  point1[1] = bounds[2];
  point1[2] = bounds[4];
  point2[0] = bounds[1];
  point2[1] = bounds[3];
  point2[2] = bounds[5];
}

function _computeScale(bounds) {
  var scale3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  var center = _getCenter(bounds);

  scale3[0] = bounds[1] - center[0];
  scale3[1] = bounds[3] - center[1];
  scale3[2] = bounds[5] - center[2];
  return scale3;
}

function _computeLocalBounds(points, u, v, w) {
  var bounds = [].concat(INIT_BOUNDS);
  var pointsData = points.getData();

  for (var i = 0; i < pointsData.length; i += 3) {
    var point = [pointsData[i], pointsData[i + 1], pointsData[i + 2]];
    var du = (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_5__.d)(point, u);
    bounds[0] = Math.min(du, bounds[0]);
    bounds[1] = Math.max(du, bounds[1]);
    var dv = (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_5__.d)(point, v);
    bounds[2] = Math.min(dv, bounds[2]);
    bounds[3] = Math.max(dv, bounds[3]);
    var dw = (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_5__.d)(point, w);
    bounds[4] = Math.min(dw, bounds[4]);
    bounds[5] = Math.max(dw, bounds[5]);
  }

  return bounds;
} // The method returns a non-zero value if the bounding box is hit.

function _intersectBox(bounds, origin, dir, coord, tolerance) {
  var inside = true;
  var quadrant = [];
  var whichPlane = 0;
  var maxT = [];
  var candidatePlane = [0.0, 0.0, 0.0];
  var RIGHT = 0;
  var LEFT = 1;
  var MIDDLE = 2; // First find closest planes

  for (var i = 0; i < 3; i++) {
    if (origin[i] < bounds[2 * i]) {
      quadrant[i] = LEFT;
      candidatePlane[i] = bounds[2 * i];
      inside = false;
    } else if (origin[i] > bounds[2 * i + 1]) {
      quadrant[i] = RIGHT;
      candidatePlane[i] = bounds[2 * i + 1];
      inside = false;
    } else {
      quadrant[i] = MIDDLE;
    }
  } // Check whether origin of ray is inside bbox


  if (inside) {
    coord[0] = origin[0];
    coord[1] = origin[1];
    coord[2] = origin[2];
    tolerance[0] = 0;
    return 1;
  } // Calculate parametric distance to plane


  for (var _i = 0; _i < 3; _i++) {
    if (quadrant[_i] !== MIDDLE && dir[_i] !== 0.0) {
      maxT[_i] = (candidatePlane[_i] - origin[_i]) / dir[_i];
    } else {
      maxT[_i] = -1.0;
    }
  } // Find the largest parametric value of intersection


  for (var _i2 = 0; _i2 < 3; _i2++) {
    if (maxT[whichPlane] < maxT[_i2]) {
      whichPlane = _i2;
    }
  } // Check for valie intersection along line


  if (maxT[whichPlane] > 1.0 || maxT[whichPlane] < 0.0) {
    return 0;
  }

  tolerance[0] = maxT[whichPlane]; // Intersection point along line is okay. Check bbox.

  for (var _i3 = 0; _i3 < 3; _i3++) {
    if (whichPlane !== _i3) {
      coord[_i3] = origin[_i3] + maxT[whichPlane] * dir[_i3];

      if (coord[_i3] < bounds[2 * _i3] || coord[_i3] > bounds[2 * _i3 + 1]) {
        return 0;
      }
    } else {
      coord[_i3] = candidatePlane[_i3];
    }
  }

  return 1;
} // Plane intersection with box

function _intersectPlane(bounds, origin, normal) {
  var p = [];
  var d = 0;
  var sign = 1;
  var firstOne = 1; // Evaluate the eight points. If there is a sign change, there is an intersection

  for (var z = 4; z <= 5; ++z) {
    p[2] = bounds[z];

    for (var y = 2; y <= 3; ++y) {
      p[1] = bounds[y];

      for (var x = 0; x <= 1; ++x) {
        p[0] = bounds[x];
        d = _Plane_js__WEBPACK_IMPORTED_MODULE_6__["default"].evaluate(normal, origin, p);

        if (firstOne) {
          sign = d >= 0 ? 1 : -1;
          firstOne = 0;
        }

        if (d === 0.0 || sign > 0 && d < 0.0 || sign < 0 && d > 0.0) {
          return 1;
        }
      }
    }
  }

  return 0; // no intersection
}

function _intersect(bounds, bBounds) {
  if (!(_isValid(bounds) && _isValid(bBounds))) {
    return false;
  }

  var newBounds = [0, 0, 0, 0, 0, 0];
  var intersection;

  for (var i = 0; i < 3; i++) {
    intersection = false;

    if (bBounds[i * 2] >= bounds[i * 2] && bBounds[i * 2] <= bounds[i * 2 + 1]) {
      intersection = true;
      newBounds[i * 2] = bBounds[i * 2];
    } else if (bounds[i * 2] >= bBounds[i * 2] && bounds[i * 2] <= bBounds[i * 2 + 1]) {
      intersection = true;
      newBounds[i * 2] = bounds[i * 2];
    }

    if (bBounds[i * 2 + 1] >= bounds[i * 2] && bBounds[i * 2 + 1] <= bounds[i * 2 + 1]) {
      intersection = true;
      newBounds[i * 2 + 1] = bBounds[2 * i + 1];
    } else if (bounds[i * 2 + 1] >= bBounds[i * 2] && bounds[i * 2 + 1] <= bBounds[i * 2 + 1]) {
      intersection = true;
      newBounds[i * 2 + 1] = bounds[i * 2 + 1];
    }

    if (!intersection) {
      return false;
    }
  } // OK they did intersect - set the box to be the result


  bounds[0] = newBounds[0];
  bounds[1] = newBounds[1];
  bounds[2] = newBounds[2];
  bounds[3] = newBounds[3];
  bounds[4] = newBounds[4];
  bounds[5] = newBounds[5];
  return true;
}

function _intersects(bounds, bBounds) {
  if (!(_isValid(bounds) && _isValid(bBounds))) {
    return false;
  }
  /* eslint-disable no-continue */


  for (var i = 0; i < 3; i++) {
    if (bBounds[i * 2] >= bounds[i * 2] && bBounds[i * 2] <= bounds[i * 2 + 1]) {
      continue;
    } else if (bounds[i * 2] >= bBounds[i * 2] && bounds[i * 2] <= bBounds[i * 2 + 1]) {
      continue;
    }

    if (bBounds[i * 2 + 1] >= bounds[i * 2] && bBounds[i * 2 + 1] <= bounds[i * 2 + 1]) {
      continue;
    } else if (bounds[i * 2 + 1] >= bBounds[i * 2] && bounds[i * 2 + 1] <= bBounds[i * 2 + 1]) {
      continue;
    }

    return false;
  }
  /* eslint-enable no-continue */


  return true;
}

function _containsPoint(bounds, x, y, z) {
  if (x < bounds[0] || x > bounds[1]) {
    return false;
  }

  if (y < bounds[2] || y > bounds[3]) {
    return false;
  }

  if (z < bounds[4] || z > bounds[5]) {
    return false;
  }

  return true;
}
function contains(bounds, otherBounds) {
  // if either box is not valid or they don't intersect
  if (!_intersects(bounds, otherBounds)) {
    return false;
  }

  if (!_containsPoint.apply(void 0, [bounds].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__["default"])(_getMinPoint(otherBounds))))) {
    return false;
  }

  if (!_containsPoint.apply(void 0, [bounds].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__["default"])(_getMaxPoint(otherBounds))))) {
    return false;
  }

  return true;
}
/**
 * Returns true if plane intersects bounding box.
 * If so, the box is cut by the plane
 * @param {array} origin
 * @param {array} normal
 */

function _cutWithPlane(bounds, origin, normal) {
  // Index[0..2] represents the order of traversing the corners of a cube
  // in (x,y,z), (y,x,z) and (z,x,y) ordering, respectively
  var index = [[0, 1, 2, 3, 4, 5, 6, 7], [0, 1, 4, 5, 2, 3, 6, 7], [0, 2, 4, 6, 1, 3, 5, 7]]; // stores the signed distance to a plane

  var d = [0, 0, 0, 0, 0, 0, 0, 0];
  var idx = 0;

  for (var ix = 0; ix < 2; ix++) {
    for (var iy = 2; iy < 4; iy++) {
      for (var iz = 4; iz < 6; iz++) {
        var x = [bounds[ix], bounds[iy], bounds[iz]];
        d[idx++] = _Plane_js__WEBPACK_IMPORTED_MODULE_6__["default"].evaluate(normal, origin, x);
      }
    }
  }

  var dir = 2;

  while (dir--) {
    // in each direction, we test if the vertices of two orthogonal faces
    // are on either side of the plane
    if (oppositeSign(d[index[dir][0]], d[index[dir][4]]) && oppositeSign(d[index[dir][1]], d[index[dir][5]]) && oppositeSign(d[index[dir][2]], d[index[dir][6]]) && oppositeSign(d[index[dir][3]], d[index[dir][7]])) {
      break;
    }
  }

  if (dir < 0) {
    return false;
  }

  var sign = Math.sign(normal[dir]);
  var size = Math.abs((bounds[dir * 2 + 1] - bounds[dir * 2]) * normal[dir]);
  var t = sign > 0 ? 1 : 0;
  /* eslint-disable no-continue */

  for (var i = 0; i < 4; i++) {
    if (size === 0) {
      continue; // shouldn't happen
    }

    var ti = Math.abs(d[index[dir][i]]) / size;

    if (sign > 0 && ti < t) {
      t = ti;
    }

    if (sign < 0 && ti > t) {
      t = ti;
    }
  }
  /* eslint-enable no-continue */


  var bound = (1.0 - t) * bounds[dir * 2] + t * bounds[dir * 2 + 1];

  if (sign > 0) {
    bounds[dir * 2] = bound;
  } else {
    bounds[dir * 2 + 1] = bound;
  }

  return true;
} // ----------------------------------------------------------------------------

var BoundingBox = /*#__PURE__*/function () {
  function BoundingBox(refBounds) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__["default"])(this, BoundingBox);

    this.bounds = refBounds;

    if (!this.bounds) {
      this.bounds = new Float64Array(6);

      _setBounds(this.bounds, INIT_BOUNDS);
    }
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__["default"])(BoundingBox, [{
    key: "getBounds",
    value: function getBounds() {
      return this.bounds;
    }
  }, {
    key: "equals",
    value: function equals(otherBounds) {
      return _equals(this.bounds, otherBounds);
    }
  }, {
    key: "isValid",
    value: function isValid() {
      return _isValid(this.bounds);
    }
  }, {
    key: "setBounds",
    value: function setBounds(otherBounds) {
      return _setBounds(this.bounds, otherBounds);
    }
  }, {
    key: "reset",
    value: function reset() {
      return _reset(this.bounds);
    }
  }, {
    key: "addPoint",
    value: function addPoint() {
      for (var _len = arguments.length, xyz = new Array(_len), _key = 0; _key < _len; _key++) {
        xyz[_key] = arguments[_key];
      }

      return _addPoint(this.bounds, xyz);
    }
  }, {
    key: "addBounds",
    value: function addBounds(xMin, xMax, yMin, yMax, zMin, zMax) {
      return _addBounds(this.bounds, xMin, xMax, yMin, yMax, zMin, zMax);
    }
  }, {
    key: "setMinPoint",
    value: function setMinPoint(x, y, z) {
      return _setMinPoint(this.bounds, x, y, z);
    }
  }, {
    key: "setMaxPoint",
    value: function setMaxPoint(x, y, z) {
      return _setMaxPoint(this.bounds, x, y, z);
    }
  }, {
    key: "inflate",
    value: function inflate(delta) {
      return _inflate(this.bounds, delta);
    }
  }, {
    key: "scale",
    value: function scale(sx, sy, sz) {
      return _scale(this.bounds, sx, sy, sz);
    }
  }, {
    key: "getCenter",
    value: function getCenter() {
      return _getCenter(this.bounds);
    }
  }, {
    key: "getLength",
    value: function getLength(index) {
      return _getLength(this.bounds, index);
    }
  }, {
    key: "getLengths",
    value: function getLengths() {
      return _getLengths(this.bounds);
    }
  }, {
    key: "getMaxLength",
    value: function getMaxLength() {
      return _getMaxLength(this.bounds);
    }
  }, {
    key: "getDiagonalLength",
    value: function getDiagonalLength() {
      return _getDiagonalLength(this.bounds);
    }
  }, {
    key: "getMinPoint",
    value: function getMinPoint() {
      return _getMinPoint(this.bounds);
    }
  }, {
    key: "getMaxPoint",
    value: function getMaxPoint() {
      return _getMaxPoint(this.bounds);
    }
  }, {
    key: "getXRange",
    value: function getXRange() {
      return _getXRange(this.bounds);
    }
  }, {
    key: "getYRange",
    value: function getYRange() {
      return _getYRange(this.bounds);
    }
  }, {
    key: "getZRange",
    value: function getZRange() {
      return _getZRange(this.bounds);
    }
  }, {
    key: "getCorners",
    value: function getCorners(corners) {
      return _getCorners(this.bounds, corners);
    }
  }, {
    key: "computeCornerPoints",
    value: function computeCornerPoints(point1, point2) {
      return _computeCornerPoints(this.bounds, point1, point2);
    }
  }, {
    key: "computeLocalBounds",
    value: function computeLocalBounds(u, v, w) {
      return _computeLocalBounds(this.bounds, u, v, w);
    }
  }, {
    key: "computeScale3",
    value: function computeScale3(scale3) {
      return _computeScale(this.bounds, scale3);
    }
  }, {
    key: "cutWithPlane",
    value: function cutWithPlane(origin, normal) {
      return _cutWithPlane(this.bounds, origin, normal);
    }
  }, {
    key: "intersectBox",
    value: function intersectBox(origin, dir, coord, tolerance) {
      return _intersectBox(this.bounds, origin, dir, coord, tolerance);
    }
  }, {
    key: "intersectPlane",
    value: function intersectPlane(origin, normal) {
      return _intersectPlane(this.bounds, origin, normal);
    }
  }, {
    key: "intersect",
    value: function intersect(otherBounds) {
      return _intersect(this.bounds, otherBounds);
    }
  }, {
    key: "intersects",
    value: function intersects(otherBounds) {
      return _intersects(this.bounds, otherBounds);
    }
  }, {
    key: "containsPoint",
    value: function containsPoint(x, y, z) {
      return _containsPoint(this.bounds, x, y, z);
    }
  }, {
    key: "contains",
    value: function contains(otherBounds) {
      return _intersects(this.bounds, otherBounds);
    }
  }]);

  return BoundingBox;
}();

function newInstance(initialValues) {
  var bounds = initialValues && initialValues.bounds;
  return new BoundingBox(bounds);
} // ----------------------------------------------------------------------------
// Static API
// ----------------------------------------------------------------------------


var STATIC = {
  equals: _equals,
  isValid: _isValid,
  setBounds: _setBounds,
  reset: _reset,
  addPoint: _addPoint,
  addBounds: _addBounds,
  setMinPoint: _setMinPoint,
  setMaxPoint: _setMaxPoint,
  inflate: _inflate,
  scale: _scale,
  getCenter: _getCenter,
  getLength: _getLength,
  getLengths: _getLengths,
  getMaxLength: _getMaxLength,
  getDiagonalLength: _getDiagonalLength,
  getMinPoint: _getMinPoint,
  getMaxPoint: _getMaxPoint,
  getXRange: _getXRange,
  getYRange: _getYRange,
  getZRange: _getZRange,
  getCorners: _getCorners,
  computeCornerPoints: _computeCornerPoints,
  computeLocalBounds: _computeLocalBounds,
  computeScale3: _computeScale,
  cutWithPlane: _cutWithPlane,
  intersectBox: _intersectBox,
  intersectPlane: _intersectPlane,
  intersect: _intersect,
  intersects: _intersects,
  containsPoint: _containsPoint,
  contains: contains,
  INIT_BOUNDS: INIT_BOUNDS
};
var vtkBoundingBox = _objectSpread({
  newInstance: newInstance
}, STATIC);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/DataModel/Cell.js":
/*!***************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/DataModel/Cell.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkCell$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");
/* harmony import */ var _Core_Points_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Core/Points.js */ "./node_modules/@kitware/vtk.js/Common/Core/Points.js");




// vtkCell methods
// ----------------------------------------------------------------------------

function vtkCell(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkCell');

  publicAPI.initialize = function (points) {
    var pointIdsList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    if (!pointIdsList) {
      model.points = points;
      model.pointsIds = new Array(points.getNumberOfPoints());

      for (var i = points.getNumberOfPoints() - 1; i >= 0; --i) {
        model.pointsIds[i] = i;
      }
    } else {
      model.pointsIds = pointIdsList;
      var triangleData = model.points.getData();

      if (triangleData.length !== 3 * model.pointsIds.length) {
        triangleData = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newTypedArray(points.getDataType(), 3 * model.pointsIds.length);
      }

      var pointsData = points.getData();
      model.pointsIds.forEach(function (pointId, index) {
        // const start = 3 * pointId;
        // pointsData.set(p.subarray(start, start + 3), 3 * index);
        var pointOffset = 3 * pointId;
        var trianglePointOffset = 3 * index;
        triangleData[trianglePointOffset] = pointsData[pointOffset];
        triangleData[++trianglePointOffset] = pointsData[++pointOffset];
        triangleData[++trianglePointOffset] = pointsData[++pointOffset];
      });
      model.points.setData(triangleData);
    }
  };

  publicAPI.getBounds = function () {
    var nbPoints = model.points.getNumberOfPoints();
    var x = [];

    if (nbPoints) {
      model.points.getPoint(0, x);
      model.bounds[0] = x[0];
      model.bounds[1] = x[0];
      model.bounds[2] = x[1];
      model.bounds[3] = x[1];
      model.bounds[4] = x[2];
      model.bounds[5] = x[2];

      for (var i = 1; i < nbPoints; i++) {
        model.points.getPoint(i, x);
        model.bounds[0] = x[0] < model.bounds[0] ? x[0] : model.bounds[0];
        model.bounds[1] = x[0] > model.bounds[1] ? x[0] : model.bounds[1];
        model.bounds[2] = x[1] < model.bounds[2] ? x[1] : model.bounds[2];
        model.bounds[3] = x[1] > model.bounds[3] ? x[1] : model.bounds[3];
        model.bounds[4] = x[2] < model.bounds[4] ? x[2] : model.bounds[4];
        model.bounds[5] = x[2] > model.bounds[5] ? x[2] : model.bounds[5];
      }
    } else {
      (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__.u)(model.bounds);
    }

    return model.bounds;
  };

  publicAPI.getLength2 = function () {
    publicAPI.getBounds();
    var length = 0.0;
    var diff = 0;

    for (var i = 0; i < 3; i++) {
      diff = model.bounds[2 * i + 1] - model.bounds[2 * i];
      length += diff * diff;
    }

    return length;
  };

  publicAPI.getParametricDistance = function (pcoords) {
    var pDist;
    var pDistMax = 0.0;

    for (var i = 0; i < 3; i++) {
      if (pcoords[i] < 0.0) {
        pDist = -pcoords[i];
      } else if (pcoords[i] > 1.0) {
        pDist = pcoords[i] - 1.0;
      } else {
        // inside the cell in the parametric direction
        pDist = 0.0;
      }

      if (pDist > pDistMax) {
        pDistMax = pDist;
      }
    }

    return pDistMax;
  };

  publicAPI.getNumberOfPoints = function () {
    return model.points.getNumberOfPoints();
  };

  publicAPI.deepCopy = function (cell) {
    cell.initialize(model.points, model.pointsIds);
  };

  publicAPI.getCellDimension = function () {}; // virtual


  publicAPI.intersectWithLine = function (p1, p2, tol, t, x, pcoords, subId) {}; // virtual


  publicAPI.evaluatePosition = function (x, closestPoint, subId, pcoords, dist2, weights) {}; // virtual

} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  bounds: [-1, -1, -1, -1, -1, -1],
  pointsIds: []
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);

  if (!model.points) {
    model.points = _Core_Points_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance();
  }

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].get(publicAPI, model, ['points', 'pointsIds']);
  vtkCell(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkCell'); // ----------------------------------------------------------------------------

var vtkCell$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/DataModel/CellLinks.js":
/*!********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/DataModel/CellLinks.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InitLink": () => (/* binding */ InitLink),
/* harmony export */   "default": () => (/* binding */ vtkCellLinks$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Cell_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Cell.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/Cell.js");




// Global methods
// ----------------------------------------------------------------------------

var InitLink = {
  ncells: 0,
  cells: null
};

function resize(model, sz) {
  var newSize = sz;

  if (sz >= model.array.length) {
    newSize += model.array.length;
  }

  while (newSize > model.array.length) {
    model.array.push({
      ncells: 0,
      cells: null
    });
  }

  model.array.length = newSize;
} // ----------------------------------------------------------------------------
// vtkCellLinks methods
// ----------------------------------------------------------------------------


function vtkCellLinks(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkCellLinks');
  /**
   * Build the link list array. All subclasses of vtkAbstractCellLinks
   * must support this method.
   */

  publicAPI.buildLinks = function (data) {
    var numPts = data.getPoints().getNumberOfPoints();
    var numCells = data.getNumberOfCells(); // fill out lists with number of references to cells

    var linkLoc = new Uint32Array(numPts); // Use fast path if polydata

    if (data.isA('vtkPolyData')) {
      // traverse data to determine number of uses of each point
      for (var cellId = 0; cellId < numCells; ++cellId) {
        var _data$getCellPoints = data.getCellPoints(cellId),
            cellPointIds = _data$getCellPoints.cellPointIds;

        cellPointIds.forEach(function (cellPointId) {
          publicAPI.incrementLinkCount(cellPointId);
        });
      } // now allocate storage for the links


      publicAPI.allocateLinks(numPts);
      model.maxId = numPts - 1;

      var _loop = function _loop(_cellId) {
        var _data$getCellPoints2 = data.getCellPoints(_cellId),
            cellPointIds = _data$getCellPoints2.cellPointIds;

        cellPointIds.forEach(function (cellPointId) {
          publicAPI.insertCellReference(cellPointId, linkLoc[cellPointId]++, _cellId);
        });
      };

      for (var _cellId = 0; _cellId < numCells; ++_cellId) {
        _loop(_cellId);
      }
    } // any other type of dataset
    else {
      // traverse data to determine number of uses of each point
      for (var _cellId2 = 0; _cellId2 < numCells; _cellId2++) {
        // TODO: Currently not supported: const cell = data.getCell(cellId);
        var cell = _Cell_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance();
        cell.getPointsIds().forEach(function (cellPointId) {
          publicAPI.incrementLinkCount(cellPointId);
        });
      } // now allocate storage for the links


      publicAPI.allocateLinks(numPts);
      model.maxId = numPts - 1;

      var _loop2 = function _loop2(_cellId3) {
        // TODO: Currently not supported: const cell = data.getCell(cellId);
        var cell = _Cell_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance();
        cell.getPointsIds().forEach(function (cellPointId) {
          publicAPI.insertCellReference(cellPointId, linkLoc[cellPointId]++, _cellId3);
        });
      };

      for (var _cellId3 = 0; _cellId3 < numCells; ++_cellId3) {
        _loop2(_cellId3);
      }
    } // end else

  };
  /**
   * Build the link list array with a provided connectivity array.
   */
  // publicAPI.buildLinks = (data, connectivity) => {};

  /**
   * Allocate the specified number of links (i.e., number of points) that
   * will be built.
   */


  publicAPI.allocate = function (numLinks) {
    var ext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
    model.array = Array(numLinks).fill().map(function () {
      return {
        ncells: 0,
        cells: null
      };
    });
    model.extend = ext;
    model.maxId = -1;
  };

  publicAPI.initialize = function () {
    model.array = null;
  };
  /**
   * Get a link structure given a point id.
   */


  publicAPI.getLink = function (ptId) {
    return model.array[ptId];
  };
  /**
   * Get the number of cells using the point specified by ptId.
   */


  publicAPI.getNcells = function (ptId) {
    return model.array[ptId].ncells;
  };
  /**
   * Return a list of cell ids using the point.
   */


  publicAPI.getCells = function (ptId) {
    return model.array[ptId].cells;
  };
  /**
   * Insert a new point into the cell-links data structure. The size parameter
   * is the initial size of the list.
   */


  publicAPI.insertNextPoint = function (numLinks) {
    model.array.push({
      ncells: numLinks,
      cells: Array(numLinks)
    });
    ++model.maxId;
  };
  /**
   * Insert a cell id into the list of cells (at the end) using the cell id
   * provided. (Make sure to extend the link list (if necessary) using the
   * method resizeCellList().)
   */


  publicAPI.insertNextCellReference = function (ptId, cellId) {
    model.array[ptId].cells[model.array[ptId].ncells++] = cellId;
  };
  /**
   * Delete point (and storage) by destroying links to using cells.
   */


  publicAPI.deletePoint = function (ptId) {
    model.array[ptId].ncells = 0;
    model.array[ptId].cells = null;
  };
  /**
   * Delete the reference to the cell (cellId) from the point (ptId). This
   * removes the reference to the cellId from the cell list, but does not
   * resize the list (recover memory with resizeCellList(), if necessary).
   */


  publicAPI.removeCellReference = function (cellId, ptId) {
    model.array[ptId].cells = model.array[ptId].cells.filter(function (cell) {
      return cell !== cellId;
    });
    model.array[ptId].ncells = model.array[ptId].cells.length;
  };
  /**
   * Add the reference to the cell (cellId) from the point (ptId). This
   * adds a reference to the cellId from the cell list, but does not resize
   * the list (extend memory with resizeCellList(), if necessary).
   */


  publicAPI.addCellReference = function (cellId, ptId) {
    model.array[ptId].cells[model.array[ptId].ncells++] = cellId;
  };
  /**
   * Change the length of a point's link list (i.e., list of cells using a
   * point) by the size specified.
   */


  publicAPI.resizeCellList = function (ptId, size) {
    model.array[ptId].cells.length = size;
  };
  /**
   * Reclaim any unused memory.
   */


  publicAPI.squeeze = function () {
    resize(model, model.maxId + 1);
  };
  /**
   * Reset to a state of no entries without freeing the memory.
   */


  publicAPI.reset = function () {
    model.maxId = -1;
  };
  /**
   * Standard DeepCopy method.  Since this object contains no reference
   * to other objects, there is no ShallowCopy.
   */


  publicAPI.deepCopy = function (src) {
    model.array = (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(src.array);
    model.extend = src.extend;
    model.maxId = src.maxId;
  };
  /**
   * Increment the count of the number of cells using the point.
   */


  publicAPI.incrementLinkCount = function (ptId) {
    ++model.array[ptId].ncells;
  };

  publicAPI.allocateLinks = function (n) {
    for (var i = 0; i < n; ++i) {
      model.array[i].cells = new Array(model.array[i].ncells);
    }
  };
  /**
   * Insert a cell id into the list of cells using the point.
   */


  publicAPI.insertCellReference = function (ptId, pos, cellId) {
    model.array[ptId].cells[pos] = cellId;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  array: null,
  // pointer to data
  maxId: 0,
  // maximum index inserted thus far
  extend: 0 // grow array by this point

}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].obj(publicAPI, model);
  vtkCellLinks(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkCellLinks'); // ----------------------------------------------------------------------------

var vtkCellLinks$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/DataModel/CellTypes.js":
/*!********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/DataModel/CellTypes.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "STATIC": () => (/* binding */ STATIC),
/* harmony export */   "default": () => (/* binding */ vtkCellTypes$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CellTypes/Constants.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/CellTypes/Constants.js");




function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
// Global methods
// ----------------------------------------------------------------------------

/**
 * Given an int (as defined in vtkCellType.h) identifier for a class
 * return it's classname.
 */

function getClassNameFromTypeId(typeId) {
  return typeId < _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_2__.CellTypesStrings.length ? _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_2__.CellTypesStrings[typeId] : 'UnknownClass';
}
/**
 * Given a data object classname, return it's int identified (as
 * defined in vtkCellType.h)
 */


function getTypeIdFromClassName(cellTypeString) {
  return _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_2__.CellTypesStrings.findIndex(cellTypeString);
}
/**
 * This convenience method is a fast check to determine if a cell type
 * represents a linear or nonlinear cell.  This is generally much more
 * efficient than getting the appropriate vtkCell and checking its IsLinear
 * method.
 */


function isLinear(type) {
  return type < _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_2__.CellType.VTK_QUADRATIC_EDGE || type === _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_2__.CellType.VTK_CONVEX_POINT_SET || type === _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_2__.CellType.VTK_POLYHEDRON;
} // ----------------------------------------------------------------------------
// Static API
// ----------------------------------------------------------------------------


var STATIC = {
  getClassNameFromTypeId: getClassNameFromTypeId,
  getTypeIdFromClassName: getTypeIdFromClassName,
  isLinear: isLinear
}; // ----------------------------------------------------------------------------
// vtkCellTypes methods
// ----------------------------------------------------------------------------

function vtkCellTypes(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkCellTypes');
  /**
   * Allocate memory for this array. Delete old storage only if necessary.
   */

  publicAPI.allocate = function () {
    var sz = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 512;
    var ext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1000;
    model.size = sz > 0 ? sz : 1;
    model.extend = ext > 0 ? ext : 1;
    model.maxId = -1;
    model.typeArray = new Uint8Array(sz);
    model.locationArray = new Uint32Array(sz);
  };
  /**
   * Add a cell at specified id.
   */


  publicAPI.insertCell = function (cellId, type, loc) {
    model.typeArray[cellId] = type;
    model.locationArray[cellId] = loc;

    if (cellId > model.maxId) {
      model.maxId = cellId;
    }
  };
  /**
   * Add a cell to the object in the next available slot.
   */


  publicAPI.insertNextCell = function (type, loc) {
    publicAPI.insertCell(++model.maxId, type, loc);
    return model.maxId;
  };
  /**
   * Specify a group of cell types. This version is provided to maintain
   * backwards compatibility and does a copy of the cellLocations
   */


  publicAPI.setCellTypes = function (ncells, cellTypes, cellLocations) {
    model.size = ncells;
    model.typeArray = cellTypes;
    model.locationArray = cellLocations;
    model.maxId = ncells - 1;
  };
  /**
   * Return the location of the cell in the associated vtkCellArray.
   */


  publicAPI.getCellLocation = function (cellId) {
    return model.locationArray[cellId];
  };
  /**
   * Delete cell by setting to nullptr cell type.
   */


  publicAPI.deleteCell = function (cellId) {
    model.typeArray[cellId] = _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_2__.CellType.VTK_EMPTY_CELL;
  };
  /**
   * Return the number of types in the list.
   */


  publicAPI.getNumberOfTypes = function () {
    return model.maxId + 1;
  };
  /**
   * Return true if type specified is contained in list; false otherwise.
   */


  publicAPI.isType = function (type) {
    var numTypes = publicAPI.getNumberOfTypes();

    for (var i = 0; i < numTypes; ++i) {
      if (type === publicAPI.getCellType(i)) {
        return true;
      }
    }

    return false;
  };
  /**
   * Add the type specified to the end of the list. Range checking is performed.
   */


  publicAPI.insertNextType = function (type) {
    return publicAPI.insertNextCell(type, -1);
  };
  /**
   * Return the type of cell.
   */


  publicAPI.getCellType = function (cellId) {
    return model.typeArray[cellId];
  };
  /**
   * Reclaim any extra memory.
   */
  // TODO: publicAPI.squeeze = () =>  {};

  /**
   * Initialize object without releasing memory.
   */


  publicAPI.reset = function () {
    model.maxId = -1;
  };
  /**
   * Standard DeepCopy method.  Since this object contains no reference
   * to other objects, there is no ShallowCopy.
   */


  publicAPI.deepCopy = function (src) {
    publicAPI.allocate(src.getSize(), src.getExtend());
    model.typeArray.set(src.getTypeArray());
    model.locationArray.set(src.getLocationArray());
    model.maxId = src.getMaxId();
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  // typeArray: null, // pointer to types array
  // locationArray: null;   // pointer to array of offsets
  size: 0,
  // allocated size of data
  maxId: -1,
  // maximum index inserted thus far
  extend: 1000 // grow array by this point

}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].get(publicAPI, model, ['size', 'maxId', 'extend']);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].getArray(publicAPI, model, ['typeArray', 'locationArray']);
  vtkCellTypes(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkCellTypes'); // ----------------------------------------------------------------------------

var vtkCellTypes$1 = _objectSpread({
  newInstance: newInstance,
  extend: extend
}, STATIC);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/DataModel/CellTypes/Constants.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/DataModel/CellTypes/Constants.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CellType": () => (/* binding */ CellType),
/* harmony export */   "CellTypesStrings": () => (/* binding */ CellTypesStrings),
/* harmony export */   "default": () => (/* binding */ Constants)
/* harmony export */ });
var CellType = {
  // Linear cells
  VTK_EMPTY_CELL: 0,
  VTK_VERTEX: 1,
  VTK_POLY_VERTEX: 2,
  VTK_LINE: 3,
  VTK_POLY_LINE: 4,
  VTK_TRIANGLE: 5,
  VTK_TRIANGLE_STRIP: 6,
  VTK_POLYGON: 7,
  VTK_PIXEL: 8,
  VTK_QUAD: 9,
  VTK_TETRA: 10,
  VTK_VOXEL: 11,
  VTK_HEXAHEDRON: 12,
  VTK_WEDGE: 13,
  VTK_PYRAMID: 14,
  VTK_PENTAGONAL_PRISM: 15,
  VTK_HEXAGONAL_PRISM: 16,
  // Quadratic, isoparametric cells
  VTK_QUADRATIC_EDGE: 21,
  VTK_QUADRATIC_TRIANGLE: 22,
  VTK_QUADRATIC_QUAD: 23,
  VTK_QUADRATIC_POLYGON: 36,
  VTK_QUADRATIC_TETRA: 24,
  VTK_QUADRATIC_HEXAHEDRON: 25,
  VTK_QUADRATIC_WEDGE: 26,
  VTK_QUADRATIC_PYRAMID: 27,
  VTK_BIQUADRATIC_QUAD: 28,
  VTK_TRIQUADRATIC_HEXAHEDRON: 29,
  VTK_QUADRATIC_LINEAR_QUAD: 30,
  VTK_QUADRATIC_LINEAR_WEDGE: 31,
  VTK_BIQUADRATIC_QUADRATIC_WEDGE: 32,
  VTK_BIQUADRATIC_QUADRATIC_HEXAHEDRON: 33,
  VTK_BIQUADRATIC_TRIANGLE: 34,
  // Cubic, isoparametric cell
  VTK_CUBIC_LINE: 35,
  // Special class of cells formed by convex group of points
  VTK_CONVEX_POINT_SET: 41,
  // Polyhedron cell (consisting of polygonal faces)
  VTK_POLYHEDRON: 42,
  // Higher order cells in parametric form
  VTK_PARAMETRIC_CURVE: 51,
  VTK_PARAMETRIC_SURFACE: 52,
  VTK_PARAMETRIC_TRI_SURFACE: 53,
  VTK_PARAMETRIC_QUAD_SURFACE: 54,
  VTK_PARAMETRIC_TETRA_REGION: 55,
  VTK_PARAMETRIC_HEX_REGION: 56,
  // Higher order cells
  VTK_HIGHER_ORDER_EDGE: 60,
  VTK_HIGHER_ORDER_TRIANGLE: 61,
  VTK_HIGHER_ORDER_QUAD: 62,
  VTK_HIGHER_ORDER_POLYGON: 63,
  VTK_HIGHER_ORDER_TETRAHEDRON: 64,
  VTK_HIGHER_ORDER_WEDGE: 65,
  VTK_HIGHER_ORDER_PYRAMID: 66,
  VTK_HIGHER_ORDER_HEXAHEDRON: 67,
  // Arbitrary order Lagrange elements (formulated separated from generic higher order cells)
  VTK_LAGRANGE_CURVE: 68,
  VTK_LAGRANGE_TRIANGLE: 69,
  VTK_LAGRANGE_QUADRILATERAL: 70,
  VTK_LAGRANGE_TETRAHEDRON: 71,
  VTK_LAGRANGE_HEXAHEDRON: 72,
  VTK_LAGRANGE_WEDGE: 73,
  VTK_LAGRANGE_PYRAMID: 74,
  VTK_NUMBER_OF_CELL_TYPES: 75
}; // This list should contain the cell class names in
// the same order as in CellType.

var CellTypesStrings = ['vtkEmptyCell', 'vtkVertex', 'vtkPolyVertex', 'vtkLine', 'vtkPolyLine', 'vtkTriangle', 'vtkTriangleStrip', 'vtkPolygon', 'vtkPixel', 'vtkQuad', 'vtkTetra', 'vtkVoxel', 'vtkHexahedron', 'vtkWedge', 'vtkPyramid', 'vtkPentagonalPrism', 'vtkHexagonalPrism', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'vtkQuadraticEdge', 'vtkQuadraticTriangle', 'vtkQuadraticQuad', 'vtkQuadraticTetra', 'vtkQuadraticHexahedron', 'vtkQuadraticWedge', 'vtkQuadraticPyramid', 'vtkBiQuadraticQuad', 'vtkTriQuadraticHexahedron', 'vtkQuadraticLinearQuad', 'vtkQuadraticLinearWedge', 'vtkBiQuadraticQuadraticWedge', 'vtkBiQuadraticQuadraticHexahedron', 'vtkBiQuadraticTriangle', 'vtkCubicLine', 'vtkQuadraticPolygon', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'vtkConvexPointSet', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'vtkParametricCurve', 'vtkParametricSurface', 'vtkParametricTriSurface', 'vtkParametricQuadSurface', 'vtkParametricTetraRegion', 'vtkParametricHexRegion', 'UnknownClass', 'UnknownClass', 'UnknownClass', 'vtkHigherOrderEdge', 'vtkHigherOrderTriangle', 'vtkHigherOrderQuad', 'vtkHigherOrderPolygon', 'vtkHigherOrderTetrahedron', 'vtkHigherOrderWedge', 'vtkHigherOrderPyramid', 'vtkHigherOrderHexahedron'];
var Constants = {
  CellType: CellType,
  CellTypesStrings: CellTypesStrings
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/DataModel/DataSet.js":
/*!******************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/DataModel/DataSet.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkDataSet$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _vtk_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../vtk.js */ "./node_modules/@kitware/vtk.js/vtk.js");
/* harmony import */ var _DataSetAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DataSetAttributes.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/DataSetAttributes.js");
/* harmony import */ var _DataSet_Constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DataSet/Constants.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/DataSet/Constants.js");






function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
// import * as vtkMath from '../../Core/Math';
//
// function getBounds(dataset) {
//   if (dataset.bounds) {
//     return dataset.bounds;
//   }
//   if (dataset.type && dataset[dataset.type]) {
//     const ds = dataset[dataset.type];
//     if (ds.bounds) {
//       return ds.bounds;
//     }
//     if (ds.Points && ds.Points.bounds) {
//       return ds.Points.bounds;
//     }
//     if (ds.Points && ds.Points.values) {
//       const array = ds.Points.values;
//       const bbox = [...vtkBoundingBox.INIT_BOUNDS];
//       const size = array.length;
//       const delta = ds.Points.numberOfComponents ? ds.Points.numberOfComponents : 3;
//       for (let idx = 0; idx < size; idx += delta) {
//         vtkBoundingBox.addPoint(bbox, array[idx * delta], array[(idx * delta) + 1], array[(idx * delta) + 2]);
//       }
//       ds.Points.bounds = bbox;
//       return ds.Points.bounds;
//     }
//   }
//   return vtkMath.createUninitializedBounds();
// }
// ----------------------------------------------------------------------------
// Global methods
// ----------------------------------------------------------------------------

var DATASET_FIELDS = ['pointData', 'cellData', 'fieldData']; // ----------------------------------------------------------------------------
// vtkDataSet methods
// ----------------------------------------------------------------------------

function vtkDataSet(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkDataSet'); // Add dataset attributes

  DATASET_FIELDS.forEach(function (fieldName) {
    if (!model[fieldName]) {
      model[fieldName] = _DataSetAttributes_js__WEBPACK_IMPORTED_MODULE_3__["default"].newInstance();
    } else {
      model[fieldName] = (0,_vtk_js__WEBPACK_IMPORTED_MODULE_2__["default"])(model[fieldName]);
    }
  });
  var superShallowCopy = publicAPI.shallowCopy;

  publicAPI.shallowCopy = function (other) {
    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    superShallowCopy(other, debug);
    DATASET_FIELDS.forEach(function (fieldName) {
      model[fieldName] = _DataSetAttributes_js__WEBPACK_IMPORTED_MODULE_3__["default"].newInstance();
      model[fieldName].shallowCopy(other.getReferenceByName(fieldName));
    });
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {// pointData: null,
  // cellData: null,
  // fieldData: null,
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods

  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGet(publicAPI, model, DATASET_FIELDS); // Object specific methods

  vtkDataSet(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkDataSet'); // ----------------------------------------------------------------------------

var vtkDataSet$1 = _objectSpread({
  newInstance: newInstance,
  extend: extend
}, _DataSet_Constants_js__WEBPACK_IMPORTED_MODULE_4__["default"]);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/DataModel/DataSet/Constants.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/DataModel/DataSet/Constants.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FieldAssociations": () => (/* binding */ FieldAssociations),
/* harmony export */   "FieldDataTypes": () => (/* binding */ FieldDataTypes),
/* harmony export */   "default": () => (/* binding */ Constants)
/* harmony export */ });
// Specify how data arrays can be used by data objects
var FieldDataTypes = {
  UNIFORM: 0,
  // data that does not vary over points/cells/etc.
  DATA_OBJECT_FIELD: 0,
  // to match VTK
  COORDINATE: 1,
  // data that specifies the location of each point
  POINT_DATA: 1,
  // to match VTK
  POINT: 2,
  // data defined at each point, but that does not specify the point location
  POINT_FIELD_DATA: 2,
  // to match VTK
  CELL: 3,
  // data defined at each cell, but that does not specify the cell
  CELL_FIELD_DATA: 3,
  // to match VTK
  VERTEX: 4,
  // data defined at each graph vertex, but that does not specify the graph vertex
  VERTEX_FIELD_DATA: 4,
  // to match VTK
  EDGE: 5,
  // data defined at each graph edge, but that does not specify the graph edge
  EDGE_FIELD_DATA: 5,
  // to match VTK
  ROW: 6,
  // data specifying a table row
  ROW_DATA: 6 // to match VTK

};
var FieldAssociations = {
  FIELD_ASSOCIATION_POINTS: 0,
  FIELD_ASSOCIATION_CELLS: 1,
  FIELD_ASSOCIATION_NONE: 2,
  FIELD_ASSOCIATION_POINTS_THEN_CELLS: 3,
  FIELD_ASSOCIATION_VERTICES: 4,
  FIELD_ASSOCIATION_EDGES: 5,
  FIELD_ASSOCIATION_ROWS: 6,
  NUMBER_OF_ASSOCIATIONS: 7
};
var Constants = {
  FieldDataTypes: FieldDataTypes,
  FieldAssociations: FieldAssociations
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/DataModel/DataSetAttributes.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/DataModel/DataSetAttributes.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkDataSetAttributes$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _DataSetAttributes_FieldData_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DataSetAttributes/FieldData.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/DataSetAttributes/FieldData.js");
/* harmony import */ var _DataSetAttributes_Constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./DataSetAttributes/Constants.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/DataSetAttributes/Constants.js");
/* harmony import */ var _Core_DataArray_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Core/DataArray.js */ "./node_modules/@kitware/vtk.js/Common/Core/DataArray.js");






function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var AttributeTypes = _DataSetAttributes_Constants_js__WEBPACK_IMPORTED_MODULE_3__["default"].AttributeTypes,
    AttributeCopyOperations = _DataSetAttributes_Constants_js__WEBPACK_IMPORTED_MODULE_3__["default"].AttributeCopyOperations;
var vtkWarningMacro = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].vtkWarningMacro; // ----------------------------------------------------------------------------
// vtkDataSetAttributes methods
// ----------------------------------------------------------------------------

function vtkDataSetAttributes(publicAPI, model) {
  var attrTypes = ['Scalars', 'Vectors', 'Normals', 'TCoords', 'Tensors', 'GlobalIds', 'PedigreeIds'];

  function cleanAttributeType(attType) {
    // Given an integer or string, convert the result to one of the
    // strings in the "attrTypes" array above or null (if
    // no match is found)
    var cleanAttType = attrTypes.find(function (ee) {
      return AttributeTypes[ee.toUpperCase()] === attType || typeof attType !== 'number' && ee.toLowerCase() === attType.toLowerCase();
    });

    if (typeof cleanAttType === 'undefined') {
      cleanAttType = null;
    }

    return cleanAttType;
  } // Set our className


  model.classHierarchy.push('vtkDataSetAttributes');

  publicAPI.checkNumberOfComponents = function (x) {
    return true;
  }; // TODO


  publicAPI.setAttribute = function (arr, uncleanAttType) {
    var attType = cleanAttributeType(uncleanAttType);

    if (arr && attType.toUpperCase() === 'PEDIGREEIDS' && !arr.isA('vtkDataArray')) {
      vtkWarningMacro("Cannot set attribute ".concat(attType, ". The attribute must be a vtkDataArray."));
      return -1;
    }

    if (arr && !publicAPI.checkNumberOfComponents(arr, attType)) {
      vtkWarningMacro("Cannot set attribute ".concat(attType, ". Incorrect number of components."));
      return -1;
    }

    var currentAttribute = model["active".concat(attType)];

    if (currentAttribute >= 0 && currentAttribute < model.arrays.length) {
      if (model.arrays[currentAttribute] === arr) {
        return currentAttribute;
      }

      publicAPI.removeArrayByIndex(currentAttribute);
    }

    if (arr) {
      currentAttribute = publicAPI.addArray(arr);
      model["active".concat(attType)] = currentAttribute;
    } else {
      model["active".concat(attType)] = -1;
    }

    publicAPI.modified();
    return model["active".concat(attType)];
  };

  publicAPI.setActiveAttributeByName = function (arrayName, attType) {
    return publicAPI.setActiveAttributeByIndex(publicAPI.getArrayWithIndex(arrayName).index, attType);
  };

  publicAPI.setActiveAttributeByIndex = function (arrayIdx, uncleanAttType) {
    var attType = cleanAttributeType(uncleanAttType);

    if (arrayIdx >= 0 && arrayIdx < model.arrays.length) {
      if (attType.toUpperCase() !== 'PEDIGREEIDS') {
        var arr = publicAPI.getArrayByIndex(arrayIdx);

        if (!arr.isA('vtkDataArray')) {
          vtkWarningMacro("Cannot set attribute ".concat(attType, ". Only vtkDataArray subclasses can be set as active attributes."));
          return -1;
        }

        if (!publicAPI.checkNumberOfComponents(arr, attType)) {
          vtkWarningMacro("Cannot set attribute ".concat(attType, ". Incorrect number of components."));
          return -1;
        }
      }

      model["active".concat(attType)] = arrayIdx;
      publicAPI.modified();
      return arrayIdx;
    }

    if (arrayIdx === -1) {
      model["active".concat(attType)] = arrayIdx;
      publicAPI.modified();
    }

    return -1;
  };

  publicAPI.getActiveAttribute = function (attType) {
    // Given an integer enum value or a string (with random capitalization),
    // find the matching string in attrTypes.
    var cleanAttType = cleanAttributeType(attType);
    return publicAPI["get".concat(cleanAttType)]();
  }; // Override to allow proper handling of active attributes


  publicAPI.removeAllArrays = function () {
    model.arrays = [];
    attrTypes.forEach(function (attType) {
      model["active".concat(attType)] = -1;
    });
  }; // Override to allow proper handling of active attributes


  publicAPI.removeArray = function (arrayName) {
    model.arrays = model.arrays.filter(function (entry, idx) {
      if (arrayName === entry.data.getName()) {
        // Found the array to remove, but is it an active attribute?
        attrTypes.forEach(function (attType) {
          if (idx === model["active".concat(attType)]) {
            model["active".concat(attType)] = -1;
          }
        });
        return false;
      }

      return true;
    });
  }; // Override to allow proper handling of active attributes


  publicAPI.removeArrayByIndex = function (arrayIdx) {
    model.arrays = model.arrays.filter(function (entry, idx) {
      return idx !== arrayIdx;
    });
    attrTypes.forEach(function (attType) {
      if (arrayIdx === model["active".concat(attType)]) {
        model["active".concat(attType)] = -1;
      }
    });
  };

  attrTypes.forEach(function (value) {
    var activeVal = "active".concat(value);

    publicAPI["get".concat(value)] = function () {
      return publicAPI.getArrayByIndex(model[activeVal]);
    };

    publicAPI["set".concat(value)] = function (da) {
      return publicAPI.setAttribute(da, value);
    };

    publicAPI["setActive".concat(value)] = function (arrayName) {
      return publicAPI.setActiveAttributeByIndex(publicAPI.getArrayWithIndex(arrayName).index, value);
    };

    publicAPI["copy".concat(value, "Off")] = function () {
      var attType = value.toUpperCase();
      model.copyAttributeFlags[AttributeCopyOperations.PASSDATA][AttributeTypes[attType]] = false;
    };
  });

  publicAPI.initializeAttributeCopyFlags = function () {
    // Default to copying all attributes in every circumstance:
    model.copyAttributeFlags = [];
    Object.keys(AttributeCopyOperations).filter(function (op) {
      return op !== 'ALLCOPY';
    }).forEach(function (attCopyOp) {
      model.copyAttributeFlags[AttributeCopyOperations[attCopyOp]] = Object.keys(AttributeTypes).filter(function (ty) {
        return ty !== 'NUM_ATTRIBUTES';
      }).reduce(function (a, b) {
        a[AttributeTypes[b]] = true;
        return a;
      }, []);
    }); // Override some operations where we don't want to copy:

    model.copyAttributeFlags[AttributeCopyOperations.COPYTUPLE][AttributeTypes.GLOBALIDS] = false;
    model.copyAttributeFlags[AttributeCopyOperations.INTERPOLATE][AttributeTypes.GLOBALIDS] = false;
    model.copyAttributeFlags[AttributeCopyOperations.COPYTUPLE][AttributeTypes.PEDIGREEIDS] = false;
  };

  publicAPI.initialize = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].chain(publicAPI.initialize, publicAPI.initializeAttributeCopyFlags); // Process dataArrays if any

  if (model.dataArrays && Object.keys(model.dataArrays).length) {
    Object.keys(model.dataArrays).forEach(function (name) {
      if (!model.dataArrays[name].ref && model.dataArrays[name].type === 'vtkDataArray') {
        publicAPI.addArray(_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_4__["default"].newInstance(model.dataArrays[name]));
      }
    });
  }

  var superShallowCopy = publicAPI.shallowCopy;

  publicAPI.shallowCopy = function (other, debug) {
    superShallowCopy(other, debug);
    model.arrays = other.getArrays().map(function (arr) {
      var arrNew = arr.newClone();
      arrNew.shallowCopy(arr, debug);
      return {
        data: arrNew
      };
    });
  };

  publicAPI.initializeAttributeCopyFlags();
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  activeScalars: -1,
  activeVectors: -1,
  activeTensors: -1,
  activeNormals: -1,
  activeTCoords: -1,
  activeGlobalIds: -1,
  activePedigreeIds: -1
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods

  _DataSetAttributes_FieldData_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(publicAPI, model, initialValues);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGet(publicAPI, model, ['activeScalars', 'activeNormals', 'activeTCoords', 'activeVectors', 'activeTensors', 'activeGlobalIds', 'activePedigreeIds']);

  if (!model.arrays) {
    model.arrays = {};
  } // Object specific methods


  vtkDataSetAttributes(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkDataSetAttributes'); // ----------------------------------------------------------------------------

var vtkDataSetAttributes$1 = _objectSpread({
  newInstance: newInstance,
  extend: extend
}, _DataSetAttributes_Constants_js__WEBPACK_IMPORTED_MODULE_3__["default"]);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/DataModel/DataSetAttributes/Constants.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/DataModel/DataSetAttributes/Constants.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AttributeCopyOperations": () => (/* binding */ AttributeCopyOperations),
/* harmony export */   "AttributeLimitTypes": () => (/* binding */ AttributeLimitTypes),
/* harmony export */   "AttributeTypes": () => (/* binding */ AttributeTypes),
/* harmony export */   "CellGhostTypes": () => (/* binding */ CellGhostTypes),
/* harmony export */   "DesiredOutputPrecision": () => (/* binding */ DesiredOutputPrecision),
/* harmony export */   "PointGhostTypes": () => (/* binding */ PointGhostTypes),
/* harmony export */   "default": () => (/* binding */ Constants),
/* harmony export */   "ghostArrayName": () => (/* binding */ ghostArrayName)
/* harmony export */ });
var AttributeTypes = {
  SCALARS: 0,
  VECTORS: 1,
  NORMALS: 2,
  TCOORDS: 3,
  TENSORS: 4,
  GLOBALIDS: 5,
  PEDIGREEIDS: 6,
  EDGEFLAG: 7,
  NUM_ATTRIBUTES: 8
};
var AttributeLimitTypes = {
  MAX: 0,
  EXACT: 1,
  NOLIMIT: 2
};
var CellGhostTypes = {
  DUPLICATECELL: 1,
  // the cell is present on multiple processors
  HIGHCONNECTIVITYCELL: 2,
  // the cell has more neighbors than in a regular mesh
  LOWCONNECTIVITYCELL: 4,
  // the cell has less neighbors than in a regular mesh
  REFINEDCELL: 8,
  // other cells are present that refines it.
  EXTERIORCELL: 16,
  // the cell is on the exterior of the data set
  HIDDENCELL: 32 // the cell is needed to maintain connectivity, but the data values should be ignored.

};
var PointGhostTypes = {
  DUPLICATEPOINT: 1,
  // the cell is present on multiple processors
  HIDDENPOINT: 2 // the point is needed to maintain connectivity, but the data values should be ignored.

};
var AttributeCopyOperations = {
  COPYTUPLE: 0,
  INTERPOLATE: 1,
  PASSDATA: 2,
  ALLCOPY: 3 // all of the above

};
var ghostArrayName = 'vtkGhostType';
var DesiredOutputPrecision = {
  DEFAULT: 0,
  // use the point type that does not truncate any data
  SINGLE: 1,
  // use Float32Array
  DOUBLE: 2 // use Float64Array

};
var Constants = {
  AttributeCopyOperations: AttributeCopyOperations,
  AttributeLimitTypes: AttributeLimitTypes,
  AttributeTypes: AttributeTypes,
  CellGhostTypes: CellGhostTypes,
  DesiredOutputPrecision: DesiredOutputPrecision,
  PointGhostTypes: PointGhostTypes,
  ghostArrayName: ghostArrayName
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/DataModel/DataSetAttributes/FieldData.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/DataModel/DataSetAttributes/FieldData.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkFieldData$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _vtk_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../vtk.js */ "./node_modules/@kitware/vtk.js/vtk.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Core_DataArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Core/DataArray.js */ "./node_modules/@kitware/vtk.js/Common/Core/DataArray.js");




// vtkFieldData methods
// ----------------------------------------------------------------------------

function vtkFieldData(publicAPI, model) {
  model.classHierarchy.push('vtkFieldData');
  var superGetState = publicAPI.getState; // Decode serialized data if any

  if (model.arrays) {
    model.arrays = model.arrays.map(function (item) {
      return {
        data: (0,_vtk_js__WEBPACK_IMPORTED_MODULE_0__["default"])(item.data)
      };
    });
  }

  publicAPI.initialize = function () {
    publicAPI.initializeFields();
    publicAPI.copyAllOn();
    publicAPI.clearFieldFlags();
  };

  publicAPI.initializeFields = function () {
    model.arrays = [];
    model.copyFieldFlags = {};
    publicAPI.modified();
  };

  publicAPI.copyStructure = function (other) {
    publicAPI.initializeFields();
    model.copyFieldFlags = other.getCopyFieldFlags().map(function (x) {
      return x;
    }); // Deep-copy

    model.arrays = other.arrays().map(function (x) {
      return {
        array: x
      };
    }); // Deep-copy
    // TODO: Copy array information objects (once we support information objects)
  };

  publicAPI.getNumberOfArrays = function () {
    return model.arrays.length;
  };

  publicAPI.getNumberOfActiveArrays = function () {
    return model.arrays.length;
  };

  publicAPI.addArray = function (arr) {
    model.arrays = [].concat(model.arrays, {
      data: arr
    });
    return model.arrays.length - 1;
  };

  publicAPI.removeAllArrays = function () {
    model.arrays = [];
  };

  publicAPI.removeArray = function (arrayName) {
    model.arrays = model.arrays.filter(function (entry) {
      return arrayName !== entry.data.getName();
    });
  };

  publicAPI.removeArrayByIndex = function (arrayIdx) {
    model.arrays = model.arrays.filter(function (entry, idx) {
      return idx !== arrayIdx;
    });
  };

  publicAPI.getArrays = function () {
    return model.arrays.map(function (entry) {
      return entry.data;
    });
  };

  publicAPI.getArray = function (arraySpec) {
    return typeof arraySpec === 'number' ? publicAPI.getArrayByIndex(arraySpec) : publicAPI.getArrayByName(arraySpec);
  };

  publicAPI.getArrayByName = function (arrayName) {
    return model.arrays.reduce(function (a, b, i) {
      return b.data.getName() === arrayName ? b.data : a;
    }, null);
  };

  publicAPI.getArrayWithIndex = function (arrayName) {
    return model.arrays.reduce(function (a, b, i) {
      return b.data && b.data.getName() === arrayName ? {
        array: b.data,
        index: i
      } : a;
    }, {
      array: null,
      index: -1
    });
  };

  publicAPI.getArrayByIndex = function (idx) {
    return idx >= 0 && idx < model.arrays.length ? model.arrays[idx].data : null;
  };

  publicAPI.hasArray = function (arrayName) {
    return publicAPI.getArrayWithIndex(arrayName).index >= 0;
  };

  publicAPI.getArrayName = function (idx) {
    var arr = model.arrays[idx];
    return arr ? arr.data.getName() : '';
  };

  publicAPI.getCopyFieldFlags = function () {
    return model.copyFieldFlags;
  };

  publicAPI.getFlag = function (arrayName) {
    return model.copyFieldFlags[arrayName];
  };

  publicAPI.passData = function (other) {
    var fromId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
    var toId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
    other.getArrays().forEach(function (arr) {
      var copyFlag = publicAPI.getFlag(arr.getName());

      if (copyFlag !== false && !(model.doCopyAllOff && copyFlag !== true) && arr) {
        var destArr = publicAPI.getArrayByName(arr.getName());

        if (!destArr) {
          if (fromId < 0 || fromId > arr.getNumberOfTuples()) {
            publicAPI.addArray(arr);
          } else {
            var ncomps = arr.getNumberOfComponents();
            var newSize = arr.getNumberOfValues();
            var tId = toId > -1 ? toId : fromId;

            if (newSize < tId * ncomps) {
              newSize = (tId + 1) * ncomps;
            }

            destArr = _Core_DataArray_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance({
              name: arr.getName(),
              dataType: arr.getDataType(),
              numberOfComponents: arr.getNumberOfComponents(),
              size: newSize
            });
            destArr.setTuple(tId, arr.getTuple(fromId));
            publicAPI.addArray(destArr);
          }
        } else if (arr.getNumberOfComponents() === destArr.getNumberOfComponents()) {
          if (fromId > -1 && fromId < arr.getNumberOfTuples()) {
            var _tId = toId > -1 ? toId : fromId;

            destArr.setTuple(_tId, arr.getTuple(fromId));
          } else {
            // if fromId and not provided, just copy all (or as much possible)
            // of arr to destArr.
            for (var i = 0; i < arr.getNumberOfTuples(); ++i) {
              destArr.setTuple(i, arr.getTuple(i));
            }
          }
        }
      }
    });
  };

  publicAPI.copyFieldOn = function (arrayName) {
    model.copyFieldFlags[arrayName] = true;
  };

  publicAPI.copyFieldOff = function (arrayName) {
    model.copyFieldFlags[arrayName] = false;
  };

  publicAPI.copyAllOn = function () {
    if (!model.doCopyAllOn || model.doCopyAllOff) {
      model.doCopyAllOn = true;
      model.doCopyAllOff = false;
      publicAPI.modified();
    }
  };

  publicAPI.copyAllOff = function () {
    if (model.doCopyAllOn || !model.doCopyAllOff) {
      model.doCopyAllOn = false;
      model.doCopyAllOff = true;
      publicAPI.modified();
    }
  };

  publicAPI.clearFieldFlags = function () {
    model.copyFieldFlags = {};
  };

  publicAPI.deepCopy = function (other) {
    model.arrays = other.getArrays().map(function (arr) {
      var arrNew = arr.newClone();
      arrNew.deepCopy(arr);
      return {
        data: arrNew
      };
    });
  };

  publicAPI.copyFlags = function (other) {
    return other.getCopyFieldFlags().map(function (x) {
      return x;
    });
  }; // TODO: publicAPI.squeeze = () => model.arrays.forEach(entry => entry.data.squeeze());


  publicAPI.reset = function () {
    return model.arrays.forEach(function (entry) {
      return entry.data.reset();
    });
  }; // TODO: getActualMemorySize


  publicAPI.getMTime = function () {
    return model.arrays.reduce(function (a, b) {
      return b.data.getMTime() > a ? b.data.getMTime() : a;
    }, model.mtime);
  }; // TODO: publicAPI.getField = (ids, other) => { copy ids from other into this model's arrays }
  // TODO: publicAPI.getArrayContainingComponent = (component) => ...


  publicAPI.getNumberOfComponents = function () {
    return model.arrays.reduce(function (a, b) {
      return a + b.data.getNumberOfComponents();
    }, 0);
  };

  publicAPI.getNumberOfTuples = function () {
    return model.arrays.length > 0 ? model.arrays[0].getNumberOfTuples() : 0;
  };

  publicAPI.getState = function () {
    var result = superGetState();
    result.arrays = model.arrays.map(function (item) {
      return {
        data: item.data.getState()
      };
    });
    return result;
  };
}

var DEFAULT_VALUES = {
  arrays: [],
  copyFieldFlags: [],
  // fields not to copy
  doCopyAllOn: true,
  doCopyAllOff: false
};
function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].obj(publicAPI, model);
  vtkFieldData(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkFieldData'); // ----------------------------------------------------------------------------

var vtkFieldData$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/DataModel/ITKHelper.js":
/*!********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/DataModel/ITKHelper.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ ITKHelper)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _ImageData_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ImageData.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/ImageData.js");
/* harmony import */ var _Core_DataArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Core/DataArray.js */ "./node_modules/@kitware/vtk.js/Common/Core/DataArray.js");




var vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].vtkErrorMacro; // see itk.js/PixelTypes.js

var ITKPixelTypes = {
  Unknown: 0,
  Scalar: 1,
  RGB: 2,
  RGBA: 3,
  Offset: 4,
  Vector: 5,
  Point: 6,
  CovariantVector: 7,
  SymmetricSecondRankTensor: 8,
  DiffusionTensor3D: 9,
  Complex: 10,
  FixedArray: 11,
  Array: 12,
  Matrix: 13,
  VariableLengthVector: 14,
  VariableSizeMatrix: 15
};
/**
 * Converts an itk.js image to a vtk.js image.
 *
 * Requires an itk.js image as input.
 */

function convertItkToVtkImage(itkImage) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var vtkImage = {
    origin: [0, 0, 0],
    spacing: [1, 1, 1]
  };
  var dimensions = [1, 1, 1];
  var direction = [1, 0, 0, 0, 1, 0, 0, 0, 1];

  for (var idx = 0; idx < itkImage.imageType.dimension; ++idx) {
    vtkImage.origin[idx] = itkImage.origin[idx];
    vtkImage.spacing[idx] = itkImage.spacing[idx];
    dimensions[idx] = itkImage.size[idx];

    for (var col = 0; col < itkImage.imageType.dimension; ++col) {
      // ITK (and VTKMath) use a row-major index axis, but the direction
      // matrix on the vtkImageData is a webGL matrix, which uses a
      // column-major data layout. Transpose the direction matrix from
      // itkImage when instantiating that vtkImageData direction matrix.
      direction[col + idx * 3] = itkImage.direction.data[idx + col * itkImage.imageType.dimension];
    }
  } // Create VTK Image Data


  var imageData = _ImageData_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(vtkImage); // Create VTK point data -- the data associated with the pixels / voxels

  var pointData = _Core_DataArray_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance({
    name: options.scalarArrayName || 'Scalars',
    values: itkImage.data,
    numberOfComponents: itkImage.imageType.components
  });
  imageData.setDirection(direction);
  imageData.setDimensions.apply(imageData, dimensions); // Always associate multi-component pixel types with vtk.js point data
  // scalars to facilitate multi-component volume rendering

  imageData.getPointData().setScalars(pointData); // Associate the point data that are 3D vectors / tensors
  // Refer to itk-js/src/PixelTypes.js for numerical values

  switch (itkImage.imageType.pixelType) {
    case ITKPixelTypes.Scalar:
      break;

    case ITKPixelTypes.RGB:
      break;

    case ITKPixelTypes.RGBA:
      break;

    case ITKPixelTypes.Offset:
      break;

    case ITKPixelTypes.Vector:
      if (itkImage.imageType.dimension === 3 && itkImage.imageType.components === 3) {
        imageData.getPointData().setVectors(pointData);
      }

      break;

    case ITKPixelTypes.Point:
      break;

    case ITKPixelTypes.CovariantVector:
      if (itkImage.imageType.dimension === 3 && itkImage.imageType.components === 3) {
        imageData.getPointData().setVectors(pointData);
      }

      break;

    case ITKPixelTypes.SymmetricSecondRankTensor:
      if (itkImage.imageType.dimension === 3 && itkImage.imageType.components === 6) {
        imageData.getPointData().setTensors(pointData);
      }

      break;

    case ITKPixelTypes.DiffusionTensor3D:
      if (itkImage.imageType.dimension === 3 && itkImage.imageType.components === 6) {
        imageData.getPointData().setTensors(pointData);
      }

      break;

    case ITKPixelTypes.Complex:
      break;

    case ITKPixelTypes.FixedArray:
      break;

    case ITKPixelTypes.Array:
      break;

    case ITKPixelTypes.Matrix:
      break;

    case ITKPixelTypes.VariableLengthVector:
      break;

    case ITKPixelTypes.VariableSizeMatrix:
      break;

    default:
      vtkErrorMacro("Cannot handle unexpected ITK.js pixel type ".concat(itkImage.imageType.pixelType));
      return null;
  }

  return imageData;
}

var vtkArrayTypeToItkComponentType = new Map([['Uint8Array', 'uint8_t'], ['Int8Array', 'int8_t'], ['Uint16Array', 'uint16_t'], ['Int16Array', 'int16_t'], ['Uint32Array', 'uint32_t'], ['Int32Array', 'int32_t'], ['Float32Array', 'float'], ['Float64Array', 'double']]);
/**
 * Converts a vtk.js image to an itk.js image.
 *
 * Requires a vtk.js image as input.
 */

function convertVtkToItkImage(vtkImage) {
  var copyData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var itkImage = {
    imageType: {
      dimension: 3,
      pixelType: ITKPixelTypes.Scalar,
      componentType: '',
      components: 1
    },
    name: 'name',
    origin: vtkImage.getOrigin(),
    spacing: vtkImage.getSpacing(),
    direction: {
      data: [1, 0, 0, 0, 1, 0, 0, 0, 1]
    },
    size: vtkImage.getDimensions()
  };
  var direction = vtkImage.getDirection();
  var dimension = itkImage.size.length;
  itkImage.imageType.dimension = dimension;
  itkImage.direction.rows = dimension;
  itkImage.direction.columns = dimension; // Transpose the direction matrix from column-major to row-major

  for (var idx = 0; idx < dimension; ++idx) {
    for (var idy = 0; idy < dimension; ++idy) {
      itkImage.direction.data[idx + idy * dimension] = direction[idy + idx * dimension];
    }
  }

  var pointData = vtkImage.getPointData();
  var vtkArray;

  if (pointData.getTensors() !== null) {
    itkImage.imageType.pixelType = ITKPixelTypes.DiffusionTensor3D;
    vtkArray = pointData.getTensors();
  } else if (pointData.getVectors() != null) {
    itkImage.imageType.pixelType = ITKPixelTypes.Vector;
    vtkArray = pointData.getVectors();
  } else {
    vtkArray = pointData.getScalars();
  }

  itkImage.imageType.componentType = vtkArrayTypeToItkComponentType.get(vtkArray.getDataType());

  if (copyData) {
    // Copy the data array
    itkImage.data = vtkArray.getData().slice(0);
  } else {
    itkImage.data = vtkArray.getData();
  }

  return itkImage;
}

var ITKHelper = {
  convertItkToVtkImage: convertItkToVtkImage,
  convertVtkToItkImage: convertVtkToItkImage
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/DataModel/ImageData.js":
/*!********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/DataModel/ImageData.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkImageData$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");
/* harmony import */ var _BoundingBox_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BoundingBox.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/BoundingBox.js");
/* harmony import */ var _DataSet_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./DataSet.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/DataSet.js");
/* harmony import */ var _StructuredData_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./StructuredData.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/StructuredData.js");
/* harmony import */ var _StructuredData_Constants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./StructuredData/Constants.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/StructuredData/Constants.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat3_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat3.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat3.js");
/* harmony import */ var _vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/vec3.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/vec3.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js");











var vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].vtkErrorMacro; // ----------------------------------------------------------------------------
// vtkImageData methods
// ----------------------------------------------------------------------------

function vtkImageData(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkImageData');

  publicAPI.setExtent = function () {
    if (model.deleted) {
      vtkErrorMacro('instance deleted - cannot call any method');
      return false;
    }

    for (var _len = arguments.length, inExtent = new Array(_len), _key = 0; _key < _len; _key++) {
      inExtent[_key] = arguments[_key];
    }

    var extentArray = inExtent.length === 1 ? inExtent[0] : inExtent;

    if (extentArray.length !== 6) {
      return false;
    }

    var changeDetected = false;
    model.extent.forEach(function (item, index) {
      if (item !== extentArray[index]) {
        if (changeDetected) {
          return;
        }

        changeDetected = true;
      }
    });

    if (changeDetected) {
      model.extent = extentArray.slice();
      model.dataDescription = _StructuredData_js__WEBPACK_IMPORTED_MODULE_5__["default"].getDataDescriptionFromExtent(model.extent);
      publicAPI.modified();
    }

    return changeDetected;
  };

  publicAPI.setDimensions = function () {
    var i;
    var j;
    var k;

    if (model.deleted) {
      vtkErrorMacro('instance deleted - cannot call any method');
      return;
    }

    if (arguments.length === 1) {
      var array = arguments.length <= 0 ? undefined : arguments[0];
      i = array[0];
      j = array[1];
      k = array[2];
    } else if (arguments.length === 3) {
      i = arguments.length <= 0 ? undefined : arguments[0];
      j = arguments.length <= 1 ? undefined : arguments[1];
      k = arguments.length <= 2 ? undefined : arguments[2];
    } else {
      vtkErrorMacro('Bad dimension specification');
      return;
    }

    publicAPI.setExtent(0, i - 1, 0, j - 1, 0, k - 1);
  };

  publicAPI.getDimensions = function () {
    return [model.extent[1] - model.extent[0] + 1, model.extent[3] - model.extent[2] + 1, model.extent[5] - model.extent[4] + 1];
  };

  publicAPI.getNumberOfCells = function () {
    var dims = publicAPI.getDimensions();
    var nCells = 1;

    for (var i = 0; i < 3; i++) {
      if (dims[i] === 0) {
        return 0;
      }

      if (dims[i] > 1) {
        nCells *= dims[i] - 1;
      }
    }

    return nCells;
  };

  publicAPI.getNumberOfPoints = function () {
    var dims = publicAPI.getDimensions();
    return dims[0] * dims[1] * dims[2];
  };

  publicAPI.getPoint = function (index) {
    var dims = publicAPI.getDimensions();

    if (dims[0] === 0 || dims[1] === 0 || dims[2] === 0) {
      vtkErrorMacro('Requesting a point from an empty image.');
      return null;
    }

    var ijk = new Float64Array(3);

    switch (model.dataDescription) {
      case _StructuredData_Constants_js__WEBPACK_IMPORTED_MODULE_6__.StructuredType.EMPTY:
        return null;

      case _StructuredData_Constants_js__WEBPACK_IMPORTED_MODULE_6__.StructuredType.SINGLE_POINT:
        break;

      case _StructuredData_Constants_js__WEBPACK_IMPORTED_MODULE_6__.StructuredType.X_LINE:
        ijk[0] = index;
        break;

      case _StructuredData_Constants_js__WEBPACK_IMPORTED_MODULE_6__.StructuredType.Y_LINE:
        ijk[1] = index;
        break;

      case _StructuredData_Constants_js__WEBPACK_IMPORTED_MODULE_6__.StructuredType.Z_LINE:
        ijk[2] = index;
        break;

      case _StructuredData_Constants_js__WEBPACK_IMPORTED_MODULE_6__.StructuredType.XY_PLANE:
        ijk[0] = index % dims[0];
        ijk[1] = index / dims[0];
        break;

      case _StructuredData_Constants_js__WEBPACK_IMPORTED_MODULE_6__.StructuredType.YZ_PLANE:
        ijk[1] = index % dims[1];
        ijk[2] = index / dims[1];
        break;

      case _StructuredData_Constants_js__WEBPACK_IMPORTED_MODULE_6__.StructuredType.XZ_PLANE:
        ijk[0] = index % dims[0];
        ijk[2] = index / dims[0];
        break;

      case _StructuredData_Constants_js__WEBPACK_IMPORTED_MODULE_6__.StructuredType.XYZ_GRID:
        ijk[0] = index % dims[0];
        ijk[1] = index / dims[0] % dims[1];
        ijk[2] = index / (dims[0] * dims[1]);
        break;

      default:
        vtkErrorMacro('Invalid dataDescription');
        break;
    }

    var coords = [0, 0, 0];
    publicAPI.indexToWorld(ijk, coords);
    return coords;
  }; // vtkCell *GetCell(vtkIdType cellId) VTK_OVERRIDE;
  // void GetCell(vtkIdType cellId, vtkGenericCell *cell) VTK_OVERRIDE;
  // void GetCellBounds(vtkIdType cellId, double bounds[6]) VTK_OVERRIDE;
  // virtual vtkIdType FindPoint(double x, double y, double z)
  // {
  //   return this->vtkDataSet::FindPoint(x, y, z);
  // }
  // vtkIdType FindPoint(double x[3]) VTK_OVERRIDE;
  // vtkIdType FindCell(
  //   double x[3], vtkCell *cell, vtkIdType cellId, double tol2,
  //   int& subId, double pcoords[3], double *weights) VTK_OVERRIDE;
  // vtkIdType FindCell(
  //   double x[3], vtkCell *cell, vtkGenericCell *gencell,
  //   vtkIdType cellId, double tol2, int& subId,
  //   double pcoords[3], double *weights) VTK_OVERRIDE;
  // vtkCell *FindAndGetCell(double x[3], vtkCell *cell, vtkIdType cellId,
  //                                 double tol2, int& subId, double pcoords[3],
  //                                 double *weights) VTK_OVERRIDE;
  // int GetCellType(vtkIdType cellId) VTK_OVERRIDE;
  // void GetCellPoints(vtkIdType cellId, vtkIdList *ptIds) VTK_OVERRIDE
  //   {vtkStructuredData::GetCellPoints(cellId,ptIds,this->DataDescription,
  //                                     this->GetDimensions());}
  // void GetPointCells(vtkIdType ptId, vtkIdList *cellIds) VTK_OVERRIDE
  //   {vtkStructuredData::GetPointCells(ptId,cellIds,this->GetDimensions());}
  // void ComputeBounds() VTK_OVERRIDE;
  // int GetMaxCellSize() VTK_OVERRIDE {return 8;}; //voxel is the largest


  publicAPI.getBounds = function () {
    return publicAPI.extentToBounds(model.extent);
  };

  publicAPI.extentToBounds = function (ex) {
    // prettier-ignore
    var corners = [ex[0], ex[2], ex[4], ex[1], ex[2], ex[4], ex[0], ex[3], ex[4], ex[1], ex[3], ex[4], ex[0], ex[2], ex[5], ex[1], ex[2], ex[5], ex[0], ex[3], ex[5], ex[1], ex[3], ex[5]];
    var idx = new Float64Array([corners[0], corners[1], corners[2]]);
    var vout = new Float64Array(3);
    publicAPI.indexToWorld(idx, vout);
    var bounds = [vout[0], vout[0], vout[1], vout[1], vout[2], vout[2]];

    for (var i = 3; i < 24; i += 3) {
      (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_8__.s)(idx, corners[i], corners[i + 1], corners[i + 2]);
      publicAPI.indexToWorld(idx, vout);

      if (vout[0] < bounds[0]) {
        bounds[0] = vout[0];
      }

      if (vout[1] < bounds[2]) {
        bounds[2] = vout[1];
      }

      if (vout[2] < bounds[4]) {
        bounds[4] = vout[2];
      }

      if (vout[0] > bounds[1]) {
        bounds[1] = vout[0];
      }

      if (vout[1] > bounds[3]) {
        bounds[3] = vout[1];
      }

      if (vout[2] > bounds[5]) {
        bounds[5] = vout[2];
      }
    }

    return bounds;
  }; // Internal, shouldn't need to call this manually.


  publicAPI.computeTransforms = function () {
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_9__.e)(model.indexToWorld, model.origin);
    model.indexToWorld[0] = model.direction[0];
    model.indexToWorld[1] = model.direction[1];
    model.indexToWorld[2] = model.direction[2];
    model.indexToWorld[4] = model.direction[3];
    model.indexToWorld[5] = model.direction[4];
    model.indexToWorld[6] = model.direction[5];
    model.indexToWorld[8] = model.direction[6];
    model.indexToWorld[9] = model.direction[7];
    model.indexToWorld[10] = model.direction[8];
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_9__.s)(model.indexToWorld, model.indexToWorld, model.spacing);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_9__.g)(model.worldToIndex, model.indexToWorld);
  }; //
  // The direction matrix is a 3x3 basis for the I, J, K axes
  // of the image. The rows of the matrix correspond to the
  // axes directions in world coordinates. Direction must
  // form an orthonormal basis, results are undefined if
  // it is not.
  //


  publicAPI.setDirection = function () {
    if (model.deleted) {
      vtkErrorMacro('instance deleted - cannot call any method');
      return false;
    }

    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var array = args; // allow an array passed as a single arg.

    if (array.length === 1 && (Array.isArray(array[0]) || array[0].constructor === Float32Array || array[0].constructor === Float64Array)) {
      array = array[0];
    }

    if (array.length !== 9) {
      throw new RangeError('Invalid number of values for array setter');
    }

    var changeDetected = false;
    model.direction.forEach(function (item, index) {
      if (item !== array[index]) {
        if (changeDetected) {
          return;
        }

        changeDetected = true;
      }
    });

    if (changeDetected) {
      for (var i = 0; i < 9; ++i) {
        model.direction[i] = array[i];
      }

      publicAPI.modified();
    }

    return true;
  };

  publicAPI.indexToWorld = function (ain) {
    var aout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_8__.t)(aout, ain, model.indexToWorld);
    return aout;
  };

  publicAPI.indexToWorldVec3 = publicAPI.indexToWorld;

  publicAPI.worldToIndex = function (ain) {
    var aout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_8__.t)(aout, ain, model.worldToIndex);
    return aout;
  };

  publicAPI.worldToIndexVec3 = publicAPI.worldToIndex;

  publicAPI.indexToWorldBounds = function (bin) {
    var bout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var in1 = [0, 0, 0];
    var in2 = [0, 0, 0];
    _BoundingBox_js__WEBPACK_IMPORTED_MODULE_3__["default"].computeCornerPoints(bin, in1, in2);
    var out1 = [0, 0, 0];
    var out2 = [0, 0, 0];
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_8__.t)(out1, in1, model.indexToWorld);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_8__.t)(out2, in2, model.indexToWorld);
    (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.c)(out1, out2, bout);
    return bout;
  };

  publicAPI.worldToIndexBounds = function (bin) {
    var bout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var in1 = [0, 0, 0];
    var in2 = [0, 0, 0];
    _BoundingBox_js__WEBPACK_IMPORTED_MODULE_3__["default"].computeCornerPoints(bin, in1, in2);
    var out1 = [0, 0, 0];
    var out2 = [0, 0, 0];
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_8__.t)(out1, in1, model.worldToIndex);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_8__.t)(out2, in2, model.worldToIndex);
    (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.c)(out1, out2, bout);
    return bout;
  }; // Make sure the transform is correct


  publicAPI.onModified(publicAPI.computeTransforms);
  publicAPI.computeTransforms();

  publicAPI.getCenter = function () {
    var bounds = publicAPI.getBounds();
    var center = [];

    for (var i = 0; i < 3; i++) {
      center[i] = (bounds[2 * i + 1] + bounds[2 * i]) / 2;
    }

    return center;
  };

  publicAPI.computeHistogram = function (worldBounds) {
    var voxelFunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var bounds = [0, 0, 0, 0, 0, 0];
    publicAPI.worldToIndexBounds(worldBounds, bounds);
    var point1 = [0, 0, 0];
    var point2 = [0, 0, 0];
    _BoundingBox_js__WEBPACK_IMPORTED_MODULE_3__["default"].computeCornerPoints(bounds, point1, point2);
    (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.b)(point1, point1);
    (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.b)(point2, point2);
    var dimensions = publicAPI.getDimensions();
    (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.e)(point1, [0, 0, 0], [dimensions[0] - 1, dimensions[1] - 1, dimensions[2] - 1], point1);
    (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.e)(point2, [0, 0, 0], [dimensions[0] - 1, dimensions[1] - 1, dimensions[2] - 1], point2);
    var yStride = dimensions[0];
    var zStride = dimensions[0] * dimensions[1];
    var pixels = publicAPI.getPointData().getScalars().getData();
    var maximum = -Infinity;
    var minimum = Infinity;
    var sumOfSquares = 0;
    var isum = 0;
    var inum = 0;

    for (var z = point1[2]; z <= point2[2]; z++) {
      for (var y = point1[1]; y <= point2[1]; y++) {
        var index = point1[0] + y * yStride + z * zStride;

        for (var x = point1[0]; x <= point2[0]; x++) {
          if (!voxelFunc || voxelFunc([x, y, z], bounds)) {
            var pixel = pixels[index];
            if (pixel > maximum) maximum = pixel;
            if (pixel < minimum) minimum = pixel;
            sumOfSquares += pixel * pixel;
            isum += pixel;
            inum += 1;
          }

          ++index;
        }
      }
    }

    var average = inum > 0 ? isum / inum : 0;
    var variance = sumOfSquares - average * average;
    var sigma = Math.sqrt(variance);
    return {
      minimum: minimum,
      maximum: maximum,
      average: average,
      variance: variance,
      sigma: sigma
    };
  }; // TODO: use the unimplemented `vtkDataSetAttributes` for scalar length, that is currently also a TODO (GetNumberOfComponents).
  // Scalar data could be tuples for color information?


  publicAPI.computeIncrements = function (extent) {
    var numberOfComponents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var increments = [];
    var incr = numberOfComponents; // Calculate array increment offsets
    // similar to c++ vtkImageData::ComputeIncrements

    for (var idx = 0; idx < 3; ++idx) {
      increments[idx] = incr;
      incr *= extent[idx * 2 + 1] - extent[idx * 2] + 1;
    }

    return increments;
  };
  /**
   * @param {Number[]} index the localized `[i,j,k]` pixel array position. Float values will be rounded.
   * @return {Number} the corresponding flattened index in the scalar array
   */


  publicAPI.computeOffsetIndex = function (_ref) {
    var _ref2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__["default"])(_ref, 3),
        i = _ref2[0],
        j = _ref2[1],
        k = _ref2[2];

    var extent = publicAPI.getExtent();
    var numberOfComponents = publicAPI.getPointData().getScalars().getNumberOfComponents();
    var increments = publicAPI.computeIncrements(extent, numberOfComponents); // Use the array increments to find the pixel index
    // similar to c++ vtkImageData::GetArrayPointer
    // Math.floor to catch "practically 0" e^-15 scenarios.

    return Math.floor((Math.round(i) - extent[0]) * increments[0] + (Math.round(j) - extent[2]) * increments[1] + (Math.round(k) - extent[4]) * increments[2]);
  };
  /**
   * @param {Number[]} xyz the [x,y,z] Array in world coordinates
   * @return {Number|NaN} the corresponding pixel's index in the scalar array
   */


  publicAPI.getOffsetIndexFromWorld = function (xyz) {
    var extent = publicAPI.getExtent();
    var index = publicAPI.worldToIndex(xyz); // Confirm indexed i,j,k coords are within the bounds of the volume

    for (var idx = 0; idx < 3; ++idx) {
      if (index[idx] < extent[idx * 2] || index[idx] > extent[idx * 2 + 1]) {
        vtkErrorMacro("GetScalarPointer: Pixel ".concat(index, " is not in memory. Current extent = ").concat(extent));
        return NaN;
      }
    } // Assumed the index here is within 0 <-> scalarData.length, but doesn't hurt to check upstream


    return publicAPI.computeOffsetIndex(index);
  };
  /**
   * @param {Number[]} xyz the [x,y,z] Array in world coordinates
   * @param {Number?} comp the scalar component index for multi-component scalars
   * @return {Number|NaN} the corresponding pixel's scalar value
   */


  publicAPI.getScalarValueFromWorld = function (xyz) {
    var comp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var numberOfComponents = publicAPI.getPointData().getScalars().getNumberOfComponents();

    if (comp < 0 || comp >= numberOfComponents) {
      vtkErrorMacro("GetScalarPointer: Scalar Component ".concat(comp, " is not within bounds. Current Scalar numberOfComponents: ").concat(numberOfComponents));
      return NaN;
    }

    var offsetIndex = publicAPI.getOffsetIndexFromWorld(xyz);

    if (Number.isNaN(offsetIndex)) {
      // VTK Error Macro will have been tripped already, no need to do it again,
      return offsetIndex;
    }

    return publicAPI.getPointData().getScalars().getComponent(offsetIndex, comp);
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  direction: null,
  // a mat3
  indexToWorld: null,
  // a mat4
  worldToIndex: null,
  // a mat4
  spacing: [1.0, 1.0, 1.0],
  origin: [0.0, 0.0, 0.0],
  extent: [0, -1, 0, -1, 0, -1],
  dataDescription: _StructuredData_Constants_js__WEBPACK_IMPORTED_MODULE_6__.StructuredType.EMPTY
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _DataSet_js__WEBPACK_IMPORTED_MODULE_4__["default"].extend(publicAPI, model, initialValues);

  if (!model.direction) {
    model.direction = (0,_vendor_gl_matrix_esm_mat3_js__WEBPACK_IMPORTED_MODULE_7__.i)(new Float64Array(9));
  } else if (Array.isArray(model.direction)) {
    model.direction = new Float64Array(model.direction.slice(0, 9));
  }

  model.indexToWorld = new Float64Array(16);
  model.worldToIndex = new Float64Array(16); // Set/Get methods

  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].get(publicAPI, model, ['direction', 'indexToWorld', 'worldToIndex']);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGetArray(publicAPI, model, ['origin', 'spacing'], 3);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].getArray(publicAPI, model, ['extent'], 6); // Object specific methods

  vtkImageData(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkImageData'); // ----------------------------------------------------------------------------

var vtkImageData$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/DataModel/Line.js":
/*!***************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/DataModel/Line.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "STATIC": () => (/* binding */ STATIC),
/* harmony export */   "default": () => (/* binding */ vtkLine$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Line_Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Line/Constants.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/Line/Constants.js");
/* harmony import */ var _Cell_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Cell.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/Cell.js");
/* harmony import */ var _Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");






function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var IntersectionState = _Line_Constants_js__WEBPACK_IMPORTED_MODULE_2__["default"].IntersectionState; // ----------------------------------------------------------------------------
// Global methods
// ----------------------------------------------------------------------------

function distanceToLine(x, p1, p2) {
  var closestPoint = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  var outObj = {
    t: Number.MIN_VALUE,
    distance: 0
  };
  var p21 = [];
  var closest; // Determine appropriate vector

  p21[0] = p2[0] - p1[0];
  p21[1] = p2[1] - p1[1];
  p21[2] = p2[2] - p1[2]; // Get parametric location

  var num = p21[0] * (x[0] - p1[0]) + p21[1] * (x[1] - p1[1]) + p21[2] * (x[2] - p1[2]);
  var denom = (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.d)(p21, p21); // trying to avoid an expensive fabs

  var tolerance = 1e-5 * num;

  if (denom !== 0.0) {
    outObj.t = num / denom;
  }

  if (tolerance < 0.0) {
    tolerance = -tolerance;
  }

  if (-tolerance < denom && denom < tolerance) {
    closest = p1;
  } else if (denom <= 0.0 || outObj.t < 0.0) {
    // If parametric coordinate is within 0<=p<=1, then the point is closest to
    // the line.  Otherwise, it's closest to a point at the end of the line.
    closest = p1;
  } else if (outObj.t > 1.0) {
    closest = p2;
  } else {
    closest = p21;
    p21[0] = p1[0] + outObj.t * p21[0];
    p21[1] = p1[1] + outObj.t * p21[1];
    p21[2] = p1[2] + outObj.t * p21[2];
  }

  if (closestPoint) {
    closestPoint[0] = closest[0];
    closestPoint[1] = closest[1];
    closestPoint[2] = closest[2];
  }

  outObj.distance = (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.f)(closest, x);
  return outObj;
}

function intersection(a1, a2, b1, b2, u, v) {
  var a21 = [];
  var b21 = [];
  var b1a1 = [];
  u[0] = 0.0;
  v[0] = 0.0; // Determine line vectors.

  a21[0] = a2[0] - a1[0];
  a21[1] = a2[1] - a1[1];
  a21[2] = a2[2] - a1[2];
  b21[0] = b2[0] - b1[0];
  b21[1] = b2[1] - b1[1];
  b21[2] = b2[2] - b1[2];
  b1a1[0] = b1[0] - a1[0];
  b1a1[1] = b1[1] - a1[1];
  b1a1[2] = b1[2] - a1[2]; // Compute the system (least squares) matrix.

  var A = [];
  A[0] = [(0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.d)(a21, a21), -(0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.d)(a21, b21)];
  A[1] = [A[0][1], (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.d)(b21, b21)]; // Compute the least squares system constant term.

  var c = [];
  c[0] = (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.d)(a21, b1a1);
  c[1] = -(0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.d)(b21, b1a1); // Solve the system of equations

  if ((0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.s)(A, c, 2) === 0) {
    // The lines are colinear. Therefore, one of the four endpoints is the
    // point of closest approach
    var minDist = Number.MAX_VALUE;
    var p = [a1, a2, b1, b2];
    var l1 = [b1, b1, a1, a1];
    var l2 = [b2, b2, a2, a2];
    var uv1 = [v[0], v[0], u[0], u[0]];
    var uv2 = [u[0], u[0], v[0], v[0]];
    var obj;

    for (var i = 0; i < 4; i++) {
      obj = distanceToLine(p[i], l1[i], l2[i]);

      if (obj.distance < minDist) {
        minDist = obj.distance;
        uv1[i] = obj.t;
        uv2[i] = i % 2;
      }
    }

    return IntersectionState.ON_LINE;
  }

  u[0] = c[0];
  v[0] = c[1]; // Check parametric coordinates for intersection.

  if (u[0] >= 0.0 && u[0] <= 1.0 && v[0] >= 0.0 && v[0] <= 1.0) {
    return IntersectionState.YES_INTERSECTION;
  }

  return IntersectionState.NO_INTERSECTION;
} // ----------------------------------------------------------------------------
// Static API
// ----------------------------------------------------------------------------


var STATIC = {
  distanceToLine: distanceToLine,
  intersection: intersection
}; // ----------------------------------------------------------------------------
// vtkLine methods
// ----------------------------------------------------------------------------

function vtkLine(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkLine');

  function isBetweenPoints(t) {
    return t >= 0.0 && t <= 1.0;
  }

  publicAPI.getCellDimension = function () {
    return 1;
  };

  publicAPI.intersectWithLine = function (p1, p2, tol, x, pcoords) {
    var outObj = {
      intersect: 0,
      t: Number.MAX_VALUE,
      subId: 0,
      betweenPoints: null
    };
    pcoords[1] = 0.0;
    pcoords[2] = 0.0;
    var projXYZ = [];
    var a1 = [];
    var a2 = [];
    model.points.getPoint(0, a1);
    model.points.getPoint(1, a2);
    var u = [];
    var v = [];
    var intersect = intersection(p1, p2, a1, a2, u, v);
    outObj.t = u[0];
    outObj.betweenPoints = isBetweenPoints(outObj.t);
    pcoords[0] = v[0];

    if (intersect === IntersectionState.YES_INTERSECTION) {
      // make sure we are within tolerance
      for (var i = 0; i < 3; i++) {
        x[i] = a1[i] + pcoords[0] * (a2[i] - a1[i]);
        projXYZ[i] = p1[i] + outObj.t * (p2[i] - p1[i]);
      }

      if ((0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.f)(x, projXYZ) <= tol * tol) {
        outObj.intersect = 1;
        return outObj;
      }
    } else {
      var outDistance; // check to see if it lies within tolerance
      // one of the parametric coords must be outside 0-1

      if (outObj.t < 0.0) {
        outDistance = distanceToLine(p1, a1, a2, x);

        if (outDistance.distance <= tol * tol) {
          outObj.t = 0.0;
          outObj.intersect = 1;
          outObj.betweenPoints = true; // Intersection is near p1

          return outObj;
        }

        return outObj;
      }

      if (outObj.t > 1.0) {
        outDistance = distanceToLine(p2, a1, a2, x);

        if (outDistance.distance <= tol * tol) {
          outObj.t = 1.0;
          outObj.intersect = 1;
          outObj.betweenPoints = true; // Intersection is near p2

          return outObj;
        }

        return outObj;
      }

      if (pcoords[0] < 0.0) {
        pcoords[0] = 0.0;
        outDistance = distanceToLine(a1, p1, p2, x);
        outObj.t = outDistance.t;

        if (outDistance.distance <= tol * tol) {
          outObj.intersect = 1;
          return outObj;
        }

        return outObj;
      }

      if (pcoords[0] > 1.0) {
        pcoords[0] = 1.0;
        outDistance = distanceToLine(a2, p1, p2, x);
        outObj.t = outDistance.t;

        if (outDistance.distance <= tol * tol) {
          outObj.intersect = 1;
          return outObj;
        }

        return outObj;
      }
    }

    return outObj;
  };

  publicAPI.evaluatePosition = function (x, closestPoint, subId, pcoords, dist2, weights) {}; // virtual

} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues);
  _Cell_js__WEBPACK_IMPORTED_MODULE_3__["default"].extend(publicAPI, model, initialValues);
  vtkLine(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkLine'); // ----------------------------------------------------------------------------

var vtkLine$1 = _objectSpread(_objectSpread({
  newInstance: newInstance,
  extend: extend
}, STATIC), _Line_Constants_js__WEBPACK_IMPORTED_MODULE_2__["default"]);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/DataModel/Line/Constants.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/DataModel/Line/Constants.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IntersectionState": () => (/* binding */ IntersectionState),
/* harmony export */   "default": () => (/* binding */ Constants)
/* harmony export */ });
var IntersectionState = {
  NO_INTERSECTION: 0,
  YES_INTERSECTION: 1,
  ON_LINE: 2
};
var Constants = {
  IntersectionState: IntersectionState
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/DataModel/Plane.js":
/*!****************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/DataModel/Plane.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "STATIC": () => (/* binding */ STATIC),
/* harmony export */   "default": () => (/* binding */ vtkPlane$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance),
/* harmony export */   "vtkPlane": () => (/* binding */ vtkPlane)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");




function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var PLANE_TOLERANCE = 1.0e-6;
var COINCIDE = 'coincide';
var DISJOINT = 'disjoint'; // ----------------------------------------------------------------------------
// Global methods
// ----------------------------------------------------------------------------

function evaluate(normal, origin, x) {
  return normal[0] * (x[0] - origin[0]) + normal[1] * (x[1] - origin[1]) + normal[2] * (x[2] - origin[2]);
}

function distanceToPlane(x, origin, normal) {
  var distance = normal[0] * (x[0] - origin[0]) + normal[1] * (x[1] - origin[1]) + normal[2] * (x[2] - origin[2]);
  return Math.abs(distance);
}

function projectPoint(x, origin, normal, xproj) {
  var xo = [];
  (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__.g)(x, origin, xo);
  var t = (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__.d)(normal, xo);
  xproj[0] = x[0] - t * normal[0];
  xproj[1] = x[1] - t * normal[1];
  xproj[2] = x[2] - t * normal[2];
}

function projectVector(v, normal, vproj) {
  var t = (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__.d)(v, normal);
  var n2 = (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__.d)(normal, normal);

  if (n2 === 0) {
    n2 = 1.0;
  }

  vproj[0] = v[0] - t * normal[0] / n2;
  vproj[1] = v[1] - t * normal[1] / n2;
  vproj[2] = v[2] - t * normal[2] / n2;
  return vproj;
}

function generalizedProjectPoint(x, origin, normal, xproj) {
  var xo = [];
  (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__.g)(x, origin, xo);
  var t = (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__.d)(normal, xo);
  var n2 = (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__.d)(normal, normal);

  if (n2 !== 0) {
    xproj[0] = x[0] - t * normal[0] / n2;
    xproj[1] = x[1] - t * normal[1] / n2;
    xproj[2] = x[2] - t * normal[2] / n2;
  } else {
    xproj[0] = x[0];
    xproj[1] = x[1];
    xproj[2] = x[2];
  }
}

function intersectWithLine(p1, p2, origin, normal) {
  var outObj = {
    intersection: false,
    betweenPoints: false,
    t: Number.MAX_VALUE,
    x: []
  };
  var p21 = [];
  var p1Origin = []; // Compute line vector

  (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__.g)(p2, p1, p21);
  (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__.g)(origin, p1, p1Origin); // Compute denominator.  If ~0, line and plane are parallel.
  // const num = vtkMath.dot(normal, origin) - vtkMath.dot(normal, p1);

  var num = (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__.d)(normal, p1Origin);
  var den = (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__.d)(normal, p21); // If denominator with respect to numerator is "zero", then the line and
  // plane are considered parallel.

  var fabsden;
  var fabstolerance; // Trying to avoid an expensive call to fabs()

  if (den < 0.0) {
    fabsden = -den;
  } else {
    fabsden = den;
  }

  if (num < 0.0) {
    fabstolerance = -num * PLANE_TOLERANCE;
  } else {
    fabstolerance = num * PLANE_TOLERANCE;
  }

  if (fabsden <= fabstolerance) {
    return outObj;
  } // Where on the line between p1 and p2 is the intersection
  // If between 0 and 1, it is between the two points. If < 0 it's before p1, if > 1 it's after p2


  outObj.t = num / den;
  outObj.x[0] = p1[0] + outObj.t * p21[0];
  outObj.x[1] = p1[1] + outObj.t * p21[1];
  outObj.x[2] = p1[2] + outObj.t * p21[2];
  outObj.intersection = true;
  outObj.betweenPoints = outObj.t >= 0.0 && outObj.t <= 1.0;
  return outObj;
}

function intersectWithPlane(plane1Origin, plane1Normal, plane2Origin, plane2Normal) {
  var outObj = {
    intersection: false,
    l0: [],
    l1: [],
    error: null
  };
  var cross$1 = [];
  (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__.j)(plane1Normal, plane2Normal, cross$1);
  var absCross = cross$1.map(function (n) {
    return Math.abs(n);
  }); // test if the two planes are parallel

  if (absCross[0] + absCross[1] + absCross[2] < PLANE_TOLERANCE) {
    // test if disjoint or coincide
    var v = [];
    (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__.g)(plane1Origin, plane2Origin, v);

    if ((0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__.d)(plane1Normal, v) === 0) {
      outObj.error = COINCIDE;
    } else {
      outObj.error = DISJOINT;
    }

    return outObj;
  } // Plane1 and Plane2 intersect in a line
  // first determine max abs coordinate of the cross product


  var maxc;

  if (absCross[0] > absCross[1] && absCross[0] > absCross[2]) {
    maxc = 'x';
  } else if (absCross[1] > absCross[2]) {
    maxc = 'y';
  } else {
    maxc = 'z';
  } // To get a point on the intersect line, zero the max coord, and solve for the other two


  var iP = []; // intersectionPoint
  // the constants in the 2 plane equations

  var d1 = -(0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__.d)(plane1Normal, plane1Origin);
  var d2 = -(0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__.d)(plane2Normal, plane2Origin); // eslint-disable-next-line default-case

  switch (maxc) {
    case 'x':
      // intersect with x=0
      iP[0] = 0;
      iP[1] = (d2 * plane1Normal[2] - d1 * plane2Normal[2]) / cross$1[0];
      iP[2] = (d1 * plane2Normal[1] - d2 * plane1Normal[1]) / cross$1[0];
      break;

    case 'y':
      // intersect with y=0
      iP[0] = (d1 * plane2Normal[2] - d2 * plane1Normal[2]) / cross$1[1];
      iP[1] = 0;
      iP[2] = (d2 * plane1Normal[0] - d1 * plane2Normal[0]) / cross$1[1];
      break;

    case 'z':
      // intersect with z=0
      iP[0] = (d2 * plane1Normal[1] - d1 * plane2Normal[1]) / cross$1[2];
      iP[1] = (d1 * plane2Normal[0] - d2 * plane1Normal[0]) / cross$1[2];
      iP[2] = 0;
      break;
  }

  outObj.l0 = iP;
  (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__.k)(iP, cross$1, outObj.l1);
  outObj.intersection = true;
  return outObj;
} // ----------------------------------------------------------------------------
// Static API
// ----------------------------------------------------------------------------


var STATIC = {
  evaluate: evaluate,
  distanceToPlane: distanceToPlane,
  projectPoint: projectPoint,
  projectVector: projectVector,
  generalizedProjectPoint: generalizedProjectPoint,
  intersectWithLine: intersectWithLine,
  intersectWithPlane: intersectWithPlane,
  DISJOINT: DISJOINT,
  COINCIDE: COINCIDE
}; // ----------------------------------------------------------------------------
// vtkPlane methods
// ----------------------------------------------------------------------------

function vtkPlane(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkPlane');

  publicAPI.distanceToPlane = function (x) {
    return distanceToPlane(x, model.origin, model.normal);
  };

  publicAPI.projectPoint = function (x, xproj) {
    projectPoint(x, model.origin, model.normal, xproj);
  };

  publicAPI.projectVector = function (v, vproj) {
    return projectVector(v, model.normal, vproj);
  };

  publicAPI.push = function (distance) {
    if (distance === 0.0) {
      return;
    }

    for (var i = 0; i < 3; i++) {
      model.origin[i] += distance * model.normal[i];
    }
  };

  publicAPI.generalizedProjectPoint = function (x, xproj) {
    generalizedProjectPoint(x, model.origin, model.normal, xproj);
  };

  publicAPI.evaluateFunction = function (x, y, z) {
    if (!Array.isArray(x)) {
      return model.normal[0] * (x - model.origin[0]) + model.normal[1] * (y - model.origin[1]) + model.normal[2] * (z - model.origin[2]);
    }

    return model.normal[0] * (x[0] - model.origin[0]) + model.normal[1] * (x[1] - model.origin[1]) + model.normal[2] * (x[2] - model.origin[2]);
  };

  publicAPI.evaluateGradient = function (xyz) {
    var retVal = [model.normal[0], model.normal[1], model.normal[2]];
    return retVal;
  };

  publicAPI.intersectWithLine = function (p1, p2) {
    return intersectWithLine(p1, p2, model.origin, model.normal);
  };

  publicAPI.intersectWithPlane = function (planeOrigin, planeNormal) {
    return intersectWithPlane(planeOrigin, planeNormal, model.origin, model.normal);
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------

var DEFAULT_VALUES = {
  normal: [0.0, 0.0, 1.0],
  origin: [0.0, 0.0, 0.0]
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods

  _macros_js__WEBPACK_IMPORTED_MODULE_2__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_2__["default"].setGetArray(publicAPI, model, ['normal', 'origin'], 3);
  vtkPlane(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance(extend, 'vtkPlane'); // ----------------------------------------------------------------------------

var vtkPlane$1 = _objectSpread({
  newInstance: newInstance,
  extend: extend
}, STATIC);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/DataModel/PointSet.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/DataModel/PointSet.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkPointSet$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _vtk_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../vtk.js */ "./node_modules/@kitware/vtk.js/vtk.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _DataSet_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./DataSet.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/DataSet.js");
/* harmony import */ var _Core_Points_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Core/Points.js */ "./node_modules/@kitware/vtk.js/Common/Core/Points.js");





// Global methods
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// vtkPointSet methods
// ----------------------------------------------------------------------------

function vtkPointSet(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkPointSet'); // Create empty points

  if (!model.points) {
    model.points = _Core_Points_js__WEBPACK_IMPORTED_MODULE_3__["default"].newInstance();
  } else {
    model.points = (0,_vtk_js__WEBPACK_IMPORTED_MODULE_0__["default"])(model.points);
  }

  publicAPI.getNumberOfPoints = function () {
    return model.points.getNumberOfPoints();
  };

  publicAPI.getBounds = function () {
    return model.points.getBounds();
  };

  publicAPI.computeBounds = function () {
    publicAPI.getBounds();
  };

  var superShallowCopy = publicAPI.shallowCopy;

  publicAPI.shallowCopy = function (other) {
    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    superShallowCopy(other, debug);
    model.points = _Core_Points_js__WEBPACK_IMPORTED_MODULE_3__["default"].newInstance();
    model.points.shallowCopy(other.getPoints());
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {// points: null,
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _DataSet_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(publicAPI, model, initialValues);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGet(publicAPI, model, ['points']); // Object specific methods

  vtkPointSet(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkPointSet'); // ----------------------------------------------------------------------------

var vtkPointSet$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/DataModel/PolyData.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/DataModel/PolyData.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CELL_FACTORY": () => (/* binding */ CELL_FACTORY),
/* harmony export */   "default": () => (/* binding */ vtkPolyData$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _vtk_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../vtk.js */ "./node_modules/@kitware/vtk.js/vtk.js");
/* harmony import */ var _Core_CellArray_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Core/CellArray.js */ "./node_modules/@kitware/vtk.js/Common/Core/CellArray.js");
/* harmony import */ var _CellLinks_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CellLinks.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/CellLinks.js");
/* harmony import */ var _CellTypes_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./CellTypes.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/CellTypes.js");
/* harmony import */ var _Line_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Line.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/Line.js");
/* harmony import */ var _PointSet_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./PointSet.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/PointSet.js");
/* harmony import */ var _Triangle_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Triangle.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/Triangle.js");
/* harmony import */ var _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./CellTypes/Constants.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/CellTypes/Constants.js");
/* harmony import */ var _PolyData_Constants_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./PolyData/Constants.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/PolyData/Constants.js");












var _CELL_FACTORY;
var vtkWarningMacro = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].vtkWarningMacro;
var CELL_FACTORY = (_CELL_FACTORY = {}, (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(_CELL_FACTORY, _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_9__.CellType.VTK_LINE, _Line_js__WEBPACK_IMPORTED_MODULE_6__["default"]), (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(_CELL_FACTORY, _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_9__.CellType.VTK_POLY_LINE, _Line_js__WEBPACK_IMPORTED_MODULE_6__["default"]), (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(_CELL_FACTORY, _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_9__.CellType.VTK_TRIANGLE, _Triangle_js__WEBPACK_IMPORTED_MODULE_8__["default"]), _CELL_FACTORY); // ----------------------------------------------------------------------------
// vtkPolyData methods
// ----------------------------------------------------------------------------

function vtkPolyData(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkPolyData');

  function camelize(str) {
    return str.replace(/(?:^\w|[A-Z]|\b\w)/g, function (letter) {
      return letter.toUpperCase();
    }).replace(/\s+/g, '');
  } // build empty cell arrays and set methods


  _PolyData_Constants_js__WEBPACK_IMPORTED_MODULE_10__.POLYDATA_FIELDS.forEach(function (type) {
    publicAPI["getNumberOf".concat(camelize(type))] = function () {
      return model[type].getNumberOfCells();
    };

    if (!model[type]) {
      model[type] = _Core_CellArray_js__WEBPACK_IMPORTED_MODULE_3__["default"].newInstance();
    } else {
      model[type] = (0,_vtk_js__WEBPACK_IMPORTED_MODULE_2__["default"])(model[type]);
    }
  });

  publicAPI.getNumberOfCells = function () {
    return _PolyData_Constants_js__WEBPACK_IMPORTED_MODULE_10__.POLYDATA_FIELDS.reduce(function (num, cellType) {
      return num + model[cellType].getNumberOfCells();
    }, 0);
  };

  var superShallowCopy = publicAPI.shallowCopy;

  publicAPI.shallowCopy = function (other) {
    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    superShallowCopy(other, debug);
    _PolyData_Constants_js__WEBPACK_IMPORTED_MODULE_10__.POLYDATA_FIELDS.forEach(function (type) {
      model[type] = _Core_CellArray_js__WEBPACK_IMPORTED_MODULE_3__["default"].newInstance();
      model[type].shallowCopy(other.getReferenceByName(type));
    });
  };

  publicAPI.buildCells = function () {
    // here are the number of cells we have
    var nVerts = publicAPI.getNumberOfVerts();
    var nLines = publicAPI.getNumberOfLines();
    var nPolys = publicAPI.getNumberOfPolys();
    var nStrips = publicAPI.getNumberOfStrips(); // pre-allocate the space we need

    var nCells = nVerts + nLines + nPolys + nStrips;
    var types = new Uint8Array(nCells);
    var pTypes = types;
    var locs = new Uint32Array(nCells);
    var pLocs = locs; // record locations and type of each cell.
    // verts

    if (nVerts) {
      var nextCellPts = 0;
      model.verts.getCellSizes().forEach(function (numCellPts, index) {
        pLocs[index] = nextCellPts;
        pTypes[index] = numCellPts > 1 ? _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_9__.CellType.VTK_POLY_VERTEX : _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_9__.CellType.VTK_VERTEX;
        nextCellPts += numCellPts + 1;
      });
      pLocs = pLocs.subarray(nVerts);
      pTypes = pTypes.subarray(nVerts);
    } // lines


    if (nLines) {
      var _nextCellPts = 0;
      model.lines.getCellSizes().forEach(function (numCellPts, index) {
        pLocs[index] = _nextCellPts;
        pTypes[index] = numCellPts > 2 ? _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_9__.CellType.VTK_POLY_LINE : _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_9__.CellType.VTK_LINE;

        if (numCellPts === 1) {
          vtkWarningMacro('Building VTK_LINE ', index, ' with only one point, but VTK_LINE needs at least two points. Check the input.');
        }

        _nextCellPts += numCellPts + 1;
      });
      pLocs = pLocs.subarray(nLines);
      pTypes = pTypes.subarray(nLines);
    } // polys


    if (nPolys) {
      var _nextCellPts2 = 0;
      model.polys.getCellSizes().forEach(function (numCellPts, index) {
        pLocs[index] = _nextCellPts2;

        switch (numCellPts) {
          case 3:
            pTypes[index] = _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_9__.CellType.VTK_TRIANGLE;
            break;

          case 4:
            pTypes[index] = _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_9__.CellType.VTK_QUAD;
            break;

          default:
            pTypes[index] = _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_9__.CellType.VTK_POLYGON;
            break;
        }

        if (numCellPts < 3) {
          vtkWarningMacro('Building VTK_TRIANGLE ', index, ' with less than three points, but VTK_TRIANGLE needs at least three points. Check the input.');
        }

        _nextCellPts2 += numCellPts + 1;
      });
      pLocs += pLocs.subarray(nPolys);
      pTypes += pTypes.subarray(nPolys);
    } // strips


    if (nStrips) {
      var _nextCellPts3 = 0;
      pTypes.fill(_CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_9__.CellType.VTK_TRIANGLE_STRIP, 0, nStrips);
      model.strips.getCellSizes().forEach(function (numCellPts, index) {
        pLocs[index] = _nextCellPts3;
        _nextCellPts3 += numCellPts + 1;
      });
    } // set up the cell types data structure


    model.cells = _CellTypes_js__WEBPACK_IMPORTED_MODULE_5__["default"].newInstance();
    model.cells.setCellTypes(nCells, types, locs);
  };
  /**
   * Create upward links from points to cells that use each point. Enables
   * topologically complex queries.
   */


  publicAPI.buildLinks = function () {
    var initialSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    if (model.cells === undefined) {
      publicAPI.buildCells();
    }

    model.links = _CellLinks_js__WEBPACK_IMPORTED_MODULE_4__["default"].newInstance();

    if (initialSize > 0) {
      model.links.allocate(initialSize);
    } else {
      model.links.allocate(publicAPI.getPoints().getNumberOfPoints());
    }

    model.links.buildLinks(publicAPI);
  }; // Returns an object made of the cellType and a subarray `cellPointIds` of
  // the cell points.


  publicAPI.getCellPoints = function (cellId) {
    var cellType = model.cells.getCellType(cellId);
    var cells = null;

    switch (cellType) {
      case _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_9__.CellType.VTK_VERTEX:
      case _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_9__.CellType.VTK_POLY_VERTEX:
        cells = model.verts;
        break;

      case _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_9__.CellType.VTK_LINE:
      case _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_9__.CellType.VTK_POLY_LINE:
        cells = model.lines;
        break;

      case _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_9__.CellType.VTK_TRIANGLE:
      case _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_9__.CellType.VTK_QUAD:
      case _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_9__.CellType.VTK_POLYGON:
        cells = model.polys;
        break;

      case _CellTypes_Constants_js__WEBPACK_IMPORTED_MODULE_9__.CellType.VTK_TRIANGLE_STRIP:
        cells = model.strips;
        break;

      default:
        cells = null;
        return {
          type: 0,
          cellPointIds: null
        };
    }

    var loc = model.cells.getCellLocation(cellId);
    var cellPointIds = cells.getCell(loc);
    return {
      cellType: cellType,
      cellPointIds: cellPointIds
    };
  };

  publicAPI.getPointCells = function (ptId) {
    return model.links.getCells(ptId);
  };

  publicAPI.getCellEdgeNeighbors = function (cellId, point1, point2) {
    var link1 = model.links.getLink(point1);
    var link2 = model.links.getLink(point2);
    return link1.cells.filter(function (cell) {
      return cell !== cellId && link2.cells.indexOf(cell) !== -1;
    });
  };
  /**
   * If you know the type of cell, you may provide it to improve performances.
   */


  publicAPI.getCell = function (cellId) {
    var cellHint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var cellInfo = publicAPI.getCellPoints(cellId);
    var cell = cellHint || CELL_FACTORY[cellInfo.cellType].newInstance();
    cell.initialize(publicAPI.getPoints(), cellInfo.cellPointIds);
    return cell;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {// verts: null,
  // lines: null,
  // polys: null,
  // strips: null,
  // cells: null,
  // links: null,
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _PointSet_js__WEBPACK_IMPORTED_MODULE_7__["default"].extend(publicAPI, model, initialValues);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].get(publicAPI, model, ['cells', 'links']);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGet(publicAPI, model, ['verts', 'lines', 'polys', 'strips']); // Object specific methods

  vtkPolyData(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkPolyData'); // ----------------------------------------------------------------------------

var vtkPolyData$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/DataModel/PolyData/Constants.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/DataModel/PolyData/Constants.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "POLYDATA_FIELDS": () => (/* binding */ POLYDATA_FIELDS),
/* harmony export */   "default": () => (/* binding */ Constants)
/* harmony export */ });
var POLYDATA_FIELDS = ['verts', 'lines', 'polys', 'strips'];
var Constants = {
  POLYDATA_FIELDS: POLYDATA_FIELDS
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/DataModel/SelectionNode.js":
/*!************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/DataModel/SelectionNode.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkSelectionNode$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _SelectionNode_Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SelectionNode/Constants.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/SelectionNode/Constants.js");




function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
// vtkSelectionNode methods
// ----------------------------------------------------------------------------

function vtkSelectionNode(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkSelectionNode');

  publicAPI.getBounds = function () {
    return model.points.getBounds();
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  contentType: -1,
  fieldType: -1,
  properties: null,
  selectionList: []
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].obj(publicAPI, model);
  model.properties = {};
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGet(publicAPI, model, ['contentType', 'fieldType', 'properties', 'selectionList']); // Object specific methods

  vtkSelectionNode(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkSelectionNode'); // ----------------------------------------------------------------------------

var vtkSelectionNode$1 = _objectSpread({
  newInstance: newInstance,
  extend: extend
}, _SelectionNode_Constants_js__WEBPACK_IMPORTED_MODULE_2__["default"]);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/DataModel/SelectionNode/Constants.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/DataModel/SelectionNode/Constants.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SelectionContent": () => (/* binding */ SelectionContent),
/* harmony export */   "SelectionField": () => (/* binding */ SelectionField),
/* harmony export */   "default": () => (/* binding */ Constants)
/* harmony export */ });
/**
 * The (primary) property that describes the content of a selection
 * node's data. Other auxiliary description properties follow.
 * GLOBALIDS means that the selection list contains values from the
 * vtkDataSetAttribute array of the same name.
 * PEDIGREEIDS means that the selection list contains values from the
 * vtkDataSetAttribute array of the same name.
 * VALUES means the the selection list contains values from an
 * arbitrary attribute array (ignores any globalids attribute)
 * INDICES means that the selection list contains indexes into the
 * cell or point arrays.
 * FRUSTUM means the set of points and cells inside a frustum
 * LOCATIONS means the set of points and cells near a set of positions
 * THRESHOLDS means the points and cells with values within a set of ranges
 * getContentType() returns -1 if the content type is not set.
 */
// Specify how data arrays can be used by data objects
var SelectionContent = {
  GLOBALIDS: 0,
  PEDIGREEIDS: 1,
  VALUES: 2,
  INDICES: 3,
  FRUSTUM: 4,
  LOCATIONS: 5,
  THRESHOLDS: 6,
  BLOCKS: 7,
  QUERY: 8
};
var SelectionField = {
  CELL: 0,
  POINT: 1,
  FIELD: 2,
  VERTEX: 3,
  EDGE: 4,
  ROW: 5
};
var Constants = {
  SelectionContent: SelectionContent,
  SelectionField: SelectionField
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/DataModel/StructuredData.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/DataModel/StructuredData.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkStructuredData),
/* harmony export */   "getDataDescriptionFromExtent": () => (/* binding */ getDataDescriptionFromExtent)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _StructuredData_Constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./StructuredData/Constants.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/StructuredData/Constants.js");



function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var StructuredType = _StructuredData_Constants_js__WEBPACK_IMPORTED_MODULE_1__["default"].StructuredType;
function getDataDescriptionFromExtent(inExt) {
  var dataDim = 0;

  for (var i = 0; i < 3; ++i) {
    if (inExt[i * 2] < inExt[i * 2 + 1]) {
      dataDim++;
    }
  }

  if (inExt[0] > inExt[1] || inExt[2] > inExt[3] || inExt[4] > inExt[5]) {
    return StructuredType.EMPTY;
  }

  if (dataDim === 3) {
    return StructuredType.XYZ_GRID;
  }

  if (dataDim === 2) {
    if (inExt[0] === inExt[1]) {
      return StructuredType.YZ_PLANE;
    }

    if (inExt[2] === inExt[3]) {
      return StructuredType.XZ_PLANE;
    }

    return StructuredType.XY_PLANE;
  }

  if (dataDim === 1) {
    if (inExt[0] < inExt[1]) {
      return StructuredType.X_LINE;
    }

    if (inExt[2] < inExt[3]) {
      return StructuredType.Y_LINE;
    }

    return StructuredType.Z_LINE;
  }

  return StructuredType.SINGLE_POINT;
}
var vtkStructuredData = _objectSpread({
  getDataDescriptionFromExtent: getDataDescriptionFromExtent
}, _StructuredData_Constants_js__WEBPACK_IMPORTED_MODULE_1__["default"]);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/DataModel/StructuredData/Constants.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/DataModel/StructuredData/Constants.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StructuredType": () => (/* binding */ StructuredType),
/* harmony export */   "default": () => (/* binding */ Constants)
/* harmony export */ });
var StructuredType = {
  UNCHANGED: 0,
  SINGLE_POINT: 1,
  X_LINE: 2,
  Y_LINE: 3,
  Z_LINE: 4,
  XY_PLANE: 5,
  YZ_PLANE: 6,
  XZ_PLANE: 7,
  XYZ_GRID: 8,
  EMPTY: 9
};
var Constants = {
  StructuredType: StructuredType
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Common/DataModel/Triangle.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Common/DataModel/Triangle.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "STATIC": () => (/* binding */ STATIC),
/* harmony export */   "default": () => (/* binding */ vtkTriangle$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Cell_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Cell.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/Cell.js");
/* harmony import */ var _Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");
/* harmony import */ var _Line_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Line.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/Line.js");
/* harmony import */ var _Plane_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Plane.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/Plane.js");







function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
// Global methods
// ----------------------------------------------------------------------------

function computeNormalDirection(v1, v2, v3, n) {
  // order is important!!! maintain consistency with triangle vertex order
  var ax = v3[0] - v2[0];
  var ay = v3[1] - v2[1];
  var az = v3[2] - v2[2];
  var bx = v1[0] - v2[0];
  var by = v1[1] - v2[1];
  var bz = v1[2] - v2[2];
  n[0] = ay * bz - az * by;
  n[1] = az * bx - ax * bz;
  n[2] = ax * by - ay * bx;
}

function computeNormal(v1, v2, v3, n) {
  computeNormalDirection(v1, v2, v3, n);
  var length = Math.sqrt(n[0] * n[0] + n[1] * n[1] + n[2] * n[2]);

  if (length !== 0.0) {
    n[0] /= length;
    n[1] /= length;
    n[2] /= length;
  }
} // ----------------------------------------------------------------------------
// Static API
// ----------------------------------------------------------------------------


var STATIC = {
  computeNormalDirection: computeNormalDirection,
  computeNormal: computeNormal
}; // ----------------------------------------------------------------------------
// vtkTriangle methods
// ----------------------------------------------------------------------------

function vtkTriangle(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkTriangle');

  publicAPI.getCellDimension = function () {
    return 2;
  };

  publicAPI.intersectWithLine = function (p1, p2, tol, x, pcoords) {
    var outObj = {
      subId: 0,
      t: Number.MAX_VALUE,
      intersect: 0,
      betweenPoints: false
    };
    pcoords[2] = 0.0;
    var closestPoint = [];
    var tol2 = tol * tol; // Get normal for triangle

    var pt1 = [];
    var pt2 = [];
    var pt3 = [];
    model.points.getPoint(0, pt1);
    model.points.getPoint(1, pt2);
    model.points.getPoint(2, pt3);
    var n = [];
    var weights = [];
    computeNormal(pt1, pt2, pt3, n);

    if (n[0] !== 0 || n[1] !== 0 || n[2] !== 0) {
      // Intersect plane of triangle with line
      var plane = _Plane_js__WEBPACK_IMPORTED_MODULE_5__["default"].intersectWithLine(p1, p2, pt1, n);
      outObj.betweenPoints = plane.betweenPoints;
      outObj.t = plane.t;
      x[0] = plane.x[0];
      x[1] = plane.x[1];
      x[2] = plane.x[2];

      if (!plane.intersection) {
        pcoords[0] = 0.0;
        pcoords[1] = 0.0;
        outObj.intersect = 0;
        return outObj;
      } // Evaluate position


      var inside = publicAPI.evaluatePosition(x, closestPoint, pcoords, weights);

      if (inside.evaluation >= 0) {
        if (inside.dist2 <= tol2) {
          outObj.intersect = 1;
          return outObj;
        }

        outObj.intersect = inside.evaluation;
        return outObj;
      }
    } // Normals are null, so the triangle is degenerated and
    // we still need to check intersection between line and
    // the longest edge.


    var dist2Pt1Pt2 = (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.f)(pt1, pt2);
    var dist2Pt2Pt3 = (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.f)(pt2, pt3);
    var dist2Pt3Pt1 = (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.f)(pt3, pt1);

    if (!model.line) {
      model.line = _Line_js__WEBPACK_IMPORTED_MODULE_4__["default"].newInstance();
    }

    if (dist2Pt1Pt2 > dist2Pt2Pt3 && dist2Pt1Pt2 > dist2Pt3Pt1) {
      model.line.getPoints().setPoint(0, pt1);
      model.line.getPoints().setPoint(1, pt2);
    } else if (dist2Pt2Pt3 > dist2Pt3Pt1 && dist2Pt2Pt3 > dist2Pt1Pt2) {
      model.line.getPoints().setPoint(0, pt2);
      model.line.getPoints().setPoint(1, pt3);
    } else {
      model.line.getPoints().setPoint(0, pt3);
      model.line.getPoints().setPoint(1, pt1);
    }

    var intersectLine = model.line.intersectWithLine(p1, p2, tol, x, pcoords);
    outObj.betweenPoints = intersectLine.betweenPoints;
    outObj.t = intersectLine.t;

    if (intersectLine.intersect) {
      var pt3Pt1 = [];
      var pt3Pt2 = [];
      var pt3X = []; // Compute r and s manually, using dot and norm.

      for (var i = 0; i < 3; i++) {
        pt3Pt1[i] = pt1[i] - pt3[i];
        pt3Pt2[i] = pt2[i] - pt3[i];
        pt3X[i] = x[i] - pt3[i];
      }

      pcoords[0] = (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.d)(pt3X, pt3Pt1) / dist2Pt3Pt1;
      pcoords[1] = (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.d)(pt3X, pt3Pt2) / dist2Pt2Pt3;
      outObj.intersect = 1;
      return outObj;
    }

    pcoords[0] = 0.0;
    pcoords[1] = 0.0;
    outObj.intersect = 0;
    return outObj;
  };

  publicAPI.evaluatePosition = function (x, closestPoint, pcoords, weights) {
    // will return obj
    var outObj = {
      subId: 0,
      dist2: 0,
      evaluation: -1
    };
    var i;
    var j;
    var pt1 = [];
    var pt2 = [];
    var pt3 = [];
    var n = [];
    var fabsn;
    var rhs = [];
    var c1 = [];
    var c2 = [];
    var det = 0;
    var idx = 0;
    var indices = [];
    var dist2Point;
    var dist2Line1;
    var dist2Line2;
    var closest = [];
    var closestPoint1 = [];
    var closestPoint2 = [];
    var cp = [];
    outObj.subId = 0;
    pcoords[2] = 0.0; // Get normal for triangle, only the normal direction is needed, i.e. the
    // normal need not be normalized (unit length)
    //

    model.points.getPoint(1, pt1);
    model.points.getPoint(2, pt2);
    model.points.getPoint(0, pt3);
    computeNormalDirection(pt1, pt2, pt3, n); // Project point to plane

    _Plane_js__WEBPACK_IMPORTED_MODULE_5__["default"].generalizedProjectPoint(x, pt1, n, cp); // Construct matrices.  Since we have over determined system, need to find
    // which 2 out of 3 equations to use to develop equations. (Any 2 should
    // work since we've projected point to plane.)

    var maxComponent = 0.0;

    for (i = 0; i < 3; i++) {
      // trying to avoid an expensive call to fabs()
      if (n[i] < 0) {
        fabsn = -n[i];
      } else {
        fabsn = n[i];
      }

      if (fabsn > maxComponent) {
        maxComponent = fabsn;
        idx = i;
      }
    }

    for (j = 0, i = 0; i < 3; i++) {
      if (i !== idx) {
        indices[j++] = i;
      }
    }

    for (i = 0; i < 2; i++) {
      rhs[i] = cp[indices[i]] - pt3[indices[i]];
      c1[i] = pt1[indices[i]] - pt3[indices[i]];
      c2[i] = pt2[indices[i]] - pt3[indices[i]];
    }

    det = (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.m)(c1, c2);

    if (det === 0.0) {
      pcoords[0] = 0.0;
      pcoords[1] = 0.0;
      outObj.evaluation = -1;
      return outObj;
    }

    pcoords[0] = (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.m)(rhs, c2) / det;
    pcoords[1] = (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.m)(c1, rhs) / det; // Okay, now find closest point to element

    weights[0] = 1 - (pcoords[0] + pcoords[1]);
    weights[1] = pcoords[0];
    weights[2] = pcoords[1];

    if (weights[0] >= 0.0 && weights[0] <= 1.0 && weights[1] >= 0.0 && weights[1] <= 1.0 && weights[2] >= 0.0 && weights[2] <= 1.0) {
      // projection distance
      if (closestPoint) {
        outObj.dist2 = (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.f)(cp, x);
        closestPoint[0] = cp[0];
        closestPoint[1] = cp[1];
        closestPoint[2] = cp[2];
      }

      outObj.evaluation = 1;
    } else {
      var t;

      if (closestPoint) {
        if (weights[1] < 0.0 && weights[2] < 0.0) {
          dist2Point = (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.f)(x, pt3);
          dist2Line1 = _Line_js__WEBPACK_IMPORTED_MODULE_4__["default"].distanceToLine(x, pt1, pt3, t, closestPoint1);
          dist2Line2 = _Line_js__WEBPACK_IMPORTED_MODULE_4__["default"].distanceToLine(x, pt3, pt2, t, closestPoint2);

          if (dist2Point < dist2Line1) {
            outObj.dist2 = dist2Point;
            closest = pt3;
          } else {
            outObj.dist2 = dist2Line1;
            closest = closestPoint1;
          }

          if (dist2Line2 < outObj.dist2) {
            outObj.dist2 = dist2Line2;
            closest = closestPoint2;
          }

          for (i = 0; i < 3; i++) {
            closestPoint[i] = closest[i];
          }
        } else if (weights[2] < 0.0 && weights[0] < 0.0) {
          dist2Point = (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.f)(x, pt1);
          dist2Line1 = _Line_js__WEBPACK_IMPORTED_MODULE_4__["default"].distanceToLine(x, pt1, pt3, t, closestPoint1);
          dist2Line2 = _Line_js__WEBPACK_IMPORTED_MODULE_4__["default"].distanceToLine(x, pt1, pt2, t, closestPoint2);

          if (dist2Point < dist2Line1) {
            outObj.dist2 = dist2Point;
            closest = pt1;
          } else {
            outObj.dist2 = dist2Line1;
            closest = closestPoint1;
          }

          if (dist2Line2 < outObj.dist2) {
            outObj.dist2 = dist2Line2;
            closest = closestPoint2;
          }

          for (i = 0; i < 3; i++) {
            closestPoint[i] = closest[i];
          }
        } else if (weights[1] < 0.0 && weights[0] < 0.0) {
          dist2Point = (0,_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.f)(x, pt2);
          dist2Line1 = _Line_js__WEBPACK_IMPORTED_MODULE_4__["default"].distanceToLine(x, pt2, pt3, t, closestPoint1);
          dist2Line2 = _Line_js__WEBPACK_IMPORTED_MODULE_4__["default"].distanceToLine(x, pt1, pt2, t, closestPoint2);

          if (dist2Point < dist2Line1) {
            outObj.dist2 = dist2Point;
            closest = pt2;
          } else {
            outObj.dist2 = dist2Line1;
            closest = closestPoint1;
          }

          if (dist2Line2 < outObj.dist2) {
            outObj.dist2 = dist2Line2;
            closest = closestPoint2;
          }

          for (i = 0; i < 3; i++) {
            closestPoint[i] = closest[i];
          }
        } else if (weights[0] < 0.0) {
          var lineDistance = _Line_js__WEBPACK_IMPORTED_MODULE_4__["default"].distanceToLine(x, pt1, pt2, closestPoint);
          outObj.dist2 = lineDistance.distance;
        } else if (weights[1] < 0.0) {
          var _lineDistance = _Line_js__WEBPACK_IMPORTED_MODULE_4__["default"].distanceToLine(x, pt2, pt3, closestPoint);

          outObj.dist2 = _lineDistance.distance;
        } else if (weights[2] < 0.0) {
          var _lineDistance2 = _Line_js__WEBPACK_IMPORTED_MODULE_4__["default"].distanceToLine(x, pt1, pt3, closestPoint);

          outObj.dist2 = _lineDistance2.distance;
        }
      }

      outObj.evaluation = 0;
    }

    return outObj;
  };

  publicAPI.evaluateLocation = function (pcoords, x, weights) {
    var p0 = [];
    var p1 = [];
    var p2 = [];
    model.points.getPoint(0, p0);
    model.points.getPoint(1, p1);
    model.points.getPoint(2, p2);
    var u3 = 1.0 - pcoords[0] - pcoords[1];

    for (var i = 0; i < 3; i++) {
      x[i] = p0[i] * u3 + p1[i] * pcoords[0] + p2[i] * pcoords[1];
    }

    weights[0] = u3;
    weights[1] = pcoords[0];
    weights[2] = pcoords[1];
  };

  publicAPI.getParametricDistance = function (pcoords) {
    var pDist;
    var pDistMax = 0.0;
    var pc = [];
    pc[0] = pcoords[0];
    pc[1] = pcoords[1];
    pc[2] = 1.0 - pcoords[0] - pcoords[1];

    for (var i = 0; i < 3; i++) {
      if (pc[i] < 0.0) {
        pDist = -pc[i];
      } else if (pc[i] > 1.0) {
        pDist = pc[i] - 1.0;
      } else {
        // inside the cell in the parametric direction
        pDist = 0.0;
      }

      if (pDist > pDistMax) {
        pDistMax = pDist;
      }
    }

    return pDistMax;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues);
  _Cell_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(publicAPI, model, initialValues);
  vtkTriangle(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkTriangle'); // ----------------------------------------------------------------------------

var vtkTriangle$1 = _objectSpread({
  newInstance: newInstance,
  extend: extend
}, STATIC);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Filters/Sources/CubeSource.js":
/*!********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Filters/Sources/CubeSource.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkCubeSource$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Common_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Common/Core/DataArray.js */ "./node_modules/@kitware/vtk.js/Common/Core/DataArray.js");
/* harmony import */ var _Common_DataModel_PolyData_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Common/DataModel/PolyData.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/PolyData.js");
/* harmony import */ var _Common_Core_MatrixBuilder_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Common/Core/MatrixBuilder.js */ "./node_modules/@kitware/vtk.js/Common/Core/MatrixBuilder.js");






// vtkCubeSource methods
// ----------------------------------------------------------------------------

function vtkCubeSource(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkCubeSource');

  function requestData(inData, outData) {
    var _vtkMatrixBuilder$bui;

    if (model.deleted) {
      return;
    }

    var polyData = _Common_DataModel_PolyData_js__WEBPACK_IMPORTED_MODULE_3__["default"].newInstance();
    outData[0] = polyData;
    var numberOfPolys = 6;
    var numberOfPoints = 24; // Define points

    var points = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newTypedArray(model.pointType, numberOfPoints * 3);
    polyData.getPoints().setData(points, 3);
    var normals = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newTypedArray(model.pointType, numberOfPoints * 3);
    var normalArray = _Common_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance({
      name: 'Normals',
      values: normals,
      numberOfComponents: 3
    });
    polyData.getPointData().setNormals(normalArray);
    var tcdim = 2;

    if (model.generate3DTextureCoordinates === true) {
      tcdim = 3;
    }

    var textureCoords = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newTypedArray(model.pointType, numberOfPoints * tcdim);
    var tcoords = _Common_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance({
      name: 'TextureCoordinates',
      values: textureCoords,
      numberOfComponents: tcdim
    });
    polyData.getPointData().setTCoords(tcoords);
    var x = [0.0, 0.0, 0.0];
    var n = [0.0, 0.0, 0.0];
    var tc = [0.0, 0.0];
    var pointIndex = 0;
    x[0] = -model.xLength / 2.0;
    n[0] = -1.0;
    n[1] = 0.0;
    n[2] = 0.0;

    for (var i = 0; i < 2; i++) {
      x[1] = -model.yLength / 2.0;

      for (var j = 0; j < 2; j++) {
        tc[1] = x[1] + 0.5;
        x[2] = -model.zLength / 2.0;

        for (var k = 0; k < 2; k++) {
          tc[0] = (x[2] + 0.5) * (1 - 2 * i);
          points[pointIndex * 3] = x[0];
          points[pointIndex * 3 + 1] = x[1];
          points[pointIndex * 3 + 2] = x[2];
          normals[pointIndex * 3] = n[0];
          normals[pointIndex * 3 + 1] = n[1];
          normals[pointIndex * 3 + 2] = n[2];

          if (tcdim === 2) {
            textureCoords[pointIndex * tcdim] = tc[0];
            textureCoords[pointIndex * tcdim + 1] = tc[1];
          } else {
            textureCoords[pointIndex * tcdim] = 2 * i - 1;
            textureCoords[pointIndex * tcdim + 1] = 2 * j - 1;
            textureCoords[pointIndex * tcdim + 2] = 2 * k - 1;
          }

          pointIndex++;
          x[2] += model.zLength;
        }

        x[1] += model.yLength;
      }

      x[0] += model.xLength;
      n[0] += 2.0;
    }

    x[1] = -model.yLength / 2.0;
    n[1] = -1.0;
    n[0] = 0.0;
    n[2] = 0.0;

    for (var _i = 0; _i < 2; _i++) {
      x[0] = -model.xLength / 2.0;

      for (var _j = 0; _j < 2; _j++) {
        tc[0] = (x[0] + 0.5) * (2 * _i - 1);
        x[2] = -model.zLength / 2.0;

        for (var _k = 0; _k < 2; _k++) {
          tc[1] = (x[2] + 0.5) * -1;
          points[pointIndex * 3] = x[0];
          points[pointIndex * 3 + 1] = x[1];
          points[pointIndex * 3 + 2] = x[2];
          normals[pointIndex * 3] = n[0];
          normals[pointIndex * 3 + 1] = n[1];
          normals[pointIndex * 3 + 2] = n[2];

          if (tcdim === 2) {
            textureCoords[pointIndex * tcdim] = tc[0];
            textureCoords[pointIndex * tcdim + 1] = tc[1];
          } else {
            textureCoords[pointIndex * tcdim] = 2 * _j - 1;
            textureCoords[pointIndex * tcdim + 1] = 2 * _i - 1;
            textureCoords[pointIndex * tcdim + 2] = 2 * _k - 1;
          }

          pointIndex++;
          x[2] += model.zLength;
        }

        x[0] += model.xLength;
      }

      x[1] += model.yLength;
      n[1] += 2.0;
    }

    x[2] = -model.zLength / 2.0;
    n[2] = -1.0;
    n[0] = 0.0;
    n[1] = 0.0;

    for (var _i2 = 0; _i2 < 2; _i2++) {
      x[1] = -model.yLength / 2.0;

      for (var _j2 = 0; _j2 < 2; _j2++) {
        tc[1] = x[1] + 0.5;
        x[0] = -model.xLength / 2.0;

        for (var _k2 = 0; _k2 < 2; _k2++) {
          tc[0] = (x[0] + 0.5) * (2 * _i2 - 1);
          points[pointIndex * 3] = x[0];
          points[pointIndex * 3 + 1] = x[1];
          points[pointIndex * 3 + 2] = x[2];
          normals[pointIndex * 3] = n[0];
          normals[pointIndex * 3 + 1] = n[1];
          normals[pointIndex * 3 + 2] = n[2];

          if (tcdim === 2) {
            textureCoords[pointIndex * tcdim] = tc[0];
            textureCoords[pointIndex * tcdim + 1] = tc[1];
          } else {
            textureCoords[pointIndex * tcdim] = 2 * _k2 - 1;
            textureCoords[pointIndex * tcdim + 1] = 2 * _j2 - 1;
            textureCoords[pointIndex * tcdim + 2] = 2 * _i2 - 1;
          }

          pointIndex++;
          x[0] += model.xLength;
        }

        x[1] += model.yLength;
      }

      x[2] += model.zLength;
      n[2] += 2.0;
    } // Apply rotation to the points coordinates and normals


    _Common_Core_MatrixBuilder_js__WEBPACK_IMPORTED_MODULE_4__["default"].buildFromDegree().rotateX(model.rotations[0]).rotateY(model.rotations[1]).rotateZ(model.rotations[2]).apply(points).apply(normals); // Apply transformation to the points coordinates

    (_vtkMatrixBuilder$bui = _Common_Core_MatrixBuilder_js__WEBPACK_IMPORTED_MODULE_4__["default"].buildFromRadian()).translate.apply(_vtkMatrixBuilder$bui, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(model.center)).apply(points); // Define quads


    var polys = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newTypedArray(model.pointType, numberOfPolys * 5);
    polyData.getPolys().setData(polys, 1);
    var polyIndex = 0;
    polys[polyIndex++] = 4;
    polys[polyIndex++] = 0;
    polys[polyIndex++] = 1;
    polys[polyIndex++] = 3;
    polys[polyIndex++] = 2;
    polys[polyIndex++] = 4;
    polys[polyIndex++] = 4;
    polys[polyIndex++] = 6;
    polys[polyIndex++] = 7;
    polys[polyIndex++] = 5;
    polys[polyIndex++] = 4;
    polys[polyIndex++] = 8;
    polys[polyIndex++] = 10;
    polys[polyIndex++] = 11;
    polys[polyIndex++] = 9;
    polys[polyIndex++] = 4;
    polys[polyIndex++] = 12;
    polys[polyIndex++] = 13;
    polys[polyIndex++] = 15;
    polys[polyIndex++] = 14;
    polys[polyIndex++] = 4;
    polys[polyIndex++] = 16;
    polys[polyIndex++] = 18;
    polys[polyIndex++] = 19;
    polys[polyIndex++] = 17;
    polys[polyIndex++] = 4;
    polys[polyIndex++] = 20;
    polys[polyIndex++] = 21;
    polys[polyIndex++] = 23;
    polys[polyIndex] = 22;
  }

  publicAPI.setBounds = function () {
    var boundsArray = [];

    if (Array.isArray(arguments.length <= 0 ? undefined : arguments[0])) {
      boundsArray = arguments.length <= 0 ? undefined : arguments[0];
    } else {
      for (var i = 0; i < arguments.length; i++) {
        boundsArray.push(i < 0 || arguments.length <= i ? undefined : arguments[i]);
      }
    }

    if (boundsArray.length !== 6) {
      return;
    }

    model.xLength = boundsArray[1] - boundsArray[0];
    model.yLength = boundsArray[3] - boundsArray[2];
    model.zLength = boundsArray[5] - boundsArray[4];
    model.center = [(boundsArray[0] + boundsArray[1]) / 2.0, (boundsArray[2] + boundsArray[3]) / 2.0, (boundsArray[4] + boundsArray[5]) / 2.0];
  }; // Expose methods


  publicAPI.requestData = requestData;
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  xLength: 1.0,
  yLength: 1.0,
  zLength: 1.0,
  center: [0.0, 0.0, 0.0],
  rotations: [0.0, 0.0, 0.0],
  pointType: 'Float32Array',
  generate3DTextureCoordinates: false
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGet(publicAPI, model, ['xLength', 'yLength', 'zLength', 'generate3DTextureCoordinates']);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGetArray(publicAPI, model, ['center', 'rotations'], 3);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].algo(publicAPI, model, 0, 1);
  vtkCubeSource(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkCubeSource'); // ----------------------------------------------------------------------------

var vtkCubeSource$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Filters/Sources/SphereSource.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Filters/Sources/SphereSource.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkSphereSource$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Common_DataModel_PolyData_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Common/DataModel/PolyData.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/PolyData.js");
/* harmony import */ var _Common_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Common/Core/DataArray.js */ "./node_modules/@kitware/vtk.js/Common/Core/DataArray.js");




// vtkSphereSource methods
// ----------------------------------------------------------------------------

function vtkSphereSource(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkSphereSource');

  publicAPI.requestData = function (inData, outData) {
    if (model.deleted) {
      return;
    }

    var dataset = outData[0];
    var pointDataType = dataset ? dataset.getPoints().getDataType() : 'Float32Array';
    dataset = _Common_DataModel_PolyData_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(); // ----------------------------------------------------------------------

    var numPoles = 0; // Check data, determine increments, and convert to radians

    var thetaResolution = model.thetaResolution;
    var startTheta = model.startTheta < model.endTheta ? model.startTheta : model.endTheta;
    startTheta *= Math.PI / 180.0;
    var endTheta = model.endTheta > model.startTheta ? model.endTheta : model.startTheta;
    endTheta *= Math.PI / 180.0;
    var startPhi = model.startPhi < model.endPhi ? model.startPhi : model.endPhi;
    startPhi *= Math.PI / 180.0;
    var endPhi = model.endPhi > model.startPhi ? model.endPhi : model.startPhi;
    endPhi *= Math.PI / 180.0;

    if (Math.abs(startTheta - endTheta) < 2.0 * Math.PI) {
      ++thetaResolution;
    }

    var deltaTheta = (endTheta - startTheta) / model.thetaResolution;
    var jStart = model.startPhi <= 0.0 ? 1 : 0;
    var jEnd = model.phiResolution + (model.endPhi >= 180.0 ? -1 : 0);
    var numPts = model.phiResolution * thetaResolution + 2;
    var numPolys = model.phiResolution * 2 * model.thetaResolution; // Points

    var pointIdx = 0;
    var points = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newTypedArray(pointDataType, numPts * 3); // Normals

    var normals = new Float32Array(numPts * 3); // Cells

    var cellLocation = 0;
    var polys = new Uint32Array(numPolys * 5); // Create north pole if needed

    if (model.startPhi <= 0.0) {
      points[pointIdx * 3 + 0] = model.center[0];
      points[pointIdx * 3 + 1] = model.center[1];
      points[pointIdx * 3 + 2] = model.center[2] + model.radius;
      normals[pointIdx * 3 + 0] = 0;
      normals[pointIdx * 3 + 1] = 0;
      normals[pointIdx * 3 + 2] = 1;
      pointIdx++;
      numPoles++;
    } // Create south pole if needed


    if (model.endPhi >= 180.0) {
      points[pointIdx * 3 + 0] = model.center[0];
      points[pointIdx * 3 + 1] = model.center[1];
      points[pointIdx * 3 + 2] = model.center[2] - model.radius;
      normals[pointIdx * 3 + 0] = 0;
      normals[pointIdx * 3 + 1] = 0;
      normals[pointIdx * 3 + 2] = -1;
      pointIdx++;
      numPoles++;
    }

    var phiResolution = model.phiResolution - numPoles;
    var deltaPhi = (endPhi - startPhi) / (model.phiResolution - 1); // Create intermediate points

    for (var i = 0; i < thetaResolution; i++) {
      var theta = startTheta + i * deltaTheta;

      for (var j = jStart; j < jEnd; j++) {
        var phi = startPhi + j * deltaPhi;
        var radius = model.radius * Math.sin(phi);
        normals[pointIdx * 3 + 0] = radius * Math.cos(theta);
        normals[pointIdx * 3 + 1] = radius * Math.sin(theta);
        normals[pointIdx * 3 + 2] = model.radius * Math.cos(phi);
        points[pointIdx * 3 + 0] = normals[pointIdx * 3 + 0] + model.center[0];
        points[pointIdx * 3 + 1] = normals[pointIdx * 3 + 1] + model.center[1];
        points[pointIdx * 3 + 2] = normals[pointIdx * 3 + 2] + model.center[2];
        var norm = Math.sqrt(normals[pointIdx * 3 + 0] * normals[pointIdx * 3 + 0] + normals[pointIdx * 3 + 1] * normals[pointIdx * 3 + 1] + normals[pointIdx * 3 + 2] * normals[pointIdx * 3 + 2]);
        norm = norm === 0 ? 1 : norm;
        normals[pointIdx * 3 + 0] /= norm;
        normals[pointIdx * 3 + 1] /= norm;
        normals[pointIdx * 3 + 2] /= norm;
        pointIdx++;
      }
    } // Generate mesh connectivity


    var base = phiResolution * thetaResolution;

    if (Math.abs(startTheta - endTheta) < 2.0 * Math.PI) {
      --thetaResolution;
    } // around north pole


    if (model.startPhi <= 0.0) {
      for (var _i = 0; _i < thetaResolution; _i++) {
        polys[cellLocation++] = 3;
        polys[cellLocation++] = phiResolution * _i + numPoles;
        polys[cellLocation++] = phiResolution * (_i + 1) % base + numPoles;
        polys[cellLocation++] = 0;
      }
    } // around south pole


    if (model.endPhi >= 180.0) {
      var numOffset = phiResolution - 1 + numPoles;

      for (var _i2 = 0; _i2 < thetaResolution; _i2++) {
        polys[cellLocation++] = 3;
        polys[cellLocation++] = phiResolution * _i2 + numOffset;
        polys[cellLocation++] = numPoles - 1;
        polys[cellLocation++] = phiResolution * (_i2 + 1) % base + numOffset;
      }
    } // bands in-between poles


    for (var _i3 = 0; _i3 < thetaResolution; _i3++) {
      for (var _j = 0; _j < phiResolution - 1; _j++) {
        var a = phiResolution * _i3 + _j + numPoles;
        var b = a + 1;
        var c = (phiResolution * (_i3 + 1) + _j) % base + numPoles + 1;

        if (!model.latLongTessellation) {
          polys[cellLocation++] = 3;
          polys[cellLocation++] = a;
          polys[cellLocation++] = b;
          polys[cellLocation++] = c;
          polys[cellLocation++] = 3;
          polys[cellLocation++] = a;
          polys[cellLocation++] = c;
          polys[cellLocation++] = c - 1;
        } else {
          polys[cellLocation++] = 4;
          polys[cellLocation++] = a;
          polys[cellLocation++] = b;
          polys[cellLocation++] = c;
          polys[cellLocation++] = c - 1;
        }
      }
    } // Squeeze


    points = points.subarray(0, pointIdx * 3);
    dataset.getPoints().setData(points, 3);
    normals = normals.subarray(0, pointIdx * 3);
    var normalArray = _Common_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance({
      name: 'Normals',
      values: normals,
      numberOfComponents: 3
    });
    dataset.getPointData().setNormals(normalArray);
    polys = polys.subarray(0, cellLocation);
    dataset.getPolys().setData(polys, 1); // Update output

    outData[0] = dataset;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  radius: 0.5,
  latLongTessellation: false,
  thetaResolution: 8,
  startTheta: 0.0,
  endTheta: 360.0,
  phiResolution: 8,
  startPhi: 0.0,
  endPhi: 180.0,
  center: [0, 0, 0],
  pointType: 'Float32Array'
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['radius', 'latLongTessellation', 'thetaResolution', 'startTheta', 'endTheta', 'phiResolution', 'startPhi', 'endPhi']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGetArray(publicAPI, model, ['center'], 3);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].algo(publicAPI, model, 0, 1);
  vtkSphereSource(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkSphereSource'); // ----------------------------------------------------------------------------

var vtkSphereSource$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Interaction/Manipulators.js":
/*!******************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Interaction/Manipulators.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Manipulators)
/* harmony export */ });
/* harmony import */ var _Manipulators_CompositeCameraManipulator_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Manipulators/CompositeCameraManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeCameraManipulator.js");
/* harmony import */ var _Manipulators_CompositeGestureManipulator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Manipulators/CompositeGestureManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeGestureManipulator.js");
/* harmony import */ var _Manipulators_CompositeKeyboardManipulator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Manipulators/CompositeKeyboardManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeKeyboardManipulator.js");
/* harmony import */ var _Manipulators_CompositeMouseManipulator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Manipulators/CompositeMouseManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeMouseManipulator.js");
/* harmony import */ var _Manipulators_CompositeVRManipulator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Manipulators/CompositeVRManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeVRManipulator.js");
/* harmony import */ var _Manipulators_GestureCameraManipulator_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Manipulators/GestureCameraManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/GestureCameraManipulator.js");
/* harmony import */ var _Manipulators_KeyboardCameraManipulator_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Manipulators/KeyboardCameraManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/KeyboardCameraManipulator.js");
/* harmony import */ var _Manipulators_MouseBoxSelectorManipulator_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Manipulators/MouseBoxSelectorManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseBoxSelectorManipulator.js");
/* harmony import */ var _Manipulators_MouseCameraAxisRotateManipulator_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Manipulators/MouseCameraAxisRotateManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraAxisRotateManipulator.js");
/* harmony import */ var _Manipulators_MouseCameraSliceManipulator_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Manipulators/MouseCameraSliceManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraSliceManipulator.js");
/* harmony import */ var _Manipulators_MouseCameraUnicamManipulator_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Manipulators/MouseCameraUnicamManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraUnicamManipulator.js");
/* harmony import */ var _Manipulators_MouseCameraUnicamRotateManipulator_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./Manipulators/MouseCameraUnicamRotateManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraUnicamRotateManipulator.js");
/* harmony import */ var _Manipulators_MouseCameraTrackballFirstPersonManipulator_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Manipulators/MouseCameraTrackballFirstPersonManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraTrackballFirstPersonManipulator.js");
/* harmony import */ var _Manipulators_MouseCameraTrackballMultiRotateManipulator_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./Manipulators/MouseCameraTrackballMultiRotateManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraTrackballMultiRotateManipulator.js");
/* harmony import */ var _Manipulators_MouseCameraTrackballPanManipulator_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./Manipulators/MouseCameraTrackballPanManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraTrackballPanManipulator.js");
/* harmony import */ var _Manipulators_MouseCameraTrackballRollManipulator_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./Manipulators/MouseCameraTrackballRollManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraTrackballRollManipulator.js");
/* harmony import */ var _Manipulators_MouseCameraTrackballRotateManipulator_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./Manipulators/MouseCameraTrackballRotateManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraTrackballRotateManipulator.js");
/* harmony import */ var _Manipulators_MouseCameraTrackballZoomManipulator_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./Manipulators/MouseCameraTrackballZoomManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraTrackballZoomManipulator.js");
/* harmony import */ var _Manipulators_MouseCameraTrackballZoomToMouseManipulator_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./Manipulators/MouseCameraTrackballZoomToMouseManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraTrackballZoomToMouseManipulator.js");
/* harmony import */ var _Manipulators_MouseRangeManipulator_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./Manipulators/MouseRangeManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseRangeManipulator.js");
/* harmony import */ var _Manipulators_VRButtonPanManipulator_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./Manipulators/VRButtonPanManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/VRButtonPanManipulator.js");






















var Manipulators = {
  vtkCompositeCameraManipulator: _Manipulators_CompositeCameraManipulator_js__WEBPACK_IMPORTED_MODULE_0__["default"],
  vtkCompositeGestureManipulator: _Manipulators_CompositeGestureManipulator_js__WEBPACK_IMPORTED_MODULE_1__["default"],
  vtkCompositeKeyboardManipulator: _Manipulators_CompositeKeyboardManipulator_js__WEBPACK_IMPORTED_MODULE_2__["default"],
  vtkCompositeMouseManipulator: _Manipulators_CompositeMouseManipulator_js__WEBPACK_IMPORTED_MODULE_3__["default"],
  vtkCompositeVRManipulator: _Manipulators_CompositeVRManipulator_js__WEBPACK_IMPORTED_MODULE_4__["default"],
  vtkGestureCameraManipulator: _Manipulators_GestureCameraManipulator_js__WEBPACK_IMPORTED_MODULE_5__["default"],
  vtkKeyboardCameraManipulator: _Manipulators_KeyboardCameraManipulator_js__WEBPACK_IMPORTED_MODULE_6__["default"],
  vtkMouseBoxSelectorManipulator: _Manipulators_MouseBoxSelectorManipulator_js__WEBPACK_IMPORTED_MODULE_7__["default"],
  vtkMouseCameraAxisRotateManipulator: _Manipulators_MouseCameraAxisRotateManipulator_js__WEBPACK_IMPORTED_MODULE_8__["default"],
  vtkMouseCameraSliceManipulator: _Manipulators_MouseCameraSliceManipulator_js__WEBPACK_IMPORTED_MODULE_9__["default"],
  vtkMouseCameraUnicamManipulator: _Manipulators_MouseCameraUnicamManipulator_js__WEBPACK_IMPORTED_MODULE_10__["default"],
  vtkMouseCameraUnicamRotateManipulator: _Manipulators_MouseCameraUnicamRotateManipulator_js__WEBPACK_IMPORTED_MODULE_11__["default"],
  vtkMouseCameraTrackballFirstPersonManipulator: _Manipulators_MouseCameraTrackballFirstPersonManipulator_js__WEBPACK_IMPORTED_MODULE_12__["default"],
  vtkMouseCameraTrackballMultiRotateManipulator: _Manipulators_MouseCameraTrackballMultiRotateManipulator_js__WEBPACK_IMPORTED_MODULE_13__["default"],
  vtkMouseCameraTrackballPanManipulator: _Manipulators_MouseCameraTrackballPanManipulator_js__WEBPACK_IMPORTED_MODULE_14__["default"],
  vtkMouseCameraTrackballRollManipulator: _Manipulators_MouseCameraTrackballRollManipulator_js__WEBPACK_IMPORTED_MODULE_15__["default"],
  vtkMouseCameraTrackballRotateManipulator: _Manipulators_MouseCameraTrackballRotateManipulator_js__WEBPACK_IMPORTED_MODULE_16__["default"],
  vtkMouseCameraTrackballZoomManipulator: _Manipulators_MouseCameraTrackballZoomManipulator_js__WEBPACK_IMPORTED_MODULE_17__["default"],
  vtkMouseCameraTrackballZoomToMouseManipulator: _Manipulators_MouseCameraTrackballZoomToMouseManipulator_js__WEBPACK_IMPORTED_MODULE_18__["default"],
  vtkMouseRangeManipulator: _Manipulators_MouseRangeManipulator_js__WEBPACK_IMPORTED_MODULE_19__["default"],
  vtkVRButtonPanManipulator: _Manipulators_VRButtonPanManipulator_js__WEBPACK_IMPORTED_MODULE_20__["default"]
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeCameraManipulator.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeCameraManipulator.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkCompositeCameraManipulator$1),
/* harmony export */   "extend": () => (/* binding */ extend)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");


// vtkCompositeCameraManipulator methods
// ----------------------------------------------------------------------------

function vtkCompositeCameraManipulator(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkCompositeCameraManipulator'); //-------------------------------------------------------------------------

  publicAPI.computeDisplayCenter = function (iObserver, renderer) {
    var pt = iObserver.computeWorldToDisplay(renderer, model.center[0], model.center[1], model.center[2]);
    model.displayCenter[0] = pt[0];
    model.displayCenter[1] = pt[1];
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  center: [0, 0, 0],
  rotationFactor: 1,
  displayCenter: [0, 0]
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Create get-set macros

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['rotationFactor']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGetArray(publicAPI, model, ['displayCenter'], 2);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGetArray(publicAPI, model, ['center'], 3); // Object specific methods

  vtkCompositeCameraManipulator(publicAPI, model);
} // ----------------------------------------------------------------------------

var vtkCompositeCameraManipulator$1 = {
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeGestureManipulator.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeGestureManipulator.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkCompositeGestureManipulator$1),
/* harmony export */   "extend": () => (/* binding */ extend)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");


// vtkCompositeMouseManipulator methods
// ----------------------------------------------------------------------------

function vtkCompositeGestureManipulator(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkCompositeGestureManipulator');

  publicAPI.startInteraction = function () {};

  publicAPI.endInteraction = function () {};

  publicAPI.onStartPinch = function (interactor, scale) {};

  publicAPI.onStartRotate = function (interactor, rotation) {};

  publicAPI.onStartPan = function (interactor, translation) {};

  publicAPI.onPinch = function (interactor, renderer, scale) {};

  publicAPI.onRotate = function (interactor, renderer, rotation) {};

  publicAPI.onPan = function (interactor, renderer, translation) {};

  publicAPI.onEndPinch = function (interactor) {};

  publicAPI.onEndRotate = function (interactor) {};

  publicAPI.onEndPan = function (interactor) {};

  publicAPI.isPinchEnabled = function () {
    return model.pinchEnabled;
  };

  publicAPI.isPanEnabled = function () {
    return model.panEnabled;
  };

  publicAPI.isRotateEnabled = function () {
    return model.rotateEnabled;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  pinchEnabled: true,
  panEnabled: true,
  rotateEnabled: true
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Create get-set macros

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].set(publicAPI, model, ['pinchEnabled', 'panEnabled', 'rotateEnabled']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['interactorStyle']); // Object specific methods

  vtkCompositeGestureManipulator(publicAPI, model);
} // ----------------------------------------------------------------------------

var vtkCompositeGestureManipulator$1 = {
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeKeyboardManipulator.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeKeyboardManipulator.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkCompositeKeyboardManipulator$1),
/* harmony export */   "extend": () => (/* binding */ extend)
/* harmony export */ });
// ----------------------------------------------------------------------------
// vtkCompositeKeyboardManipulator methods
// ----------------------------------------------------------------------------
function vtkCompositeKeyboardManipulator(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkCompositeKeyboardManipulator');

  publicAPI.onKeyPress = function (interactor, renderer, key) {};

  publicAPI.onKeyDown = function (interactor, renderer, key) {};

  publicAPI.onKeyUp = function (interactor, renderer, key) {};
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Object specific methods

  vtkCompositeKeyboardManipulator(publicAPI, model);
} // ----------------------------------------------------------------------------

var vtkCompositeKeyboardManipulator$1 = {
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeMouseManipulator.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeMouseManipulator.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkCompositeMouseManipulator$1),
/* harmony export */   "extend": () => (/* binding */ extend)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");


// vtkCompositeMouseManipulator methods
// ----------------------------------------------------------------------------

function vtkCompositeMouseManipulator(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkCompositeMouseManipulator');

  publicAPI.startInteraction = function () {};

  publicAPI.endInteraction = function () {};

  publicAPI.onButtonDown = function (interactor, renderer, position) {};

  publicAPI.onButtonUp = function (interactor) {};

  publicAPI.onMouseMove = function (interactor, renderer, position) {};

  publicAPI.onStartScroll = function (interactor, renderer, delta) {};

  publicAPI.onScroll = function (interactor, renderer, delta) {};

  publicAPI.onEndScroll = function (interactor) {};

  publicAPI.isDragEnabled = function () {
    return model.dragEnabled;
  };

  publicAPI.isScrollEnabled = function () {
    return model.scrollEnabled;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  button: 1,
  shift: false,
  control: false,
  alt: false,
  dragEnabled: true,
  scrollEnabled: false
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Create get-set macros

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['button', 'shift', 'control', 'alt']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].set(publicAPI, model, ['dragEnabled', 'scrollEnabled']); // Object specific methods

  vtkCompositeMouseManipulator(publicAPI, model);
} // ----------------------------------------------------------------------------

var vtkCompositeMouseManipulator$1 = {
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeVRManipulator.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeVRManipulator.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkCompositeVRManipulator$1),
/* harmony export */   "extend": () => (/* binding */ extend)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Rendering_Core_RenderWindowInteractor_Constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Rendering/Core/RenderWindowInteractor/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/RenderWindowInteractor/Constants.js");



// vtkCompositeVRManipulator methods
// ----------------------------------------------------------------------------

function vtkCompositeVRManipulator(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkCompositeVRManipulator');

  publicAPI.onButton3D = function (interactor, renderer, state, device, input, pressed) {};

  publicAPI.onMove3D = function (interactor, renderer, state, device, input, pressed) {};
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {// device: null, // Device.RightController
  // input: null, // Input.TrackPad
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Create get-set macros

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['device', 'input']); // Object specific methods

  vtkCompositeVRManipulator(publicAPI, model);
} // ----------------------------------------------------------------------------

var vtkCompositeVRManipulator$1 = {
  extend: extend,
  Device: _Rendering_Core_RenderWindowInteractor_Constants_js__WEBPACK_IMPORTED_MODULE_1__.Device,
  Input: _Rendering_Core_RenderWindowInteractor_Constants_js__WEBPACK_IMPORTED_MODULE_1__.Input
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/GestureCameraManipulator.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Interaction/Manipulators/GestureCameraManipulator.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkGestureCameraManipulator$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _CompositeCameraManipulator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CompositeCameraManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeCameraManipulator.js");
/* harmony import */ var _CompositeGestureManipulator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CompositeGestureManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeGestureManipulator.js");
/* harmony import */ var _Style_InteractorStyleManipulator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Style/InteractorStyleManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Style/InteractorStyleManipulator.js");





// vtkGestureCameraManipulator methods
// ----------------------------------------------------------------------------

function vtkGestureCameraManipulator(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkGestureCameraManipulator'); //--------------------------------------------------------------------------

  publicAPI.onStartPinch = function (interactor, scale) {
    model.previousScale = scale;
  }; //---------------------------------------------------------------------------


  publicAPI.onStartRotate = function (interactor, rotation) {
    model.previousRotation = rotation;
  }; //---------------------------------------------------------------------------


  publicAPI.onStartPan = function (interactor, translation) {
    model.previousTranslation = translation;
  }; //---------------------------------------------------------------------------


  publicAPI.onPinch = function (interactor, renderer, scale) {
    _Style_InteractorStyleManipulator_js__WEBPACK_IMPORTED_MODULE_3__["default"].dollyByFactor(interactor, renderer, scale / model.previousScale);
    model.previousScale = scale;
  }; //---------------------------------------------------------------------------


  publicAPI.onPan = function (interactor, renderer, translation) {
    var camera = renderer.getActiveCamera();
    var style = interactor.getInteractorStyle(); // Calculate the focal depth since we'll be using it a lot

    var viewFocus = camera.getFocalPoint();
    viewFocus = style.computeWorldToDisplay(renderer, viewFocus[0], viewFocus[1], viewFocus[2]);
    var focalDepth = viewFocus[2];
    var trans = translation;
    var lastTrans = model.previousTranslation;
    var newPickPoint = style.computeDisplayToWorld(renderer, viewFocus[0] + trans[0] - lastTrans[0], viewFocus[1] + trans[1] - lastTrans[1], focalDepth); // Has to recalc old mouse point since the viewport has moved,
    // so can't move it outside the loop

    var oldPickPoint = style.computeDisplayToWorld(renderer, viewFocus[0], viewFocus[1], focalDepth); // Camera motion is reversed

    var motionVector = [];
    motionVector[0] = oldPickPoint[0] - newPickPoint[0];
    motionVector[1] = oldPickPoint[1] - newPickPoint[1];
    motionVector[2] = oldPickPoint[2] - newPickPoint[2];
    viewFocus = camera.getFocalPoint();
    var viewPoint = camera.getPosition();
    camera.setFocalPoint(motionVector[0] + viewFocus[0], motionVector[1] + viewFocus[1], motionVector[2] + viewFocus[2]);
    camera.setPosition(motionVector[0] + viewPoint[0], motionVector[1] + viewPoint[1], motionVector[2] + viewPoint[2]);

    if (interactor.getLightFollowCamera()) {
      renderer.updateLightsGeometryToFollowCamera();
    }

    camera.orthogonalizeViewUp();
    model.previousTranslation = translation;
  }; //---------------------------------------------------------------------------


  publicAPI.onRotate = function (interactor, renderer, rotation) {
    var camera = renderer.getActiveCamera();
    camera.roll(rotation - model.previousRotation);
    camera.orthogonalizeViewUp();
    model.previousRotation = rotation;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _CompositeGestureManipulator_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(publicAPI, model, initialValues);
  _CompositeCameraManipulator_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues); // Object specific methods

  vtkGestureCameraManipulator(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkGestureCameraManipulator'); // ----------------------------------------------------------------------------

var vtkGestureCameraManipulator$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/KeyboardCameraManipulator.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Interaction/Manipulators/KeyboardCameraManipulator.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkKeyboardCameraManipulator$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Common_DataModel_BoundingBox_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Common/DataModel/BoundingBox.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/BoundingBox.js");
/* harmony import */ var _CompositeKeyboardManipulator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CompositeKeyboardManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeKeyboardManipulator.js");
/* harmony import */ var _Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Common/Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");





var vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].vtkErrorMacro;
var ANIMATION_REQUESTER = 'vtkKeyboardCameraManipulator'; // ----------------------------------------------------------------------------
// vtkKeyboardCameraManipulator methods
// ----------------------------------------------------------------------------

function vtkKeyboardCameraManipulator(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkKeyboardCameraManipulator');
  var internal = {
    keysDown: [],
    direction: [0, 0, 0],
    skipUpdateDirection: false,
    animationSub: null,
    cameraModifiedSub: null
  }; //--------------------------------------------------------------------------

  publicAPI.inMotion = function () {
    return internal.animationSub !== null;
  }; //--------------------------------------------------------------------------


  publicAPI.resetMovementSpeed = function () {
    // Reset the movement speed to be proportional to the longest length
    // of the renderer's bounds.
    var renderer = model.renderer;
    var bounds = renderer.computeVisiblePropBounds(); // Just a number that seems to work okay for our examples...

    var divisor = 500;
    model.movementSpeed = _Common_DataModel_BoundingBox_js__WEBPACK_IMPORTED_MODULE_1__["default"].getMaxLength(bounds) / divisor;
  }; //--------------------------------------------------------------------------


  publicAPI.startMovement = function () {
    if (publicAPI.inMotion()) {
      vtkErrorMacro('Camera is already in motion!');
      return;
    }

    if (model.movementSpeed === null) {
      publicAPI.resetMovementSpeed();
    }

    var interactor = model.interactor,
        renderer = model.renderer;

    var move = function move() {
      if (internal.keysDown.length === 0) {
        return;
      } // No need to update the direction when we move the camera here...


      internal.skipUpdateDirection = true;
      publicAPI.moveCamera(renderer.getActiveCamera(), internal.direction, model.movementSpeed);
      renderer.resetCameraClippingRange();

      if (interactor.getLightFollowCamera()) {
        renderer.updateLightsGeometryToFollowCamera();
      }

      internal.skipUpdateDirection = false;
    };

    publicAPI.calculateCurrentDirection();
    var camera = renderer.getActiveCamera(); // If the camera gets modified elsewhere, let's update the direction

    internal.cameraModifiedSub = camera.onModified(publicAPI.calculateCurrentDirection);
    interactor.requestAnimation(ANIMATION_REQUESTER);
    internal.animationSub = interactor.onAnimation(function () {
      return move();
    });
  }; //--------------------------------------------------------------------------


  publicAPI.endMovement = function () {
    if (internal.animationSub) {
      internal.animationSub.unsubscribe();
      internal.animationSub = null;
    }

    model.interactor.cancelAnimation(ANIMATION_REQUESTER);

    if (internal.cameraModifiedSub) {
      internal.cameraModifiedSub.unsubscribe();
      internal.cameraModifiedSub = null;
    }
  }; //--------------------------------------------------------------------------


  publicAPI.calculateCurrentDirection = function () {
    if (internal.skipUpdateDirection) {
      return;
    } // Reset


    internal.direction = [0, 0, 0];
    var renderer = model.renderer;

    if (!renderer) {
      return;
    }

    var camera = renderer.getActiveCamera();

    if (!camera) {
      return;
    }

    if (internal.keysDown.length === 0) {
      return;
    }

    var directions = internal.keysDown.map(function (key) {
      return publicAPI.getDirectionFromKey(key, camera);
    });
    directions = directions.filter(function (item) {
      return item;
    });

    if (directions.length === 0) {
      return;
    }

    var netDirection = directions.reduce(function (a, b) {
      (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.k)(a, b, b);
      return b;
    });
    (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.l)(netDirection);
    internal.direction = netDirection;
  }; //--------------------------------------------------------------------------


  publicAPI.getDirectionFromKey = function (key, camera) {
    var direction;

    if (model.moveForwardKeys.includes(key)) {
      // Move forward
      direction = camera.getDirectionOfProjection();
    } else if (model.moveLeftKeys.includes(key)) {
      // Move left
      var dirProj = camera.getDirectionOfProjection();
      direction = [0, 0, 0];
      (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.j)(camera.getViewUp(), dirProj, direction);
    } else if (model.moveBackwardKeys.includes(key)) {
      // Move backward
      direction = camera.getDirectionOfProjection().map(function (e) {
        return -e;
      });
    } else if (model.moveRightKeys.includes(key)) {
      // Move right
      var _dirProj = camera.getDirectionOfProjection();

      direction = [0, 0, 0];
      (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.j)(_dirProj, camera.getViewUp(), direction);
    } else if (model.moveUpKeys.includes(key)) {
      // Move up
      direction = camera.getViewUp();
    } else if (model.moveDownKeys.includes(key)) {
      // Move down
      direction = camera.getViewUp().map(function (e) {
        return -e;
      });
    } else {
      return undefined;
    }

    (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.l)(direction);
    return direction;
  }; //--------------------------------------------------------------------------


  publicAPI.moveCamera = function (camera, direction, speed) {
    var position = camera.getPosition();
    var focalPoint = camera.getFocalPoint();
    camera.setFocalPoint(focalPoint[0] + direction[0] * speed, focalPoint[1] + direction[1] * speed, focalPoint[2] + direction[2] * speed);
    camera.setPosition(position[0] + direction[0] * speed, position[1] + direction[1] * speed, position[2] + direction[2] * speed);
  }; //--------------------------------------------------------------------------


  publicAPI.onKeyPress = function (interactor, renderer, key) {}; //--------------------------------------------------------------------------


  publicAPI.onKeyDown = function (interactor, renderer, key) {
    if (!internal.keysDown.includes(key)) {
      internal.keysDown.push(key);
      publicAPI.calculateCurrentDirection();
    }

    if (!publicAPI.inMotion()) {
      Object.assign(model, {
        interactor: interactor,
        renderer: renderer
      });
      publicAPI.startMovement();
    }
  }; //--------------------------------------------------------------------------


  publicAPI.onKeyUp = function (interactor, renderer, key) {
    // The following is case insensitive for when the user
    // presses/releases the shift key while this key is down.
    internal.keysDown = internal.keysDown.filter(function (item) {
      return item.toUpperCase() !== key.toUpperCase();
    });
    publicAPI.calculateCurrentDirection();

    if (internal.keysDown.length === 0) {
      publicAPI.endMovement();
    }
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  // The movementSpeed is the magnitude of the camera translation
  // for each animation frame (which occur each 1/60 second)
  // If null, publicAPI.resetMovementSpeed() will be called when
  // movement starts.
  movementSpeed: null,
  moveForwardKeys: ['w', 'W', 'ArrowUp'],
  moveLeftKeys: ['a', 'A', 'ArrowLeft'],
  moveBackwardKeys: ['s', 'S', 'ArrowDown'],
  moveRightKeys: ['d', 'D', 'ArrowRight'],
  moveUpKeys: [' '],
  moveDownKeys: ['Shift'],
  interactor: null,
  renderer: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _CompositeKeyboardManipulator_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(publicAPI, model, initialValues); // Create get-set macros

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['movementSpeed', 'moveForwardKeys', 'moveLeftKeys', 'moveBackwardKeys', 'moveRightKeys', 'moveUpKeys', 'moveDownKeys', 'interactor', 'renderer']); // Object specific methods

  vtkKeyboardCameraManipulator(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkKeyboardCameraManipulator'); // ----------------------------------------------------------------------------

var vtkKeyboardCameraManipulator$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseBoxSelectorManipulator.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseBoxSelectorManipulator.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkMouseBoxSelectorManipulator),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _CompositeMouseManipulator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CompositeMouseManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeMouseManipulator.js");





function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var OUTSIDE_BOUNDS = [-2, -1, -2, -1];
var DEFAULT_STYLE = {
  position: 'absolute',
  zIndex: 1,
  border: '2px solid #F44336',
  backgroundColor: 'rgba(0, 0, 0, 0.1)',
  borderRadius: '4px',
  boxSizing: 'border-box'
};

function applyStyle(element, style) {
  Object.keys(style).forEach(function (name) {
    element.style[name] = style[name];
  });
} // ----------------------------------------------------------------------------
// vtkMouseBoxSelectionManipulator methods
// ----------------------------------------------------------------------------


function vtkMouseBoxSelectionManipulator(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkMouseBoxSelectionManipulator'); // Private variable

  var view = null;
  var container = null;
  var previousPosition = null;
  var currentPosition = null;
  var div = null;
  var inDOM = false;

  function getBounds() {
    if (!previousPosition || !currentPosition) {
      return OUTSIDE_BOUNDS;
    }

    return [Math.min(previousPosition.x, currentPosition.x), Math.max(previousPosition.x, currentPosition.x), Math.min(previousPosition.y, currentPosition.y), Math.max(previousPosition.y, currentPosition.y)];
  }

  function applyStyleToDiv() {
    if (!view || !container) {
      return;
    }

    var _view$getSize = view.getSize(),
        _view$getSize2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__["default"])(_view$getSize, 2),
        viewWidth = _view$getSize2[0],
        viewHeight = _view$getSize2[1];

    var _container$getBoundin = container.getBoundingClientRect(),
        width = _container$getBoundin.width,
        height = _container$getBoundin.height;

    var _getBounds = getBounds(),
        _getBounds2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__["default"])(_getBounds, 4),
        xMin = _getBounds2[0],
        xMax = _getBounds2[1],
        yMin = _getBounds2[2],
        yMax = _getBounds2[3];

    div.style.left = "".concat(width * xMin / viewWidth, "px");
    div.style.top = "".concat(height - height * yMax / viewHeight, "px");
    div.style.width = "".concat(width * (xMax - xMin) / viewWidth, "px");
    div.style.height = "".concat(height * (yMax - yMin) / viewHeight, "px");
  } //-------------------------------------------------------------------------


  publicAPI.onButtonDown = function (interactor, renderer, position) {
    previousPosition = position;

    if (model.renderSelection) {
      // Need window size and location to convert to style
      if (!view) {
        view = interactor.getView();
      }

      if (!container && view) {
        container = view.getContainer();
      }

      if (!div) {
        div = document.createElement('div');
        applyStyle(div, model.selectionStyle);
      }

      applyStyleToDiv();

      if (container && !inDOM) {
        inDOM = true;
        container.appendChild(div);
      }
    }
  }; //-------------------------------------------------------------------------


  publicAPI.onMouseMove = function (interactor, renderer, position) {
    if (!previousPosition) {
      return;
    }

    if (!position) {
      return;
    }

    currentPosition = position;
    publicAPI.invokeBoxSelectInput({
      view: view,
      container: container,
      selection: getBounds()
    });

    if (model.renderSelection) {
      applyStyleToDiv();
    }
  }; //-------------------------------------------------------------------------


  publicAPI.onButtonUp = function (interactor, renderer) {
    if (!previousPosition || !currentPosition) {
      return;
    }

    publicAPI.invokeBoxSelectChange({
      view: view,
      container: container,
      selection: getBounds()
    });

    if (inDOM) {
      div.parentElement.removeChild(div);
      inDOM = false;
    } // clear positions


    view = null;
    container = null;
    previousPosition = null;
    currentPosition = null;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


function DEFAULT_VALUES(initialValues) {
  return _objectSpread(_objectSpread({
    renderSelection: true
  }, initialValues), {}, {
    selectionStyle: _objectSpread(_objectSpread({}, DEFAULT_STYLE), initialValues.selectionStyle)
  });
} // ----------------------------------------------------------------------------


function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES(initialValues)); // Inheritance

  (0,_macros_js__WEBPACK_IMPORTED_MODULE_2__.obj)(publicAPI, model);
  _CompositeMouseManipulator_js__WEBPACK_IMPORTED_MODULE_3__["default"].extend(publicAPI, model, initialValues);
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_2__.event)(publicAPI, model, 'BoxSelectChange'); // Trigger at release

  (0,_macros_js__WEBPACK_IMPORTED_MODULE_2__.event)(publicAPI, model, 'BoxSelectInput'); // Trigger while dragging

  (0,_macros_js__WEBPACK_IMPORTED_MODULE_2__.setGet)(publicAPI, model, ['renderSelection', 'selectionStyle']); // Object specific methods

  vtkMouseBoxSelectionManipulator(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = (0,_macros_js__WEBPACK_IMPORTED_MODULE_2__.newInstance)(extend, 'vtkMouseBoxSelectionManipulator'); // ----------------------------------------------------------------------------

var vtkMouseBoxSelectorManipulator = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraAxisRotateManipulator.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraAxisRotateManipulator.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkMouseCameraAxisRotateManipulator$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _CompositeCameraManipulator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CompositeCameraManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeCameraManipulator.js");
/* harmony import */ var _CompositeMouseManipulator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CompositeMouseManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeMouseManipulator.js");
/* harmony import */ var _Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Common/Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");
/* harmony import */ var _Common_Core_MatrixBuilder_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Common/Core/MatrixBuilder.js */ "./node_modules/@kitware/vtk.js/Common/Core/MatrixBuilder.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js");
/* harmony import */ var _vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/vec3.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/vec3.js");









// vtkMouseCameraAxisRotateManipulator methods
// ----------------------------------------------------------------------------

function vtkMouseCameraAxisRotateManipulator(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkMouseCameraAxisRotateManipulator');
  var newCamPos = new Float64Array(3);
  var newFp = new Float64Array(3); // const newViewUp = new Float64Array(3);

  var trans = new Float64Array(16);
  var v2 = new Float64Array(3);
  var centerNeg = new Float64Array(3);
  var direction = new Float64Array(3);
  var fpDirection = new Float64Array(3);

  publicAPI.onButtonDown = function (interactor, renderer, position) {
    model.previousPosition = position;
  };

  publicAPI.onMouseMove = function (interactor, renderer, position) {
    if (!position) {
      return;
    }

    var camera = renderer.getActiveCamera();
    var cameraPos = camera.getPosition();
    var cameraFp = camera.getFocalPoint();
    var cameraViewUp = camera.getViewUp();
    var cameraDirection = camera.getDirectionOfProjection();
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_6__.i)(trans);
    var center = model.center,
        rotationFactor = model.rotationFactor,
        rotationAxis = model.rotationAxis; // Translate to center

    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_6__.t)(trans, trans, center);
    var dx = model.previousPosition.x - position.x;
    var dy = model.previousPosition.y - position.y;
    var size = interactor.getView().getSize(); // Azimuth

    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_6__.r)(trans, trans, (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.r)(360.0 * dx / size[0] * rotationFactor), rotationAxis); // Elevation

    (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.j)(cameraDirection, cameraViewUp, v2);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_6__.r)(trans, trans, (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.r)(-360.0 * dy / size[1] * rotationFactor), v2); // Translate back

    centerNeg[0] = -center[0];
    centerNeg[1] = -center[1];
    centerNeg[2] = -center[2];
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_6__.t)(trans, trans, centerNeg); // Apply transformation to camera position, focal point, and view up

    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.t)(newCamPos, cameraPos, trans);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.t)(newFp, cameraFp, trans); // what is the current direction from the fp
    // to the camera

    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.a)(fpDirection, newCamPos, newFp);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.n)(fpDirection, fpDirection); // make the top sticky to avoid accidental flips

    if (Math.abs((0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.d)(fpDirection, rotationAxis)) > 0.95) {
      // this can be smarter where it still allows Azimuth here
      // but prevents the elevation part
      model.previousPosition = position;
      return;
    }

    if (model.useHalfAxis) {
      // what is the current distance from pos to center of rotation
      var distance$1 = (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.h)(newCamPos, center); // what is the current direction from the center of rotation
      // to the camera

      (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.a)(direction, newCamPos, center);
      (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.n)(direction, direction); // project the rotation axis onto the direction
      // so we know how much below the half plane we are

      var dotP = (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.d)(rotationAxis, direction);

      if (dotP < 0) {
        // adjust the new camera position to bring it up to the half plane
        (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.e)(newCamPos, newCamPos, rotationAxis, -dotP * distance$1); // the above step will change the distance which might feel odd
        // so the next couple lines restore the distance to the center
        // what is the new direction from the center of rotation
        // to the camera

        (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.a)(direction, newCamPos, center);
        (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.n)(direction, direction);
        (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.e)(newCamPos, center, direction, distance$1); // compute original cam direction to center

        (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.a)(v2, cameraPos, center);
        (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.n)(v2, v2); // const rAngle = 0.0;

        var acosR = Math.min(1.0, Math.max(-1.0, (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.d)(direction, v2)));
        var rAngle = Math.acos(acosR); // 0 to pi

        (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.c)(v2, v2, direction);
        (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.n)(v2, v2);
        (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.a)(newFp, cameraFp, center);
        var fpDist = (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.l)(newFp); // Note it normalizes the vector to be rotated

        var result = (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(newFp);

        _Common_Core_MatrixBuilder_js__WEBPACK_IMPORTED_MODULE_5__["default"].buildFromRadian().rotate(rAngle, v2).apply(result);
        (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.e)(newFp, center, result, fpDist);
      }
    }

    camera.setPosition(newCamPos[0], newCamPos[1], newCamPos[2]);
    camera.setFocalPoint(newFp[0], newFp[1], newFp[2]);
    camera.setViewUp(rotationAxis);
    renderer.resetCameraClippingRange();

    if (interactor.getLightFollowCamera()) {
      renderer.updateLightsGeometryToFollowCamera();
    }

    model.previousPosition = position;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  rotationAxis: [0, 0, 1],
  useHalfAxis: true
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGet(publicAPI, model, ['rotationAxis', 'useHalfAxis']);
  _CompositeMouseManipulator_js__WEBPACK_IMPORTED_MODULE_3__["default"].extend(publicAPI, model, initialValues);
  _CompositeCameraManipulator_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(publicAPI, model, initialValues); // Object specific methods

  vtkMouseCameraAxisRotateManipulator(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkMouseCameraAxisRotateManipulator'); // ----------------------------------------------------------------------------

var vtkMouseCameraAxisRotateManipulator$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraSliceManipulator.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraSliceManipulator.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkMouseCameraSliceManipulator$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _CompositeCameraManipulator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CompositeCameraManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeCameraManipulator.js");
/* harmony import */ var _CompositeMouseManipulator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CompositeMouseManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeMouseManipulator.js");
/* harmony import */ var _Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Common/Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");





// vtkMouseCameraSliceManipulator methods
// ----------------------------------------------------------------------------

function vtkMouseCameraSliceManipulator(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkMouseCameraSliceManipulator');

  publicAPI.onButtonDown = function (interactor, renderer, position) {
    model.previousPosition = position;
  };

  publicAPI.onMouseMove = function (interactor, renderer, position) {
    if (!position) {
      return;
    }

    var dy = position.y - model.previousPosition.y;
    var camera = renderer.getActiveCamera();
    var range = camera.getClippingRange();
    var distance = camera.getDistance(); // scale the interaction by the height of the viewport

    var viewportHeight = 0.0;

    if (camera.getParallelProjection()) {
      viewportHeight = 2.0 * camera.getParallelScale();
    } else {
      var angle = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.r)(camera.getViewAngle());
      viewportHeight = 2.0 * distance * Math.tan(0.5 * angle);
    }

    var size = interactor.getView().getViewportSize(renderer);
    var delta = dy * viewportHeight / size[1];
    distance += delta; // clamp the distance to the clipping range

    if (distance < range[0]) {
      distance = range[0] + viewportHeight * 1e-3;
    }

    if (distance > range[1]) {
      distance = range[1] - viewportHeight * 1e-3;
    }

    camera.setDistance(distance);
    model.previousPosition = position;
  };

  publicAPI.onScroll = function (interactor, renderer, delta) {
    if (!delta) {
      return;
    }

    var scrollDelta = 1.0 - delta;
    scrollDelta *= 25; // TODO: expose factor?

    var camera = renderer.getActiveCamera();
    var range = camera.getClippingRange();
    var distance = camera.getDistance();
    distance += scrollDelta; // clamp the distance to the clipping range

    if (distance < range[0]) {
      distance = range[0];
    }

    if (distance > range[1]) {
      distance = range[1];
    }

    camera.setDistance(distance);
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _CompositeCameraManipulator_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues);
  _CompositeMouseManipulator_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(publicAPI, model, initialValues); // Object specific methods

  vtkMouseCameraSliceManipulator(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkMouseCameraSliceManipulator'); // ----------------------------------------------------------------------------

var vtkMouseCameraSliceManipulator$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraTrackballFirstPersonManipulator.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraTrackballFirstPersonManipulator.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkMouseCameraTrackballFirstPersonManipulator$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _CompositeCameraManipulator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CompositeCameraManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeCameraManipulator.js");
/* harmony import */ var _CompositeMouseManipulator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CompositeMouseManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeMouseManipulator.js");




var ANIMATION_REQUESTER = 'vtkMouseCameraTrackballFirstPersonManipulator'; // ----------------------------------------------------------------------------
// vtkMouseCameraTrackballFirstPersonManipulator methods
// ----------------------------------------------------------------------------

function vtkMouseCameraTrackballFirstPersonManipulator(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkMouseCameraTrackballFirstPersonManipulator');
  var internal = {
    interactor: null,
    renderer: null,
    previousPosition: null
  }; //--------------------------------------------------------------------------

  publicAPI.onButtonDown = function (interactor, renderer, position) {
    internal.previousPosition = position;

    if (model.usePointerLock && !interactor.isPointerLocked()) {
      Object.assign(internal, {
        interactor: interactor,
        renderer: renderer
      });
      interactor.requestPointerLock();
      publicAPI.startPointerLockInteraction();
    }
  }; //--------------------------------------------------------------------------


  publicAPI.startPointerLockInteraction = function () {
    var interactor = internal.interactor; // TODO: at some point, this should perhaps be done in
    // RenderWindowInteractor instead of here.
    // We need to hook into mousemove directly for two reasons:
    // 1. We need to keep receiving mouse move events after the mouse button
    //    is released. This is currently not possible with
    //    vtkInteractorStyleManipulator.
    // 2. Since the mouse is stationary in pointer lock mode, we need the
    //    event.movementX and event.movementY info, which are not currently
    //    passed via interactor.onMouseMove.

    document.addEventListener('mousemove', publicAPI.onPointerLockMove);
    var subscription = null;

    var endInteraction = function endInteraction() {
      document.removeEventListener('mousemove', publicAPI.onPointerLockMove);
      subscription.unsubscribe();
    };

    subscription = interactor.onEndPointerLock(endInteraction);
  }; //--------------------------------------------------------------------------


  publicAPI.onPointerLockMove = function (e) {
    var sensitivity = model.sensitivity;
    var yaw = -1 * e.movementX * sensitivity;
    var pitch = -1 * e.movementY * sensitivity;
    publicAPI.moveCamera(yaw, pitch);
  }; //--------------------------------------------------------------------------


  publicAPI.onMouseMove = function (interactor, renderer, position) {
    // This is currently only being called for non pointer lock mode
    if (!position) {
      return;
    }

    var previousPosition = internal.previousPosition;
    var sensitivity = model.sensitivity;
    var yaw = (previousPosition.x - position.x) * sensitivity;
    var pitch = (position.y - previousPosition.y) * sensitivity;
    Object.assign(internal, {
      interactor: interactor,
      renderer: renderer
    });
    publicAPI.moveCamera(yaw, pitch);
    internal.previousPosition = position;
  }; //--------------------------------------------------------------------------


  publicAPI.moveCamera = function (yaw, pitch) {
    var renderer = internal.renderer,
        interactor = internal.interactor;
    var camera = renderer.getActiveCamera(); // We need to pick a number of steps here that is not too few
    // (or the camera will be jittery) and not too many (or the
    // animations will take too long).
    // Perhaps this should be calculated?

    var numSteps = model.numAnimationSteps;
    var yawStep = yaw / numSteps;
    var pitchStep = pitch / numSteps;
    var now = performance.now().toString();
    var animationRequester = "".concat(ANIMATION_REQUESTER, ".").concat(now);
    var curStep = 0;
    var animationSub = null;

    var performStep = function performStep() {
      camera.yaw(yawStep);
      camera.pitch(pitchStep);
      camera.orthogonalizeViewUp();
      curStep += 1;

      if (curStep === numSteps) {
        animationSub.unsubscribe();
        renderer.resetCameraClippingRange();

        if (interactor.getLightFollowCamera()) {
          renderer.updateLightsGeometryToFollowCamera();
        } // This needs to be posted to the event loop so it isn't called
        // in the `handleAnimation` stack, or else the animation will
        // not be canceled.


        var cancelRequest = function cancelRequest() {
          internal.interactor.cancelAnimation(animationRequester);
        };

        setTimeout(cancelRequest, 0);
      }
    };

    interactor.requestAnimation(animationRequester);
    animationSub = interactor.onAnimation(function () {
      return performStep();
    });
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  numAnimationSteps: 5,
  sensitivity: 0.05,
  usePointerLock: true
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _CompositeCameraManipulator_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues);
  _CompositeMouseManipulator_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(publicAPI, model, initialValues); // Create get-set macros

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['numAnimationSteps', 'sensitivity', 'usePointerLock']); // Object specific methods

  vtkMouseCameraTrackballFirstPersonManipulator(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkMouseCameraTrackballFirstPersonManipulator'); // ----------------------------------------------------------------------------

var vtkMouseCameraTrackballFirstPersonManipulator$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraTrackballMultiRotateManipulator.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraTrackballMultiRotateManipulator.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkMouseCameraTrackballMultiRotateManipulator$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _CompositeCameraManipulator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CompositeCameraManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeCameraManipulator.js");
/* harmony import */ var _CompositeMouseManipulator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CompositeMouseManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeMouseManipulator.js");
/* harmony import */ var _MouseCameraTrackballRotateManipulator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./MouseCameraTrackballRotateManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraTrackballRotateManipulator.js");
/* harmony import */ var _MouseCameraTrackballRollManipulator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./MouseCameraTrackballRollManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraTrackballRollManipulator.js");






function max(x, y) {
  return x < y ? y : x;
}

function sqr(x) {
  return x * x;
} // ----------------------------------------------------------------------------
// vtkMouseCameraTrackballMultiRotateManipulator methods
// ----------------------------------------------------------------------------


function vtkMouseCameraTrackballMultiRotateManipulator(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkMouseCameraTrackballMultiRotateManipulator');
  var rotateManipulator = _MouseCameraTrackballRotateManipulator_js__WEBPACK_IMPORTED_MODULE_3__["default"].newInstance();
  var rollManipulator = _MouseCameraTrackballRollManipulator_js__WEBPACK_IMPORTED_MODULE_4__["default"].newInstance();
  var currentManipulator = null;

  publicAPI.onButtonDown = function (interactor, renderer, position) {
    var viewSize = interactor.getView().getSize();
    var viewCenter = [0.5 * viewSize[0], 0.5 * viewSize[1]];
    var rotateRadius = 0.9 * max(viewCenter[0], viewCenter[1]);
    var dist2 = sqr(viewCenter[0] - position.x) + sqr(viewCenter[1] - position.y);

    if (rotateRadius * rotateRadius > dist2) {
      currentManipulator = rotateManipulator;
    } else {
      currentManipulator = rollManipulator;
    }

    currentManipulator.setButton(publicAPI.getButton());
    currentManipulator.setShift(publicAPI.getShift());
    currentManipulator.setControl(publicAPI.getControl());
    currentManipulator.setCenter(publicAPI.getCenter());
    currentManipulator.onButtonDown(interactor, position);
  };

  publicAPI.onButtonUp = function (interactor) {
    if (currentManipulator) {
      currentManipulator.onButtonUp(interactor);
    }
  };

  publicAPI.onMouseMove = function (interactor, renderer, position) {
    if (currentManipulator) {
      currentManipulator.onMouseMove(interactor, renderer, position);
    }
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _CompositeMouseManipulator_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(publicAPI, model, initialValues);
  _CompositeCameraManipulator_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues); // Object specific methods

  vtkMouseCameraTrackballMultiRotateManipulator(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkMouseCameraTrackballMultiRotateManipulator'); // ----------------------------------------------------------------------------

var vtkMouseCameraTrackballMultiRotateManipulator$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraTrackballPanManipulator.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraTrackballPanManipulator.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkMouseCameraTrackballPanManipulator$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _CompositeCameraManipulator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CompositeCameraManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeCameraManipulator.js");
/* harmony import */ var _CompositeMouseManipulator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CompositeMouseManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeMouseManipulator.js");
/* harmony import */ var _Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Common/Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");





// vtkMouseCameraTrackballPanManipulator methods
// ----------------------------------------------------------------------------

function vtkMouseCameraTrackballPanManipulator(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkMouseCameraTrackballPanManipulator');

  publicAPI.onButtonDown = function (interactor, renderer, position) {
    model.previousPosition = position;
  };

  publicAPI.onMouseMove = function (interactor, renderer, position) {
    if (!position) {
      return;
    }

    var pos = position;
    var lastPos = model.previousPosition;
    model.previousPosition = position;
    var camera = renderer.getActiveCamera();
    var camPos = camera.getPosition();
    var fp = camera.getFocalPoint();

    if (camera.getParallelProjection()) {
      camera.orthogonalizeViewUp();
      var up = camera.getViewUp();
      var vpn = camera.getViewPlaneNormal();
      var right = [0, 0, 0];
      (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.j)(vpn, up, right); // These are different because y is flipped.

      var height = interactor.getView().getSize()[1];
      var dx = (pos.x - lastPos.x) / height;
      var dy = (lastPos.y - pos.y) / height;
      var scale = camera.getParallelScale();
      dx *= scale * 2.0;
      dy *= scale * 2.0;
      var tmp = right[0] * dx + up[0] * dy;
      camPos[0] += tmp;
      fp[0] += tmp;
      tmp = right[1] * dx + up[1] * dy;
      camPos[1] += tmp;
      fp[1] += tmp;
      tmp = right[2] * dx + up[2] * dy;
      camPos[2] += tmp;
      fp[2] += tmp;
      camera.setPosition(camPos[0], camPos[1], camPos[2]);
      camera.setFocalPoint(fp[0], fp[1], fp[2]);
    } else {
      var center = model.center;
      var style = interactor.getInteractorStyle();
      var focalDepth = style.computeWorldToDisplay(renderer, center[0], center[1], center[2])[2];
      var worldPoint = style.computeDisplayToWorld(renderer, pos.x, pos.y, focalDepth);
      var lastWorldPoint = style.computeDisplayToWorld(renderer, lastPos.x, lastPos.y, focalDepth);
      var newCamPos = [camPos[0] + (lastWorldPoint[0] - worldPoint[0]), camPos[1] + (lastWorldPoint[1] - worldPoint[1]), camPos[2] + (lastWorldPoint[2] - worldPoint[2])];
      var newFp = [fp[0] + (lastWorldPoint[0] - worldPoint[0]), fp[1] + (lastWorldPoint[1] - worldPoint[1]), fp[2] + (lastWorldPoint[2] - worldPoint[2])];
      camera.setPosition(newCamPos[0], newCamPos[1], newCamPos[2]);
      camera.setFocalPoint(newFp[0], newFp[1], newFp[2]);
    }

    renderer.resetCameraClippingRange();

    if (interactor.getLightFollowCamera()) {
      renderer.updateLightsGeometryToFollowCamera();
    }
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _CompositeCameraManipulator_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues);
  _CompositeMouseManipulator_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(publicAPI, model, initialValues); // Object specific methods

  vtkMouseCameraTrackballPanManipulator(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkMouseCameraTrackballPanManipulator'); // ----------------------------------------------------------------------------

var vtkMouseCameraTrackballPanManipulator$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraTrackballRollManipulator.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraTrackballRollManipulator.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkMouseCameraTrackballRollManipulator$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _CompositeCameraManipulator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CompositeCameraManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeCameraManipulator.js");
/* harmony import */ var _CompositeMouseManipulator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CompositeMouseManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeMouseManipulator.js");
/* harmony import */ var _Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Common/Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js");
/* harmony import */ var _vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/vec3.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/vec3.js");







// vtkMouseCameraTrackballRollManipulator methods
// ----------------------------------------------------------------------------

function vtkMouseCameraTrackballRollManipulator(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkMouseCameraTrackballRollManipulator');
  var axis = new Float64Array(3);
  var direction = new Float64Array(3);
  var centerNeg = new Float64Array(3);
  var transform = new Float64Array(16);
  var newCamPos = new Float64Array(3);
  var newFp = new Float64Array(3);
  var newViewUp = new Float64Array(3);

  publicAPI.onButtonDown = function (interactor, renderer, position) {
    model.previousPosition = position;
  };

  publicAPI.onMouseMove = function (interactor, renderer, position) {
    if (!position) {
      return;
    }

    var camera = renderer.getActiveCamera(); // compute view vector (rotation axis)

    var cameraPos = camera.getPosition();
    var cameraFp = camera.getFocalPoint();
    var viewUp = camera.getViewUp();
    axis[0] = cameraFp[0] - cameraPos[0];
    axis[1] = cameraFp[1] - cameraPos[1];
    axis[2] = cameraFp[2] - cameraPos[2]; // compute the angle of rotation
    // - first compute the two vectors (center to mouse)

    publicAPI.computeDisplayCenter(interactor.getInteractorStyle(), renderer);
    var x1 = model.previousPosition.x - model.displayCenter[0];
    var x2 = position.x - model.displayCenter[0];
    var y1 = model.previousPosition.y - model.displayCenter[1];
    var y2 = position.y - model.displayCenter[1];

    if (x2 === 0 && y2 === 0 || x1 === 0 && y1 === 0) {
      // don't ever want to divide by zero
      return;
    } // - divide by magnitudes to get angle


    var angle = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.y)((x1 * y2 - y1 * x2) / (Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2)));
    var center = model.center;
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.i)(transform);
    centerNeg[0] = -center[0];
    centerNeg[1] = -center[1];
    centerNeg[2] = -center[2]; // Translate to center

    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.t)(transform, transform, center); // roll

    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.r)(transform, transform, (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.r)(angle), axis); // Translate back

    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.t)(transform, transform, centerNeg); // Apply transformation to camera position, focal point, and view up

    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.t)(newCamPos, cameraPos, transform);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.t)(newFp, cameraFp, transform);
    direction[0] = viewUp[0] + cameraPos[0];
    direction[1] = viewUp[1] + cameraPos[1];
    direction[2] = viewUp[2] + cameraPos[2];
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.t)(newViewUp, direction, transform);
    camera.setPosition(newCamPos[0], newCamPos[1], newCamPos[2]);
    camera.setFocalPoint(newFp[0], newFp[1], newFp[2]);
    camera.setViewUp(newViewUp[0] - newCamPos[0], newViewUp[1] - newCamPos[1], newViewUp[2] - newCamPos[2]);
    camera.orthogonalizeViewUp();
    renderer.resetCameraClippingRange();

    if (interactor.getLightFollowCamera()) {
      renderer.updateLightsGeometryToFollowCamera();
    }

    model.previousPosition = position;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _CompositeCameraManipulator_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues);
  _CompositeMouseManipulator_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(publicAPI, model, initialValues); // Object specific methods

  vtkMouseCameraTrackballRollManipulator(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkMouseCameraTrackballRollManipulator'); // ----------------------------------------------------------------------------

var vtkMouseCameraTrackballRollManipulator$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraTrackballRotateManipulator.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraTrackballRotateManipulator.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkMouseCameraTrackballRotateManipulator$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _CompositeCameraManipulator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CompositeCameraManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeCameraManipulator.js");
/* harmony import */ var _CompositeMouseManipulator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CompositeMouseManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeMouseManipulator.js");
/* harmony import */ var _Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Common/Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js");
/* harmony import */ var _vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/vec3.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/vec3.js");







// vtkMouseCameraTrackballRotateManipulator methods
// ----------------------------------------------------------------------------

function vtkMouseCameraTrackballRotateManipulator(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkMouseCameraTrackballRotateManipulator');
  var newCamPos = new Float64Array(3);
  var newFp = new Float64Array(3);
  var newViewUp = new Float64Array(3);
  var trans = new Float64Array(16);
  var v2 = new Float64Array(3);
  var centerNeg = new Float64Array(3);
  var direction = new Float64Array(3);

  publicAPI.onButtonDown = function (interactor, renderer, position) {
    model.previousPosition = position;
  };

  publicAPI.onMouseMove = function (interactor, renderer, position) {
    if (!position) {
      return;
    }

    var camera = renderer.getActiveCamera();
    var cameraPos = camera.getPosition();
    var cameraFp = camera.getFocalPoint();
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.i)(trans);
    var center = model.center,
        rotationFactor = model.rotationFactor;

    if (model.useFocalPointAsCenterOfRotation) {
      center[0] = cameraFp[0];
      center[1] = cameraFp[1];
      center[2] = cameraFp[2];
    }

    var dx = model.previousPosition.x - position.x;
    var dy = model.previousPosition.y - position.y;
    var size = interactor.getView().getSize(); // Azimuth

    var viewUp = camera.getViewUp();

    if (model.useWorldUpVec) {
      var centerOfRotation = new Float64Array(3);
      (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.i)(centerOfRotation, model.worldUpVec); // Compute projection of cameraPos onto worldUpVec

      (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.t)(centerOfRotation, (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.d)(cameraPos, model.worldUpVec) / (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.d)(model.worldUpVec, model.worldUpVec));
      (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.k)(center, centerOfRotation, centerOfRotation);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.t)(trans, trans, centerOfRotation);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.r)(trans, trans, (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.r)(360.0 * dx / size[0] * rotationFactor), model.worldUpVec); // Translate back

      centerOfRotation[0] = -centerOfRotation[0];
      centerOfRotation[1] = -centerOfRotation[1];
      centerOfRotation[2] = -centerOfRotation[2];
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.t)(trans, trans, centerOfRotation);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.t)(trans, trans, center);
    } else {
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.t)(trans, trans, center);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.r)(trans, trans, (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.r)(360.0 * dx / size[0] * rotationFactor), viewUp);
    } // Elevation


    (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.j)(camera.getDirectionOfProjection(), viewUp, v2);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.r)(trans, trans, (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.r)(-360.0 * dy / size[1] * rotationFactor), v2); // Translate back

    centerNeg[0] = -center[0];
    centerNeg[1] = -center[1];
    centerNeg[2] = -center[2];
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.t)(trans, trans, centerNeg); // Apply transformation to camera position, focal point, and view up

    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.t)(newCamPos, cameraPos, trans);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.t)(newFp, cameraFp, trans);
    direction[0] = viewUp[0] + cameraPos[0];
    direction[1] = viewUp[1] + cameraPos[1];
    direction[2] = viewUp[2] + cameraPos[2];
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.t)(newViewUp, direction, trans);
    camera.setPosition(newCamPos[0], newCamPos[1], newCamPos[2]);
    camera.setFocalPoint(newFp[0], newFp[1], newFp[2]);
    camera.setViewUp(newViewUp[0] - newCamPos[0], newViewUp[1] - newCamPos[1], newViewUp[2] - newCamPos[2]);
    camera.orthogonalizeViewUp();
    renderer.resetCameraClippingRange();

    if (interactor.getLightFollowCamera()) {
      renderer.updateLightsGeometryToFollowCamera();
    }

    model.previousPosition = position;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  useWorldUpVec: false,
  // set WorldUpVector to be y-axis by default
  worldUpVec: [0, 1, 0],
  useFocalPointAsCenterOfRotation: false
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _CompositeMouseManipulator_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(publicAPI, model, initialValues);
  _CompositeCameraManipulator_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues); // Create get-set macro

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['useWorldUpVec']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGetArray(publicAPI, model, ['worldUpVec'], 3);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['useFocalPointAsCenterOfRotation']); // Object specific methods

  vtkMouseCameraTrackballRotateManipulator(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkMouseCameraTrackballRotateManipulator'); // ----------------------------------------------------------------------------

var vtkMouseCameraTrackballRotateManipulator$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraTrackballZoomManipulator.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraTrackballZoomManipulator.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkMouseCameraTrackballZoomManipulator$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _CompositeCameraManipulator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CompositeCameraManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeCameraManipulator.js");
/* harmony import */ var _CompositeMouseManipulator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CompositeMouseManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeMouseManipulator.js");




// vtkMouseCameraTrackballZoomManipulator methods
// ----------------------------------------------------------------------------

function vtkMouseCameraTrackballZoomManipulator(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkMouseCameraTrackballZoomManipulator');

  publicAPI.onButtonDown = function (interactor, renderer, position) {
    model.previousPosition = position;
    var size = interactor.getView().getSize();
    var camera = renderer.getActiveCamera();
    var direction = model.flipDirection ? -1 : 1;

    if (camera.getParallelProjection()) {
      model.zoomScale = 1.5 / size[1] * direction;
    } else {
      var range = camera.getClippingRange();
      model.zoomScale = 1.5 * (range[1] / size[1]) * direction;
    }
  };

  publicAPI.onMouseMove = function (interactor, renderer, position) {
    if (!position) {
      return;
    }

    var dy = model.previousPosition.y - position.y;
    var camera = renderer.getActiveCamera();

    if (camera.getParallelProjection()) {
      var k = dy * model.zoomScale;
      camera.setParallelScale((1.0 - k) * camera.getParallelScale());
    } else {
      var cameraPos = camera.getPosition();
      var cameraFp = camera.getFocalPoint();
      var norm = camera.getDirectionOfProjection();

      var _k = dy * model.zoomScale;

      var tmp = _k * norm[0];
      cameraPos[0] += tmp;
      cameraFp[0] += tmp;
      tmp = _k * norm[1];
      cameraPos[1] += tmp;
      cameraFp[1] += tmp;
      tmp = _k * norm[2];
      cameraPos[2] += tmp;
      cameraFp[2] += tmp;

      if (!camera.getFreezeFocalPoint()) {
        camera.setFocalPoint(cameraFp[0], cameraFp[1], cameraFp[2]);
      }

      camera.setPosition(cameraPos[0], cameraPos[1], cameraPos[2]);
      renderer.resetCameraClippingRange();
    }

    if (interactor.getLightFollowCamera()) {
      renderer.updateLightsGeometryToFollowCamera();
    }

    model.previousPosition = position;
  };

  publicAPI.onScroll = function (interactor, renderer, delta) {
    if (!delta) {
      return;
    }

    var camera = renderer.getActiveCamera();
    var dyf = 1 - delta / 10;

    if (camera.getParallelProjection()) {
      camera.setParallelScale(camera.getParallelScale() / dyf);
    } else {
      camera.dolly(dyf);
      renderer.resetCameraClippingRange();
    }

    if (interactor.getLightFollowCamera()) {
      renderer.updateLightsGeometryToFollowCamera();
    }
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  zoomScale: 0.0,
  flipDirection: false
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _CompositeMouseManipulator_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(publicAPI, model, initialValues);
  _CompositeCameraManipulator_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['flipDirection']); // Object specific methods

  vtkMouseCameraTrackballZoomManipulator(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkMouseCameraTrackballZoomManipulator'); // ----------------------------------------------------------------------------

var vtkMouseCameraTrackballZoomManipulator$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraTrackballZoomToMouseManipulator.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraTrackballZoomToMouseManipulator.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkMouseCameraTrackballZoomToMouseManipulator$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Style_InteractorStyleManipulator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Style/InteractorStyleManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Style/InteractorStyleManipulator.js");
/* harmony import */ var _MouseCameraTrackballZoomManipulator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MouseCameraTrackballZoomManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraTrackballZoomManipulator.js");




// vtkMouseCameraTrackballZoomToMouseManipulator methods
// ----------------------------------------------------------------------------

function vtkMouseCameraTrackballZoomToMouseManipulator(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkMouseCameraTrackballZoomToMouseManipulator');
  var superOnButtonDown = publicAPI.onButtonDown;

  publicAPI.onButtonDown = function (interactor, renderer, position) {
    superOnButtonDown(interactor, renderer, position);
    model.zoomPosition = position;
  };

  publicAPI.onMouseMove = function (interactor, renderer, position) {
    if (!position) {
      return;
    }

    var dy = model.previousPosition.y - position.y;
    var k = dy * model.zoomScale;
    _Style_InteractorStyleManipulator_js__WEBPACK_IMPORTED_MODULE_1__["default"].dollyToPosition(1.0 - k, model.zoomPosition, renderer, interactor);

    if (interactor.getLightFollowCamera()) {
      renderer.updateLightsGeometryToFollowCamera();
    }

    model.previousPosition = position;
  };

  publicAPI.onScroll = function (interactor, renderer, delta, position) {
    if (!delta || !position) {
      return;
    }

    var dyf = 1 - delta * 0.1;
    _Style_InteractorStyleManipulator_js__WEBPACK_IMPORTED_MODULE_1__["default"].dollyToPosition(dyf, position, renderer, interactor);

    if (interactor.getLightFollowCamera()) {
      renderer.updateLightsGeometryToFollowCamera();
    }
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  zoomPosition: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _MouseCameraTrackballZoomManipulator_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(publicAPI, model, initialValues); // Object specific methods

  vtkMouseCameraTrackballZoomToMouseManipulator(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkMouseCameraTrackballZoomToMouseManipulator'); // ----------------------------------------------------------------------------

var vtkMouseCameraTrackballZoomToMouseManipulator$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraUnicamManipulator.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraUnicamManipulator.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkMouseCameraUnicamManipulator$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
/* harmony import */ var _CompositeCameraManipulator_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CompositeCameraManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeCameraManipulator.js");
/* harmony import */ var _CompositeMouseManipulator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CompositeMouseManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeMouseManipulator.js");
/* harmony import */ var _Rendering_Core_InteractorStyle_Constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Rendering/Core/InteractorStyle/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/InteractorStyle/Constants.js");
/* harmony import */ var _MouseCameraUnicamRotateManipulator_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./MouseCameraUnicamRotateManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraUnicamRotateManipulator.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Common/Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");









var States = _Rendering_Core_InteractorStyle_Constants_js__WEBPACK_IMPORTED_MODULE_4__["default"].States; // ----------------------------------------------------------------------------
// vtkMouseCameraUnicamManipulator methods
// ----------------------------------------------------------------------------

function vtkMouseCameraUnicamManipulator(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkMouseCameraUnicamManipulator');
  model.state = States.IS_NONE;
  model.rotateManipulator = _MouseCameraUnicamRotateManipulator_js__WEBPACK_IMPORTED_MODULE_5__["default"].newInstance({
    button: model.button,
    shift: model.shift,
    control: model.control,
    alt: model.alt,
    dragEnabled: model.dragEnabled,
    scrollEnabled: model.scrollEnabled,
    displayFocusSphereOnButtonDown: false
  }); //----------------------------------------------------------------------------

  var normalize$1 = function normalize(position, interactor) {
    var _interactor$getView$g = interactor.getView().getSize(),
        _interactor$getView$g2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__["default"])(_interactor$getView$g, 2),
        width = _interactor$getView$g2[0],
        height = _interactor$getView$g2[1];

    var nx = -1.0 + 2.0 * position.x / width;
    var ny = -1.0 + 2.0 * position.y / height;
    return {
      x: nx,
      y: ny
    };
  }; // Given a 3D point & a vtkCamera, compute the vectors that extend
  // from the projection of the center of projection to the center of
  // the right-edge and the center of the top-edge onto the plane
  // containing the 3D point & with normal parallel to the camera's
  // projection plane.


  var getRightVAndUpV = function getRightVAndUpV(downPoint, interactor) {
    // Compute the horizontal & vertical scaling ('scalex' and 'scaley')
    // factors as function of the down point & camera params.
    var camera = interactor.findPokedRenderer().getActiveCamera();
    var cameraPosition = camera.getPosition();
    var cameraToPointVec = [0, 0, 0]; // Construct a vector from the viewing position to the picked point

    (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_7__.g)(downPoint, cameraPosition, cameraToPointVec);

    if (camera.getParallelProjection()) {
      (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_7__.t)(cameraToPointVec, camera.getParallelScale());
    } // Get shortest distance 'l' between the viewing position and
    // plane parallel to the projection plane that contains the 'downPoint'.


    var atV = camera.getViewPlaneNormal();
    (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_7__.l)(atV);
    var l = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_7__.d)(cameraToPointVec, atV);
    var viewAngle = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_7__.r)(camera.getViewAngle());

    var _interactor$getView$g3 = interactor.getView().getSize(),
        _interactor$getView$g4 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__["default"])(_interactor$getView$g3, 2),
        width = _interactor$getView$g4[0],
        height = _interactor$getView$g4[1];

    var scaleX = width / height * (2 * l * Math.tan(viewAngle / 2) / 2);
    var scaleY = 2 * l * Math.tan(viewAngle / 2) / 2; // Construct the camera offset vector as function of delta mouse X & Y.

    var upV = camera.getViewUp();
    var rightV = [];
    (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_7__.j)(upV, atV, rightV); // (Make sure 'upV' is orthogonal to 'atV' & 'rightV')

    (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_7__.j)(atV, rightV, upV);
    (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_7__.l)(rightV);
    (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_7__.l)(upV);
    (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_7__.t)(rightV, scaleX);
    (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_7__.t)(upV, scaleY);
    return {
      rightV: rightV,
      upV: upV
    };
  }; //----------------------------------------------------------------------------


  var choose = function choose(interactor, position) {
    var normalizedPosition = normalize$1(position, interactor);
    var normalizedPreviousPosition = normalize$1(model.previousPosition, interactor);
    var delta = {
      x: normalizedPosition.x - normalizedPreviousPosition.x,
      y: normalizedPosition.y - normalizedPreviousPosition.y
    };
    model.previousPosition = position;
    var deltaT = Date.now() / 1000 - model.time;
    model.dist += Math.sqrt(Math.pow(delta.x, 2) + Math.pow(delta.y, 2));
    var sDelta = {
      x: position.x - model.startPosition.x,
      y: position.y - model.startPosition.y
    };
    var len = Math.sqrt(Math.pow(sDelta.x, 2) + Math.pow(sDelta.y, 2));

    if (Math.abs(sDelta.y) / len > 0.9 && deltaT > 0.05) {
      model.state = States.IS_DOLLY;
    } else if (deltaT >= 0.1 || model.dist >= 0.03) {
      if (Math.abs(sDelta.x) / len > 0.6) {
        model.state = States.IS_PAN;
      } else {
        model.state = States.IS_DOLLY;
      }
    }
  }; //----------------------------------------------------------------------------
  // Transform mouse horizontal & vertical movements to a world
  // space offset for the camera that maintains pick correlation.


  var pan = function pan(interactor, position) {
    var renderer = interactor.findPokedRenderer();
    var normalizedPosition = normalize$1(position, interactor);
    var normalizedPreviousPosition = normalize$1(model.previousPosition, interactor);
    var delta = {
      x: normalizedPosition.x - normalizedPreviousPosition.x,
      y: normalizedPosition.y - normalizedPreviousPosition.y
    };
    var camera = renderer.getActiveCamera();
    model.previousPosition = position;

    var _getRightVAndUpV = getRightVAndUpV(model.downPoint, interactor),
        rightV = _getRightVAndUpV.rightV,
        upV = _getRightVAndUpV.upV;

    var offset = [];

    for (var index = 0; index < 3; index++) {
      offset[index] = delta.x * rightV[index] + delta.y * upV[index];
    }

    camera.translate.apply(camera, offset);
    renderer.resetCameraClippingRange();
    interactor.render();
  }; //----------------------------------------------------------------------------


  var dolly = function dolly(interactor, position) {
    var renderer = interactor.findPokedRenderer();
    var normalizedPosition = normalize$1(position, interactor);
    var normalizedPreviousPosition = normalize$1(model.previousPosition, interactor);
    var delta = {
      x: normalizedPosition.x - normalizedPreviousPosition.x,
      y: normalizedPosition.y - normalizedPreviousPosition.y
    };
    var camera = renderer.getActiveCamera();
    var cameraPosition = camera.getPosition(); // 1. Handle dollying

    if (camera.getParallelProjection()) {
      camera.zoom(1 - delta.y);
    } else {
      var offset1 = [];
      (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_7__.g)(model.downPoint, cameraPosition, offset1);
      (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_7__.t)(offset1, delta.y * -4);
      camera.translate.apply(camera, offset1);
    } // 2. Now handle side-to-side panning


    var _getRightVAndUpV2 = getRightVAndUpV(model.downPoint, interactor),
        offset2 = _getRightVAndUpV2.rightV;

    (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_7__.t)(offset2, delta.x);
    camera.translate.apply(camera, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(offset2));
    renderer.resetCameraClippingRange();
    interactor.render();
  }; //----------------------------------------------------------------------------
  // Public API methods
  //----------------------------------------------------------------------------


  publicAPI.onButtonDown = function (interactor, renderer, position) {
    model.buttonPressed = true;
    model.startPosition = position;
    model.previousPosition = position;
    model.time = Date.now() / 1000.0;
    model.dist = 0; // Picking is delegated to the rotate manipulator

    model.rotateManipulator.onButtonDown(interactor, renderer, position);
    model.downPoint = model.rotateManipulator.getDownPoint();
  }; //----------------------------------------------------------------------------


  publicAPI.onMouseMove = function (interactor, renderer, position) {
    if (!model.buttonPressed) {
      return;
    }

    if (model.rotateManipulator.getState() === States.IS_ROTATE) {
      model.rotateManipulator.onMouseMove(interactor, renderer, position);
    } else {
      switch (model.state) {
        case States.IS_NONE:
          choose(interactor, position);
          break;

        case States.IS_PAN:
          pan(interactor, position);
          break;

        case States.IS_DOLLY:
          dolly(interactor, position);
          break;
      }
    }

    model.previousPosition = position;
  }; //--------------------------------------------------------------------------


  publicAPI.onButtonUp = function (interactor) {
    model.buttonPressed = false;

    if (model.state === States.IS_NONE) {
      model.rotateManipulator.onButtonUp(interactor);
    }

    model.state = States.IS_NONE;
  };

  publicAPI.getUseWorldUpVec = function () {
    return model.rotateManipulator.getUseWorldUpVec();
  };

  publicAPI.setUseWorldUpVec = function (useWorldUpVec) {
    model.rotateManipulator.setUseWorldUpVec(useWorldUpVec);
  };

  publicAPI.getWorldUpVec = function () {
    return model.rotateManipulator.getWorldUpVec();
  };

  publicAPI.setWorldUpVec = function (x, y, z) {
    model.rotateManipulator.setWorldUpVec(x, y, z);
  };

  publicAPI.getUseHardwareSelector = function () {
    return model.rotateManipulator.getUseHardwareSelector();
  };

  publicAPI.setUseHardwareSelector = function (useHardwareSelector) {
    model.rotateManipulator.setUseHardwareSelector(useHardwareSelector);
  };

  publicAPI.getFocusSphereColor = function () {
    model.rotateManipulator.getFocusSphereColor();
  };

  publicAPI.setFocusSphereColor = function (r, g, b) {
    model.rotateManipulator.setFocusSphereColor(r, g, b);
  };

  publicAPI.getFocusSphereRadiusFactor = function () {
    return model.rotateManipulator.getFocusSphereRadiusFactor();
  };

  publicAPI.setFocusSphereRadiusFactor = function (focusSphereRadiusFactor) {
    model.rotateManipulator.setFocusSphereRadiusFactor(focusSphereRadiusFactor);
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _macros_js__WEBPACK_IMPORTED_MODULE_6__["default"].obj(publicAPI, model);
  _CompositeCameraManipulator_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(publicAPI, model, initialValues);
  _CompositeMouseManipulator_js__WEBPACK_IMPORTED_MODULE_3__["default"].extend(publicAPI, model, initialValues); // Object specific methods

  vtkMouseCameraUnicamManipulator(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_6__["default"].newInstance(extend, 'vtkMouseCameraUnicamManipulator'); // ----------------------------------------------------------------------------

var vtkMouseCameraUnicamManipulator$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraUnicamRotateManipulator.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseCameraUnicamRotateManipulator.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkMouseCameraUnicamRotateManipulator$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
/* harmony import */ var _Rendering_Core_Actor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Rendering/Core/Actor.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Actor.js");
/* harmony import */ var _CompositeCameraManipulator_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CompositeCameraManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeCameraManipulator.js");
/* harmony import */ var _CompositeMouseManipulator_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CompositeMouseManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeMouseManipulator.js");
/* harmony import */ var _Rendering_Core_InteractorStyle_Constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Rendering/Core/InteractorStyle/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/InteractorStyle/Constants.js");
/* harmony import */ var _Rendering_Core_Mapper_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Rendering/Core/Mapper.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Mapper.js");
/* harmony import */ var _Rendering_Core_PointPicker_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Rendering/Core/PointPicker.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/PointPicker.js");
/* harmony import */ var _Filters_Sources_SphereSource_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Filters/Sources/SphereSource.js */ "./node_modules/@kitware/vtk.js/Filters/Sources/SphereSource.js");
/* harmony import */ var _Common_DataModel_DataSet_Constants_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../Common/DataModel/DataSet/Constants.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/DataSet/Constants.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../Common/Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js");
/* harmony import */ var _vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/vec3.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/vec3.js");















var States = _Rendering_Core_InteractorStyle_Constants_js__WEBPACK_IMPORTED_MODULE_5__["default"].States; // ----------------------------------------------------------------------------
// vtkMouseCameraUnicamRotateManipulator methods
// ----------------------------------------------------------------------------

function vtkMouseCameraUnicamRotateManipulator(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkMouseCameraUnicamRotateManipulator'); // Setup Picker to pick points

  model.picker = _Rendering_Core_PointPicker_js__WEBPACK_IMPORTED_MODULE_7__["default"].newInstance();
  model.downPoint = [0, 0, 0];
  model.isDot = false;
  model.state = States.IS_NONE; // Setup focus dot

  var sphereSource = _Filters_Sources_SphereSource_js__WEBPACK_IMPORTED_MODULE_8__["default"].newInstance();
  sphereSource.setThetaResolution(6);
  sphereSource.setPhiResolution(6);
  var sphereMapper = _Rendering_Core_Mapper_js__WEBPACK_IMPORTED_MODULE_6__["default"].newInstance();
  sphereMapper.setInputConnection(sphereSource.getOutputPort());
  model.focusSphere = _Rendering_Core_Actor_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance();
  model.focusSphere.setMapper(sphereMapper);
  model.focusSphere.getProperty().setColor(0.89, 0.66, 0.41);
  model.focusSphere.getProperty().setAmbient(1);
  model.focusSphere.getProperty().setDiffuse(0);
  model.focusSphere.getProperty().setRepresentationToWireframe(); //----------------------------------------------------------------------------

  var updateAndRender = function updateAndRender(interactor) {
    if (!interactor) {
      return;
    }

    if (model.useWorldUpVec) {
      var camera = interactor.findPokedRenderer().getActiveCamera();

      if (!(0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_11__.z)(model.worldUpVec, camera.getViewPlaneNormal())) {
        camera.setViewUp(model.worldUpVec);
      }
    }

    interactor.render();
  }; //----------------------------------------------------------------------------


  var normalize$1 = function normalize(position, interactor) {
    var _interactor$getView$g = interactor.getView().getSize(),
        _interactor$getView$g2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__["default"])(_interactor$getView$g, 2),
        width = _interactor$getView$g2[0],
        height = _interactor$getView$g2[1];

    var nx = -1.0 + 2.0 * position.x / width;
    var ny = -1.0 + 2.0 * position.y / height;
    return {
      x: nx,
      y: ny
    };
  }; //----------------------------------------------------------------------------
  // Rotate the camera by 'angle' degrees about the point <cx, cy, cz>
  // and around the vector/axis <ax, ay, az>.


  var rotateCamera = function rotateCamera(camera, cx, cy, cz, ax, ay, az, angle) {
    var cameraPosition = camera.getPosition();
    var cameraFocalPoint = camera.getFocalPoint();
    var cameraViewUp = camera.getViewUp();
    cameraPosition[3] = 1.0;
    cameraFocalPoint[3] = 1.0;
    cameraViewUp[3] = 0.0;
    var transform = (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_12__.i)(new Float64Array(16));
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_12__.t)(transform, transform, [cx, cy, cz]);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_12__.r)(transform, transform, angle, [ax, ay, az]);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_12__.t)(transform, transform, [-cx, -cy, -cz]);
    var newCameraPosition = [];
    var newCameraFocalPoint = [];
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_13__.t)(newCameraPosition, cameraPosition, transform);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_13__.t)(newCameraFocalPoint, cameraFocalPoint, transform);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_12__.i)(transform);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_12__.r)(transform, transform, angle, [ax, ay, az]);
    var newCameraViewUp = [];
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_13__.t)(newCameraViewUp, cameraViewUp, transform);
    camera.setPosition.apply(camera, newCameraPosition);
    camera.setFocalPoint.apply(camera, newCameraFocalPoint);
    camera.setViewUp.apply(camera, newCameraViewUp);
  }; //----------------------------------------------------------------------------


  var rotate$1 = function rotate(interactor, position) {
    var _interactor$getView;

    var renderer = interactor.findPokedRenderer();
    var normalizedPosition = normalize$1(position, interactor);
    var normalizedPreviousPosition = normalize$1(model.previousPosition, interactor);
    var center = model.focusSphere.getPosition();

    var normalizedCenter = (_interactor$getView = interactor.getView()).worldToDisplay.apply(_interactor$getView, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(center).concat([renderer])); // let normalizedCenter = publicAPI.computeWorldToDisplay(renderer, ...center);


    normalizedCenter = normalize$1({
      x: center[0],
      y: center[1]
    }, interactor);
    normalizedCenter = [normalizedCenter.x, normalizedCenter.y, center[2]]; // Squared rad of virtual cylinder

    var radsq = Math.pow(1.0 + Math.abs(normalizedCenter[0]), 2.0);
    var op = [normalizedPreviousPosition.x, 0, 0];
    var oe = [normalizedPosition.x, 0, 0];
    var opsq = Math.pow(op[0], 2);
    var oesq = Math.pow(oe[0], 2);
    var lop = opsq > radsq ? 0 : Math.sqrt(radsq - opsq);
    var loe = oesq > radsq ? 0 : Math.sqrt(radsq - oesq);
    var nop = [op[0], 0, lop];
    (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_11__.l)(nop);
    var noe = [oe[0], 0, loe];
    (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_11__.l)(noe);
    var dot$1 = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_11__.d)(nop, noe);

    if (Math.abs(dot$1) > 0.0001) {
      var angle = -2 * Math.acos((0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_11__.A)(dot$1, -1.0, 1.0)) * Math.sign(normalizedPosition.x - normalizedPreviousPosition.x) * publicAPI.getRotationFactor();
      var camera = renderer.getActiveCamera();
      var upVec = model.useWorldUpVec ? model.worldUpVec : camera.getViewUp();
      (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_11__.l)(upVec);
      rotateCamera.apply(void 0, [camera].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(center), (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(upVec), [angle]));
      var dVec = [];
      var cameraPosition = camera.getPosition();
      (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_11__.g)(cameraPosition, position, dVec);
      var rDist = (normalizedPosition.y - normalizedPreviousPosition.y) * publicAPI.getRotationFactor();
      (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_11__.l)(dVec);
      var atV = camera.getViewPlaneNormal();
      var upV = camera.getViewUp();
      var rightV = [];
      (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_11__.j)(upV, atV, rightV);
      (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_11__.l)(rightV); //
      // The following two tests try to prevent chaotic camera movement
      // that results from rotating over the poles defined by the
      // "WorldUpVector".  The problem is the constraint to keep the
      // camera's up vector in line w/ the WorldUpVector is at odds with
      // the action of rotating over the top of the virtual sphere used
      // for rotation.  The solution here is to prevent the user from
      // rotating the last bit required to "go over the top"-- as a
      // consequence, you can never look directly down on the poles.
      //
      // The "0.99" value is somewhat arbitrary, but seems to produce
      // reasonable results.  (Theoretically, some sort of clamping
      // function could probably be used rather than a hard cutoff, but
      // time constraints prevent figuring that out right now.)
      //

      if (model.useWorldUpVec) {
        var OVER_THE_TOP_THRESHOLD = 0.99;

        if ((0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_11__.d)(upVec, atV) > OVER_THE_TOP_THRESHOLD && rDist < 0) {
          rDist = 0;
        }

        if ((0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_11__.d)(upVec, atV) < -OVER_THE_TOP_THRESHOLD && rDist > 0) {
          rDist = 0;
        }
      }

      rotateCamera.apply(void 0, [camera].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(center), rightV, [rDist]));

      if (model.useWorldUpVec && !(0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_11__.z)(upVec, camera.getViewPlaneNormal())) {
        camera.setViewUp.apply(camera, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(upVec));
      }

      model.previousPosition = position;
      renderer.resetCameraClippingRange();
      updateAndRender(interactor);
    }
  }; //----------------------------------------------------------------------------


  var placeFocusSphere = function placeFocusSphere(interactor) {
    var _model$focusSphere;

    var renderer = interactor.findPokedRenderer();

    (_model$focusSphere = model.focusSphere).setPosition.apply(_model$focusSphere, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(model.downPoint));

    var camera = renderer.getActiveCamera();
    var cameraPosition = camera.getPosition();
    var cameraToPointVec = [];
    (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_11__.g)(model.downPoint, cameraPosition, cameraToPointVec);

    if (camera.getParallelProjection()) {
      (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_11__.t)(cameraToPointVec, camera.getParallelScale());
    }

    var atV = camera.getDirectionOfProjection();
    (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_11__.l)(atV); // Scales the focus dot so it always appears the same size

    var scale = 0.02 * (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_11__.d)(atV, cameraToPointVec) * model.focusSphereRadiusFactor;
    model.focusSphere.setScale(scale, scale, scale);
  };

  var placeAndDisplayFocusSphere = function placeAndDisplayFocusSphere(interactor) {
    placeFocusSphere(interactor);
    interactor.findPokedRenderer().addActor(model.focusSphere);
    model.isDot = true;
  };

  var hideFocusSphere = function hideFocusSphere(interactor) {
    interactor.findPokedRenderer().removeActor(model.focusSphere);
    model.isDot = false;
  }; //----------------------------------------------------------------------------


  var pickWithPointPicker = function pickWithPointPicker(interactor, position) {
    var renderer = interactor.findPokedRenderer();
    model.picker.pick([position.x, position.y, position.z], renderer);
    var pickedPositions = model.picker.getPickedPositions();

    if (pickedPositions.length === 0) {
      return model.picker.getPickPosition();
    }

    var cameraPosition = renderer.getActiveCamera().getPosition();
    pickedPositions.sort(function (pointA, pointB) {
      return (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_11__.f)(pointA, cameraPosition) - (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_11__.f)(pointB, cameraPosition);
    });
    return pickedPositions[0];
  }; //----------------------------------------------------------------------------


  var pickPoint = function pickPoint(interactor, position) {
    var renderer = interactor.findPokedRenderer(); // Finds the point under the cursor.
    // Note: If no object has been rendered to the pixel (X, Y), then
    // vtkPicker will return a z-value with depth equal
    // to the distance from the camera's position to the focal point.
    // This seems like an arbitrary, but perhaps reasonable, default value.

    var selections = null;

    if (model.useHardwareSelector) {
      var selector = interactor.getView().getSelector();
      selector.setCaptureZValues(true);
      selector.setFieldAssociation(_Common_DataModel_DataSet_Constants_js__WEBPACK_IMPORTED_MODULE_9__.FieldAssociations.FIELD_ASSOCIATION_POINTS);
      selector.attach(interactor.getView(), renderer);
      selector.setArea(position.x, position.y, position.x, position.y);
      selections = selector.select();
    }

    if (selections && selections.length !== 0) {
      // convert Float64Array to regular array
      return Array.from(selections[0].getProperties().worldPosition);
    }

    return pickWithPointPicker(interactor, position);
  }; //----------------------------------------------------------------------------
  // Public API methods
  //----------------------------------------------------------------------------


  publicAPI.onButtonDown = function (interactor, renderer, position) {
    model.buttonPressed = true;
    model.startPosition = position;
    model.previousPosition = position;
    var normalizedPosition = normalize$1(position, interactor); // borderRatio defines the percentage of the screen size that is considered to be
    // the border of the screen on each side

    var borderRatio = 0.1; // If the user is clicking on the perimeter of the screen,
    // then we want to go into rotation mode, and there is no need to determine the downPoint

    if (Math.abs(normalizedPosition.x) > 1 - borderRatio || Math.abs(normalizedPosition.y) > 1 - borderRatio) {
      model.state = States.IS_ROTATE;
      placeAndDisplayFocusSphere(interactor);
      return;
    }

    model.downPoint = pickPoint(interactor, position);

    if (model.isDot) {
      model.state = States.IS_ROTATE;
    } else {
      model.state = States.IS_NONE;

      if (model.displayFocusSphereOnButtonDown) {
        placeAndDisplayFocusSphere(interactor);
      }
    }
  }; //----------------------------------------------------------------------------


  publicAPI.onMouseMove = function (interactor, renderer, position) {
    if (!model.buttonPressed) {
      return;
    }

    model.state = States.IS_ROTATE;
    rotate$1(interactor, position);
    model.previousPosition = position;
  }; //--------------------------------------------------------------------------


  publicAPI.onButtonUp = function (interactor) {
    var renderer = interactor.findPokedRenderer();
    model.buttonPressed = false; // If rotation without a focus sphere, nothing to do

    if (model.state === States.IS_ROTATE && !model.isDot) {
      return;
    }

    if (model.state === States.IS_ROTATE) {
      hideFocusSphere(interactor);
    } else if (model.state === States.IS_NONE) {
      placeAndDisplayFocusSphere(interactor);
    }

    renderer.resetCameraClippingRange();
    updateAndRender(interactor);
  };

  publicAPI.getFocusSphereColor = function () {
    model.focusSphere.getProperty().getColor();
  };

  publicAPI.setFocusSphereColor = function (r, g, b) {
    model.focusSphere.getProperty().setColor(r, g, b);
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  focusSphereRadiusFactor: 1,
  displayFocusSphereOnButtonDown: true,
  useHardwareSelector: true,
  useWorldUpVec: true,
  // set WorldUpVector to be z-axis by default
  worldUpVec: [0, 0, 1]
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _macros_js__WEBPACK_IMPORTED_MODULE_10__["default"].obj(publicAPI, model);
  _CompositeCameraManipulator_js__WEBPACK_IMPORTED_MODULE_3__["default"].extend(publicAPI, model, initialValues);
  _CompositeMouseManipulator_js__WEBPACK_IMPORTED_MODULE_4__["default"].extend(publicAPI, model, initialValues); // Create get-set macros

  _macros_js__WEBPACK_IMPORTED_MODULE_10__["default"].setGet(publicAPI, model, ['focusSphereRadiusFactor', 'displayFocusSphereOnButtonDown', 'useHardwareSelector', 'useWorldUpVec']);
  _macros_js__WEBPACK_IMPORTED_MODULE_10__["default"].get(publicAPI, model, ['state']);
  _macros_js__WEBPACK_IMPORTED_MODULE_10__["default"].getArray(publicAPI, model, ['downPoint'], 3);
  _macros_js__WEBPACK_IMPORTED_MODULE_10__["default"].setGetArray(publicAPI, model, ['worldUpVec'], 3); // Object specific methods

  vtkMouseCameraUnicamRotateManipulator(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_10__["default"].newInstance(extend, 'vtkMouseCameraUnicamRotateManipulator'); // ----------------------------------------------------------------------------

var vtkMouseCameraUnicamRotateManipulator$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseRangeManipulator.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Interaction/Manipulators/MouseRangeManipulator.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkMouseRangeManipulator$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _CompositeMouseManipulator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CompositeMouseManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeMouseManipulator.js");



// vtkMouseRangeManipulator methods
// ----------------------------------------------------------------------------

function vtkMouseRangeManipulator(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkMouseRangeManipulator'); // Keep track of delta that is below the value
  // of one step to progressively increment it

  var incrementalDelta = new Map(); // Internal methods
  //-------------------------------------------------------------------------

  function scaleDeltaToRange(listener, normalizedDelta) {
    return normalizedDelta * ((listener.max - listener.min) / (listener.step + 1));
  } //-------------------------------------------------------------------------


  function processDelta(listener, delta) {
    var oldValue = listener.getValue(); // Apply scale and cached delta to current delta

    var newDelta = delta * listener.scale + incrementalDelta.get(listener);
    var value = oldValue + newDelta; // Compute new value based on step

    var difference = value - listener.min;
    var stepsToDifference = Math.round(difference / listener.step);
    value = listener.min + listener.step * stepsToDifference;
    value = Math.max(value, listener.min);
    value = Math.min(value, listener.max);

    if (value !== oldValue) {
      // Update value
      listener.setValue(value);
      incrementalDelta.set(listener, 0);
    } else if (value === listener.min && newDelta < 0 || value === listener.max && newDelta > 0) {
      // Do not allow incremental delta to go past range
      incrementalDelta.set(listener, 0);
    } else {
      // Store delta for the next iteration
      incrementalDelta.set(listener, newDelta);
    }
  } // Public API methods
  // min:number = minimum allowable value
  // max:number = maximum allowable value
  // step:number = value per step -- smaller = more steps over a given distance, larger = fewer steps over a given distance
  // getValue:fn = function that returns current value
  // setValue:fn = function to set value
  // scale:number = scale value is applied to mouse event to allow users accelerate or decelerate delta without emitting more events
  //-------------------------------------------------------------------------


  publicAPI.setHorizontalListener = function (min, max, step, getValue, setValue) {
    var scale = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
    var getFn = Number.isFinite(getValue) ? function () {
      return getValue;
    } : getValue;
    model.horizontalListener = {
      min: min,
      max: max,
      step: step,
      getValue: getFn,
      setValue: setValue,
      scale: scale
    };
    incrementalDelta.set(model.horizontalListener, 0);
    publicAPI.modified();
  }; //-------------------------------------------------------------------------


  publicAPI.setVerticalListener = function (min, max, step, getValue, setValue) {
    var scale = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
    var getFn = Number.isFinite(getValue) ? function () {
      return getValue;
    } : getValue;
    model.verticalListener = {
      min: min,
      max: max,
      step: step,
      getValue: getFn,
      setValue: setValue,
      scale: scale
    };
    incrementalDelta.set(model.verticalListener, 0);
    publicAPI.modified();
  }; //-------------------------------------------------------------------------


  publicAPI.setScrollListener = function (min, max, step, getValue, setValue) {
    var scale = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
    var getFn = Number.isFinite(getValue) ? function () {
      return getValue;
    } : getValue;
    model.scrollListener = {
      min: min,
      max: max,
      step: step,
      getValue: getFn,
      setValue: setValue,
      scale: scale
    };
    incrementalDelta.set(model.scrollListener, 0);
    publicAPI.modified();
  }; //-------------------------------------------------------------------------


  publicAPI.removeHorizontalListener = function () {
    if (model.verticalListener) {
      incrementalDelta.delete(model.verticalListener);
      delete model.verticalListener;
      publicAPI.modified();
    }
  }; //-------------------------------------------------------------------------


  publicAPI.removeVerticalListener = function () {
    if (model.horizontalListener) {
      incrementalDelta.delete(model.horizontalListener);
      delete model.horizontalListener;
      publicAPI.modified();
    }
  }; //-------------------------------------------------------------------------


  publicAPI.removeScrollListener = function () {
    if (model.scrollListener) {
      incrementalDelta.delete(model.scrollListener);
      delete model.scrollListener;
      publicAPI.modified();
    }
  }; //-------------------------------------------------------------------------


  publicAPI.removeAllListeners = function () {
    publicAPI.removeHorizontalListener();
    publicAPI.removeVerticalListener();
    publicAPI.removeScrollListener();
  }; //-------------------------------------------------------------------------


  publicAPI.onButtonDown = function (interactor, renderer, position) {
    model.previousPosition = position;
    var glRenderWindow = interactor.getView(); // Ratio is the dom size vs renderwindow size

    var ratio = glRenderWindow.getContainerSize()[0] / glRenderWindow.getSize()[0]; // Get proper pixel range used by viewport in rw size space

    var size = glRenderWindow.getViewportSize(renderer); // rescale size to match mouse event position

    model.containerSize = size.map(function (v) {
      return v * ratio;
    });
  }; //-------------------------------------------------------------------------


  publicAPI.onMouseMove = function (interactor, renderer, position) {
    if (!model.verticalListener && !model.horizontalListener) {
      return;
    }

    if (!position) {
      return;
    }

    if (model.horizontalListener) {
      var dxNorm = (position.x - model.previousPosition.x) / model.containerSize[0];
      var dx = scaleDeltaToRange(model.horizontalListener, dxNorm);
      processDelta(model.horizontalListener, dx);
    }

    if (model.verticalListener) {
      var dyNorm = (position.y - model.previousPosition.y) / model.containerSize[1];
      var dy = scaleDeltaToRange(model.verticalListener, dyNorm);
      processDelta(model.verticalListener, dy);
    }

    model.previousPosition = position;
  }; //-------------------------------------------------------------------------


  publicAPI.onScroll = function (interactor, renderer, delta) {
    if (!model.scrollListener || !delta) {
      return;
    }

    processDelta(model.scrollListener, delta * model.scrollListener.step);
  };

  publicAPI.onStartScroll = publicAPI.onScroll;
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  horizontalListener: null,
  verticalListener: null,
  scrollListener: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _CompositeMouseManipulator_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues); // Object specific methods

  vtkMouseRangeManipulator(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkMouseRangeManipulator'); // ----------------------------------------------------------------------------

var vtkMouseRangeManipulator$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/VRButtonPanManipulator.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Interaction/Manipulators/VRButtonPanManipulator.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkVRButtonPanManipulator$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _CompositeVRManipulator_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CompositeVRManipulator.js */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators/CompositeVRManipulator.js");
/* harmony import */ var _Rendering_Core_RenderWindowInteractor_Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Rendering/Core/RenderWindowInteractor/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/RenderWindowInteractor/Constants.js");
/* harmony import */ var _Rendering_Core_InteractorStyle_Constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Rendering/Core/InteractorStyle/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/InteractorStyle/Constants.js");





// vtkVRButtonPanManipulator methods
// ----------------------------------------------------------------------------

function vtkVRButtonPanManipulator(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkVRButtonPanManipulator');

  publicAPI.onButton3D = function (interactorStyle, renderer, state, device, input, pressed) {
    if (pressed) {
      interactorStyle.startCameraPose();
    } else if (state === _Rendering_Core_InteractorStyle_Constants_js__WEBPACK_IMPORTED_MODULE_3__.States.IS_CAMERA_POSE) {
      interactorStyle.endCameraPose();
    }
  };

  publicAPI.onMove3D = function (interactorStyle, renderer, state, data) {
    if (state !== _Rendering_Core_InteractorStyle_Constants_js__WEBPACK_IMPORTED_MODULE_3__.States.IS_CAMERA_POSE) {
      return;
    } // move the world in the direction of the
    // controller


    var camera = renderer.getActiveCamera();
    var oldTrans = camera.getPhysicalTranslation(); // look at the y axis to determine how fast / what direction to move

    var speed = data.gamepad.axes[1]; // 0.05 meters / frame movement

    var pscale = speed * 0.05 / camera.getPhysicalScale(); // convert orientation to world coordinate direction

    var dir = camera.physicalOrientationToWorldDirection(data.orientation);
    camera.setPhysicalTranslation(oldTrans[0] + dir[0] * pscale, oldTrans[1] + dir[1] * pscale, oldTrans[2] + dir[2] * pscale);
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  device: _Rendering_Core_RenderWindowInteractor_Constants_js__WEBPACK_IMPORTED_MODULE_2__.Device.RightController,
  input: _Rendering_Core_RenderWindowInteractor_Constants_js__WEBPACK_IMPORTED_MODULE_2__.Input.TrackPad
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _CompositeVRManipulator_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues); // Object specific methods

  vtkVRButtonPanManipulator(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkVRButtonPanManipulator'); // ----------------------------------------------------------------------------

var vtkVRButtonPanManipulator$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Interaction/Style/InteractorStyleManipulator.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Interaction/Style/InteractorStyleManipulator.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "STATIC": () => (/* binding */ STATIC),
/* harmony export */   "default": () => (/* binding */ vtkInteractorStyleManipulator$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Rendering_Core_InteractorStyle_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Rendering/Core/InteractorStyle.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/InteractorStyle.js");




function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var vtkDebugMacro = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].vtkDebugMacro;
var States = _Rendering_Core_InteractorStyle_js__WEBPACK_IMPORTED_MODULE_2__["default"].States; // ----------------------------------------------------------------------------
// Event Types
// ----------------------------------------------------------------------------

var START_INTERACTION_EVENT = {
  type: 'StartInteractionEvent'
};
var INTERACTION_EVENT = {
  type: 'InteractionEvent'
};
var END_INTERACTION_EVENT = {
  type: 'EndInteractionEvent'
}; // ----------------------------------------------------------------------------
// Global methods
// ----------------------------------------------------------------------------

function translateCamera(renderer, rwi, toX, toY, fromX, fromY) {
  var cam = renderer.getActiveCamera();
  var viewFocus = cam.getFocalPoint();
  viewFocus = rwi.getInteractorStyle().computeWorldToDisplay(renderer, viewFocus[0], viewFocus[1], viewFocus[2]);
  var focalDepth = viewFocus[2];
  var newPickPoint = rwi.getInteractorStyle().computeDisplayToWorld(renderer, toX, toY, focalDepth);
  var oldPickPoint = rwi.getInteractorStyle().computeDisplayToWorld(renderer, fromX, fromY, focalDepth); // camera motion is reversed

  var motionVector = [oldPickPoint[0] - newPickPoint[0], oldPickPoint[1] - newPickPoint[1], oldPickPoint[2] - newPickPoint[2]];
  viewFocus = cam.getFocalPoint();
  var viewPoint = cam.getPosition();
  cam.setFocalPoint(motionVector[0] + viewFocus[0], motionVector[1] + viewFocus[1], motionVector[2] + viewFocus[2]);
  cam.setPosition(motionVector[0] + viewPoint[0], motionVector[1] + viewPoint[1], motionVector[2] + viewPoint[2]);
}

function dollyToPosition(fact, position, renderer, rwi) {
  var cam = renderer.getActiveCamera();

  if (cam.getParallelProjection()) {
    // Zoom relatively to the cursor
    var aSize = rwi.getView().getSize();
    var w = aSize[0];
    var h = aSize[1];
    var x0 = w / 2;
    var y0 = h / 2;
    var x1 = position.x;
    var y1 = position.y;
    translateCamera(renderer, rwi, x0, y0, x1, y1);
    cam.setParallelScale(cam.getParallelScale() / fact);
    translateCamera(renderer, rwi, x1, y1, x0, y0);
  } else {
    // Zoom relatively to the cursor position
    // Move focal point to cursor position
    var viewFocus = cam.getFocalPoint();
    var norm = cam.getViewPlaneNormal();
    viewFocus = rwi.getInteractorStyle().computeWorldToDisplay(renderer, viewFocus[0], viewFocus[1], viewFocus[2]);
    var newFp = rwi.getInteractorStyle().computeDisplayToWorld(renderer, position.x, position.y, viewFocus[2]);
    cam.setFocalPoint(newFp[0], newFp[1], newFp[2]); // Move camera in/out along projection direction

    cam.dolly(fact);
    renderer.resetCameraClippingRange(); // Find new focal point

    var newCameraPos = cam.getPosition();
    viewFocus = cam.getFocalPoint();
    var newPoint = [0, 0, 0];
    var t = norm[0] * (viewFocus[0] - newCameraPos[0]) + norm[1] * (viewFocus[1] - newCameraPos[1]) + norm[2] * (viewFocus[2] - newCameraPos[2]);
    t /= Math.pow(norm[0], 2) + Math.pow(norm[1], 2) + Math.pow(norm[2], 2);
    newPoint[0] = newCameraPos[0] + norm[0] * t;
    newPoint[1] = newCameraPos[1] + norm[1] * t;
    newPoint[2] = newCameraPos[2] + norm[2] * t;
    cam.setFocalPoint(newPoint[0], newPoint[1], newPoint[2]);
    renderer.resetCameraClippingRange();
  }
}

function dollyByFactor(interactor, renderer, factor) {
  if (Number.isNaN(factor)) {
    return;
  }

  var camera = renderer.getActiveCamera();

  if (camera.getParallelProjection()) {
    camera.setParallelScale(camera.getParallelScale() / factor);
  } else {
    camera.dolly(factor);
    renderer.resetCameraClippingRange();
  }

  if (interactor.getLightFollowCamera()) {
    renderer.updateLightsGeometryToFollowCamera();
  }
} // ----------------------------------------------------------------------------
// Static API
// ----------------------------------------------------------------------------


var STATIC = {
  dollyToPosition: dollyToPosition,
  translateCamera: translateCamera,
  dollyByFactor: dollyByFactor
}; // ----------------------------------------------------------------------------
// vtkInteractorStyleManipulator methods
// ----------------------------------------------------------------------------

function vtkInteractorStyleManipulator(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkInteractorStyleManipulator');
  model.mouseManipulators = [];
  model.keyboardManipulators = [];
  model.vrManipulators = [];
  model.gestureManipulators = [];
  model.currentManipulator = null;
  model.currentWheelManipulator = null;
  model.centerOfRotation = [0, 0, 0];
  model.rotationFactor = 1; //-------------------------------------------------------------------------

  publicAPI.removeAllManipulators = function () {
    publicAPI.removeAllMouseManipulators();
    publicAPI.removeAllKeyboardManipulators();
    publicAPI.removeAllVRManipulators();
    publicAPI.removeAllGestureManipulators();
  }; //-------------------------------------------------------------------------


  publicAPI.removeAllMouseManipulators = function () {
    model.mouseManipulators = [];
  }; //-------------------------------------------------------------------------


  publicAPI.removeAllKeyboardManipulators = function () {
    model.keyboardManipulators = [];
  }; //-------------------------------------------------------------------------


  publicAPI.removeAllVRManipulators = function () {
    model.vrManipulators = [];
  }; //-------------------------------------------------------------------------


  publicAPI.removeAllGestureManipulators = function () {
    model.gestureManipulators = [];
  }; //-------------------------------------------------------------------------


  var removeManipulator = function removeManipulator(manipulator, list) {
    var index = list.indexOf(manipulator);

    if (index === -1) {
      return false;
    }

    list.splice(index, 1);
    publicAPI.modified();
    return true;
  }; //-------------------------------------------------------------------------


  publicAPI.removeMouseManipulator = function (manipulator) {
    return removeManipulator(manipulator, model.mouseManipulators);
  }; //-------------------------------------------------------------------------


  publicAPI.removeKeyboardManipulator = function (manipulator) {
    return removeManipulator(manipulator, model.keyboardManipulators);
  }; //-------------------------------------------------------------------------


  publicAPI.removeVRManipulator = function (manipulator) {
    return removeManipulator(manipulator, model.vrManipulators);
  }; //-------------------------------------------------------------------------


  publicAPI.removeGestureManipulator = function (manipulator) {
    return removeManipulator(manipulator, model.gestureManipulators);
  }; //-------------------------------------------------------------------------


  var addManipulator = function addManipulator(manipulator, list) {
    var index = list.indexOf(manipulator);

    if (index !== -1) {
      return false;
    }

    list.push(manipulator);
    publicAPI.modified();
    return true;
  }; //-------------------------------------------------------------------------


  publicAPI.addMouseManipulator = function (manipulator) {
    return addManipulator(manipulator, model.mouseManipulators);
  }; //-------------------------------------------------------------------------


  publicAPI.addKeyboardManipulator = function (manipulator) {
    return addManipulator(manipulator, model.keyboardManipulators);
  }; //-------------------------------------------------------------------------


  publicAPI.addVRManipulator = function (manipulator) {
    return addManipulator(manipulator, model.vrManipulators);
  }; //-------------------------------------------------------------------------


  publicAPI.addGestureManipulator = function (manipulator) {
    return addManipulator(manipulator, model.gestureManipulators);
  }; //-------------------------------------------------------------------------


  publicAPI.getNumberOfMouseManipulators = function () {
    return model.mouseManipulators.length;
  }; //-------------------------------------------------------------------------


  publicAPI.getNumberOfKeyboardManipulators = function () {
    return model.keyboardManipulators.length;
  }; //-------------------------------------------------------------------------


  publicAPI.getNumberOfVRManipulators = function () {
    return model.vrManipulators.length;
  }; //-------------------------------------------------------------------------


  publicAPI.getNumberOfGestureManipulators = function () {
    return model.gestureManipulators.length;
  }; //-------------------------------------------------------------------------


  publicAPI.resetCurrentManipulator = function () {
    model.currentManipulator = null;
    model.currentWheelManipulator = null;
  }; //-------------------------------------------------------------------------
  // Mouse
  //-------------------------------------------------------------------------


  publicAPI.handleLeftButtonPress = function (callData) {
    model.previousPosition = callData.position;
    publicAPI.onButtonDown(1, callData);
  }; //-------------------------------------------------------------------------


  publicAPI.handleMiddleButtonPress = function (callData) {
    model.previousPosition = callData.position;
    publicAPI.onButtonDown(2, callData);
  }; //-------------------------------------------------------------------------


  publicAPI.handleRightButtonPress = function (callData) {
    model.previousPosition = callData.position;
    publicAPI.onButtonDown(3, callData);
  }; //-------------------------------------------------------------------------


  publicAPI.handleButton3D = function (ed) {
    if (!ed) {
      return;
    } // Look for a matching 3D camera interactor.


    model.currentManipulator = publicAPI.findVRManipulator(ed.device, ed.input, ed.pressed);

    if (model.currentManipulator) {
      model.currentManipulator.onButton3D(publicAPI, ed.pokedRenderer, model.state, ed.device, ed.input, ed.pressed);

      if (ed.pressed) {
        publicAPI.startCameraPose();
      } else {
        publicAPI.endCameraPose();
      }
    } else {
      vtkDebugMacro('No manipulator found');
    }
  }; //-------------------------------------------------------------------------


  publicAPI.handleMove3D = function (ed) {
    if (model.currentManipulator && model.state === States.IS_CAMERA_POSE) {
      model.currentManipulator.onMove3D(publicAPI, ed.pokedRenderer, model.state, ed);
    }
  }; //-------------------------------------------------------------------------


  publicAPI.onButtonDown = function (button, callData) {
    // Must not be processing an interaction to start another.
    if (model.currentManipulator) {
      return;
    } // Look for a matching camera interactor.


    model.currentManipulator = publicAPI.findMouseManipulator(button, callData.shiftKey, callData.controlKey, callData.altKey);

    if (model.currentManipulator) {
      if (model.currentManipulator.setCenter) {
        model.currentManipulator.setCenter(model.centerOfRotation);
      }

      if (model.currentManipulator.setRotationFactor) {
        model.currentManipulator.setRotationFactor(model.rotationFactor);
      }

      model.currentManipulator.startInteraction();
      model.currentManipulator.onButtonDown(model.interactor, callData.pokedRenderer, callData.position);
      model.interactor.requestAnimation(publicAPI.onButtonDown);
      publicAPI.invokeStartInteractionEvent(START_INTERACTION_EVENT);
    } else {
      vtkDebugMacro('No manipulator found');
    }
  }; //-------------------------------------------------------------------------


  publicAPI.findMouseManipulator = function (button, shift, control, alt) {
    // Look for a matching camera manipulator
    var manipulator = null;
    var count = model.mouseManipulators.length;

    while (count--) {
      var manip = model.mouseManipulators[count];

      if (manip && manip.getButton() === button && manip.getShift() === shift && manip.getControl() === control && manip.getAlt() === alt && manip.isDragEnabled()) {
        manipulator = manip;
      }
    }

    return manipulator;
  }; //-------------------------------------------------------------------------


  publicAPI.findVRManipulator = function (device, input) {
    // Look for a matching camera manipulator
    var manipulator = null;
    var count = model.vrManipulators.length;

    while (count--) {
      var manip = model.vrManipulators[count];

      if (manip && manip.getDevice() === device && manip.getInput() === input) {
        manipulator = manip;
      }
    }

    return manipulator;
  }; //-------------------------------------------------------------------------


  publicAPI.handleLeftButtonRelease = function () {
    publicAPI.onButtonUp(1);
  }; //-------------------------------------------------------------------------


  publicAPI.handleMiddleButtonRelease = function () {
    publicAPI.onButtonUp(2);
  }; //-------------------------------------------------------------------------


  publicAPI.handleRightButtonRelease = function () {
    publicAPI.onButtonUp(3);
  }; //-------------------------------------------------------------------------


  publicAPI.onButtonUp = function (button) {
    if (!model.currentManipulator) {
      return;
    }

    if (model.currentManipulator.getButton && model.currentManipulator.getButton() === button) {
      model.currentManipulator.onButtonUp(model.interactor);
      model.currentManipulator.endInteraction();
      model.currentManipulator = null;
      model.interactor.cancelAnimation(publicAPI.onButtonDown);
      publicAPI.invokeEndInteractionEvent(END_INTERACTION_EVENT);
    }
  }; //-------------------------------------------------------------------------


  publicAPI.handleStartMouseWheel = function (callData) {
    // Must not be processing a wheel interaction to start another.
    if (model.currentWheelManipulator) {
      return;
    }

    var manipulator = null;
    var count = model.mouseManipulators.length;

    while (count--) {
      var manip = model.mouseManipulators[count];

      if (manip && manip.isScrollEnabled() && manip.getShift() === callData.shiftKey && manip.getControl() === callData.controlKey && manip.getAlt() === callData.altKey) {
        manipulator = manip;
      }
    }

    if (manipulator) {
      model.currentWheelManipulator = manipulator;
      model.currentWheelManipulator.onStartScroll(model.interactor, callData.pokedRenderer, callData.spinY);
      model.currentWheelManipulator.startInteraction();
      model.interactor.requestAnimation(publicAPI.handleStartMouseWheel);
      publicAPI.invokeStartInteractionEvent(START_INTERACTION_EVENT);
    } else {
      vtkDebugMacro('No manipulator found');
    }
  }; //-------------------------------------------------------------------------


  publicAPI.handleEndMouseWheel = function () {
    if (!model.currentWheelManipulator) {
      return;
    }

    if (model.currentWheelManipulator.onEndScroll) {
      model.currentWheelManipulator.onEndScroll(model.interactor);
      model.currentWheelManipulator.endInteraction();
      model.currentWheelManipulator = null;
      model.interactor.cancelAnimation(publicAPI.handleStartMouseWheel);
      publicAPI.invokeEndInteractionEvent(END_INTERACTION_EVENT);
    }
  }; //-------------------------------------------------------------------------


  publicAPI.handleMouseWheel = function (callData) {
    if (model.currentWheelManipulator && model.currentWheelManipulator.onScroll) {
      model.currentWheelManipulator.onScroll(model.interactor, callData.pokedRenderer, callData.spinY, model.cachedMousePosition);
      publicAPI.invokeInteractionEvent(INTERACTION_EVENT);
    }
  }; //-------------------------------------------------------------------------


  publicAPI.handleMouseMove = function (callData) {
    model.cachedMousePosition = callData.position;

    if (model.currentManipulator && model.currentManipulator.onMouseMove) {
      model.currentManipulator.onMouseMove(model.interactor, callData.pokedRenderer, callData.position);
      publicAPI.invokeInteractionEvent(INTERACTION_EVENT);
    }
  }; //-------------------------------------------------------------------------
  // Keyboard
  //-------------------------------------------------------------------------


  publicAPI.handleKeyPress = function (callData) {
    model.keyboardManipulators.filter(function (m) {
      return m.onKeyPress;
    }).forEach(function (manipulator) {
      manipulator.onKeyPress(model.interactor, callData.pokedRenderer, callData.key);
      publicAPI.invokeInteractionEvent(INTERACTION_EVENT);
    });
  }; //-------------------------------------------------------------------------


  publicAPI.handleKeyDown = function (callData) {
    model.keyboardManipulators.filter(function (m) {
      return m.onKeyDown;
    }).forEach(function (manipulator) {
      manipulator.onKeyDown(model.interactor, callData.pokedRenderer, callData.key);
      publicAPI.invokeInteractionEvent(INTERACTION_EVENT);
    });
  }; //-------------------------------------------------------------------------


  publicAPI.handleKeyUp = function (callData) {
    model.keyboardManipulators.filter(function (m) {
      return m.onKeyUp;
    }).forEach(function (manipulator) {
      manipulator.onKeyUp(model.interactor, callData.pokedRenderer, callData.key);
      publicAPI.invokeInteractionEvent(INTERACTION_EVENT);
    });
  }; //-------------------------------------------------------------------------
  // Gesture
  //-------------------------------------------------------------------------


  publicAPI.handleStartPinch = function (callData) {
    publicAPI.startDolly();
    var count = model.gestureManipulators.length;

    while (count--) {
      var manipulator = model.gestureManipulators[count];

      if (manipulator && manipulator.isPinchEnabled()) {
        manipulator.onStartPinch(model.interactor, callData.scale);
        manipulator.startInteraction();
      }
    }

    model.interactor.requestAnimation(publicAPI.handleStartPinch);
    publicAPI.invokeStartInteractionEvent(START_INTERACTION_EVENT);
  }; //--------------------------------------------------------------------------


  publicAPI.handleEndPinch = function () {
    publicAPI.endDolly();
    var count = model.gestureManipulators.length;

    while (count--) {
      var manipulator = model.gestureManipulators[count];

      if (manipulator && manipulator.isPinchEnabled()) {
        manipulator.onEndPinch(model.interactor);
        manipulator.endInteraction();
      }
    }

    model.interactor.cancelAnimation(publicAPI.handleStartPinch);
    publicAPI.invokeEndInteractionEvent(END_INTERACTION_EVENT);
  }; //----------------------------------------------------------------------------


  publicAPI.handleStartRotate = function (callData) {
    publicAPI.startRotate();
    var count = model.gestureManipulators.length;

    while (count--) {
      var manipulator = model.gestureManipulators[count];

      if (manipulator && manipulator.isRotateEnabled()) {
        manipulator.onStartRotate(model.interactor, callData.rotation);
        manipulator.startInteraction();
      }
    }

    model.interactor.requestAnimation(publicAPI.handleStartRotate);
    publicAPI.invokeStartInteractionEvent(START_INTERACTION_EVENT);
  }; //--------------------------------------------------------------------------


  publicAPI.handleEndRotate = function () {
    publicAPI.endRotate();
    var count = model.gestureManipulators.length;

    while (count--) {
      var manipulator = model.gestureManipulators[count];

      if (manipulator && manipulator.isRotateEnabled()) {
        manipulator.onEndRotate(model.interactor);
        manipulator.endInteraction();
      }
    }

    model.interactor.cancelAnimation(publicAPI.handleStartRotate);
    publicAPI.invokeEndInteractionEvent(END_INTERACTION_EVENT);
  }; //----------------------------------------------------------------------------


  publicAPI.handleStartPan = function (callData) {
    publicAPI.startPan();
    var count = model.gestureManipulators.length;

    while (count--) {
      var manipulator = model.gestureManipulators[count];

      if (manipulator && manipulator.isPanEnabled()) {
        manipulator.onStartPan(model.interactor, callData.translation);
        manipulator.startInteraction();
      }
    }

    model.interactor.requestAnimation(publicAPI.handleStartPan);
    publicAPI.invokeStartInteractionEvent(START_INTERACTION_EVENT);
  }; //--------------------------------------------------------------------------


  publicAPI.handleEndPan = function () {
    publicAPI.endPan();
    var count = model.gestureManipulators.length;

    while (count--) {
      var manipulator = model.gestureManipulators[count];

      if (manipulator && manipulator.isPanEnabled()) {
        manipulator.onEndPan(model.interactor);
        manipulator.endInteraction();
      }
    }

    model.interactor.cancelAnimation(publicAPI.handleStartPan);
    publicAPI.invokeEndInteractionEvent(END_INTERACTION_EVENT);
  }; //----------------------------------------------------------------------------


  publicAPI.handlePinch = function (callData) {
    var count = model.gestureManipulators.length;
    var actionCount = 0;

    while (count--) {
      var manipulator = model.gestureManipulators[count];

      if (manipulator && manipulator.isPinchEnabled()) {
        manipulator.onPinch(model.interactor, callData.pokedRenderer, callData.scale);
        actionCount++;
      }
    }

    if (actionCount) {
      publicAPI.invokeInteractionEvent(INTERACTION_EVENT);
    }
  }; //----------------------------------------------------------------------------


  publicAPI.handlePan = function (callData) {
    var count = model.gestureManipulators.length;
    var actionCount = 0;

    while (count--) {
      var manipulator = model.gestureManipulators[count];

      if (manipulator && manipulator.isPanEnabled()) {
        manipulator.onPan(model.interactor, callData.pokedRenderer, callData.translation);
        actionCount++;
      }
    }

    if (actionCount) {
      publicAPI.invokeInteractionEvent(INTERACTION_EVENT);
    }
  }; //----------------------------------------------------------------------------


  publicAPI.handleRotate = function (callData) {
    var count = model.gestureManipulators.length;
    var actionCount = 0;

    while (count--) {
      var manipulator = model.gestureManipulators[count];

      if (manipulator && manipulator.isRotateEnabled()) {
        manipulator.onRotate(model.interactor, callData.pokedRenderer, callData.rotation);
        actionCount++;
      }
    }

    if (actionCount) {
      publicAPI.invokeInteractionEvent(INTERACTION_EVENT);
    }
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  cachedMousePosition: null,
  currentManipulator: null,
  currentWheelManipulator: null,
  // mouseManipulators: null,
  // keyboardManipulators: null,
  // vrManipulators: null,
  // gestureManipulators: null,
  centerOfRotation: [0, 0, 0],
  rotationFactor: 1
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _Rendering_Core_InteractorStyle_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(publicAPI, model, initialValues); // Create get-set macros

  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGet(publicAPI, model, ['rotationFactor']);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].get(publicAPI, model, ['mouseManipulators', 'keyboardManipulators', 'vrManipulators', 'gestureManipulators']);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGetArray(publicAPI, model, ['centerOfRotation'], 3); // Object specific methods

  vtkInteractorStyleManipulator(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkInteractorStyleManipulator'); // ----------------------------------------------------------------------------

var vtkInteractorStyleManipulator$1 = _objectSpread({
  newInstance: newInstance,
  extend: extend
}, STATIC);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Interaction/Style/InteractorStyleTrackballCamera.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Interaction/Style/InteractorStyleTrackballCamera.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkInteractorStyleTrackballCamera$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Rendering_Core_InteractorStyle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Rendering/Core/InteractorStyle.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/InteractorStyle.js");
/* harmony import */ var _Rendering_Core_InteractorStyle_Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Rendering/Core/InteractorStyle/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/InteractorStyle/Constants.js");
/* harmony import */ var _Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Common/Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");
/* harmony import */ var _Rendering_Core_RenderWindowInteractor_Constants_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Rendering/Core/RenderWindowInteractor/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/RenderWindowInteractor/Constants.js");






var States = _Rendering_Core_InteractorStyle_Constants_js__WEBPACK_IMPORTED_MODULE_2__["default"].States;
/* eslint-disable no-lonely-if */
// ----------------------------------------------------------------------------
// vtkInteractorStyleTrackballCamera methods
// ----------------------------------------------------------------------------

function vtkInteractorStyleTrackballCamera(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkInteractorStyleTrackballCamera'); // Public API methods

  publicAPI.handleMouseMove = function (callData) {
    var pos = callData.position;
    var renderer = callData.pokedRenderer;

    switch (model.state) {
      case States.IS_ROTATE:
        publicAPI.handleMouseRotate(renderer, pos);
        publicAPI.invokeInteractionEvent({
          type: 'InteractionEvent'
        });
        break;

      case States.IS_PAN:
        publicAPI.handleMousePan(renderer, pos);
        publicAPI.invokeInteractionEvent({
          type: 'InteractionEvent'
        });
        break;

      case States.IS_DOLLY:
        publicAPI.handleMouseDolly(renderer, pos);
        publicAPI.invokeInteractionEvent({
          type: 'InteractionEvent'
        });
        break;

      case States.IS_SPIN:
        publicAPI.handleMouseSpin(renderer, pos);
        publicAPI.invokeInteractionEvent({
          type: 'InteractionEvent'
        });
        break;
    }

    model.previousPosition = pos;
  }; //----------------------------------------------------------------------------


  publicAPI.handleButton3D = function (ed) {
    if (ed && ed.pressed && ed.device === _Rendering_Core_RenderWindowInteractor_Constants_js__WEBPACK_IMPORTED_MODULE_4__.Device.RightController && ed.input === _Rendering_Core_RenderWindowInteractor_Constants_js__WEBPACK_IMPORTED_MODULE_4__.Input.TrackPad) {
      publicAPI.startCameraPose();
      return;
    }

    if (ed && !ed.pressed && ed.device === _Rendering_Core_RenderWindowInteractor_Constants_js__WEBPACK_IMPORTED_MODULE_4__.Device.RightController && ed.input === _Rendering_Core_RenderWindowInteractor_Constants_js__WEBPACK_IMPORTED_MODULE_4__.Input.TrackPad && model.state === States.IS_CAMERA_POSE) {
      publicAPI.endCameraPose(); // return;
    }
  };

  publicAPI.handleMove3D = function (ed) {
    switch (model.state) {
      case States.IS_CAMERA_POSE:
        publicAPI.updateCameraPose(ed);
        break;
    }
  };

  publicAPI.updateCameraPose = function (ed) {
    // move the world in the direction of the
    // controller
    var camera = ed.pokedRenderer.getActiveCamera();
    var oldTrans = camera.getPhysicalTranslation(); // look at the y axis to determine how fast / what direction to move

    var speed = ed.gamepad.axes[1]; // 0.05 meters / frame movement

    var pscale = speed * 0.05 / camera.getPhysicalScale(); // convert orientation to world coordinate direction

    var dir = camera.physicalOrientationToWorldDirection(ed.orientation);
    camera.setPhysicalTranslation(oldTrans[0] + dir[0] * pscale, oldTrans[1] + dir[1] * pscale, oldTrans[2] + dir[2] * pscale);
  }; //----------------------------------------------------------------------------


  publicAPI.handleLeftButtonPress = function (callData) {
    var pos = callData.position;
    model.previousPosition = pos;

    if (callData.shiftKey) {
      if (callData.controlKey || callData.altKey) {
        publicAPI.startDolly();
      } else {
        publicAPI.startPan();
      }
    } else {
      if (callData.controlKey || callData.altKey) {
        publicAPI.startSpin();
      } else {
        publicAPI.startRotate();
      }
    }
  }; //--------------------------------------------------------------------------


  publicAPI.handleLeftButtonRelease = function () {
    switch (model.state) {
      case States.IS_DOLLY:
        publicAPI.endDolly();
        break;

      case States.IS_PAN:
        publicAPI.endPan();
        break;

      case States.IS_SPIN:
        publicAPI.endSpin();
        break;

      case States.IS_ROTATE:
        publicAPI.endRotate();
        break;
    }
  }; //----------------------------------------------------------------------------


  publicAPI.handleStartMouseWheel = function (callData) {
    publicAPI.startDolly();
    publicAPI.handleMouseWheel(callData);
  }; //--------------------------------------------------------------------------


  publicAPI.handleEndMouseWheel = function () {
    publicAPI.endDolly();
  }; //----------------------------------------------------------------------------


  publicAPI.handleStartPinch = function (callData) {
    model.previousScale = callData.scale;
    publicAPI.startDolly();
  }; //--------------------------------------------------------------------------


  publicAPI.handleEndPinch = function () {
    publicAPI.endDolly();
  }; //----------------------------------------------------------------------------


  publicAPI.handleStartRotate = function (callData) {
    model.previousRotation = callData.rotation;
    publicAPI.startRotate();
  }; //--------------------------------------------------------------------------


  publicAPI.handleEndRotate = function () {
    publicAPI.endRotate();
  }; //----------------------------------------------------------------------------


  publicAPI.handleStartPan = function (callData) {
    model.previousTranslation = callData.translation;
    publicAPI.startPan();
  }; //--------------------------------------------------------------------------


  publicAPI.handleEndPan = function () {
    publicAPI.endPan();
  }; //----------------------------------------------------------------------------


  publicAPI.handlePinch = function (callData) {
    publicAPI.dollyByFactor(callData.pokedRenderer, callData.scale / model.previousScale);
    model.previousScale = callData.scale;
  }; //----------------------------------------------------------------------------


  publicAPI.handlePan = function (callData) {
    var camera = callData.pokedRenderer.getActiveCamera(); // Calculate the focal depth since we'll be using it a lot

    var viewFocus = camera.getFocalPoint();
    viewFocus = publicAPI.computeWorldToDisplay(callData.pokedRenderer, viewFocus[0], viewFocus[1], viewFocus[2]);
    var focalDepth = viewFocus[2];
    var trans = callData.translation;
    var lastTrans = model.previousTranslation;
    var newPickPoint = publicAPI.computeDisplayToWorld(callData.pokedRenderer, viewFocus[0] + trans[0] - lastTrans[0], viewFocus[1] + trans[1] - lastTrans[1], focalDepth); // Has to recalc old mouse point since the viewport has moved,
    // so can't move it outside the loop

    var oldPickPoint = publicAPI.computeDisplayToWorld(callData.pokedRenderer, viewFocus[0], viewFocus[1], focalDepth); // Camera motion is reversed

    var motionVector = [];
    motionVector[0] = oldPickPoint[0] - newPickPoint[0];
    motionVector[1] = oldPickPoint[1] - newPickPoint[1];
    motionVector[2] = oldPickPoint[2] - newPickPoint[2];
    viewFocus = camera.getFocalPoint();
    var viewPoint = camera.getPosition();
    camera.setFocalPoint(motionVector[0] + viewFocus[0], motionVector[1] + viewFocus[1], motionVector[2] + viewFocus[2]);
    camera.setPosition(motionVector[0] + viewPoint[0], motionVector[1] + viewPoint[1], motionVector[2] + viewPoint[2]);

    if (model.interactor.getLightFollowCamera()) {
      callData.pokedRenderer.updateLightsGeometryToFollowCamera();
    }

    camera.orthogonalizeViewUp();
    model.previousTranslation = callData.translation;
  }; //----------------------------------------------------------------------------


  publicAPI.handleRotate = function (callData) {
    var camera = callData.pokedRenderer.getActiveCamera();
    camera.roll(callData.rotation - model.previousRotation);
    camera.orthogonalizeViewUp();
    model.previousRotation = callData.rotation;
  }; //--------------------------------------------------------------------------


  publicAPI.handleMouseRotate = function (renderer, position) {
    var rwi = model.interactor;
    var dx = position.x - model.previousPosition.x;
    var dy = position.y - model.previousPosition.y;
    var size = rwi.getView().getViewportSize(renderer);
    var deltaElevation = -0.1;
    var deltaAzimuth = -0.1;

    if (size[0] && size[1]) {
      deltaElevation = -20.0 / size[1];
      deltaAzimuth = -20.0 / size[0];
    }

    var rxf = dx * deltaAzimuth * model.motionFactor;
    var ryf = dy * deltaElevation * model.motionFactor;
    var camera = renderer.getActiveCamera();

    if (!Number.isNaN(rxf) && !Number.isNaN(ryf)) {
      camera.azimuth(rxf);
      camera.elevation(ryf);
      camera.orthogonalizeViewUp();
    }

    if (model.autoAdjustCameraClippingRange) {
      renderer.resetCameraClippingRange();
    }

    if (rwi.getLightFollowCamera()) {
      renderer.updateLightsGeometryToFollowCamera();
    }
  }; //--------------------------------------------------------------------------


  publicAPI.handleMouseSpin = function (renderer, position) {
    var rwi = model.interactor;
    var camera = renderer.getActiveCamera();
    var center = rwi.getView().getViewportCenter(renderer);
    var oldAngle = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.y)(Math.atan2(model.previousPosition.y - center[1], model.previousPosition.x - center[0]));
    var newAngle = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.y)(Math.atan2(position.y - center[1], position.x - center[0])) - oldAngle;

    if (!Number.isNaN(newAngle)) {
      camera.roll(newAngle);
      camera.orthogonalizeViewUp();
    }
  }; //--------------------------------------------------------------------------


  publicAPI.handleMousePan = function (renderer, position) {
    var camera = renderer.getActiveCamera(); // Calculate the focal depth since we'll be using it a lot

    var viewFocus = camera.getFocalPoint();
    viewFocus = publicAPI.computeWorldToDisplay(renderer, viewFocus[0], viewFocus[1], viewFocus[2]);
    var focalDepth = viewFocus[2];
    var newPickPoint = publicAPI.computeDisplayToWorld(renderer, position.x, position.y, focalDepth); // Has to recalc old mouse point since the viewport has moved,
    // so can't move it outside the loop

    var oldPickPoint = publicAPI.computeDisplayToWorld(renderer, model.previousPosition.x, model.previousPosition.y, focalDepth); // Camera motion is reversed

    var motionVector = [];
    motionVector[0] = oldPickPoint[0] - newPickPoint[0];
    motionVector[1] = oldPickPoint[1] - newPickPoint[1];
    motionVector[2] = oldPickPoint[2] - newPickPoint[2];
    viewFocus = camera.getFocalPoint();
    var viewPoint = camera.getPosition();
    camera.setFocalPoint(motionVector[0] + viewFocus[0], motionVector[1] + viewFocus[1], motionVector[2] + viewFocus[2]);
    camera.setPosition(motionVector[0] + viewPoint[0], motionVector[1] + viewPoint[1], motionVector[2] + viewPoint[2]);

    if (model.interactor.getLightFollowCamera()) {
      renderer.updateLightsGeometryToFollowCamera();
    }
  }; //----------------------------------------------------------------------------


  publicAPI.handleMouseDolly = function (renderer, position) {
    var dy = position.y - model.previousPosition.y;
    var rwi = model.interactor;
    var center = rwi.getView().getViewportCenter(renderer);
    var dyf = model.motionFactor * dy / center[1];
    publicAPI.dollyByFactor(renderer, Math.pow(1.1, dyf));
  }; //----------------------------------------------------------------------------


  publicAPI.handleMouseWheel = function (callData) {
    var dyf = 1 - callData.spinY / 10; // divide by 10 to lower the zoom factor

    publicAPI.dollyByFactor(callData.pokedRenderer, dyf);
  }; //----------------------------------------------------------------------------


  publicAPI.dollyByFactor = function (renderer, factor) {
    if (Number.isNaN(factor)) {
      return;
    }

    var camera = renderer.getActiveCamera();

    if (camera.getParallelProjection()) {
      camera.setParallelScale(camera.getParallelScale() / factor);
    } else {
      camera.dolly(factor);

      if (model.autoAdjustCameraClippingRange) {
        renderer.resetCameraClippingRange();
      }
    }

    if (model.interactor.getLightFollowCamera()) {
      renderer.updateLightsGeometryToFollowCamera();
    }
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  motionFactor: 10.0
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _Rendering_Core_InteractorStyle_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues); // Create get-set macros

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['motionFactor']); // For more macro methods, see "Sources/macros.js"
  // Object specific methods

  vtkInteractorStyleTrackballCamera(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkInteractorStyleTrackballCamera'); // ----------------------------------------------------------------------------

var vtkInteractorStyleTrackballCamera$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_VALUES": () => (/* binding */ DEFAULT_VALUES),
/* harmony export */   "default": () => (/* binding */ vtkOrientationMarkerWidget$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Rendering_Core_Renderer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Rendering/Core/Renderer.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Renderer.js");
/* harmony import */ var _OrientationMarkerWidget_Constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./OrientationMarkerWidget/Constants.js */ "./node_modules/@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget/Constants.js");







function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_3__["default"].vtkErrorMacro;
var Corners = _OrientationMarkerWidget_Constants_js__WEBPACK_IMPORTED_MODULE_5__["default"].Corners; // ----------------------------------------------------------------------------
// vtkOrientationMarkerWidget
// ----------------------------------------------------------------------------

function vtkOrientationMarkerWidget(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkOrientationMarkerWidget');

  var superClass = _objectSpread({}, publicAPI); // Private variables


  var previousCameraInput = [];
  var selfRenderer = _Rendering_Core_Renderer_js__WEBPACK_IMPORTED_MODULE_4__["default"].newInstance();
  var resizeObserver = new ResizeObserver(function (entries) {
    if (entries.length === 1) {
      publicAPI.updateViewport();
    }
  });
  var interactorUnsubscribe = null;
  var selfSubscription = null;

  publicAPI.computeViewport = function () {
    var _model$interactor$get = model.interactor.getView().getSize(),
        _model$interactor$get2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__["default"])(_model$interactor$get, 2),
        viewXSize = _model$interactor$get2[0],
        viewYSize = _model$interactor$get2[1];

    var minViewSize = Math.min(viewXSize, viewYSize);
    var pixelSize = model.viewportSize * minViewSize; // clamp pixel size

    pixelSize = Math.max(Math.min(model.minPixelSize, minViewSize), Math.min(model.maxPixelSize, pixelSize));
    var xFrac = pixelSize / viewXSize;
    var yFrac = pixelSize / viewYSize; // [left bottom right top]

    switch (model.viewportCorner) {
      case Corners.TOP_LEFT:
        return [0, 1 - yFrac, xFrac, 1];

      case Corners.TOP_RIGHT:
        return [1 - xFrac, 1 - yFrac, 1, 1];

      case Corners.BOTTOM_LEFT:
        return [0, 0, xFrac, yFrac];

      case Corners.BOTTOM_RIGHT:
        return [1 - xFrac, 0, 1, yFrac];

      default:
        vtkErrorMacro('Invalid widget corner');
        return null;
    }
  };

  publicAPI.updateViewport = function () {
    selfRenderer.setViewport.apply(selfRenderer, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(publicAPI.computeViewport()));
    model.interactor.render();
  };

  publicAPI.updateMarkerOrientation = function () {
    var currentCamera = model.interactor.findPokedRenderer().getActiveCamera();

    if (!currentCamera) {
      return;
    }

    var position = currentCamera.getReferenceByName('position');
    var focalPoint = currentCamera.getReferenceByName('focalPoint');
    var viewUp = currentCamera.getReferenceByName('viewUp');

    if (previousCameraInput[0] !== position[0] || previousCameraInput[1] !== position[1] || previousCameraInput[2] !== position[2] || previousCameraInput[3] !== focalPoint[0] || previousCameraInput[4] !== focalPoint[1] || previousCameraInput[5] !== focalPoint[2] || previousCameraInput[6] !== viewUp[0] || previousCameraInput[7] !== viewUp[1] || previousCameraInput[8] !== viewUp[2]) {
      previousCameraInput[0] = position[0];
      previousCameraInput[1] = position[1];
      previousCameraInput[2] = position[2];
      previousCameraInput[3] = focalPoint[0];
      previousCameraInput[4] = focalPoint[1];
      previousCameraInput[5] = focalPoint[2];
      previousCameraInput[6] = viewUp[0];
      previousCameraInput[7] = viewUp[1];
      previousCameraInput[8] = viewUp[2];
      var activeCamera = selfRenderer.getActiveCamera();
      activeCamera.setPosition(position[0], position[1], position[2]);
      activeCamera.setFocalPoint(focalPoint[0], focalPoint[1], focalPoint[2]);
      activeCamera.setViewUp(viewUp[0], viewUp[1], viewUp[2]);
      selfRenderer.resetCamera();
    }
  };
  /**
   * Enables/Disables the orientation marker.
   */


  publicAPI.setEnabled = function (enabling) {
    if (enabling) {
      if (model.enabled) {
        return;
      }

      if (!model.actor) {
        vtkErrorMacro('Must set actor before enabling orientation marker.');
        return;
      }

      if (!model.interactor) {
        vtkErrorMacro('Must set interactor before enabling orientation marker.');
        return;
      }

      var renderWindow = model.interactor.findPokedRenderer().getRenderWindow();
      renderWindow.addRenderer(selfRenderer);

      if (renderWindow.getNumberOfLayers() < 2) {
        renderWindow.setNumberOfLayers(2);
      } // Highest number is foreground


      selfRenderer.setLayer(renderWindow.getNumberOfLayers() - 1);
      selfRenderer.setInteractive(false);
      selfRenderer.addViewProp(model.actor);
      model.actor.setVisibility(true);

      var _model$interactor$onA = model.interactor.onAnimation(publicAPI.updateMarkerOrientation);

      interactorUnsubscribe = _model$interactor$onA.unsubscribe;
      resizeObserver.observe(model.interactor.getView().getCanvas());
      publicAPI.updateViewport();
      publicAPI.updateMarkerOrientation();
      model.enabled = true;
    } else {
      if (!model.enabled) {
        return;
      }

      model.enabled = false;
      resizeObserver.disconnect();
      interactorUnsubscribe();
      interactorUnsubscribe = null;
      model.actor.setVisibility(false);
      selfRenderer.removeViewProp(model.actor);

      var _renderWindow = model.interactor.findPokedRenderer().getRenderWindow();

      if (_renderWindow) {
        _renderWindow.removeRenderer(selfRenderer);
      }
    }

    publicAPI.modified();
  };
  /**
   * Sets the viewport corner.
   */


  publicAPI.setViewportCorner = function (corner) {
    if (corner === model.viewportCorner) {
      return;
    }

    model.viewportCorner = corner;

    if (model.enabled) {
      publicAPI.updateViewport();
    }
  };
  /**
   * Sets the viewport size.
   */


  publicAPI.setViewportSize = function (sizeFactor) {
    var viewportSize = Math.min(1, Math.max(0, sizeFactor));

    if (viewportSize === model.viewportSize) {
      return;
    }

    model.viewportSize = viewportSize;

    if (model.enabled) {
      publicAPI.updateViewport();
    }
  };

  publicAPI.setActor = function (actor) {
    var previousState = model.enabled;
    publicAPI.setEnabled(false);
    model.actor = actor;
    publicAPI.setEnabled(previousState);
  };

  publicAPI.getRenderer = function () {
    return selfRenderer;
  };

  publicAPI.delete = function () {
    superClass.delete();

    if (selfSubscription) {
      selfSubscription.unsubscribe();
      selfSubscription = null;
    }

    if (interactorUnsubscribe) {
      interactorUnsubscribe();
      interactorUnsubscribe = null;
    }

    resizeObserver.disconnect();
  }; // --------------------------------------------------------------------------
  // update viewport whenever we are updated


  selfSubscription = publicAPI.onModified(publicAPI.updateViewport);
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  // actor: null,
  // interactor: null,
  viewportCorner: _OrientationMarkerWidget_Constants_js__WEBPACK_IMPORTED_MODULE_5__["default"].Corners.BOTTOM_LEFT,
  viewportSize: 0.2,
  minPixelSize: 50,
  maxPixelSize: 200
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_3__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_3__["default"].get(publicAPI, model, ['enabled', 'viewportCorner', 'viewportSize']); // NOTE: setting these while the widget is enabled will
  // not update the widget.

  _macros_js__WEBPACK_IMPORTED_MODULE_3__["default"].setGet(publicAPI, model, ['interactor', 'minPixelSize', 'maxPixelSize']);
  _macros_js__WEBPACK_IMPORTED_MODULE_3__["default"].get(publicAPI, model, ['actor']); // Object methods

  vtkOrientationMarkerWidget(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_3__["default"].newInstance(extend, 'vtkOrientationMarkerWidget'); // ----------------------------------------------------------------------------

var vtkOrientationMarkerWidget$1 = _objectSpread({
  newInstance: newInstance,
  extend: extend
}, _OrientationMarkerWidget_Constants_js__WEBPACK_IMPORTED_MODULE_5__["default"]);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget/Constants.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget/Constants.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ Constants)
/* harmony export */ });
var Corners = {
  TOP_LEFT: 'TOP_LEFT',
  TOP_RIGHT: 'TOP_RIGHT',
  BOTTOM_LEFT: 'BOTTOM_LEFT',
  BOTTOM_RIGHT: 'BOTTOM_RIGHT'
};
var Constants = {
  Corners: Corners
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/AbstractMapper.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/AbstractMapper.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkAbstractMapper$1),
/* harmony export */   "extend": () => (/* binding */ extend)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");


// vtkAbstractMapper methods
// ----------------------------------------------------------------------------

function vtkAbstractMapper(publicAPI, model) {
  publicAPI.update = function () {
    publicAPI.getInputData();
  };

  publicAPI.addClippingPlane = function (plane) {
    if (plane.getClassName() !== 'vtkPlane') {
      return;
    }

    model.clippingPlanes.push(plane);
  };

  publicAPI.getNumberOfClippingPlanes = function () {
    return model.clippingPlanes.length;
  };

  publicAPI.removeAllClippingPlanes = function () {
    model.clippingPlanes.length = 0;
  };

  publicAPI.removeClippingPlane = function (i) {
    if (i < 0 || i >= 6) {
      return;
    }

    model.clippingPlanes.splice(i, 1);
  };

  publicAPI.getClippingPlanes = function () {
    return model.clippingPlanes;
  };

  publicAPI.setClippingPlanes = function (planes) {
    if (!planes) {
      return;
    }

    if (!Array.isArray(planes)) {
      publicAPI.addClippingPlane(planes);
    } else {
      var nbPlanes = planes.length;

      for (var i = 0; i < nbPlanes && i < 6; i++) {
        publicAPI.addClippingPlane(planes[i]);
      }
    }
  };

  publicAPI.getClippingPlaneInDataCoords = function (propMatrix, i, hnormal) {
    var clipPlanes = model.clippingPlanes;
    var mat = propMatrix;

    if (clipPlanes) {
      var n = clipPlanes.length;

      if (i >= 0 && i < n) {
        // Get the plane
        var plane = clipPlanes[i];
        var normal = plane.getNormal();
        var origin = plane.getOrigin(); // Compute the plane equation

        var v1 = normal[0];
        var v2 = normal[1];
        var v3 = normal[2];
        var v4 = -(v1 * origin[0] + v2 * origin[1] + v3 * origin[2]); // Transform normal from world to data coords

        hnormal[0] = v1 * mat[0] + v2 * mat[4] + v3 * mat[8] + v4 * mat[12];
        hnormal[1] = v1 * mat[1] + v2 * mat[5] + v3 * mat[9] + v4 * mat[13];
        hnormal[2] = v1 * mat[2] + v2 * mat[6] + v3 * mat[10] + v4 * mat[14];
        hnormal[3] = v1 * mat[3] + v2 * mat[7] + v3 * mat[11] + v4 * mat[15];
        return;
      }
    }

    _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].vtkErrorMacro("Clipping plane index ".concat(i, " is out of range."));
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  clippingPlanes: []
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].algo(publicAPI, model, 1, 0);

  if (!model.clippingPlanes) {
    model.clippingPlanes = [];
  }

  vtkAbstractMapper(publicAPI, model);
} // ----------------------------------------------------------------------------

var vtkAbstractMapper$1 = {
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/AbstractMapper3D.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/AbstractMapper3D.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkAbstractMapper3D$1),
/* harmony export */   "extend": () => (/* binding */ extend)
/* harmony export */ });
/* harmony import */ var _AbstractMapper_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AbstractMapper.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/AbstractMapper.js");
/* harmony import */ var _Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Common/Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");



// vtkAbstractMapper methods
// ----------------------------------------------------------------------------

function vtkAbstractMapper3D(publicAPI, model) {
  publicAPI.getBounds = function () {
    return 0;
  };

  publicAPI.getBounds = function (bounds) {
    publicAPI.getBounds();

    for (var i = 0; i < 6; i++) {
      bounds[i] = model.bounds[i];
    }
  };

  publicAPI.getCenter = function () {
    publicAPI.getBounds();

    for (var i = 0; i < 3; i++) {
      model.center[i] = (model.bounds[2 * i + 1] + model.bounds[2 * i]) / 2.0;
    }

    return model.center.slice();
  };

  publicAPI.getLength = function () {
    var diff = 0.0;
    var l = 0.0;
    publicAPI.getBounds();

    for (var i = 0; i < 3; i++) {
      diff = model.bounds[2 * i + 1] - model.bounds[2 * i];
      l += diff * diff;
    }

    return Math.sqrt(l);
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  bounds: [1, -1, 1, -1, 1, -1],
  center: [0, 0, 0]
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _AbstractMapper_js__WEBPACK_IMPORTED_MODULE_0__["default"].extend(publicAPI, model, initialValues);

  if (!model.bounds) {
    (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__.u)(model.bounds);
  }

  if (!model.center) {
    model.center = [0.0, 0.0, 0.0];
  }

  vtkAbstractMapper3D(publicAPI, model);
} // ----------------------------------------------------------------------------

var vtkAbstractMapper3D$1 = {
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/AbstractPicker.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/AbstractPicker.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkAbstractPicker$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");


// vtkAbstractPicker methods
// ----------------------------------------------------------------------------

function vtkAbstractPicker(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkAbstractPicker');

  publicAPI.initialize = function () {
    model.renderer = null;
    model.selectionPoint[0] = 0.0;
    model.selectionPoint[1] = 0.0;
    model.selectionPoint[2] = 0.0;
    model.pickPosition[0] = 0.0;
    model.pickPosition[1] = 0.0;
    model.pickPosition[2] = 0.0;
  };

  publicAPI.initializePickList = function () {
    model.pickList = [];
  };

  publicAPI.addPickList = function (actor) {
    model.pickList.push(actor);
  };

  publicAPI.deletePickList = function (actor) {
    var i = model.pickList.indexOf(actor);

    if (i !== -1) {
      model.pickList.splice(i, 1);
    }
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  renderer: null,
  selectionPoint: [0.0, 0.0, 0.0],
  pickPosition: [0.0, 0.0, 0.0],
  pickFromList: 0,
  pickList: []
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].get(publicAPI, model, ['renderer']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].getArray(publicAPI, model, ['selectionPoint', 'pickPosition']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['pickFromList', 'pickList']);
  vtkAbstractPicker(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkAbstractPicker'); // ----------------------------------------------------------------------------

var vtkAbstractPicker$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/Actor.js":
/*!**************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/Actor.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkActor$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Common_DataModel_BoundingBox_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Common/DataModel/BoundingBox.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/BoundingBox.js");
/* harmony import */ var _Prop3D_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Prop3D.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Prop3D.js");
/* harmony import */ var _Property_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Property.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Property.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js");
/* harmony import */ var _vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/vec3.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/vec3.js");








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var vtkDebugMacro = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].vtkDebugMacro; // ----------------------------------------------------------------------------
// vtkActor methods
// ----------------------------------------------------------------------------

function vtkActor(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkActor'); // Capture 'parentClass' api for internal use

  var superClass = _objectSpread({}, publicAPI);

  publicAPI.getActors = function () {
    return publicAPI;
  };

  publicAPI.getIsOpaque = function () {
    if (model.forceOpaque) {
      return true;
    }

    if (model.forceTranslucent) {
      return false;
    } // make sure we have a property


    if (!model.property) {
      // force creation of a property
      publicAPI.getProperty();
    }

    var isOpaque = model.property.getOpacity() >= 1.0; // are we using an opaque texture, if any?

    isOpaque = isOpaque && (!model.texture || !model.texture.isTranslucent()); // are we using an opaque scalar array, if any?

    isOpaque = isOpaque && (!model.mapper || model.mapper.getIsOpaque());
    return isOpaque;
  };

  publicAPI.hasTranslucentPolygonalGeometry = function () {
    if (model.mapper === null) {
      return false;
    } // make sure we have a property


    if (model.property === null) {
      // force creation of a property
      publicAPI.setProperty(publicAPI.makeProperty());
    } // is this actor opaque ?


    return !publicAPI.getIsOpaque();
  };

  publicAPI.makeProperty = _Property_js__WEBPACK_IMPORTED_MODULE_4__["default"].newInstance;

  publicAPI.getProperty = function () {
    if (model.property === null) {
      model.property = publicAPI.makeProperty();
    }

    return model.property;
  };

  publicAPI.getBounds = function () {
    if (model.mapper === null) {
      return model.bounds;
    } // Check for the special case when the mapper's bounds are unknown


    var bds = model.mapper.getBounds();

    if (!bds || bds.length !== 6) {
      return bds;
    } // Check for the special case when the actor is empty.


    if (bds[0] > bds[1]) {
      model.mapperBounds = bds.concat(); // copy the mapper's bounds

      model.bounds = [1, -1, 1, -1, 1, -1];
      model.boundsMTime.modified();
      return bds;
    } // Check if we have cached values for these bounds - we cache the
    // values returned by model.mapper.getBounds() and we store the time
    // of caching. If the values returned this time are different, or
    // the modified time of this class is newer than the cached time,
    // then we need to rebuild.


    if (!model.mapperBounds || bds[0] !== model.mapperBounds[0] || bds[1] !== model.mapperBounds[1] || bds[2] !== model.mapperBounds[2] || bds[3] !== model.mapperBounds[3] || bds[4] !== model.mapperBounds[4] || bds[5] !== model.mapperBounds[5] || publicAPI.getMTime() > model.boundsMTime.getMTime()) {
      vtkDebugMacro('Recomputing bounds...');
      model.mapperBounds = bds.concat(); // copy the mapper's bounds

      var bbox = [];
      _Common_DataModel_BoundingBox_js__WEBPACK_IMPORTED_MODULE_2__["default"].getCorners(bds, bbox);
      publicAPI.computeMatrix();
      var tmp4 = new Float64Array(16);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_5__.j)(tmp4, model.matrix);
      bbox.forEach(function (pt) {
        return (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_6__.t)(pt, pt, tmp4);
      });
      /* eslint-disable no-multi-assign */

      model.bounds[0] = model.bounds[2] = model.bounds[4] = Number.MAX_VALUE;
      model.bounds[1] = model.bounds[3] = model.bounds[5] = -Number.MAX_VALUE;
      /* eslint-enable no-multi-assign */

      model.bounds = model.bounds.map(function (d, i) {
        return i % 2 === 0 ? bbox.reduce(function (a, b) {
          return a > b[i / 2] ? b[i / 2] : a;
        }, d) : bbox.reduce(function (a, b) {
          return a < b[(i - 1) / 2] ? b[(i - 1) / 2] : a;
        }, d);
      });
      model.boundsMTime.modified();
    }

    return model.bounds;
  };

  publicAPI.getMTime = function () {
    var mt = superClass.getMTime();

    if (model.property !== null) {
      var time = model.property.getMTime();
      mt = time > mt ? time : mt;
    }

    if (model.backfaceProperty !== null) {
      var _time = model.backfaceProperty.getMTime();

      mt = _time > mt ? _time : mt;
    }

    return mt;
  };

  publicAPI.getRedrawMTime = function () {
    var mt = model.mtime;

    if (model.mapper !== null) {
      var time = model.mapper.getMTime();
      mt = time > mt ? time : mt;

      if (model.mapper.getInput() !== null) {
        // FIXME !!! getInputAlgorithm / getInput
        model.mapper.getInputAlgorithm().update();
        time = model.mapper.getInput().getMTime();
        mt = time > mt ? time : mt;
      }
    }

    return mt;
  };

  publicAPI.getSupportsSelection = function () {
    return model.mapper ? model.mapper.getSupportsSelection() : false;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  mapper: null,
  property: null,
  backfaceProperty: null,
  forceOpaque: false,
  forceTranslucent: false,
  bounds: [1, -1, 1, -1, 1, -1]
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _Prop3D_js__WEBPACK_IMPORTED_MODULE_3__["default"].extend(publicAPI, model, initialValues); // vtkTimeStamp

  model.boundsMTime = {};
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].obj(model.boundsMTime); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].set(publicAPI, model, ['property']);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGet(publicAPI, model, ['backfaceProperty', 'forceOpaque', 'forceTranslucent', 'mapper']); // Object methods

  vtkActor(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkActor'); // ----------------------------------------------------------------------------

var vtkActor$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/AnnotatedCubeActor.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/AnnotatedCubeActor.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_VALUES": () => (/* binding */ DEFAULT_VALUES),
/* harmony export */   "default": () => (/* binding */ vtkAnnotatedCubeActor$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Actor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Actor.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Actor.js");
/* harmony import */ var _Mapper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Mapper.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Mapper.js");
/* harmony import */ var _Texture_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Texture.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Texture.js");
/* harmony import */ var _Filters_Sources_CubeSource_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Filters/Sources/CubeSource.js */ "./node_modules/@kitware/vtk.js/Filters/Sources/CubeSource.js");
/* harmony import */ var _Common_Core_ImageHelper_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Common/Core/ImageHelper.js */ "./node_modules/@kitware/vtk.js/Common/Core/ImageHelper.js");
/* harmony import */ var _AnnotatedCubeActor_Presets_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./AnnotatedCubeActor/Presets.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/AnnotatedCubeActor/Presets.js");









function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var FACE_TO_INDEX = {
  xPlus: 0,
  xMinus: 1,
  yPlus: 2,
  yMinus: 3,
  zPlus: 4,
  zMinus: 5
}; // ----------------------------------------------------------------------------
// vtkAnnotatedCubeActor
// ----------------------------------------------------------------------------

function vtkAnnotatedCubeActor(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkAnnotatedCubeActor'); // Make sure face properties are not references to the default value

  model.xPlusFaceProperty = _objectSpread({}, model.xPlusFaceProperty);
  model.xMinusFaceProperty = _objectSpread({}, model.xMinusFaceProperty);
  model.yPlusFaceProperty = _objectSpread({}, model.yPlusFaceProperty);
  model.yMinusFaceProperty = _objectSpread({}, model.yMinusFaceProperty);
  model.zPlusFaceProperty = _objectSpread({}, model.zPlusFaceProperty);
  model.zMinusFaceProperty = _objectSpread({}, model.zMinusFaceProperty); // private variables

  var cubeSource = null;
  var canvas = document.createElement('canvas');
  var mapper = _Mapper_js__WEBPACK_IMPORTED_MODULE_3__["default"].newInstance();
  var texture = _Texture_js__WEBPACK_IMPORTED_MODULE_4__["default"].newInstance();
  texture.setInterpolate(true); // private methods

  function updateFaceTexture(faceName) {
    var newProp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    if (newProp) {
      Object.assign(model["".concat(faceName, "FaceProperty")], newProp);
    }

    var prop = _objectSpread(_objectSpread({}, model.defaultStyle), model["".concat(faceName, "FaceProperty")]); // set canvas resolution


    canvas.width = prop.resolution;
    canvas.height = prop.resolution;
    var ctxt = canvas.getContext('2d'); // set background color

    ctxt.fillStyle = prop.faceColor;
    ctxt.fillRect(0, 0, canvas.width, canvas.height); // draw edge

    if (prop.edgeThickness > 0) {
      ctxt.strokeStyle = prop.edgeColor;
      ctxt.lineWidth = prop.edgeThickness * canvas.width;
      ctxt.strokeRect(0, 0, canvas.width, canvas.height);
    } // set face rotation


    ctxt.save(); // vertical flip

    ctxt.translate(0, canvas.height);
    ctxt.scale(1, -1);
    ctxt.translate(canvas.width / 2, canvas.height / 2);
    ctxt.rotate(-Math.PI * (prop.faceRotation / 180.0)); // set foreground text

    var textSize = prop.fontSizeScale(prop.resolution);
    ctxt.fillStyle = prop.fontColor;
    ctxt.textAlign = 'center';
    ctxt.textBaseline = 'middle';
    ctxt.font = "".concat(prop.fontStyle, " ").concat(textSize, "px \"").concat(prop.fontFamily, "\"");
    ctxt.fillText(prop.text, 0, 0);
    ctxt.restore();
    var vtkImage = _Common_Core_ImageHelper_js__WEBPACK_IMPORTED_MODULE_6__["default"].canvasToImageData(canvas);
    texture.setInputData(vtkImage, FACE_TO_INDEX[faceName]);
    publicAPI.modified();
  }

  function updateAllFaceTextures() {
    cubeSource = _Filters_Sources_CubeSource_js__WEBPACK_IMPORTED_MODULE_5__["default"].newInstance({
      generate3DTextureCoordinates: true
    });
    mapper.setInputConnection(cubeSource.getOutputPort());
    updateFaceTexture('xPlus');
    updateFaceTexture('xMinus');
    updateFaceTexture('yPlus');
    updateFaceTexture('yMinus');
    updateFaceTexture('zPlus');
    updateFaceTexture('zMinus');
  } // public methods


  publicAPI.setDefaultStyle = function (style) {
    model.defaultStyle = _objectSpread(_objectSpread({}, model.defaultStyle), style);
    updateAllFaceTextures();
  };

  publicAPI.setXPlusFaceProperty = function (prop) {
    return updateFaceTexture('xPlus', prop);
  };

  publicAPI.setXMinusFaceProperty = function (prop) {
    return updateFaceTexture('xMinus', prop);
  };

  publicAPI.setYPlusFaceProperty = function (prop) {
    return updateFaceTexture('yPlus', prop);
  };

  publicAPI.setYMinusFaceProperty = function (prop) {
    return updateFaceTexture('yMinus', prop);
  };

  publicAPI.setZPlusFaceProperty = function (prop) {
    return updateFaceTexture('zPlus', prop);
  };

  publicAPI.setZMinusFaceProperty = function (prop) {
    return updateFaceTexture('zMinus', prop);
  }; // constructor


  updateAllFaceTextures(); // set mapper

  mapper.setInputConnection(cubeSource.getOutputPort());
  publicAPI.setMapper(mapper); // set texture

  publicAPI.addTexture(texture);
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  defaultStyle: {
    text: '',
    faceColor: 'white',
    faceRotation: 0,
    fontFamily: 'Arial',
    fontColor: 'black',
    fontStyle: 'normal',
    fontSizeScale: function fontSizeScale(resolution) {
      return resolution / 1.8;
    },
    edgeThickness: 0.1,
    edgeColor: 'black',
    resolution: 200
  } // xPlusFaceProperty: null,
  // xMinusFaceProperty: null,
  // yPlusFaceProperty: null,
  // yMinusFaceProperty: null,
  // zPlusFaceProperty: null,
  // zMinusFaceProperty: null,

}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _Actor_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(publicAPI, model, initialValues);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].get(publicAPI, model, ['defaultStyle', 'xPlusFaceProperty', 'xMinusFaceProperty', 'yPlusFaceProperty', 'yMinusFaceProperty', 'zPlusFaceProperty', 'zMinusFaceProperty']); // Object methods

  vtkAnnotatedCubeActor(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkAnnotatedCubeActor'); // ----------------------------------------------------------------------------

var vtkAnnotatedCubeActor$1 = {
  newInstance: newInstance,
  extend: extend,
  Presets: _AnnotatedCubeActor_Presets_js__WEBPACK_IMPORTED_MODULE_7__["default"]
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/AnnotatedCubeActor/Presets.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/AnnotatedCubeActor/Presets.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AnnotatedCubePresets)
/* harmony export */ });
var STYLES = {
  default: {
    defaultStyle: {
      fontStyle: 'bold',
      fontFamily: 'Arial',
      fontColor: 'black',
      fontSizeScale: function fontSizeScale(res) {
        return res / 2;
      },
      faceColor: 'white',
      edgeThickness: 0.1,
      edgeColor: 'black',
      resolution: 400
    },
    xMinusFaceProperty: {
      text: 'X-',
      faceColor: 'yellow'
    },
    xPlusFaceProperty: {
      text: 'X+',
      faceColor: 'yellow'
    },
    yMinusFaceProperty: {
      text: 'Y-',
      faceColor: 'red'
    },
    yPlusFaceProperty: {
      text: 'Y+',
      faceColor: 'red'
    },
    zMinusFaceProperty: {
      text: 'Z-',
      faceColor: '#008000'
    },
    zPlusFaceProperty: {
      text: 'Z+',
      faceColor: '#008000'
    }
  },
  lps: {
    xMinusFaceProperty: {
      text: 'R',
      faceRotation: -90
    },
    xPlusFaceProperty: {
      text: 'L',
      faceRotation: 90
    },
    yMinusFaceProperty: {
      text: 'A',
      faceRotation: 0
    },
    yPlusFaceProperty: {
      text: 'P',
      faceRotation: 180
    },
    zMinusFaceProperty: {
      text: 'I',
      faceRotation: 180
    },
    zPlusFaceProperty: {
      text: 'S',
      faceRotation: 0
    }
  }
};

function applyDefinitions(definitions, cubeActor) {
  cubeActor.set(definitions);
}

function applyPreset(name, cubeActor) {
  return applyDefinitions(STYLES[name], cubeActor);
}

function registerStylePreset(name, definitions) {
  STYLES[name] = definitions;
}

var AnnotatedCubePresets = {
  applyDefinitions: applyDefinitions,
  applyPreset: applyPreset,
  registerStylePreset: registerStylePreset
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/Camera.js":
/*!***************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/Camera.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DEFAULT_VALUES": () => (/* binding */ DEFAULT_VALUES),
/* harmony export */   "default": () => (/* binding */ vtkCamera$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Common/Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js");
/* harmony import */ var _vendor_gl_matrix_esm_vec4_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/vec4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/vec4.js");
/* harmony import */ var _vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/vec3.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/vec3.js");
/* harmony import */ var _vendor_gl_matrix_esm_quat_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/quat.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/quat.js");








var vtkDebugMacro = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].vtkDebugMacro;
/* eslint-disable new-cap */

/*
 * Convenience function to access elements of a gl-matrix.  If it turns
 * out I have rows and columns swapped everywhere, then I'll just change
 * the order of 'row' and 'col' parameters in this function
 */
// function getMatrixElement(matrix, row, col) {
//   const idx = (row * 4) + col;
//   return matrix[idx];
// }
// ----------------------------------------------------------------------------
// vtkCamera methods
// ----------------------------------------------------------------------------

function vtkCamera(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkCamera'); // Set up private variables and methods

  var origin = new Float64Array(3);
  var dopbasis = new Float64Array([0.0, 0.0, -1.0]);
  var upbasis = new Float64Array([0.0, 1.0, 0.0]);
  var tmpMatrix = (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.i)(new Float64Array(16));
  var tmpvec1 = new Float64Array(3);
  var tmpvec2 = new Float64Array(3);
  var tmpvec3 = new Float64Array(3);
  var rotateMatrix = (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.i)(new Float64Array(16));
  var trans = (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.i)(new Float64Array(16));
  var newPosition = new Float64Array(3);
  var newFocalPoint = new Float64Array(3); // Internal Functions that don't need to be public

  function computeViewPlaneNormal() {
    // VPN is -DOP
    model.viewPlaneNormal[0] = -model.directionOfProjection[0];
    model.viewPlaneNormal[1] = -model.directionOfProjection[1];
    model.viewPlaneNormal[2] = -model.directionOfProjection[2];
  }

  publicAPI.orthogonalizeViewUp = function () {
    var vt = publicAPI.getViewMatrix();
    model.viewUp[0] = vt[4];
    model.viewUp[1] = vt[5];
    model.viewUp[2] = vt[6];
    publicAPI.modified();
  };

  publicAPI.setPosition = function (x, y, z) {
    if (x === model.position[0] && y === model.position[1] && z === model.position[2]) {
      return;
    }

    model.position[0] = x;
    model.position[1] = y;
    model.position[2] = z; // recompute the focal distance

    publicAPI.computeDistance();
    publicAPI.modified();
  };

  publicAPI.setFocalPoint = function (x, y, z) {
    if (x === model.focalPoint[0] && y === model.focalPoint[1] && z === model.focalPoint[2]) {
      return;
    }

    model.focalPoint[0] = x;
    model.focalPoint[1] = y;
    model.focalPoint[2] = z; // recompute the focal distance

    publicAPI.computeDistance();
    publicAPI.modified();
  };

  publicAPI.setDistance = function (d) {
    if (model.distance === d) {
      return;
    }

    model.distance = d;

    if (model.distance < 1e-20) {
      model.distance = 1e-20;
      vtkDebugMacro('Distance is set to minimum.');
    } // we want to keep the camera pointing in the same direction


    var vec = model.directionOfProjection; // recalculate FocalPoint

    model.focalPoint[0] = model.position[0] + vec[0] * model.distance;
    model.focalPoint[1] = model.position[1] + vec[1] * model.distance;
    model.focalPoint[2] = model.position[2] + vec[2] * model.distance;
    publicAPI.modified();
  }; //----------------------------------------------------------------------------
  // This method must be called when the focal point or camera position changes


  publicAPI.computeDistance = function () {
    var dx = model.focalPoint[0] - model.position[0];
    var dy = model.focalPoint[1] - model.position[1];
    var dz = model.focalPoint[2] - model.position[2];
    model.distance = Math.sqrt(dx * dx + dy * dy + dz * dz);

    if (model.distance < 1e-20) {
      model.distance = 1e-20;
      vtkDebugMacro('Distance is set to minimum.');
      var vec = model.directionOfProjection; // recalculate FocalPoint

      model.focalPoint[0] = model.position[0] + vec[0] * model.distance;
      model.focalPoint[1] = model.position[1] + vec[1] * model.distance;
      model.focalPoint[2] = model.position[2] + vec[2] * model.distance;
    }

    model.directionOfProjection[0] = dx / model.distance;
    model.directionOfProjection[1] = dy / model.distance;
    model.directionOfProjection[2] = dz / model.distance;
    computeViewPlaneNormal();
  }; //----------------------------------------------------------------------------
  // Move the position of the camera along the view plane normal. Moving
  // towards the focal point (e.g., > 1) is a dolly-in, moving away
  // from the focal point (e.g., < 1) is a dolly-out.


  publicAPI.dolly = function (amount) {
    if (amount <= 0.0) {
      return;
    } // dolly moves the camera towards the focus


    var d = model.distance / amount;
    publicAPI.setPosition(model.focalPoint[0] - d * model.directionOfProjection[0], model.focalPoint[1] - d * model.directionOfProjection[1], model.focalPoint[2] - d * model.directionOfProjection[2]);
  };

  publicAPI.roll = function (angle) {
    var eye = model.position;
    var at = model.focalPoint;
    var up = model.viewUp;
    var viewUpVec4 = new Float64Array([up[0], up[1], up[2], 0.0]);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.i)(rotateMatrix);
    var viewDir = new Float64Array([at[0] - eye[0], at[1] - eye[1], at[2] - eye[2]]);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.r)(rotateMatrix, rotateMatrix, (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.r)(angle), viewDir);
    (0,_vendor_gl_matrix_esm_vec4_js__WEBPACK_IMPORTED_MODULE_4__.t)(viewUpVec4, viewUpVec4, rotateMatrix);
    model.viewUp[0] = viewUpVec4[0];
    model.viewUp[1] = viewUpVec4[1];
    model.viewUp[2] = viewUpVec4[2];
    publicAPI.modified();
  };

  publicAPI.azimuth = function (angle) {
    var fp = model.focalPoint;
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.i)(trans); // translate the focal point to the origin,
    // rotate about view up,
    // translate back again

    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.t)(trans, trans, fp);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.r)(trans, trans, (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.r)(angle), model.viewUp);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.t)(trans, trans, [-fp[0], -fp[1], -fp[2]]); // apply the transform to the position

    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.t)(newPosition, model.position, trans);
    publicAPI.setPosition(newPosition[0], newPosition[1], newPosition[2]);
  };

  publicAPI.yaw = function (angle) {
    var position = model.position;
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.i)(trans); // translate the camera to the origin,
    // rotate about axis,
    // translate back again

    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.t)(trans, trans, position);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.r)(trans, trans, (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.r)(angle), model.viewUp);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.t)(trans, trans, [-position[0], -position[1], -position[2]]); // apply the transform to the position

    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.t)(newFocalPoint, model.focalPoint, trans);
    publicAPI.setFocalPoint(newFocalPoint[0], newFocalPoint[1], newFocalPoint[2]);
  };

  publicAPI.elevation = function (angle) {
    var fp = model.focalPoint; // get the eye / camera position from the viewMatrix

    var vt = publicAPI.getViewMatrix();
    var axis = [-vt[0], -vt[1], -vt[2]];
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.i)(trans); // translate the focal point to the origin,
    // rotate about view up,
    // translate back again

    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.t)(trans, trans, fp);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.r)(trans, trans, (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.r)(angle), axis);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.t)(trans, trans, [-fp[0], -fp[1], -fp[2]]); // apply the transform to the position

    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.t)(newPosition, model.position, trans);
    publicAPI.setPosition(newPosition[0], newPosition[1], newPosition[2]);
  };

  publicAPI.pitch = function (angle) {
    var position = model.position;
    var vt = publicAPI.getViewMatrix();
    var axis = [vt[0], vt[1], vt[2]];
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.i)(trans); // translate the camera to the origin,
    // rotate about axis,
    // translate back again

    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.t)(trans, trans, position);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.r)(trans, trans, (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.r)(angle), axis);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.t)(trans, trans, [-position[0], -position[1], -position[2]]); // apply the transform to the focal point

    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.t)(newFocalPoint, model.focalPoint, trans);
    publicAPI.setFocalPoint.apply(publicAPI, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(newFocalPoint));
  };

  publicAPI.zoom = function (factor) {
    if (factor <= 0) {
      return;
    }

    if (model.parallelProjection) {
      model.parallelScale /= factor;
    } else {
      model.viewAngle /= factor;
    }

    publicAPI.modified();
  };

  publicAPI.translate = function (x, y, z) {
    var offset = [x, y, z];
    (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.k)(model.position, offset, model.position);
    (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.k)(model.focalPoint, offset, model.focalPoint);
    publicAPI.computeDistance();
    publicAPI.modified();
  };

  publicAPI.applyTransform = function (transformMat4$1) {
    var vuOld = [].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(model.viewUp), [1.0]);
    var posNew = [];
    var fpNew = [];
    var vuNew = [];
    vuOld[0] += model.position[0];
    vuOld[1] += model.position[1];
    vuOld[2] += model.position[2];
    (0,_vendor_gl_matrix_esm_vec4_js__WEBPACK_IMPORTED_MODULE_4__.t)(posNew, [].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(model.position), [1.0]), transformMat4$1);
    (0,_vendor_gl_matrix_esm_vec4_js__WEBPACK_IMPORTED_MODULE_4__.t)(fpNew, [].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(model.focalPoint), [1.0]), transformMat4$1);
    (0,_vendor_gl_matrix_esm_vec4_js__WEBPACK_IMPORTED_MODULE_4__.t)(vuNew, vuOld, transformMat4$1);
    vuNew[0] -= posNew[0];
    vuNew[1] -= posNew[1];
    vuNew[2] -= posNew[2];
    publicAPI.setPosition.apply(publicAPI, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(posNew.slice(0, 3)));
    publicAPI.setFocalPoint.apply(publicAPI, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(fpNew.slice(0, 3)));
    publicAPI.setViewUp.apply(publicAPI, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(vuNew.slice(0, 3)));
  };

  publicAPI.getThickness = function () {
    return model.clippingRange[1] - model.clippingRange[0];
  };

  publicAPI.setThickness = function (thickness) {
    var t = thickness;

    if (t < 1e-20) {
      t = 1e-20;
      vtkDebugMacro('Thickness is set to minimum.');
    }

    publicAPI.setClippingRange(model.clippingRange[0], model.clippingRange[0] + t);
  };

  publicAPI.setThicknessFromFocalPoint = function (thickness) {
    var t = thickness;

    if (t < 1e-20) {
      t = 1e-20;
      vtkDebugMacro('Thickness is set to minimum.');
    }

    publicAPI.setClippingRange(model.distance - t / 2, model.distance + t / 2);
  }; // Unimplemented functions


  publicAPI.setRoll = function (angle) {}; // dependency on GetOrientation() and a model.ViewTransform object, see https://github.com/Kitware/VTK/blob/master/Common/Transforms/vtkTransform.cxx and https://vtk.org/doc/nightly/html/classvtkTransform.html


  publicAPI.getRoll = function () {};

  publicAPI.setObliqueAngles = function (alpha, beta) {};

  publicAPI.getOrientation = function () {};

  publicAPI.getOrientationWXYZ = function () {};

  publicAPI.getFrustumPlanes = function (aspect) {// Return array of 24 params (4 params for each of 6 plane equations)
  };

  publicAPI.getCameraLightTransformMatrix = function () {};

  publicAPI.deepCopy = function (sourceCamera) {};

  publicAPI.physicalOrientationToWorldDirection = function (ori) {
    // push the x axis through the orientation quat
    var oriq = (0,_vendor_gl_matrix_esm_quat_js__WEBPACK_IMPORTED_MODULE_6__.f)(ori[0], ori[1], ori[2], ori[3]);
    var coriq = (0,_vendor_gl_matrix_esm_quat_js__WEBPACK_IMPORTED_MODULE_6__.c)();
    var qdir = (0,_vendor_gl_matrix_esm_quat_js__WEBPACK_IMPORTED_MODULE_6__.f)(0.0, 0.0, 1.0, 0.0);
    (0,_vendor_gl_matrix_esm_quat_js__WEBPACK_IMPORTED_MODULE_6__.a)(coriq, oriq); // rotate the z axis by the quat

    (0,_vendor_gl_matrix_esm_quat_js__WEBPACK_IMPORTED_MODULE_6__.m)(qdir, oriq, qdir);
    (0,_vendor_gl_matrix_esm_quat_js__WEBPACK_IMPORTED_MODULE_6__.m)(qdir, qdir, coriq); // return the z axis in world coords

    return [qdir[0], qdir[1], qdir[2]];
  };

  publicAPI.getPhysicalToWorldMatrix = function (result) {
    publicAPI.getWorldToPhysicalMatrix(result);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.g)(result, result);
  };

  publicAPI.getWorldToPhysicalMatrix = function (result) {
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.i)(result); // now the physical to vtk world rotation tform

    var physVRight = [3];
    (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.j)(model.physicalViewNorth, model.physicalViewUp, physVRight);
    result[0] = physVRight[0];
    result[1] = physVRight[1];
    result[2] = physVRight[2];
    result[4] = model.physicalViewUp[0];
    result[5] = model.physicalViewUp[1];
    result[6] = model.physicalViewUp[2];
    result[8] = -model.physicalViewNorth[0];
    result[9] = -model.physicalViewNorth[1];
    result[10] = -model.physicalViewNorth[2];
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.j)(result, result);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.s)(tmpvec1, 1 / model.physicalScale, 1 / model.physicalScale, 1 / model.physicalScale);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.s)(result, result, tmpvec1);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.t)(result, result, model.physicalTranslation);
  };

  publicAPI.computeViewParametersFromViewMatrix = function (vmat) {
    // invert to get view to world
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.g)(tmpMatrix, vmat); // note with glmatrix operations happen in
    // the reverse order
    // mat.scale
    // mat.translate
    // will result in the translation then the scale
    // mat.mult(a,b)
    // results in perform the B transformation then A
    // then extract the params position, orientation
    // push 0,0,0 through to get a translation

    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.t)(tmpvec1, origin, tmpMatrix);
    publicAPI.computeDistance();
    var oldDist = model.distance;
    publicAPI.setPosition(tmpvec1[0], tmpvec1[1], tmpvec1[2]); // push basis vectors to get orientation

    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.t)(tmpvec2, dopbasis, tmpMatrix);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.a)(tmpvec2, tmpvec2, tmpvec1);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.n)(tmpvec2, tmpvec2);
    publicAPI.setDirectionOfProjection(tmpvec2[0], tmpvec2[1], tmpvec2[2]);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.t)(tmpvec3, upbasis, tmpMatrix);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.a)(tmpvec3, tmpvec3, tmpvec1);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.n)(tmpvec3, tmpvec3);
    publicAPI.setViewUp(tmpvec3[0], tmpvec3[1], tmpvec3[2]);
    publicAPI.setDistance(oldDist);
  }; // the provided matrix should include
  // translation and orientation only
  // mat is physical to view


  publicAPI.computeViewParametersFromPhysicalMatrix = function (mat) {
    // get the WorldToPhysicalMatrix
    publicAPI.getWorldToPhysicalMatrix(tmpMatrix); // first convert the physical -> view matrix to be
    // world -> view

    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.m)(tmpMatrix, mat, tmpMatrix);
    publicAPI.computeViewParametersFromViewMatrix(tmpMatrix);
  };

  publicAPI.setViewMatrix = function (mat) {
    model.viewMatrix = mat;

    if (model.viewMatrix) {
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.d)(tmpMatrix, model.viewMatrix);
      publicAPI.computeViewParametersFromViewMatrix(tmpMatrix);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.j)(model.viewMatrix, model.viewMatrix);
    }
  };

  publicAPI.getViewMatrix = function () {
    if (model.viewMatrix) {
      return model.viewMatrix;
    }

    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.l)(tmpMatrix, model.position, // eye
    model.focalPoint, // at
    model.viewUp // up
    );
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.j)(tmpMatrix, tmpMatrix);
    var result = new Float64Array(16);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.d)(result, tmpMatrix);
    return result;
  };

  publicAPI.setProjectionMatrix = function (mat) {
    model.projectionMatrix = mat;
  };

  publicAPI.getProjectionMatrix = function (aspect, nearz, farz) {
    var result = new Float64Array(16);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.i)(result);

    if (model.projectionMatrix) {
      var scale$1 = 1 / model.physicalScale;
      (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.s)(tmpvec1, scale$1, scale$1, scale$1);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.d)(result, model.projectionMatrix);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.s)(result, result, tmpvec1);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.j)(result, result);
      return result;
    }

    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.i)(tmpMatrix); // FIXME: Not sure what to do about adjust z buffer here
    // adjust Z-buffer range
    // this->ProjectionTransform->AdjustZBuffer( -1, +1, nearz, farz );

    var cWidth = model.clippingRange[1] - model.clippingRange[0];
    var cRange = [model.clippingRange[0] + (nearz + 1) * cWidth / 2.0, model.clippingRange[0] + (farz + 1) * cWidth / 2.0];

    if (model.parallelProjection) {
      // set up a rectangular parallelipiped
      var width = model.parallelScale * aspect;
      var height = model.parallelScale;
      var xmin = (model.windowCenter[0] - 1.0) * width;
      var xmax = (model.windowCenter[0] + 1.0) * width;
      var ymin = (model.windowCenter[1] - 1.0) * height;
      var ymax = (model.windowCenter[1] + 1.0) * height;
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.o)(tmpMatrix, xmin, xmax, ymin, ymax, cRange[0], cRange[1]);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.j)(tmpMatrix, tmpMatrix);
    } else if (model.useOffAxisProjection) {
      throw new Error('Off-Axis projection is not supported at this time');
    } else {
      var tmp = Math.tan((0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.r)(model.viewAngle) / 2.0);

      var _width;

      var _height;

      if (model.useHorizontalViewAngle === true) {
        _width = model.clippingRange[0] * tmp;
        _height = model.clippingRange[0] * tmp / aspect;
      } else {
        _width = model.clippingRange[0] * tmp * aspect;
        _height = model.clippingRange[0] * tmp;
      }

      var _xmin = (model.windowCenter[0] - 1.0) * _width;

      var _xmax = (model.windowCenter[0] + 1.0) * _width;

      var _ymin = (model.windowCenter[1] - 1.0) * _height;

      var _ymax = (model.windowCenter[1] + 1.0) * _height;

      var znear = cRange[0];
      var zfar = cRange[1];
      tmpMatrix[0] = 2.0 * znear / (_xmax - _xmin);
      tmpMatrix[5] = 2.0 * znear / (_ymax - _ymin);
      tmpMatrix[2] = (_xmin + _xmax) / (_xmax - _xmin);
      tmpMatrix[6] = (_ymin + _ymax) / (_ymax - _ymin);
      tmpMatrix[10] = -(znear + zfar) / (zfar - znear);
      tmpMatrix[14] = -1.0;
      tmpMatrix[11] = -2.0 * znear * zfar / (zfar - znear);
      tmpMatrix[15] = 0.0;
    }

    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.d)(result, tmpMatrix);
    return result;
  };

  publicAPI.getCompositeProjectionMatrix = function (aspect, nearz, farz) {
    var vMat = publicAPI.getViewMatrix();
    var pMat = publicAPI.getProjectionMatrix(aspect, nearz, farz); // mats are transposed so the order is A then B
    // we reuse pMat as it is a copy so we can do what we want with it

    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.m)(pMat, vMat, pMat);
    return pMat;
  };

  publicAPI.setDirectionOfProjection = function (x, y, z) {
    if (model.directionOfProjection[0] === x && model.directionOfProjection[1] === y && model.directionOfProjection[2] === z) {
      return;
    }

    model.directionOfProjection[0] = x;
    model.directionOfProjection[1] = y;
    model.directionOfProjection[2] = z;
    var vec = model.directionOfProjection; // recalculate FocalPoint

    model.focalPoint[0] = model.position[0] + vec[0] * model.distance;
    model.focalPoint[1] = model.position[1] + vec[1] * model.distance;
    model.focalPoint[2] = model.position[2] + vec[2] * model.distance;
    computeViewPlaneNormal();
  }; // used to handle convert js device orientation angles
  // when you use this method the camera will adjust to the
  // device orientation such that the physicalViewUp you set
  // in world coordinates looks up, and the physicalViewNorth
  // you set in world coorindates will (maybe) point north
  //
  // NOTE WARNING - much of the documentation out there on how
  // orientation works is seriously wrong. Even worse the Chrome
  // device orientation simulator is completely wrong and should
  // never be used. OMG it is so messed up.
  //
  // how it seems to work on iOS is that the device orientation
  // is specified in extrinsic angles with a alpha, beta, gamma
  // convention with axes of Z, X, Y (the code below substitutes
  // the physical coordinate system for these axes to get the right
  // modified coordinate system.


  publicAPI.setDeviceAngles = function (alpha, beta, gamma, screen) {
    var physVRight = [3];
    (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.j)(model.physicalViewNorth, model.physicalViewUp, physVRight); // phone to physical coordinates

    var rotmat = (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.i)(new Float64Array(16));
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.r)(rotmat, rotmat, (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.r)(alpha), model.physicalViewUp);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.r)(rotmat, rotmat, (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.r)(beta), physVRight);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.r)(rotmat, rotmat, (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.r)(gamma), model.physicalViewNorth);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.r)(rotmat, rotmat, (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.r)(-screen), model.physicalViewUp);
    var dop = new Float64Array([-model.physicalViewUp[0], -model.physicalViewUp[1], -model.physicalViewUp[2]]);
    var vup = new Float64Array(model.physicalViewNorth);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.t)(dop, dop, rotmat);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.t)(vup, vup, rotmat);
    publicAPI.setDirectionOfProjection(dop[0], dop[1], dop[2]);
    publicAPI.setViewUp(vup[0], vup[1], vup[2]);
    publicAPI.modified();
  };

  publicAPI.setOrientationWXYZ = function (degrees, x, y, z) {
    var quatMat = (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.i)(new Float64Array(16));

    if (degrees !== 0.0 && (x !== 0.0 || y !== 0.0 || z !== 0.0)) {
      // convert to radians
      var angle = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.r)(degrees);
      var q = (0,_vendor_gl_matrix_esm_quat_js__WEBPACK_IMPORTED_MODULE_6__.c)();
      (0,_vendor_gl_matrix_esm_quat_js__WEBPACK_IMPORTED_MODULE_6__.s)(q, [x, y, z], angle);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.k)(quatMat, q);
    }

    var newdop = new Float64Array(3);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.t)(newdop, [0.0, 0.0, -1.0], quatMat);
    var newvup = new Float64Array(3);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.t)(newvup, [0.0, 1.0, 0.0], quatMat);
    publicAPI.setDirectionOfProjection.apply(publicAPI, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(newdop));
    publicAPI.setViewUp.apply(publicAPI, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(newvup));
    publicAPI.modified();
  };

  publicAPI.computeClippingRange = function (bounds) {
    var vn = null;
    var position = null;
    vn = model.viewPlaneNormal;
    position = model.position;
    var a = -vn[0];
    var b = -vn[1];
    var c = -vn[2];
    var d = -(a * position[0] + b * position[1] + c * position[2]); // Set the max near clipping plane and the min far clipping plane

    var range = [a * bounds[0] + b * bounds[2] + c * bounds[4] + d, 1e-18]; // Find the closest / farthest bounding box vertex

    for (var k = 0; k < 2; k++) {
      for (var j = 0; j < 2; j++) {
        for (var i = 0; i < 2; i++) {
          var dist = a * bounds[i] + b * bounds[2 + j] + c * bounds[4 + k] + d;
          range[0] = dist < range[0] ? dist : range[0];
          range[1] = dist > range[1] ? dist : range[1];
        }
      }
    }

    return range;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  position: [0, 0, 1],
  focalPoint: [0, 0, 0],
  viewUp: [0, 1, 0],
  directionOfProjection: [0, 0, -1],
  parallelProjection: false,
  useHorizontalViewAngle: false,
  viewAngle: 30,
  parallelScale: 1,
  clippingRange: [0.01, 1000.01],
  windowCenter: [0, 0],
  viewPlaneNormal: [0, 0, 1],
  useOffAxisProjection: false,
  screenBottomLeft: [-0.5, -0.5, -0.5],
  screenBottomRight: [0.5, -0.5, -0.5],
  screenTopRight: [0.5, 0.5, -0.5],
  freezeFocalPoint: false,
  projectionMatrix: null,
  viewMatrix: null,
  // used for world to physical transformations
  physicalTranslation: [0, 0, 0],
  physicalScale: 1.0,
  physicalViewUp: [0, 1, 0],
  physicalViewNorth: [0, 0, -1]
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].get(publicAPI, model, ['distance']);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGet(publicAPI, model, ['parallelProjection', 'useHorizontalViewAngle', 'viewAngle', 'parallelScale', 'useOffAxisProjection', 'freezeFocalPoint', 'physicalScale']);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].getArray(publicAPI, model, ['directionOfProjection', 'viewPlaneNormal', 'position', 'focalPoint']);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGetArray(publicAPI, model, ['clippingRange', 'windowCenter'], 2);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGetArray(publicAPI, model, ['viewUp', 'screenBottomLeft', 'screenBottomRight', 'screenTopRight', 'physicalTranslation', 'physicalViewUp', 'physicalViewNorth'], 3); // Object methods

  vtkCamera(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkCamera'); // ----------------------------------------------------------------------------

var vtkCamera$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/HardwareSelector.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/HardwareSelector.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkHardwareSelector$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Common_DataModel_DataSet_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Common/DataModel/DataSet.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/DataSet.js");





var FieldAssociations = _Common_DataModel_DataSet_js__WEBPACK_IMPORTED_MODULE_3__["default"].FieldAssociations; // ----------------------------------------------------------------------------
// vtkHardwareSelector methods
// ----------------------------------------------------------------------------

function vtkHardwareSelector(publicAPI, model) {
  model.classHierarchy.push('vtkHardwareSelector'); // get the source data that is used for generating a selection. This
  // must be called at least once before calling generateSelection. In
  // raster based backends this method will capture the buffers. You can
  // call this once and then make multiple calls to generateSelection.

  publicAPI.getSourceDataAsync = /*#__PURE__*/function () {
    var _ref = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee(renderer, fx1, fy1, fx2, fy2) {
      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2, _x3, _x4, _x5) {
      return _ref.apply(this, arguments);
    };
  }();

  publicAPI.selectAsync = /*#__PURE__*/function () {
    var _ref2 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee2(renderer, fx1, fy1, fx2, fy2) {
      var srcData;
      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return publicAPI.getSourceDataAsync(renderer, fx1, fy1, fx2, fy2);

            case 2:
              srcData = _context2.sent;

              if (!srcData) {
                _context2.next = 5;
                break;
              }

              return _context2.abrupt("return", srcData.generateSelection(fx1, fy1, fx2, fy2));

            case 5:
              return _context2.abrupt("return", []);

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x6, _x7, _x8, _x9, _x10) {
      return _ref2.apply(this, arguments);
    };
  }();
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  fieldAssociation: FieldAssociations.FIELD_ASSOCIATION_CELLS,
  captureZValues: false
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _macros_js__WEBPACK_IMPORTED_MODULE_2__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_2__["default"].setGet(publicAPI, model, ['fieldAssociation', 'captureZValues']); // Object methods

  vtkHardwareSelector(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance(extend, 'vtkHardwareSelector'); // ----------------------------------------------------------------------------

var vtkHardwareSelector$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/ImageMapper.js":
/*!********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/ImageMapper.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkImageMapper$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _ImageMapper_Constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ImageMapper/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/ImageMapper/Constants.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _AbstractMapper_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AbstractMapper.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/AbstractMapper.js");
/* harmony import */ var _Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Common/Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");
/* harmony import */ var _Common_DataModel_Plane_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Common/DataModel/Plane.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/Plane.js");
/* harmony import */ var _Mapper_CoincidentTopologyHelper_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Mapper/CoincidentTopologyHelper.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Mapper/CoincidentTopologyHelper.js");
/* harmony import */ var _vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/vec3.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/vec3.js");









function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var staticOffsetAPI = _Mapper_CoincidentTopologyHelper_js__WEBPACK_IMPORTED_MODULE_6__["default"].staticOffsetAPI,
    otherStaticMethods = _Mapper_CoincidentTopologyHelper_js__WEBPACK_IMPORTED_MODULE_6__["default"].otherStaticMethods;
var vtkWarningMacro = _macros_js__WEBPACK_IMPORTED_MODULE_2__["default"].vtkWarningMacro;
var SlicingMode = _ImageMapper_Constants_js__WEBPACK_IMPORTED_MODULE_1__["default"].SlicingMode; // ----------------------------------------------------------------------------
// vtkImageMapper methods
// ----------------------------------------------------------------------------

function vtkImageMapper(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkImageMapper');

  publicAPI.getSliceAtPosition = function (pos) {
    var image = publicAPI.getInputData();
    var pos3;

    if (pos.length === 3) {
      pos3 = pos;
    } else if (Number.isFinite(pos)) {
      var bds = image.getBounds();

      switch (model.slicingMode) {
        case SlicingMode.X:
          pos3 = [pos, (bds[3] + bds[2]) / 2, (bds[5] + bds[4]) / 2];
          break;

        case SlicingMode.Y:
          pos3 = [(bds[1] + bds[0]) / 2, pos, (bds[5] + bds[4]) / 2];
          break;

        case SlicingMode.Z:
          pos3 = [(bds[1] + bds[0]) / 2, (bds[3] + bds[2]) / 2, pos];
          break;
      }
    }

    var ijk = [0, 0, 0];
    image.worldToIndex(pos3, ijk);
    var ex = image.getExtent();

    var _publicAPI$getClosest = publicAPI.getClosestIJKAxis(),
        ijkMode = _publicAPI$getClosest.ijkMode;

    var slice = 0;

    switch (ijkMode) {
      case SlicingMode.I:
        slice = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.A)(ijk[0], ex[0], ex[1]);
        slice = Math.round(slice);
        break;

      case SlicingMode.J:
        slice = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.A)(ijk[1], ex[2], ex[3]);
        slice = Math.round(slice);
        break;

      case SlicingMode.K:
        slice = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.A)(ijk[2], ex[4], ex[5]);
        slice = Math.round(slice);
        break;

      default:
        return 0;
    }

    return slice;
  };

  publicAPI.setSliceFromCamera = function (cam) {
    var fp = cam.getFocalPoint();

    switch (model.slicingMode) {
      case SlicingMode.I:
      case SlicingMode.J:
      case SlicingMode.K:
        {
          var slice = publicAPI.getSliceAtPosition(fp);
          publicAPI.setSlice(slice);
        }
        break;

      case SlicingMode.X:
        publicAPI.setSlice(fp[0]);
        break;

      case SlicingMode.Y:
        publicAPI.setSlice(fp[1]);
        break;

      case SlicingMode.Z:
        publicAPI.setSlice(fp[2]);
        break;
    }
  };

  publicAPI.setXSlice = function (id) {
    publicAPI.setSlicingMode(SlicingMode.X);
    publicAPI.setSlice(id);
  };

  publicAPI.setYSlice = function (id) {
    publicAPI.setSlicingMode(SlicingMode.Y);
    publicAPI.setSlice(id);
  };

  publicAPI.setZSlice = function (id) {
    publicAPI.setSlicingMode(SlicingMode.Z);
    publicAPI.setSlice(id);
  };

  publicAPI.setISlice = function (id) {
    publicAPI.setSlicingMode(SlicingMode.I);
    publicAPI.setSlice(id);
  };

  publicAPI.setJSlice = function (id) {
    publicAPI.setSlicingMode(SlicingMode.J);
    publicAPI.setSlice(id);
  };

  publicAPI.setKSlice = function (id) {
    publicAPI.setSlicingMode(SlicingMode.K);
    publicAPI.setSlice(id);
  };

  publicAPI.getSlicingModeNormal = function () {
    var out = [0, 0, 0];
    var a = publicAPI.getInputData().getDirection();
    var mat3 = [[a[0], a[1], a[2]], [a[3], a[4], a[5]], [a[6], a[7], a[8]]];

    switch (model.slicingMode) {
      case SlicingMode.X:
        out[0] = 1;
        break;

      case SlicingMode.Y:
        out[1] = 1;
        break;

      case SlicingMode.Z:
        out[2] = 1;
        break;

      case SlicingMode.I:
        (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.N)(mat3, [1, 0, 0], out);
        break;

      case SlicingMode.J:
        (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.N)(mat3, [0, 1, 0], out);
        break;

      case SlicingMode.K:
        (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.N)(mat3, [0, 0, 1], out);
        break;
    }

    return out;
  };

  function computeClosestIJKAxis() {
    var inVec3;

    switch (model.slicingMode) {
      case SlicingMode.X:
        inVec3 = [1, 0, 0];
        break;

      case SlicingMode.Y:
        inVec3 = [0, 1, 0];
        break;

      case SlicingMode.Z:
        inVec3 = [0, 0, 1];
        break;

      default:
        model.closestIJKAxis = {
          ijkMode: model.slicingMode,
          flip: false
        };
        return;
    } // Project vec3 onto direction cosines


    var out = [0, 0, 0]; // The direction matrix in vtkImageData is the indexToWorld rotation matrix
    // with a column-major data layout since it is stored as a WebGL matrix.
    // We need the worldToIndex rotation matrix for the projection, and it needs
    // to be in a row-major data layout to use vtkMath for operations.
    // To go from the indexToWorld column-major matrix to the worldToIndex
    // row-major matrix, we need to transpose it (column -> row) then inverse it.
    // However, that 3x3 matrix is a rotation matrix which is orthonormal, meaning
    // that its inverse is equal to its transpose. We therefore need to apply two
    // transpositions resulting in a no-op.

    var a = publicAPI.getInputData().getDirection();
    var mat3 = [[a[0], a[1], a[2]], [a[3], a[4], a[5]], [a[6], a[7], a[8]]];
    (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.N)(mat3, inVec3, out);
    var maxAbs = 0.0;
    var ijkMode = -1;
    var flip = false;

    for (var axis = 0; axis < out.length; ++axis) {
      var absValue = Math.abs(out[axis]);

      if (absValue > maxAbs) {
        maxAbs = absValue;
        flip = out[axis] < 0.0;
        ijkMode = axis;
      }
    }

    if (maxAbs !== 1.0) {
      var xyzLabel = 'IJKXYZ'[model.slicingMode];
      var ijkLabel = 'IJKXYZ'[ijkMode];
      vtkWarningMacro("Unaccurate slicing along ".concat(xyzLabel, " axis which ") + "is not aligned with any IJK axis of the image data. " + "Using ".concat(ijkLabel, " axis  as a fallback (").concat(maxAbs, "% aligned). ") + "Necessitates slice reformat that is not yet implemented.  " + "You can switch the slicing mode on your mapper to do IJK slicing instead.");
    }

    model.closestIJKAxis = {
      ijkMode: ijkMode,
      flip: flip
    };
  }

  publicAPI.setSlicingMode = function (mode) {
    if (model.slicingMode === mode) {
      return;
    }

    model.slicingMode = mode;

    if (publicAPI.getInputData()) {
      computeClosestIJKAxis();
    }

    publicAPI.modified();
  };

  publicAPI.getClosestIJKAxis = function () {
    if ((model.closestIJKAxis === undefined || model.closestIJKAxis.ijkMode === SlicingMode.NONE) && publicAPI.getInputData()) {
      computeClosestIJKAxis();
    }

    return model.closestIJKAxis;
  };

  publicAPI.getBounds = function () {
    var image = publicAPI.getInputData();

    if (!image) {
      return (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.M)();
    }

    if (!model.useCustomExtents) {
      return image.getBounds();
    }

    var ex = model.customDisplayExtent.slice();

    var _publicAPI$getClosest2 = publicAPI.getClosestIJKAxis(),
        ijkMode = _publicAPI$getClosest2.ijkMode;

    var nSlice = model.slice;

    if (ijkMode !== model.slicingMode) {
      // If not IJK slicing, get the IJK slice from the XYZ position/slice
      nSlice = publicAPI.getSliceAtPosition(model.slice);
    }

    switch (ijkMode) {
      case SlicingMode.I:
        ex[0] = nSlice;
        ex[1] = nSlice;
        break;

      case SlicingMode.J:
        ex[2] = nSlice;
        ex[3] = nSlice;
        break;

      case SlicingMode.K:
        ex[4] = nSlice;
        ex[5] = nSlice;
        break;
    }

    return image.extentToBounds(ex);
  };

  publicAPI.getBoundsForSlice = function () {
    var slice = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : model.slice;
    var thickness = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var image = publicAPI.getInputData();

    if (!image) {
      return (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.M)();
    }

    var extent = image.getExtent();

    var _publicAPI$getClosest3 = publicAPI.getClosestIJKAxis(),
        ijkMode = _publicAPI$getClosest3.ijkMode;

    var nSlice = slice;

    if (ijkMode !== model.slicingMode) {
      // If not IJK slicing, get the IJK slice from the XYZ position/slice
      nSlice = publicAPI.getSliceAtPosition(slice);
    }

    switch (ijkMode) {
      case SlicingMode.I:
        extent[0] = nSlice - thickness;
        extent[1] = nSlice + thickness;
        break;

      case SlicingMode.J:
        extent[2] = nSlice - thickness;
        extent[3] = nSlice + thickness;
        break;

      case SlicingMode.K:
        extent[4] = nSlice - thickness;
        extent[5] = nSlice + thickness;
        break;
    }

    return image.extentToBounds(extent);
  };

  publicAPI.getIsOpaque = function () {
    return true;
  };

  function doPicking(p1, p2) {
    var imageData = publicAPI.getInputData();
    var extent = imageData.getExtent(); // Slice origin

    var ijk = [extent[0], extent[2], extent[4]];

    var _publicAPI$getClosest4 = publicAPI.getClosestIJKAxis(),
        ijkMode = _publicAPI$getClosest4.ijkMode;

    var nSlice = model.slice;

    if (ijkMode !== model.slicingMode) {
      // If not IJK slicing, get the IJK slice from the XYZ position/slice
      nSlice = publicAPI.getSliceAtPosition(nSlice);
    }

    ijk[ijkMode] += nSlice;
    var worldOrigin = [0, 0, 0];
    imageData.indexToWorld(ijk, worldOrigin); // Normal computation

    ijk[ijkMode] += 1;
    var worldNormal = [0, 0, 0];
    imageData.indexToWorld(ijk, worldNormal);
    worldNormal[0] -= worldOrigin[0];
    worldNormal[1] -= worldOrigin[1];
    worldNormal[2] -= worldOrigin[2];
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.n)(worldNormal, worldNormal);
    var intersect = _Common_DataModel_Plane_js__WEBPACK_IMPORTED_MODULE_5__["default"].intersectWithLine(p1, p2, worldOrigin, worldNormal);

    if (intersect.intersection) {
      var point = intersect.x;
      var absoluteIJK = [0, 0, 0];
      imageData.worldToIndex(point, absoluteIJK); // `t` is the parametric position along the line
      // defined in Plane.intersectWithLine

      return {
        t: intersect.t,
        absoluteIJK: absoluteIJK
      };
    }

    return null;
  }

  publicAPI.intersectWithLineForPointPicking = function (p1, p2) {
    var pickingData = doPicking(p1, p2);

    if (pickingData) {
      var imageData = publicAPI.getInputData();
      var extent = imageData.getExtent(); // Get closer integer ijk
      // NB: point picking means closest slice, means rounding

      var ijk = [Math.round(pickingData.absoluteIJK[0]), Math.round(pickingData.absoluteIJK[1]), Math.round(pickingData.absoluteIJK[2])]; // Are we outside our actual extent

      if (ijk[0] < extent[0] || ijk[0] > extent[1] || ijk[1] < extent[2] || ijk[1] > extent[3] || ijk[2] < extent[4] || ijk[2] > extent[5]) {
        return null;
      }

      return {
        t: pickingData.t,
        ijk: ijk
      };
    }

    return null;
  };

  publicAPI.intersectWithLineForCellPicking = function (p1, p2) {
    var pickingData = doPicking(p1, p2);

    if (pickingData) {
      var imageData = publicAPI.getInputData();
      var extent = imageData.getExtent();
      var absIJK = pickingData.absoluteIJK; // Get closer integer ijk
      // NB: cell picking means closest voxel, means flooring

      var ijk = [Math.floor(absIJK[0]), Math.floor(absIJK[1]), Math.floor(absIJK[2])]; // Are we outside our actual extent

      if (ijk[0] < extent[0] || ijk[0] > extent[1] - 1 || ijk[1] < extent[2] || ijk[1] > extent[3] - 1 || ijk[2] < extent[4] || ijk[2] > extent[5] - 1) {
        return null;
      } // Parametric coordinates within cell


      var pCoords = [absIJK[0] - ijk[0], absIJK[1] - ijk[1], absIJK[2] - ijk[2]];
      return {
        t: pickingData.t,
        ijk: ijk,
        pCoords: pCoords
      };
    }

    return null;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  displayExtent: [0, 0, 0, 0, 0, 0],
  customDisplayExtent: [0, 0, 0, 0],
  useCustomExtents: false,
  slice: 0,
  slicingMode: SlicingMode.NONE,
  closestIJKAxis: {
    ijkMode: SlicingMode.NONE,
    flip: false
  },
  renderToRectangle: false,
  sliceAtFocalPoint: false
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  _AbstractMapper_js__WEBPACK_IMPORTED_MODULE_3__["default"].extend(publicAPI, model, initialValues);
  _macros_js__WEBPACK_IMPORTED_MODULE_2__["default"].get(publicAPI, model, ['slicingMode']);
  _macros_js__WEBPACK_IMPORTED_MODULE_2__["default"].setGet(publicAPI, model, ['slice', 'closestIJKAxis', 'useCustomExtents', 'renderToRectangle', 'sliceAtFocalPoint']);
  _macros_js__WEBPACK_IMPORTED_MODULE_2__["default"].setGetArray(publicAPI, model, ['customDisplayExtent'], 4);
  _Mapper_CoincidentTopologyHelper_js__WEBPACK_IMPORTED_MODULE_6__["default"].implementCoincidentTopologyMethods(publicAPI, model); // Object methods

  vtkImageMapper(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance(extend, 'vtkImageMapper'); // ----------------------------------------------------------------------------

var vtkImageMapper$1 = _objectSpread(_objectSpread(_objectSpread({
  newInstance: newInstance,
  extend: extend
}, staticOffsetAPI), otherStaticMethods), _ImageMapper_Constants_js__WEBPACK_IMPORTED_MODULE_1__["default"]);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/ImageMapper/Constants.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/ImageMapper/Constants.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SlicingMode": () => (/* binding */ SlicingMode),
/* harmony export */   "default": () => (/* binding */ Constants)
/* harmony export */ });
var SlicingMode = {
  NONE: -1,
  I: 0,
  J: 1,
  K: 2,
  X: 3,
  Y: 4,
  Z: 5
};
var Constants = {
  SlicingMode: SlicingMode
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/ImageProperty.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/ImageProperty.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkImageProperty$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _ImageProperty_Constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ImageProperty/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/ImageProperty/Constants.js");



var InterpolationType = _ImageProperty_Constants_js__WEBPACK_IMPORTED_MODULE_1__["default"].InterpolationType;
var vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].vtkErrorMacro;
var VTK_MAX_VRCOMP = 4; // ----------------------------------------------------------------------------
// vtkImageProperty methods
// ----------------------------------------------------------------------------

function vtkImageProperty(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkImageProperty');

  publicAPI.getMTime = function () {
    var mTime = model.mtime;
    var time;

    for (var index = 0; index < VTK_MAX_VRCOMP; index++) {
      // Color MTimes
      if (model.componentData[index].rGBTransferFunction) {
        // time that RGB transfer function was last modified
        time = model.componentData[index].rGBTransferFunction.getMTime();
        mTime = mTime > time ? mTime : time;
      } // Piecewise function MTimes


      if (model.componentData[index].piecewiseFunction) {
        // time that weighting function was last modified
        time = model.componentData[index].piecewiseFunction.getMTime();
        mTime = mTime > time ? mTime : time;
      }
    }

    return mTime;
  }; // Set the color of a volume to an RGB transfer function


  publicAPI.setRGBTransferFunction = function (index, func) {
    // backwards compatible call without the component index
    var idx = index;
    var transferFunc = func;

    if (!Number.isInteger(index)) {
      transferFunc = index;
      idx = 0;
    }

    if (model.componentData[idx].rGBTransferFunction !== transferFunc) {
      model.componentData[idx].rGBTransferFunction = transferFunc;
      publicAPI.modified();
      return true;
    }

    return false;
  }; // Get the currently set RGB transfer function.


  publicAPI.getRGBTransferFunction = function () {
    var idx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    return model.componentData[idx].rGBTransferFunction;
  }; // Set the piecewise function


  publicAPI.setPiecewiseFunction = function (index, func) {
    var idx = index;
    var transferFunc = func;

    if (!Number.isInteger(index)) {
      transferFunc = index;
      idx = 0;
    }

    if (model.componentData[idx].piecewiseFunction !== transferFunc) {
      model.componentData[idx].piecewiseFunction = transferFunc;
      publicAPI.modified();
      return true;
    }

    return false;
  }; // Get the component weighting function.


  publicAPI.getPiecewiseFunction = function () {
    var idx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    return model.componentData[idx].piecewiseFunction;
  }; // Alias to set the piecewise function


  publicAPI.setScalarOpacity = function (index, func) {
    // backwards compatible call without the component index
    var idx = index;
    var transferFunc = func;

    if (!Number.isInteger(index)) {
      transferFunc = index;
      idx = 0;
    }

    return publicAPI.setPiecewiseFunction(idx, transferFunc);
  }; // Alias to get the piecewise function (backwards compatibility)


  publicAPI.getScalarOpacity = function () {
    var idx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    return publicAPI.getPiecewiseFunction(idx);
  };

  publicAPI.setComponentWeight = function (index, value) {
    if (index < 0 || index >= VTK_MAX_VRCOMP) {
      vtkErrorMacro('Invalid index');
      return false;
    }

    var val = Math.min(1, Math.max(0, value));

    if (model.componentData[index].componentWeight !== val) {
      model.componentData[index].componentWeight = val;
      publicAPI.modified();
      return true;
    }

    return false;
  };

  publicAPI.getComponentWeight = function (index) {
    if (index < 0 || index >= VTK_MAX_VRCOMP) {
      vtkErrorMacro('Invalid index');
      return 0.0;
    }

    return model.componentData[index].componentWeight;
  };

  publicAPI.setInterpolationTypeToNearest = function () {
    return publicAPI.setInterpolationType(InterpolationType.NEAREST);
  };

  publicAPI.setInterpolationTypeToLinear = function () {
    return publicAPI.setInterpolationType(InterpolationType.LINEAR);
  };

  publicAPI.getInterpolationTypeAsString = function () {
    return _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].enumToString(InterpolationType, model.interpolationType);
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  independentComponents: false,
  interpolationType: InterpolationType.LINEAR,
  colorWindow: 255,
  colorLevel: 127.5,
  ambient: 1.0,
  diffuse: 0.0,
  opacity: 1.0
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);

  if (!model.componentData) {
    model.componentData = [];

    for (var i = 0; i < VTK_MAX_VRCOMP; i++) {
      model.componentData.push({
        rGBTransferFunction: null,
        piecewiseFunction: null,
        componentWeight: 1.0
      });
    }
  }

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['independentComponents', 'interpolationType', 'colorWindow', 'colorLevel', 'ambient', 'diffuse', 'opacity']); // Object methods

  vtkImageProperty(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkImageProperty'); // ----------------------------------------------------------------------------

var vtkImageProperty$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/ImageProperty/Constants.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/ImageProperty/Constants.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InterpolationType": () => (/* binding */ InterpolationType),
/* harmony export */   "default": () => (/* binding */ Constants)
/* harmony export */ });
var InterpolationType = {
  NEAREST: 0,
  LINEAR: 1
};
var Constants = {
  InterpolationType: InterpolationType
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/ImageSlice.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/ImageSlice.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkImageSlice$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Common_DataModel_BoundingBox_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Common/DataModel/BoundingBox.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/BoundingBox.js");
/* harmony import */ var _Prop3D_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Prop3D.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Prop3D.js");
/* harmony import */ var _ImageProperty_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ImageProperty.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/ImageProperty.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js");
/* harmony import */ var _vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/vec3.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/vec3.js");







var vtkDebugMacro = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].vtkDebugMacro; // ----------------------------------------------------------------------------
// vtkImageSlice methods
// ----------------------------------------------------------------------------

function vtkImageSlice(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkImageSlice');

  publicAPI.getActors = function () {
    return publicAPI;
  };

  publicAPI.getImages = function () {
    return publicAPI;
  };

  publicAPI.getIsOpaque = function () {
    if (model.forceOpaque) {
      return true;
    }

    if (model.forceTranslucent) {
      return false;
    } // make sure we have a property


    if (!model.property) {
      // force creation of a property
      publicAPI.getProperty();
    }

    var isOpaque = model.property.getOpacity() >= 1.0; // are we using an opaque scalar array, if any?

    isOpaque = isOpaque && (!model.mapper || model.mapper.getIsOpaque());
    return isOpaque;
  }; // Always render during opaque pass, to keep the behavior
  // predictable and because depth-peeling kills alpha-blending.
  // In the future, the Renderer should render images in layers,
  // i.e. where each image will have a layer number assigned to it,
  // and the Renderer will do the images in their own pass.


  publicAPI.hasTranslucentPolygonalGeometry = function () {
    return false;
  };

  publicAPI.makeProperty = _ImageProperty_js__WEBPACK_IMPORTED_MODULE_3__["default"].newInstance;

  publicAPI.getProperty = function () {
    if (model.property === null) {
      model.property = publicAPI.makeProperty();
    }

    return model.property;
  };

  publicAPI.getBounds = function () {
    if (model.mapper === null) {
      return model.bounds;
    } // Check for the special case when the mapper's bounds are unknown


    var bds = model.mapper.getBounds();

    if (!bds || bds.length !== 6) {
      return bds;
    } // Check for the special case when the actor is empty.


    if (bds[0] > bds[1]) {
      model.mapperBounds = bds.concat(); // copy the mapper's bounds

      model.bounds = [1, -1, 1, -1, 1, -1];
      model.boundsMTime.modified();
      return bds;
    } // Check if we have cached values for these bounds - we cache the
    // values returned by model.mapper.getBounds() and we store the time
    // of caching. If the values returned this time are different, or
    // the modified time of this class is newer than the cached time,
    // then we need to rebuild.


    var zip = function zip(rows) {
      return rows[0].map(function (_, c) {
        return rows.map(function (row) {
          return row[c];
        });
      });
    };

    if (!model.mapperBounds || !zip([bds, model.mapperBounds]).reduce(function (a, b) {
      return a && b[0] === b[1];
    }, true) || publicAPI.getMTime() > model.boundsMTime.getMTime()) {
      vtkDebugMacro('Recomputing bounds...');
      model.mapperBounds = bds.map(function (x) {
        return x;
      });
      var bbox = [];
      _Common_DataModel_BoundingBox_js__WEBPACK_IMPORTED_MODULE_1__["default"].getCorners(bds, bbox);
      publicAPI.computeMatrix();
      var tmp4 = new Float64Array(16);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.j)(tmp4, model.matrix);
      bbox.forEach(function (pt) {
        return (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.t)(pt, pt, tmp4);
      });
      /* eslint-disable no-multi-assign */

      model.bounds[0] = model.bounds[2] = model.bounds[4] = Number.MAX_VALUE;
      model.bounds[1] = model.bounds[3] = model.bounds[5] = -Number.MAX_VALUE;
      /* eslint-enable no-multi-assign */

      model.bounds = model.bounds.map(function (d, i) {
        return i % 2 === 0 ? bbox.reduce(function (a, b) {
          return a > b[i / 2] ? b[i / 2] : a;
        }, d) : bbox.reduce(function (a, b) {
          return a < b[(i - 1) / 2] ? b[(i - 1) / 2] : a;
        }, d);
      });
      model.boundsMTime.modified();
    }

    return model.bounds;
  };

  publicAPI.getBoundsForSlice = function (slice) {
    var thickness = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    // Check for the special case when the mapper's bounds are unknown
    var bds = model.mapper.getBoundsForSlice(slice, thickness);

    if (!bds || bds.length !== 6) {
      return bds;
    } // Check for the special case when the actor is empty.


    if (bds[0] > bds[1]) {
      return bds;
    }

    var bbox = [];
    _Common_DataModel_BoundingBox_js__WEBPACK_IMPORTED_MODULE_1__["default"].getCorners(bds, bbox);
    publicAPI.computeMatrix();
    var tmp4 = new Float64Array(16);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.j)(tmp4, model.matrix);
    bbox.forEach(function (pt) {
      return (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_5__.t)(pt, pt, tmp4);
    });
    var newBounds = [Number.MAX_VALUE, -Number.MAX_VALUE, Number.MAX_VALUE, -Number.MAX_VALUE, Number.MAX_VALUE, -Number.MAX_VALUE];
    newBounds = newBounds.map(function (d, i) {
      return i % 2 === 0 ? bbox.reduce(function (a, b) {
        return a > b[i / 2] ? b[i / 2] : a;
      }, d) : bbox.reduce(function (a, b) {
        return a < b[(i - 1) / 2] ? b[(i - 1) / 2] : a;
      }, d);
    });
    return newBounds;
  }; //----------------------------------------------------------------------------
  // Get the minimum X bound


  publicAPI.getMinXBound = function () {
    publicAPI.getBounds();
    return model.bounds[0];
  }; // Get the maximum X bound


  publicAPI.getMaxXBound = function () {
    publicAPI.getBounds();
    return model.bounds[1];
  }; // Get the minimum Y bound


  publicAPI.getMinYBound = function () {
    publicAPI.getBounds();
    return model.bounds[2];
  }; // Get the maximum Y bound


  publicAPI.getMaxYBound = function () {
    publicAPI.getBounds();
    return model.bounds[3];
  }; // Get the minimum Z bound


  publicAPI.getMinZBound = function () {
    publicAPI.getBounds();
    return model.bounds[4];
  }; // Get the maximum Z bound


  publicAPI.getMaxZBound = function () {
    publicAPI.getBounds();
    return model.bounds[5];
  };

  publicAPI.getMTime = function () {
    var mt = model.mtime;

    if (model.property !== null) {
      var time = model.property.getMTime();
      mt = time > mt ? time : mt;
    }

    return mt;
  };

  publicAPI.getRedrawMTime = function () {
    var mt = model.mtime;

    if (model.mapper !== null) {
      var time = model.mapper.getMTime();
      mt = time > mt ? time : mt;

      if (model.mapper.getInput() !== null) {
        // FIXME !!! getInputAlgorithm / getInput
        model.mapper.getInputAlgorithm().update();
        time = model.mapper.getInput().getMTime();
        mt = time > mt ? time : mt;
      }
    }

    if (model.property !== null) {
      var _time = model.property.getMTime();

      mt = _time > mt ? _time : mt;

      if (model.property.getRGBTransferFunction() !== null) {
        _time = model.property.getRGBTransferFunction().getMTime();
        mt = _time > mt ? _time : mt;
      }
    }

    return mt;
  };

  publicAPI.getSupportsSelection = function () {
    return model.mapper ? model.mapper.getSupportsSelection() : false;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  mapper: null,
  property: null,
  bounds: [1, -1, 1, -1, 1, -1]
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _Prop3D_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(publicAPI, model, initialValues); // vtkTimeStamp

  model.boundsMTime = {};
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(model.boundsMTime); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].set(publicAPI, model, ['property']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['mapper']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].getArray(publicAPI, model, ['bounds'], 6); // Object methods

  vtkImageSlice(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkImageSlice'); // ----------------------------------------------------------------------------

var vtkImageSlice$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/InteractorObserver.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/InteractorObserver.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "STATIC": () => (/* binding */ STATIC),
/* harmony export */   "default": () => (/* binding */ vtkInteractorObserver$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _RenderWindowInteractor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RenderWindowInteractor.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/RenderWindowInteractor.js");




function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].vtkErrorMacro,
    VOID = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].VOID; // ----------------------------------------------------------------------------
// Global methods
// ----------------------------------------------------------------------------
//----------------------------------------------------------------------------
// Description:
// Transform from world to display coordinates.

function computeWorldToDisplay(renderer, x, y, z) {
  var view = renderer.getRenderWindow().getViews()[0];
  return view.worldToDisplay(x, y, z, renderer);
} //----------------------------------------------------------------------------
// Description:
// Transform from display to world coordinates.


function computeDisplayToWorld(renderer, x, y, z) {
  var view = renderer.getRenderWindow().getViews()[0];
  return view.displayToWorld(x, y, z, renderer);
} // ----------------------------------------------------------------------------
// Static API
// ----------------------------------------------------------------------------


var STATIC = {
  computeWorldToDisplay: computeWorldToDisplay,
  computeDisplayToWorld: computeDisplayToWorld
}; // ----------------------------------------------------------------------------
// vtkInteractorObserver methods
// ----------------------------------------------------------------------------

function vtkInteractorObserver(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkInteractorObserver');

  var superClass = _objectSpread({}, publicAPI); //----------------------------------------------------------------------------


  function unsubscribeFromEvents() {
    while (model.subscribedEvents.length) {
      model.subscribedEvents.pop().unsubscribe();
    }
  } //----------------------------------------------------------------------------
  // Check what events we can handle and register callbacks


  function subscribeToEvents() {
    _RenderWindowInteractor_js__WEBPACK_IMPORTED_MODULE_2__["default"].handledEvents.forEach(function (eventName) {
      if (publicAPI["handle".concat(eventName)]) {
        model.subscribedEvents.push(model.interactor["on".concat(eventName)](function (callData) {
          if (model.processEvents) {
            return publicAPI["handle".concat(eventName)](callData);
          }

          return VOID;
        }, model.priority));
      }
    });
  } //----------------------------------------------------------------------------
  // Public API methods
  //----------------------------------------------------------------------------


  publicAPI.setInteractor = function (i) {
    if (i === model.interactor) {
      return;
    }

    unsubscribeFromEvents();
    model.interactor = i;

    if (i && model.enabled) {
      subscribeToEvents();
    }

    publicAPI.modified();
  }; //----------------------------------------------------------------------------


  publicAPI.setEnabled = function (enable) {
    if (enable === model.enabled) {
      return;
    }

    unsubscribeFromEvents();

    if (enable) {
      if (model.interactor) {
        subscribeToEvents();
      } else {
        vtkErrorMacro("\n          The interactor must be set before subscribing to events\n        ");
      }
    }

    model.enabled = enable;
    publicAPI.modified();
  }; //----------------------------------------------------------------------------
  // Description:
  // Transform from display to world coordinates.


  publicAPI.computeDisplayToWorld = function (renderer, x, y, z) {
    if (!renderer) {
      return null;
    }

    return model.interactor.getView().displayToWorld(x, y, z, renderer);
  }; //----------------------------------------------------------------------------
  // Description:
  // Transform from world to display coordinates.


  publicAPI.computeWorldToDisplay = function (renderer, x, y, z) {
    if (!renderer) {
      return null;
    }

    return model.interactor.getView().worldToDisplay(x, y, z, renderer);
  }; //----------------------------------------------------------------------------


  publicAPI.setPriority = function (priority) {
    var modified = superClass.setPriority(priority);

    if (modified && model.interactor) {
      unsubscribeFromEvents();
      subscribeToEvents();
    }
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  enabled: true,
  interactor: null,
  priority: 0.0,
  processEvents: true,
  subscribedEvents: []
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods

  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].event(publicAPI, model, 'InteractionEvent');
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].event(publicAPI, model, 'StartInteractionEvent');
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].event(publicAPI, model, 'EndInteractionEvent'); // Create get-only macros

  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].get(publicAPI, model, ['interactor', 'enabled']); // Create get-set macros

  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGet(publicAPI, model, ['priority', 'processEvents']); // For more macro methods, see "Sources/macros.js"
  // Object specific methods

  vtkInteractorObserver(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkInteractorObserver'); // ----------------------------------------------------------------------------

var vtkInteractorObserver$1 = _objectSpread({
  newInstance: newInstance,
  extend: extend
}, STATIC);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/InteractorStyle.js":
/*!************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/InteractorStyle.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkInteractorStyle$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _InteractorObserver_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./InteractorObserver.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/InteractorObserver.js");
/* harmony import */ var _InteractorStyle_Constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./InteractorStyle/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/InteractorStyle/Constants.js");





function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var States = _InteractorStyle_Constants_js__WEBPACK_IMPORTED_MODULE_3__["default"].States; // ----------------------------------------------------------------------------
// Global methods
// ----------------------------------------------------------------------------
// Add module-level functions or api that you want to expose statically via
// the next section...

var stateNames = {
  Rotate: States.IS_ROTATE,
  Pan: States.IS_PAN,
  Spin: States.IS_SPIN,
  Dolly: States.IS_DOLLY,
  CameraPose: States.IS_CAMERA_POSE,
  WindowLevel: States.IS_WINDOW_LEVEL,
  Slice: States.IS_SLICE
}; // ----------------------------------------------------------------------------
// vtkInteractorStyle methods
// ----------------------------------------------------------------------------

function vtkInteractorStyle(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkInteractorStyle'); // Public API methods
  // create bunch of Start/EndState methods

  Object.keys(stateNames).forEach(function (key) {
    _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].event(publicAPI, model, "Start".concat(key, "Event"));

    publicAPI["start".concat(key)] = function () {
      if (model.state !== States.IS_NONE) {
        return;
      }

      model.state = stateNames[key];
      model.interactor.requestAnimation(publicAPI);
      publicAPI.invokeStartInteractionEvent({
        type: 'StartInteractionEvent'
      });
      publicAPI["invokeStart".concat(key, "Event")]({
        type: "Start".concat(key, "Event")
      });
    };

    _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].event(publicAPI, model, "End".concat(key, "Event"));

    publicAPI["end".concat(key)] = function () {
      if (model.state !== stateNames[key]) {
        return;
      }

      model.state = States.IS_NONE;
      model.interactor.cancelAnimation(publicAPI);
      publicAPI.invokeEndInteractionEvent({
        type: 'EndInteractionEvent'
      });
      publicAPI["invokeEnd".concat(key, "Event")]({
        type: "End".concat(key, "Event")
      });
      model.interactor.render();
    };
  }); //----------------------------------------------------------------------------

  publicAPI.handleKeyPress = function (callData) {
    var rwi = model.interactor;
    var ac = null;

    switch (callData.key) {
      case 'r':
      case 'R':
        callData.pokedRenderer.resetCamera();
        rwi.render();
        break;

      case 'w':
      case 'W':
        ac = callData.pokedRenderer.getActors();
        ac.forEach(function (anActor) {
          var prop = anActor.getProperty();

          if (prop.setRepresentationToWireframe) {
            prop.setRepresentationToWireframe();
          }
        });
        rwi.render();
        break;

      case 's':
      case 'S':
        ac = callData.pokedRenderer.getActors();
        ac.forEach(function (anActor) {
          var prop = anActor.getProperty();

          if (prop.setRepresentationToSurface) {
            prop.setRepresentationToSurface();
          }
        });
        rwi.render();
        break;

      case 'v':
      case 'V':
        ac = callData.pokedRenderer.getActors();
        ac.forEach(function (anActor) {
          var prop = anActor.getProperty();

          if (prop.setRepresentationToPoints) {
            prop.setRepresentationToPoints();
          }
        });
        rwi.render();
        break;
    }
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  state: States.IS_NONE,
  handleObservers: 1,
  autoAdjustCameraClippingRange: 1
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _InteractorObserver_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(publicAPI, model, initialValues); // Object specific methods

  vtkInteractorStyle(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkInteractorStyle'); // ----------------------------------------------------------------------------

var vtkInteractorStyle$1 = _objectSpread({
  newInstance: newInstance,
  extend: extend
}, _InteractorStyle_Constants_js__WEBPACK_IMPORTED_MODULE_3__["default"]);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/InteractorStyle/Constants.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/InteractorStyle/Constants.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "States": () => (/* binding */ States),
/* harmony export */   "default": () => (/* binding */ vtkInteractorStyleConstants)
/* harmony export */ });
var States = {
  IS_START: 0,
  IS_NONE: 0,
  IS_ROTATE: 1,
  IS_PAN: 2,
  IS_SPIN: 3,
  IS_DOLLY: 4,
  IS_CAMERA_POSE: 11,
  IS_WINDOW_LEVEL: 1024,
  IS_SLICE: 1025
};
var vtkInteractorStyleConstants = {
  States: States
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/Light.js":
/*!**************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/Light.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LIGHT_TYPES": () => (/* binding */ LIGHT_TYPES),
/* harmony export */   "default": () => (/* binding */ vtkLight$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Common/Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");



var LIGHT_TYPES = ['HeadLight', 'CameraLight', 'SceneLight']; // ----------------------------------------------------------------------------
// vtkLight methods
// ----------------------------------------------------------------------------

function vtkLight(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkLight');

  publicAPI.getTransformedPosition = function () {
    if (model.transformMatrix) {
      return []; // FIXME !!!!
    }

    return [].concat(model.position);
  };

  publicAPI.getTransformedFocalPoint = function () {
    if (model.transformMatrix) {
      return []; // FIXME !!!!
    }

    return [].concat(model.focalPoint);
  };

  publicAPI.getDirection = function () {
    if (model.directionMTime < model.mtime) {
      model.direction[0] = model.focalPoint[0] - model.position[0];
      model.direction[1] = model.focalPoint[1] - model.position[1];
      model.direction[2] = model.focalPoint[2] - model.position[2];
      (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__.l)(model.direction);
      model.directionMTime = model.mtime;
    }

    return model.direction;
  };

  publicAPI.setDirectionAngle = function (elevation, azimuth) {
    var elevationRadians = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__.r)(elevation);
    var azimuthRadians = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__.r)(azimuth);
    publicAPI.setPosition(Math.cos(elevationRadians) * Math.sin(azimuthRadians), Math.sin(elevationRadians), Math.cos(elevationRadians) * Math.cos(azimuthRadians));
    publicAPI.setFocalPoint(0, 0, 0);
    publicAPI.setPositional(0);
  };

  publicAPI.setLightTypeToHeadLight = function () {
    publicAPI.setLightType('HeadLight');
  };

  publicAPI.setLightTypeToCameraLight = function () {
    publicAPI.setLightType('CameraLight');
  };

  publicAPI.setLightTypeToSceneLight = function () {
    publicAPI.setTransformMatrix(null);
    publicAPI.setLightType('SceneLight');
  };

  publicAPI.lightTypeIsHeadLight = function () {
    return model.lightType === 'HeadLight';
  };

  publicAPI.lightTypeIsSceneLight = function () {
    return model.lightType === 'SceneLight';
  };

  publicAPI.lightTypeIsCameraLight = function () {
    return model.lightType === 'CameraLight';
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  switch: true,
  intensity: 1,
  color: [1, 1, 1],
  position: [0, 0, 1],
  focalPoint: [0, 0, 0],
  positional: false,
  exponent: 1,
  coneAngle: 30,
  attenuationValues: [1, 0, 0],
  transformMatrix: null,
  lightType: 'SceneLight',
  shadowAttenuation: 1,
  direction: [0, 0, 0],
  directionMTime: 0
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['intensity', 'switch', 'positional', 'exponent', 'coneAngle', 'transformMatrix', 'lightType', 'shadowAttenuation']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGetArray(publicAPI, model, ['color', 'position', 'focalPoint', 'attenuationValues'], 3); // Object methods

  vtkLight(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkLight'); // ----------------------------------------------------------------------------

var vtkLight$1 = {
  newInstance: newInstance,
  extend: extend,
  LIGHT_TYPES: LIGHT_TYPES
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/Mapper.js":
/*!***************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/Mapper.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkMapper$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _AbstractMapper3D_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AbstractMapper3D.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/AbstractMapper3D.js");
/* harmony import */ var _Common_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Common/Core/DataArray.js */ "./node_modules/@kitware/vtk.js/Common/Core/DataArray.js");
/* harmony import */ var _Common_DataModel_ImageData_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Common/DataModel/ImageData.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/ImageData.js");
/* harmony import */ var _Common_Core_LookupTable_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Common/Core/LookupTable.js */ "./node_modules/@kitware/vtk.js/Common/Core/LookupTable.js");
/* harmony import */ var _Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Common/Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");
/* harmony import */ var _Common_Core_ScalarsToColors_Constants_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Common/Core/ScalarsToColors/Constants.js */ "./node_modules/@kitware/vtk.js/Common/Core/ScalarsToColors/Constants.js");
/* harmony import */ var _Mapper_CoincidentTopologyHelper_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Mapper/CoincidentTopologyHelper.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Mapper/CoincidentTopologyHelper.js");
/* harmony import */ var _Mapper_Constants_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./Mapper/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Mapper/Constants.js");











function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var staticOffsetAPI = _Mapper_CoincidentTopologyHelper_js__WEBPACK_IMPORTED_MODULE_8__["default"].staticOffsetAPI,
    otherStaticMethods = _Mapper_CoincidentTopologyHelper_js__WEBPACK_IMPORTED_MODULE_8__["default"].otherStaticMethods;
var ColorMode = _Mapper_Constants_js__WEBPACK_IMPORTED_MODULE_9__["default"].ColorMode,
    ScalarMode = _Mapper_Constants_js__WEBPACK_IMPORTED_MODULE_9__["default"].ScalarMode,
    GetArray = _Mapper_Constants_js__WEBPACK_IMPORTED_MODULE_9__["default"].GetArray;
var VectorMode = _Common_Core_ScalarsToColors_Constants_js__WEBPACK_IMPORTED_MODULE_7__["default"].VectorMode;
var VtkDataTypes = _Common_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_3__["default"].VtkDataTypes; // ----------------------------------------------------------------------------

function notImplemented(method) {
  return function () {
    return _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].vtkErrorMacro("vtkMapper::".concat(method, " - NOT IMPLEMENTED"));
  };
} // ----------------------------------------------------------------------------
// vtkMapper methods
// ----------------------------------------------------------------------------


function vtkMapper(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkMapper');

  publicAPI.getBounds = function () {
    var input = publicAPI.getInputData();

    if (!input) {
      model.bounds = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_6__.M)();
    } else {
      if (!model.static) {
        publicAPI.update();
      }

      model.bounds = input.getBounds();
    }

    return model.bounds;
  };

  publicAPI.setForceCompileOnly = function (v) {
    model.forceCompileOnly = v; // make sure we do NOT call modified()
  };

  publicAPI.createDefaultLookupTable = function () {
    model.lookupTable = _Common_Core_LookupTable_js__WEBPACK_IMPORTED_MODULE_5__["default"].newInstance();
  };

  publicAPI.getColorModeAsString = function () {
    return _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].enumToString(ColorMode, model.colorMode);
  };

  publicAPI.setColorModeToDefault = function () {
    return publicAPI.setColorMode(0);
  };

  publicAPI.setColorModeToMapScalars = function () {
    return publicAPI.setColorMode(1);
  };

  publicAPI.setColorModeToDirectScalars = function () {
    return publicAPI.setColorMode(2);
  };

  publicAPI.getScalarModeAsString = function () {
    return _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].enumToString(ScalarMode, model.scalarMode);
  };

  publicAPI.setScalarModeToDefault = function () {
    return publicAPI.setScalarMode(0);
  };

  publicAPI.setScalarModeToUsePointData = function () {
    return publicAPI.setScalarMode(1);
  };

  publicAPI.setScalarModeToUseCellData = function () {
    return publicAPI.setScalarMode(2);
  };

  publicAPI.setScalarModeToUsePointFieldData = function () {
    return publicAPI.setScalarMode(3);
  };

  publicAPI.setScalarModeToUseCellFieldData = function () {
    return publicAPI.setScalarMode(4);
  };

  publicAPI.setScalarModeToUseFieldData = function () {
    return publicAPI.setScalarMode(5);
  };

  publicAPI.getAbstractScalars = function (input, scalarMode, arrayAccessMode, arrayId, arrayName) {
    // make sure we have an input
    if (!input || !model.scalarVisibility) {
      return {
        scalars: null,
        cellFLag: false
      };
    }

    var scalars = null;
    var cellFlag = false; // get and scalar data according to scalar mode

    if (scalarMode === ScalarMode.DEFAULT) {
      scalars = input.getPointData().getScalars();

      if (!scalars) {
        scalars = input.getCellData().getScalars();
        cellFlag = true;
      }
    } else if (scalarMode === ScalarMode.USE_POINT_DATA) {
      scalars = input.getPointData().getScalars();
    } else if (scalarMode === ScalarMode.USE_CELL_DATA) {
      scalars = input.getCellData().getScalars();
      cellFlag = true;
    } else if (scalarMode === ScalarMode.USE_POINT_FIELD_DATA) {
      var pd = input.getPointData();

      if (arrayAccessMode === GetArray.BY_ID) {
        scalars = pd.getArrayByIndex(arrayId);
      } else {
        scalars = pd.getArrayByName(arrayName);
      }
    } else if (scalarMode === ScalarMode.USE_CELL_FIELD_DATA) {
      var cd = input.getCellData();
      cellFlag = true;

      if (arrayAccessMode === GetArray.BY_ID) {
        scalars = cd.getArrayByIndex(arrayId);
      } else {
        scalars = cd.getArrayByName(arrayName);
      }
    } else if (scalarMode === ScalarMode.USE_FIELD_DATA) {
      var fd = input.getFieldData();

      if (arrayAccessMode === GetArray.BY_ID) {
        scalars = fd.getArrayByIndex(arrayId);
      } else {
        scalars = fd.getArrayByName(arrayName);
      }
    }

    return {
      scalars: scalars,
      cellFlag: cellFlag
    };
  };

  publicAPI.mapScalars = function (input, alpha) {
    var scalars = publicAPI.getAbstractScalars(input, model.scalarMode, model.arrayAccessMode, model.arrayId, model.colorByArrayName).scalars;

    if (!scalars) {
      model.colorCoordinates = null;
      model.colorTextureMap = null;
      model.colorMapColors = null;
      return;
    } // we want to only recompute when something has changed


    var toString = "".concat(publicAPI.getMTime()).concat(scalars.getMTime()).concat(alpha);
    if (model.colorBuildString === toString) return;

    if (!model.useLookupTableScalarRange) {
      publicAPI.getLookupTable().setRange(model.scalarRange[0], model.scalarRange[1]);
    } // Decide between texture color or vertex color.
    // Cell data always uses vertex color.
    // Only point data can use both texture and vertex coloring.


    if (publicAPI.canUseTextureMapForColoring(input)) {
      publicAPI.mapScalarsToTexture(scalars, alpha);
    } else {
      model.colorCoordinates = null;
      model.colorTextureMap = null;
      var lut = publicAPI.getLookupTable();

      if (lut) {
        // Ensure that the lookup table is built
        lut.build();
        model.colorMapColors = lut.mapScalars(scalars, model.colorMode, -1);
      }
    }

    model.colorBuildString = "".concat(publicAPI.getMTime()).concat(scalars.getMTime()).concat(alpha);
  }; //-----------------------------------------------------------------------------


  publicAPI.scalarToTextureCoordinate = function (scalarValue, // Input scalar
  rangeMin, // range[0]
  invRangeWidth) {
    // 1/(range[1]-range[0])
    var texCoordS = 0.5; // Scalar value is arbitrary when NaN

    var texCoordT = 1.0; // 1.0 in t coordinate means NaN

    if (!(0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_6__.i)(scalarValue)) {
      // 0.0 in t coordinate means not NaN.  So why am I setting it to 0.49?
      // Because when you are mapping scalars and you have a NaN adjacent to
      // anything else, the interpolation everywhere should be NaN.  Thus, I
      // want the NaN color everywhere except right on the non-NaN neighbors.
      // To simulate this, I set the t coord for the real numbers close to
      // the threshold so that the interpolation almost immediately looks up
      // the NaN value.
      texCoordT = 0.49;
      texCoordS = (scalarValue - rangeMin) * invRangeWidth; // Some implementations apparently don't handle relatively large
      // numbers (compared to the range [0.0, 1.0]) very well. In fact,
      // values above 1122.0f appear to cause texture wrap-around on
      // some systems even when edge clamping is enabled. Why 1122.0f? I
      // don't know. For safety, we'll clamp at +/- 1000. This will
      // result in incorrect images when the texture value should be
      // above or below 1000, but I don't have a better solution.

      if (texCoordS > 1000.0) {
        texCoordS = 1000.0;
      } else if (texCoordS < -1000.0) {
        texCoordS = -1000.0;
      }
    }

    return {
      texCoordS: texCoordS,
      texCoordT: texCoordT
    };
  }; //-----------------------------------------------------------------------------


  publicAPI.createColorTextureCoordinates = function (input, output, numScalars, numComps, component, range, tableRange, tableNumberOfColors, useLogScale) {
    // We have to change the range used for computing texture
    // coordinates slightly to accommodate the special above- and
    // below-range colors that are the first and last texels,
    // respectively.
    var scalarTexelWidth = (range[1] - range[0]) / tableNumberOfColors;
    var paddedRange = [];
    paddedRange[0] = range[0] - scalarTexelWidth;
    paddedRange[1] = range[1] + scalarTexelWidth;
    var invRangeWidth = 1.0 / (paddedRange[1] - paddedRange[0]);
    var outputV = output.getData();
    var inputV = input.getData();
    var count = 0;
    var outputCount = 0;

    if (component < 0 || component >= numComps) {
      for (var scalarIdx = 0; scalarIdx < numScalars; ++scalarIdx) {
        var sum = 0;

        for (var compIdx = 0; compIdx < numComps; ++compIdx) {
          sum += inputV[count] * inputV[count];
          count++;
        }

        var magnitude = Math.sqrt(sum);

        if (useLogScale) {
          magnitude = _Common_Core_LookupTable_js__WEBPACK_IMPORTED_MODULE_5__["default"].applyLogScale(magnitude, tableRange, range);
        }

        var outputs = publicAPI.scalarToTextureCoordinate(magnitude, paddedRange[0], invRangeWidth);
        outputV[outputCount] = outputs.texCoordS;
        outputV[outputCount + 1] = outputs.texCoordT;
        outputCount += 2;
      }
    } else {
      count += component;

      for (var _scalarIdx = 0; _scalarIdx < numScalars; ++_scalarIdx) {
        var inputValue = inputV[count];

        if (useLogScale) {
          inputValue = _Common_Core_LookupTable_js__WEBPACK_IMPORTED_MODULE_5__["default"].applyLogScale(inputValue, tableRange, range);
        }

        var _outputs = publicAPI.scalarToTextureCoordinate(inputValue, paddedRange[0], invRangeWidth);

        outputV[outputCount] = _outputs.texCoordS;
        outputV[outputCount + 1] = _outputs.texCoordT;
        outputCount += 2;
        count += numComps;
      }
    }
  };

  publicAPI.mapScalarsToTexture = function (scalars, alpha) {
    var range = model.lookupTable.getRange();
    var useLogScale = model.lookupTable.usingLogScale();

    if (useLogScale) {
      // convert range to log.
      _Common_Core_LookupTable_js__WEBPACK_IMPORTED_MODULE_5__["default"].getLogRange(range, range);
    }

    var origAlpha = model.lookupTable.getAlpha(); // Get rid of vertex color array.  Only texture or vertex coloring
    // can be active at one time.  The existence of the array is the
    // signal to use that technique.

    model.colorMapColors = null; // If the lookup table has changed, then recreate the color texture map.
    // Set a new lookup table changes this->MTime.

    if (model.colorTextureMap == null || publicAPI.getMTime() > model.colorTextureMap.getMTime() || model.lookupTable.getMTime() > model.colorTextureMap.getMTime() || model.lookupTable.getAlpha() !== alpha) {
      model.lookupTable.setAlpha(alpha);
      model.colorTextureMap = null; // Get the texture map from the lookup table.
      // Create a dummy ramp of scalars.
      // In the future, we could extend vtkScalarsToColors.

      model.lookupTable.build();
      var numberOfColors = model.lookupTable.getNumberOfAvailableColors();

      if (numberOfColors > 4094) {
        numberOfColors = 4094;
      }

      numberOfColors += 2;
      var k = (range[1] - range[0]) / (numberOfColors - 1 - 2);
      var newArray = new Float64Array(numberOfColors * 2);

      for (var i = 0; i < numberOfColors; ++i) {
        newArray[i] = range[0] + i * k - k; // minus k to start at below range color

        if (useLogScale) {
          newArray[i] = Math.pow(10.0, newArray[i]);
        }
      } // Dimension on NaN.


      for (var _i = 0; _i < numberOfColors; ++_i) {
        newArray[_i + numberOfColors] = NaN;
      }

      model.colorTextureMap = _Common_DataModel_ImageData_js__WEBPACK_IMPORTED_MODULE_4__["default"].newInstance();
      model.colorTextureMap.setExtent(0, numberOfColors - 1, 0, 1, 0, 0);
      var tmp = _Common_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_3__["default"].newInstance({
        numberOfComponents: 1,
        values: newArray
      });
      model.colorTextureMap.getPointData().setScalars(model.lookupTable.mapScalars(tmp, model.colorMode, 0));
      model.lookupTable.setAlpha(origAlpha);
    } // Create new coordinates if necessary.
    // Need to compare lookup table in case the range has changed.


    if (!model.colorCoordinates || publicAPI.getMTime() > model.colorCoordinates.getMTime() || publicAPI.getInputData(0).getMTime() > model.colorCoordinates.getMTime() || model.lookupTable.getMTime() > model.colorCoordinates.getMTime()) {
      // Get rid of old colors
      model.colorCoordinates = null; // Now create the color texture coordinates.

      var numComps = scalars.getNumberOfComponents();
      var num = scalars.getNumberOfTuples(); // const fArray = new FloatArray(num * 2);

      model.colorCoordinates = _Common_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_3__["default"].newInstance({
        numberOfComponents: 2,
        values: new Float32Array(num * 2)
      });
      var scalarComponent = model.lookupTable.getVectorComponent(); // Although I like the feature of applying magnitude to single component
      // scalars, it is not how the old MapScalars for vertex coloring works.

      if (model.lookupTable.getVectorMode() === VectorMode.MAGNITUDE && scalars.getNumberOfComponents() > 1) {
        scalarComponent = -1;
      }

      publicAPI.createColorTextureCoordinates(scalars, model.colorCoordinates, num, numComps, scalarComponent, range, model.lookupTable.getRange(), model.colorTextureMap.getPointData().getScalars().getNumberOfTuples() / 2 - 2, useLogScale);
    }
  };

  publicAPI.getIsOpaque = function () {
    var lut = publicAPI.getLookupTable();

    if (lut) {
      // Ensure that the lookup table is built
      lut.build();
      return lut.isOpaque();
    }

    return true;
  };

  publicAPI.canUseTextureMapForColoring = function (input) {
    if (!model.interpolateScalarsBeforeMapping) {
      return false; // user doesn't want us to use texture maps at all.
    } // index color does not use textures


    if (model.lookupTable && model.lookupTable.getIndexedLookup()) {
      return false;
    }

    var gasResult = publicAPI.getAbstractScalars(input, model.scalarMode, model.arrayAccessMode, model.arrayId, model.colorByArrayName);
    var scalars = gasResult.scalars;

    if (!scalars) {
      // no scalars on this dataset, we don't care if texture is used at all.
      return false;
    }

    if (gasResult.cellFlag) {
      return false; // cell data colors, don't use textures.
    }

    if (model.colorMode === ColorMode.DEFAULT && scalars.getDataType() === VtkDataTypes.UNSIGNED_CHAR || model.colorMode === ColorMode.DIRECT_SCALARS) {
      // Don't use texture is direct coloring using RGB unsigned chars is
      // requested.
      return false;
    }

    return true;
  };

  publicAPI.clearColorArrays = function () {
    model.colorMapColors = null;
    model.colorCoordinates = null;
    model.colorTextureMap = null;
  };

  publicAPI.getLookupTable = function () {
    if (!model.lookupTable) {
      publicAPI.createDefaultLookupTable();
    }

    return model.lookupTable;
  };

  publicAPI.getMTime = function () {
    var mt = model.mtime;

    if (model.lookupTable !== null) {
      var time = model.lookupTable.getMTime();
      mt = time > mt ? time : mt;
    }

    return mt;
  };

  publicAPI.getPrimitiveCount = function () {
    var input = publicAPI.getInputData();
    var pcount = {
      points: input.getPoints().getNumberOfValues() / 3,
      verts: input.getVerts().getNumberOfValues() - input.getVerts().getNumberOfCells(),
      lines: input.getLines().getNumberOfValues() - 2 * input.getLines().getNumberOfCells(),
      triangles: input.getPolys().getNumberOfValues() - 3 * input.getLines().getNumberOfCells()
    };
    return pcount;
  };

  publicAPI.acquireInvertibleLookupTable = notImplemented('AcquireInvertibleLookupTable');
  publicAPI.valueToColor = notImplemented('ValueToColor');
  publicAPI.colorToValue = notImplemented('ColorToValue');
  publicAPI.useInvertibleColorFor = notImplemented('UseInvertibleColorFor');
  publicAPI.clearInvertibleColor = notImplemented('ClearInvertibleColor');
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  colorMapColors: null,
  // Same as this->Colors
  static: false,
  lookupTable: null,
  scalarVisibility: true,
  scalarRange: [0, 1],
  useLookupTableScalarRange: false,
  colorMode: 0,
  scalarMode: 0,
  arrayAccessMode: 1,
  // By_NAME
  renderTime: 0,
  colorByArrayName: null,
  fieldDataTupleId: -1,
  interpolateScalarsBeforeMapping: false,
  colorCoordinates: null,
  colorTextureMap: null,
  forceCompileOnly: 0,
  useInvertibleColors: false,
  invertibleScalars: null,
  viewSpecificProperties: null,
  customShaderAttributes: []
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _AbstractMapper3D_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(publicAPI, model, initialValues);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].get(publicAPI, model, ['colorCoordinates', 'colorMapColors', 'colorTextureMap']);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGet(publicAPI, model, ['colorByArrayName', 'arrayAccessMode', 'colorMode', 'fieldDataTupleId', 'interpolateScalarsBeforeMapping', 'lookupTable', 'renderTime', 'scalarMode', 'scalarVisibility', 'static', 'useLookupTableScalarRange', 'viewSpecificProperties', 'customShaderAttributes' // point data array names that will be transferred to the VBO
  ]);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGetArray(publicAPI, model, ['scalarRange'], 2);

  if (!model.viewSpecificProperties) {
    model.viewSpecificProperties = {};
  }

  _Mapper_CoincidentTopologyHelper_js__WEBPACK_IMPORTED_MODULE_8__["default"].implementCoincidentTopologyMethods(publicAPI, model); // Object methods

  vtkMapper(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkMapper'); // ----------------------------------------------------------------------------

var vtkMapper$1 = _objectSpread(_objectSpread(_objectSpread({
  newInstance: newInstance,
  extend: extend
}, staticOffsetAPI), otherStaticMethods), _Mapper_Constants_js__WEBPACK_IMPORTED_MODULE_9__["default"]);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/Mapper/CoincidentTopologyHelper.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/Mapper/CoincidentTopologyHelper.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CATEGORIES": () => (/* binding */ CATEGORIES),
/* harmony export */   "default": () => (/* binding */ CoincidentTopologyHelper)
/* harmony export */ });
/* harmony import */ var _Static_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Static.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Mapper/Static.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");



/* eslint-disable arrow-body-style */

function addCoincidentTopologyMethods(publicAPI, model, nameList) {
  nameList.forEach(function (item) {
    publicAPI["get".concat(item.method)] = function () {
      return model[item.key];
    };

    publicAPI["set".concat(item.method)] = function (factor, offset) {
      model[item.key] = {
        factor: factor,
        offset: offset
      };
    };
  });
}

var CATEGORIES = ['Polygon', 'Line', 'Point']; // CoincidentTopology static methods ------------------------------------------

var staticOffsetModel = {
  Polygon: {
    factor: 2,
    offset: 0
  },
  Line: {
    factor: 1,
    offset: -1
  },
  Point: {
    factor: 0,
    offset: -2
  }
};
var staticOffsetAPI = {};
addCoincidentTopologyMethods(staticOffsetAPI, staticOffsetModel, CATEGORIES.map(function (key) {
  return {
    key: key,
    method: "ResolveCoincidentTopology".concat(key, "OffsetParameters")
  };
}));

function implementCoincidentTopologyMethods(publicAPI, model) {
  if (model.resolveCoincidentTopology === undefined) {
    model.resolveCoincidentTopology = false;
  }

  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGet(publicAPI, model, ['resolveCoincidentTopology']); // Relative methods

  model.topologyOffset = {
    Polygon: {
      factor: 0,
      offset: 0
    },
    Line: {
      factor: 0,
      offset: 0
    },
    Point: {
      factor: 0,
      offset: 0
    }
  }; // Add Static methods to our instance

  Object.keys(_Static_js__WEBPACK_IMPORTED_MODULE_0__["default"]).forEach(function (methodName) {
    publicAPI[methodName] = _Static_js__WEBPACK_IMPORTED_MODULE_0__["default"][methodName];
  });
  Object.keys(staticOffsetAPI).forEach(function (methodName) {
    publicAPI[methodName] = staticOffsetAPI[methodName];
  });
  addCoincidentTopologyMethods(publicAPI, model.topologyOffset, CATEGORIES.map(function (key) {
    return {
      key: key,
      method: "RelativeCoincidentTopology".concat(key, "OffsetParameters")
    };
  }));

  publicAPI.getCoincidentTopologyPolygonOffsetParameters = function () {
    var globalValue = staticOffsetAPI.getResolveCoincidentTopologyPolygonOffsetParameters();
    var localValue = publicAPI.getRelativeCoincidentTopologyPolygonOffsetParameters();
    return {
      factor: globalValue.factor + localValue.factor,
      offset: globalValue.offset + localValue.offset
    };
  };

  publicAPI.getCoincidentTopologyLineOffsetParameters = function () {
    var globalValue = staticOffsetAPI.getResolveCoincidentTopologyLineOffsetParameters();
    var localValue = publicAPI.getRelativeCoincidentTopologyLineOffsetParameters();
    return {
      factor: globalValue.factor + localValue.factor,
      offset: globalValue.offset + localValue.offset
    };
  };

  publicAPI.getCoincidentTopologyPointOffsetParameter = function () {
    var globalValue = staticOffsetAPI.getResolveCoincidentTopologyPointOffsetParameters();
    var localValue = publicAPI.getRelativeCoincidentTopologyPointOffsetParameters();
    return {
      factor: globalValue.factor + localValue.factor,
      offset: globalValue.offset + localValue.offset
    };
  };
}

var CoincidentTopologyHelper = {
  implementCoincidentTopologyMethods: implementCoincidentTopologyMethods,
  staticOffsetAPI: staticOffsetAPI,
  otherStaticMethods: _Static_js__WEBPACK_IMPORTED_MODULE_0__["default"],
  CATEGORIES: CATEGORIES
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/Mapper/Constants.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/Mapper/Constants.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ColorMode": () => (/* binding */ ColorMode),
/* harmony export */   "GetArray": () => (/* binding */ GetArray),
/* harmony export */   "ScalarMode": () => (/* binding */ ScalarMode),
/* harmony export */   "default": () => (/* binding */ Constants)
/* harmony export */ });
var ColorMode = {
  DEFAULT: 0,
  MAP_SCALARS: 1,
  DIRECT_SCALARS: 2
};
var ScalarMode = {
  DEFAULT: 0,
  USE_POINT_DATA: 1,
  USE_CELL_DATA: 2,
  USE_POINT_FIELD_DATA: 3,
  USE_CELL_FIELD_DATA: 4,
  USE_FIELD_DATA: 5
};
var GetArray = {
  BY_ID: 0,
  BY_NAME: 1
};
var Constants = {
  ColorMode: ColorMode,
  GetArray: GetArray,
  ScalarMode: ScalarMode
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/Mapper/Static.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/Mapper/Static.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RESOLVE_COINCIDENT_TOPOLOGY_MODE": () => (/* binding */ RESOLVE_COINCIDENT_TOPOLOGY_MODE),
/* harmony export */   "default": () => (/* binding */ otherStaticMethods),
/* harmony export */   "getResolveCoincidentTopology": () => (/* binding */ getResolveCoincidentTopology),
/* harmony export */   "getResolveCoincidentTopologyAsString": () => (/* binding */ getResolveCoincidentTopologyAsString),
/* harmony export */   "getResolveCoincidentTopologyPolygonOffsetFaces": () => (/* binding */ getResolveCoincidentTopologyPolygonOffsetFaces),
/* harmony export */   "setResolveCoincidentTopology": () => (/* binding */ setResolveCoincidentTopology),
/* harmony export */   "setResolveCoincidentTopologyPolygonOffsetFaces": () => (/* binding */ setResolveCoincidentTopologyPolygonOffsetFaces),
/* harmony export */   "setResolveCoincidentTopologyToDefault": () => (/* binding */ setResolveCoincidentTopologyToDefault),
/* harmony export */   "setResolveCoincidentTopologyToOff": () => (/* binding */ setResolveCoincidentTopologyToOff),
/* harmony export */   "setResolveCoincidentTopologyToPolygonOffset": () => (/* binding */ setResolveCoincidentTopologyToPolygonOffset)
/* harmony export */ });
var resolveCoincidentTopologyPolygonOffsetFaces = 1;
var resolveCoincidentTopology = 0;
var RESOLVE_COINCIDENT_TOPOLOGY_MODE = ['VTK_RESOLVE_OFF', 'VTK_RESOLVE_POLYGON_OFFSET'];
function getResolveCoincidentTopologyPolygonOffsetFaces() {
  return resolveCoincidentTopologyPolygonOffsetFaces;
}
function setResolveCoincidentTopologyPolygonOffsetFaces(value) {
  resolveCoincidentTopologyPolygonOffsetFaces = value;
}
function getResolveCoincidentTopology() {
  return resolveCoincidentTopology;
}
function setResolveCoincidentTopology() {
  var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  resolveCoincidentTopology = mode;
}
function setResolveCoincidentTopologyToDefault() {
  setResolveCoincidentTopology(0); // VTK_RESOLVE_OFF
}
function setResolveCoincidentTopologyToOff() {
  setResolveCoincidentTopology(0); // VTK_RESOLVE_OFF
}
function setResolveCoincidentTopologyToPolygonOffset() {
  setResolveCoincidentTopology(1); // VTK_RESOLVE_POLYGON_OFFSET
}
function getResolveCoincidentTopologyAsString() {
  return RESOLVE_COINCIDENT_TOPOLOGY_MODE[resolveCoincidentTopology];
}
var otherStaticMethods = {
  getResolveCoincidentTopologyAsString: getResolveCoincidentTopologyAsString,
  getResolveCoincidentTopologyPolygonOffsetFaces: getResolveCoincidentTopologyPolygonOffsetFaces,
  getResolveCoincidentTopology: getResolveCoincidentTopology,
  setResolveCoincidentTopology: setResolveCoincidentTopology,
  setResolveCoincidentTopologyPolygonOffsetFaces: setResolveCoincidentTopologyPolygonOffsetFaces,
  setResolveCoincidentTopologyToDefault: setResolveCoincidentTopologyToDefault,
  setResolveCoincidentTopologyToOff: setResolveCoincidentTopologyToOff,
  setResolveCoincidentTopologyToPolygonOffset: setResolveCoincidentTopologyToPolygonOffset
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/Picker.js":
/*!***************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/Picker.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkPicker$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _AbstractPicker_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AbstractPicker.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/AbstractPicker.js");
/* harmony import */ var _Common_DataModel_BoundingBox_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Common/DataModel/BoundingBox.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/BoundingBox.js");
/* harmony import */ var _Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Common/Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js");
/* harmony import */ var _vendor_gl_matrix_esm_vec4_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/vec4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/vec4.js");








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].vtkErrorMacro;
var vtkWarningMacro = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].vtkWarningMacro; // ----------------------------------------------------------------------------
// vtkPicker methods
// ----------------------------------------------------------------------------

function vtkPicker(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkPicker');

  var superClass = _objectSpread({}, publicAPI);

  function initialize() {
    superClass.initialize();
    model.actors = [];
    model.pickedPositions = [];
    model.mapperPosition[0] = 0.0;
    model.mapperPosition[1] = 0.0;
    model.mapperPosition[2] = 0.0;
    model.mapper = null;
    model.dataSet = null;
    model.globalTMin = Number.MAX_VALUE;
  } // Intersect data with specified ray.
  // Project the center point of the mapper onto the ray and determine its parametric value


  publicAPI.intersectWithLine = function (p1, p2, tol, mapper) {
    if (!mapper) {
      return Number.MAX_VALUE;
    }

    var center = mapper.getCenter();
    var ray = [];

    for (var i = 0; i < 3; i++) {
      ray[i] = p2[i] - p1[i];
    }

    var rayFactor = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.d)(ray, ray);

    if (rayFactor === 0.0) {
      return 2.0;
    } // Project the center point onto the ray and determine its parametric value


    var t = (ray[0] * (center[0] - p1[0]) + ray[1] * (center[1] - p1[1]) + ray[2] * (center[2] - p1[2])) / rayFactor;
    return t;
  }; // To be overridden in subclasses


  publicAPI.pick = function (selection, renderer) {
    if (selection.length !== 3) {
      vtkWarningMacro('vtkPicker::pick: selectionPt needs three components');
    }

    var selectionX = selection[0];
    var selectionY = selection[1];
    var selectionZ = selection[2];
    var cameraPos = [];
    var cameraFP = [];
    var displayCoords = [];
    var worldCoords = [];
    var ray = [];
    var cameraDOP = [];
    var clipRange = [];
    var tF;
    var tB;
    var p1World = [];
    var p2World = [];
    var viewport = [];
    var winSize = [];
    var x;
    var y;
    var windowLowerLeft = [];
    var windowUpperRight = [];
    var tol = 0.0;
    var props = [];
    var pickable = false;
    var p1Mapper = new Float64Array(4);
    var p2Mapper = new Float64Array(4);
    var bbox = _Common_DataModel_BoundingBox_js__WEBPACK_IMPORTED_MODULE_3__["default"].newInstance();
    var t = [];
    var hitPosition = [];
    var view = renderer.getRenderWindow().getViews()[0];
    initialize();
    model.renderer = renderer;
    model.selectionPoint[0] = selectionX;
    model.selectionPoint[1] = selectionY;
    model.selectionPoint[2] = selectionZ;

    if (!renderer) {
      vtkErrorMacro('Picker::Pick Must specify renderer');
      return;
    } // Get camera focal point and position. Convert to display (screen)
    // coordinates. We need a depth value for z-buffer.


    var camera = renderer.getActiveCamera();
    cameraPos = camera.getPosition();
    cameraFP = camera.getFocalPoint();
    displayCoords = renderer.worldToNormalizedDisplay(cameraFP[0], cameraFP[1], cameraFP[2]);
    displayCoords = view.normalizedDisplayToDisplay(displayCoords[0], displayCoords[1], displayCoords[2]);
    selectionZ = displayCoords[2]; // Convert the selection point into world coordinates.

    var normalizedDisplay = view.displayToNormalizedDisplay(selectionX, selectionY, selectionZ);
    var dims = view.getViewportSize(renderer);
    var aspect = dims[0] / dims[1];
    worldCoords = renderer.normalizedDisplayToWorld(normalizedDisplay[0], normalizedDisplay[1], normalizedDisplay[2], aspect);

    for (var i = 0; i < 3; i++) {
      model.pickPosition[i] = worldCoords[i];
    } //  Compute the ray endpoints. The ray is along the line running from
    //  the camera position to the selection point, starting where this line
    //  intersects the front clipping plane, and terminating where this
    //  line intersects the back clipping plane.


    for (var _i = 0; _i < 3; _i++) {
      ray[_i] = model.pickPosition[_i] - cameraPos[_i];
    }

    for (var _i2 = 0; _i2 < 3; _i2++) {
      cameraDOP[_i2] = cameraFP[_i2] - cameraPos[_i2];
    }

    (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.l)(cameraDOP);
    var rayLength = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.d)(cameraDOP, ray);

    if (rayLength === 0.0) {
      vtkWarningMacro('Picker::Pick Cannot process points');
      return;
    }

    clipRange = camera.getClippingRange();

    if (camera.getParallelProjection()) {
      tF = clipRange[0] - rayLength;
      tB = clipRange[1] - rayLength;

      for (var _i3 = 0; _i3 < 3; _i3++) {
        p1World[_i3] = model.pickPosition[_i3] + tF * cameraDOP[_i3];
        p2World[_i3] = model.pickPosition[_i3] + tB * cameraDOP[_i3];
      }
    } else {
      tF = clipRange[0] / rayLength;
      tB = clipRange[1] / rayLength;

      for (var _i4 = 0; _i4 < 3; _i4++) {
        p1World[_i4] = cameraPos[_i4] + tF * ray[_i4];
        p2World[_i4] = cameraPos[_i4] + tB * ray[_i4];
      }
    }

    p1World[3] = 1.0;
    p2World[3] = 1.0; // Compute the tolerance in world coordinates.  Do this by
    // determining the world coordinates of the diagonal points of the
    // window, computing the width of the window in world coordinates, and
    // multiplying by the tolerance.

    viewport = renderer.getViewport();

    if (renderer.getRenderWindow()) {
      winSize = renderer.getRenderWindow().getViews()[0].getSize();
    }

    x = winSize[0] * viewport[0];
    y = winSize[1] * viewport[1];
    var normalizedLeftDisplay = view.displayToNormalizedDisplay(x, y, selectionZ);
    windowLowerLeft = renderer.normalizedDisplayToWorld(normalizedLeftDisplay[0], normalizedLeftDisplay[1], normalizedLeftDisplay[2], aspect);
    x = winSize[0] * viewport[2];
    y = winSize[1] * viewport[3];
    var normalizedRightDisplay = view.displayToNormalizedDisplay(x, y, selectionZ);
    windowUpperRight = renderer.normalizedDisplayToWorld(normalizedRightDisplay[0], normalizedRightDisplay[1], normalizedRightDisplay[2], aspect);

    for (var _i5 = 0; _i5 < 3; _i5++) {
      tol += (windowUpperRight[_i5] - windowLowerLeft[_i5]) * (windowUpperRight[_i5] - windowLowerLeft[_i5]);
    }

    tol = Math.sqrt(tol) * model.tolerance;

    if (model.pickFromList) {
      props = model.pickList;
    } else {
      props = renderer.getActors();
    }

    var scale = [];
    props.forEach(function (prop) {
      var mapper = prop.getMapper();
      pickable = prop.getNestedPickable() && prop.getNestedVisibility();

      if (prop.getProperty().getOpacity() <= 0.0) {
        pickable = false;
      }

      if (pickable) {
        model.transformMatrix = prop.getMatrix().slice(0); // Webgl need a transpose matrix but we need the untransposed one to project world points
        // into the right referential

        (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_5__.j)(model.transformMatrix, model.transformMatrix);
        (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_5__.g)(model.transformMatrix, model.transformMatrix); // Extract scale

        var col1 = [model.transformMatrix[0], model.transformMatrix[1], model.transformMatrix[2]];
        var col2 = [model.transformMatrix[4], model.transformMatrix[5], model.transformMatrix[6]];
        var col3 = [model.transformMatrix[8], model.transformMatrix[9], model.transformMatrix[10]];
        scale[0] = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.n)(col1);
        scale[1] = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.n)(col2);
        scale[2] = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.n)(col3);
        (0,_vendor_gl_matrix_esm_vec4_js__WEBPACK_IMPORTED_MODULE_6__.t)(p1Mapper, p1World, model.transformMatrix);
        (0,_vendor_gl_matrix_esm_vec4_js__WEBPACK_IMPORTED_MODULE_6__.t)(p2Mapper, p2World, model.transformMatrix);
        p1Mapper[0] /= p1Mapper[3];
        p1Mapper[1] /= p1Mapper[3];
        p1Mapper[2] /= p1Mapper[3];
        p2Mapper[0] /= p2Mapper[3];
        p2Mapper[1] /= p2Mapper[3];
        p2Mapper[2] /= p2Mapper[3];

        for (var _i6 = 0; _i6 < 3; _i6++) {
          ray[_i6] = p2Mapper[_i6] - p1Mapper[_i6];
        }

        if (mapper) {
          bbox.setBounds(mapper.getBounds());
          bbox.inflate(tol);
        } else {
          bbox.reset();
        }

        if (bbox.intersectBox(p1Mapper, ray, hitPosition, t)) {
          t[0] = publicAPI.intersectWithLine(p1Mapper, p2Mapper, tol * 0.333 * (scale[0] + scale[1] + scale[2]), mapper);

          if (t[0] < Number.MAX_VALUE) {
            var p = [];
            p[0] = (1.0 - t[0]) * p1World[0] + t[0] * p2World[0];
            p[1] = (1.0 - t[0]) * p1World[1] + t[0] * p2World[1];
            p[2] = (1.0 - t[0]) * p1World[2] + t[0] * p2World[2]; // Check if the current actor is already in the list

            var actorID = -1;

            for (var _i7 = 0; _i7 < model.actors.length; _i7++) {
              if (model.actors[_i7] === prop) {
                actorID = _i7;
                break;
              }
            }

            if (actorID === -1) {
              model.actors.push(prop);
              model.pickedPositions.push(p);
            } else {
              var oldPoint = model.pickedPositions[actorID];
              var distOld = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.f)(p1World, oldPoint);
              var distCurrent = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.f)(p1World, p);

              if (distCurrent < distOld) {
                model.pickedPositions[actorID] = p;
              }
            }
          }
        }
      }

      publicAPI.invokePickChange(model.pickedPositions);
      return 1;
    });
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  tolerance: 0.025,
  mapperPosition: [0.0, 0.0, 0.0],
  mapper: null,
  dataSet: null,
  actors: [],
  pickedPositions: [],
  transformMatrix: null,
  globalTMin: Number.MAX_VALUE
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _AbstractPicker_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(publicAPI, model, initialValues);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGet(publicAPI, model, ['tolerance']);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGetArray(publicAPI, model, ['mapperPosition'], 3);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].get(publicAPI, model, ['mapper', 'dataSet', 'actors', 'pickedPositions']);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].event(publicAPI, model, 'pickChange');
  vtkPicker(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkPicker'); // ----------------------------------------------------------------------------

var vtkPicker$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/PointPicker.js":
/*!********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/PointPicker.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkPointPicker$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Common/Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");
/* harmony import */ var _Picker_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Picker.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Picker.js");




var vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].vtkErrorMacro; // ----------------------------------------------------------------------------
// vtkPointPicker methods
// ----------------------------------------------------------------------------

function vtkPointPicker(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkPointPicker');

  publicAPI.intersectWithLine = function (p1, p2, tol, mapper) {
    var tMin = Number.MAX_VALUE;

    if (mapper.isA('vtkImageMapper')) {
      var pickData = mapper.intersectWithLineForPointPicking(p1, p2);

      if (pickData) {
        tMin = pickData.t;
        model.pointIJK = pickData.ijk;
      }
    } else if (mapper.isA('vtkMapper')) {
      tMin = publicAPI.intersectActorWithLine(p1, p2, tol, mapper);
    }

    return tMin;
  };

  publicAPI.intersectActorWithLine = function (p1, p2, tol, mapper) {
    // Get dataset
    var input = mapper.getInputData(); // Determine appropriate info

    var ptId = 0;
    var numPts = input.getPoints().getNumberOfPoints();

    if (numPts <= ptId) {
      return 2.0;
    }

    var ray = [];

    for (var i = 0; i < 3; i++) {
      ray[i] = p2[i] - p1[i];
    }

    var rayFactor = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_1__.d)(ray, ray);

    if (rayFactor === 0.0) {
      vtkErrorMacro('Cannot process points');
      return 2.0;
    }

    var t;
    var minPtId = -1;
    var tMin = Number.MAX_VALUE;
    var minPtDist = Number.MAX_VALUE;
    var projXYZ = [];
    var x = [];
    var points = input.getPoints();

    if (model.useCells) {
      var cellData = input.getPolys().getData();
      var nbPointsPerCell = cellData[0];
      var nbCells = input.getPolys().getNumberOfCells();

      for (var cellID = 0; cellID < nbCells; cellID++) {
        var firstPointIndex = cellID * nbPointsPerCell + 1;
        var lastPointIndex = firstPointIndex + nbPointsPerCell;

        for (var pointIndex = firstPointIndex; pointIndex < lastPointIndex; pointIndex++) {
          var pointDataIndex = cellData[pointIndex];
          points.getPoint(pointDataIndex, x);
          t = (ray[0] * (x[0] - p1[0]) + ray[1] * (x[1] - p1[1]) + ray[2] * (x[2] - p1[2])) / rayFactor; // If we find a point closer than we currently have, see whether it
          // lies within the pick tolerance and clipping planes. We keep track
          // of the point closest to the line (use a fudge factor for points
          // nearly the same distance away.)

          if (t >= 0.0 && t <= 1.0 && t <= tMin + model.tolerance) {
            var maxDist = 0.0;

            for (var _i = 0; _i < 3; _i++) {
              projXYZ[_i] = p1[_i] + t * ray[_i];
              var dist = Math.abs(x[_i] - projXYZ[_i]);

              if (dist > maxDist) {
                maxDist = dist;
              }
            } // end for i


            if (maxDist <= tol && maxDist < minPtDist) {
              // within tolerance
              minPtId = ptId;
              minPtDist = maxDist;
              tMin = t;
            }
          }
        } // end for pointIndex

      } // end for cellID

    } else {
      // end if model.useCells
      for (ptId = 0; ptId < numPts; ptId++) {
        points.getPoint(ptId, x);
        t = (ray[0] * (x[0] - p1[0]) + ray[1] * (x[1] - p1[1]) + ray[2] * (x[2] - p1[2])) / rayFactor; // If we find a point closer than we currently have, see whether it
        // lies within the pick tolerance and clipping planes. We keep track
        // of the point closest to the line (use a fudge factor for points
        // nearly the same distance away.)

        if (t >= 0.0 && t <= 1.0 && t <= tMin + model.tolerance) {
          var _maxDist = 0.0;

          for (var _i2 = 0; _i2 < 3; _i2++) {
            projXYZ[_i2] = p1[_i2] + t * ray[_i2];

            var _dist = Math.abs(x[_i2] - projXYZ[_i2]);

            if (_dist > _maxDist) {
              _maxDist = _dist;
            }
          } // end for i


          if (_maxDist <= tol && _maxDist < minPtDist) {
            // within tolerance
            minPtId = ptId;
            minPtDist = _maxDist;
            tMin = t;
          }
        }
      }
    }

    model.pointId = minPtId;
    return tMin;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  pointId: -1,
  pointIJK: [],
  useCells: false
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _Picker_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(publicAPI, model, initialValues);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].getArray(publicAPI, model, ['pointIJK']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].get(publicAPI, model, ['pointId']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['useCells']);
  vtkPointPicker(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkPointPicker'); // ----------------------------------------------------------------------------

var vtkPointPicker$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/Prop.js":
/*!*************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/Prop.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkProp$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");


function notImplemented(method) {
  return function () {
    return _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].vtkErrorMacro("vtkProp::".concat(method, " - NOT IMPLEMENTED"));
  };
} // ----------------------------------------------------------------------------
// vtkProp methods
// ----------------------------------------------------------------------------


function vtkProp(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkProp');

  publicAPI.getMTime = function () {
    var m1 = model.mtime;

    for (var index = 0; index < model.textures.length; ++index) {
      var m2 = model.textures[index].getMTime();

      if (m2 > m1) {
        m1 = m2;
      }
    }

    return m1;
  };

  publicAPI.getNestedProps = function () {
    return null;
  };

  publicAPI.getActors = function () {
    return [];
  };

  publicAPI.getActors2D = function () {
    return [];
  };

  publicAPI.getVolumes = function () {
    return [];
  };

  publicAPI.pick = notImplemented('pick');
  publicAPI.hasKey = notImplemented('hasKey');

  publicAPI.getNestedVisibility = function () {
    return model.visibility && (!model.parentProp || model.parentProp.getNestedVisibility());
  };

  publicAPI.getNestedPickable = function () {
    return model.pickable && (!model.parentProp || model.parentProp.getNestedPickable());
  };

  publicAPI.getNestedDragable = function () {
    return model.dragable && (!model.parentProp || model.parentProp.getNestedDragable());
  };

  publicAPI.getRedrawMTime = function () {
    return model.mtime;
  };

  publicAPI.setEstimatedRenderTime = function (t) {
    model.estimatedRenderTime = t;
    model.savedEstimatedRenderTime = t;
  };

  publicAPI.restoreEstimatedRenderTime = function () {
    model.estimatedRenderTime = model.savedEstimatedRenderTime;
  };

  publicAPI.addEstimatedRenderTime = function (t) {
    model.estimatedRenderTime += t;
  };

  publicAPI.setAllocatedRenderTime = function (t) {
    model.allocatedRenderTime = t;
    model.savedEstimatedRenderTime = model.estimatedRenderTime;
    model.estimatedRenderTime = 0;
  };

  publicAPI.getSupportsSelection = function () {
    return false;
  };

  publicAPI.getTextures = function () {
    return model.textures;
  };

  publicAPI.hasTexture = function (texture) {
    return model.textures.indexOf(texture) !== -1;
  };

  publicAPI.addTexture = function (texture) {
    if (texture && !publicAPI.hasTexture(texture)) {
      model.textures = model.textures.concat(texture);
      publicAPI.modified();
    }
  };

  publicAPI.removeTexture = function (texture) {
    var newTextureList = model.textures.filter(function (item) {
      return item !== texture;
    });

    if (model.textures.length !== newTextureList.length) {
      model.textures = newTextureList;
      publicAPI.modified();
    }
  };

  publicAPI.removeAllTextures = function () {
    model.textures = [];
    publicAPI.modified();
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  visibility: true,
  pickable: true,
  dragable: true,
  useBounds: true,
  allocatedRenderTime: 10,
  estimatedRenderTime: 0,
  savedEstimatedRenderTime: 0,
  renderTimeMultiplier: 1,
  paths: null,
  textures: []
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].get(publicAPI, model, ['estimatedRenderTime', 'allocatedRenderTime']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['visibility', 'pickable', 'dragable', 'useBounds', 'renderTimeMultiplier', 'parentProp']); // Object methods

  vtkProp(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkProp'); // ----------------------------------------------------------------------------

var vtkProp$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/Prop3D.js":
/*!***************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/Prop3D.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkProp3D$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Common_DataModel_BoundingBox_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Common/DataModel/BoundingBox.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/BoundingBox.js");
/* harmony import */ var _Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Common/Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");
/* harmony import */ var _Prop_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Prop.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Prop.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js");
/* harmony import */ var _vendor_gl_matrix_esm_quat_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/quat.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/quat.js");







// vtkProp3D methods
// ----------------------------------------------------------------------------

function vtkProp3D(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkProp3D');

  publicAPI.addPosition = function (deltaXYZ) {
    model.position = model.position.map(function (value, index) {
      return value + deltaXYZ[index];
    });
    publicAPI.modified();
  };

  publicAPI.getOrientationWXYZ = function () {
    var q = (0,_vendor_gl_matrix_esm_quat_js__WEBPACK_IMPORTED_MODULE_5__.c)();
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.n)(q, model.rotation);
    var oaxis = new Float64Array(3);
    var w = (0,_vendor_gl_matrix_esm_quat_js__WEBPACK_IMPORTED_MODULE_5__.g)(oaxis, q);
    return [(0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.y)(w), oaxis[0], oaxis[1], oaxis[2]];
  };

  publicAPI.rotateX = function (val) {
    if (val === 0.0) {
      return;
    }

    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.a)(model.rotation, model.rotation, (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.r)(val));
    publicAPI.modified();
  };

  publicAPI.rotateY = function (val) {
    if (val === 0.0) {
      return;
    }

    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.b)(model.rotation, model.rotation, (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.r)(val));
    publicAPI.modified();
  };

  publicAPI.rotateZ = function (val) {
    if (val === 0.0) {
      return;
    }

    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.c)(model.rotation, model.rotation, (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.r)(val));
    publicAPI.modified();
  };

  publicAPI.rotateWXYZ = function (degrees, x, y, z) {
    if (degrees === 0.0 || x === 0.0 && y === 0.0 && z === 0.0) {
      return;
    } // convert to radians


    var angle = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.r)(degrees);
    var q = (0,_vendor_gl_matrix_esm_quat_js__WEBPACK_IMPORTED_MODULE_5__.c)();
    (0,_vendor_gl_matrix_esm_quat_js__WEBPACK_IMPORTED_MODULE_5__.s)(q, [x, y, z], angle);
    var quatMat = new Float64Array(16);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.k)(quatMat, q);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.m)(model.rotation, model.rotation, quatMat);
    publicAPI.modified();
  };

  publicAPI.setOrientation = function (x, y, z) {
    if (x === model.orientation[0] && y === model.orientation[1] && z === model.orientation[2]) {
      return false;
    }

    model.orientation = [x, y, z];
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.i)(model.rotation);
    publicAPI.rotateZ(z);
    publicAPI.rotateX(x);
    publicAPI.rotateY(y);
    publicAPI.modified();
    return true;
  };

  publicAPI.setUserMatrix = function (matrix) {
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.d)(model.userMatrix, matrix);
    publicAPI.modified();
  };

  publicAPI.getMatrix = function () {
    publicAPI.computeMatrix();
    return model.matrix;
  };

  publicAPI.computeMatrix = function () {
    // check whether or not need to rebuild the matrix
    if (publicAPI.getMTime() > model.matrixMTime.getMTime()) {
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.i)(model.matrix);

      if (model.userMatrix) {
        (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.m)(model.matrix, model.matrix, model.userMatrix);
      }

      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.t)(model.matrix, model.matrix, model.origin);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.t)(model.matrix, model.matrix, model.position);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.m)(model.matrix, model.matrix, model.rotation);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.s)(model.matrix, model.matrix, model.scale);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.t)(model.matrix, model.matrix, [-model.origin[0], -model.origin[1], -model.origin[2]]);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.j)(model.matrix, model.matrix); // check for identity

      model.isIdentity = true;

      for (var i = 0; i < 4; ++i) {
        for (var j = 0; j < 4; ++j) {
          if ((i === j ? 1.0 : 0.0) !== model.matrix[i + j * 4]) {
            model.isIdentity = false;
          }
        }
      }

      model.matrixMTime.modified();
    }
  };

  publicAPI.getCenter = function () {
    return _Common_DataModel_BoundingBox_js__WEBPACK_IMPORTED_MODULE_1__["default"].getCenter(model.bounds);
  };

  publicAPI.getLength = function () {
    return _Common_DataModel_BoundingBox_js__WEBPACK_IMPORTED_MODULE_1__["default"].getLength(model.bounds);
  };

  publicAPI.getXRange = function () {
    return _Common_DataModel_BoundingBox_js__WEBPACK_IMPORTED_MODULE_1__["default"].getXRange(model.bounds);
  };

  publicAPI.getYRange = function () {
    return _Common_DataModel_BoundingBox_js__WEBPACK_IMPORTED_MODULE_1__["default"].getYRange(model.bounds);
  };

  publicAPI.getZRange = function () {
    return _Common_DataModel_BoundingBox_js__WEBPACK_IMPORTED_MODULE_1__["default"].getZRange(model.bounds);
  };

  publicAPI.getUserMatrix = function () {
    return model.userMatrix;
  };

  function updateIdentityFlag() {
    publicAPI.computeMatrix();
  }

  publicAPI.onModified(updateIdentityFlag);
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  origin: [0, 0, 0],
  position: [0, 0, 0],
  orientation: [0, 0, 0],
  rotation: null,
  scale: [1, 1, 1],
  bounds: [1, -1, 1, -1, 1, -1],
  userMatrix: null,
  userMatrixMTime: null,
  cachedProp3D: null,
  isIdentity: true,
  matrixMTime: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _Prop_js__WEBPACK_IMPORTED_MODULE_3__["default"].extend(publicAPI, model, initialValues);
  model.matrixMTime = {};
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(model.matrixMTime); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].get(publicAPI, model, ['bounds', 'isIdentity']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].getArray(publicAPI, model, ['orientation']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGetArray(publicAPI, model, ['origin', 'position', 'scale'], 3); // Object internal instance

  model.matrix = (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.i)(new Float64Array(16));
  model.rotation = (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.i)(new Float64Array(16));
  model.userMatrix = (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.i)(new Float64Array(16));
  model.transform = null; // FIXME
  // Object methods

  vtkProp3D(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkProp3D'); // ----------------------------------------------------------------------------

var vtkProp3D$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/Property.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/Property.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkProperty$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Property_Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Property/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Property/Constants.js");




function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var Representation = _Property_Constants_js__WEBPACK_IMPORTED_MODULE_2__["default"].Representation,
    Interpolation = _Property_Constants_js__WEBPACK_IMPORTED_MODULE_2__["default"].Interpolation;

function notImplemented(method) {
  return function () {
    return _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].vtkErrorMacro("vtkProperty::".concat(method, " - NOT IMPLEMENTED"));
  };
} // ----------------------------------------------------------------------------
// vtkProperty methods
// ----------------------------------------------------------------------------


function vtkProperty(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkProperty');

  publicAPI.setColor = function (r, g, b) {
    if (Array.isArray(r)) {
      if (model.color[0] !== r[0] || model.color[1] !== r[1] || model.color[2] !== r[2]) {
        model.color[0] = r[0];
        model.color[1] = r[1];
        model.color[2] = r[2];
        publicAPI.modified();
      }
    } else if (model.color[0] !== r || model.color[1] !== g || model.color[2] !== b) {
      model.color[0] = r;
      model.color[1] = g;
      model.color[2] = b;
      publicAPI.modified();
    }

    publicAPI.setDiffuseColor(model.color);
    publicAPI.setAmbientColor(model.color);
    publicAPI.setSpecularColor(model.color);
  };

  publicAPI.computeCompositeColor = notImplemented('ComputeCompositeColor');

  publicAPI.getColor = function () {
    // Inline computeCompositeColor
    var norm = 0.0;

    if (model.ambient + model.diffuse + model.specular > 0) {
      norm = 1.0 / (model.ambient + model.diffuse + model.specular);
    }

    for (var i = 0; i < 3; i++) {
      model.color[i] = norm * (model.ambient * model.ambientColor[i] + model.diffuse * model.diffuseColor[i] + model.specular * model.specularColor[i]);
    }

    return [].concat(model.color);
  };

  publicAPI.addShaderVariable = notImplemented('AddShaderVariable');

  publicAPI.setInterpolationToFlat = function () {
    return publicAPI.setInterpolation(Interpolation.FLAT);
  };

  publicAPI.setInterpolationToGouraud = function () {
    return publicAPI.setInterpolation(Interpolation.GOURAUD);
  };

  publicAPI.setInterpolationToPhong = function () {
    return publicAPI.setInterpolation(Interpolation.PHONG);
  };

  publicAPI.getInterpolationAsString = function () {
    return _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].enumToString(Interpolation, model.interpolation);
  };

  publicAPI.setRepresentationToWireframe = function () {
    return publicAPI.setRepresentation(Representation.WIREFRAME);
  };

  publicAPI.setRepresentationToSurface = function () {
    return publicAPI.setRepresentation(Representation.SURFACE);
  };

  publicAPI.setRepresentationToPoints = function () {
    return publicAPI.setRepresentation(Representation.POINTS);
  };

  publicAPI.getRepresentationAsString = function () {
    return _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].enumToString(Representation, model.representation);
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  color: [1, 1, 1],
  ambientColor: [1, 1, 1],
  diffuseColor: [1, 1, 1],
  specularColor: [1, 1, 1],
  edgeColor: [0, 0, 0],
  ambient: 0,
  diffuse: 1,
  specular: 0,
  specularPower: 1,
  opacity: 1,
  interpolation: Interpolation.GOURAUD,
  representation: Representation.SURFACE,
  edgeVisibility: false,
  backfaceCulling: false,
  frontfaceCulling: false,
  pointSize: 1,
  lineWidth: 1,
  lighting: true,
  shading: false,
  materialName: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGet(publicAPI, model, ['lighting', 'interpolation', 'ambient', 'diffuse', 'specular', 'specularPower', 'opacity', 'edgeVisibility', 'lineWidth', 'pointSize', 'backfaceCulling', 'frontfaceCulling', 'representation']);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGetArray(publicAPI, model, ['ambientColor', 'specularColor', 'diffuseColor', 'edgeColor'], 3); // Object methods

  vtkProperty(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkProperty'); // ----------------------------------------------------------------------------

var vtkProperty$1 = _objectSpread({
  newInstance: newInstance,
  extend: extend
}, _Property_Constants_js__WEBPACK_IMPORTED_MODULE_2__["default"]);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/Property/Constants.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/Property/Constants.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Interpolation": () => (/* binding */ Interpolation),
/* harmony export */   "Representation": () => (/* binding */ Representation),
/* harmony export */   "Shading": () => (/* binding */ Shading),
/* harmony export */   "default": () => (/* binding */ PropertyConst)
/* harmony export */ });
var Shading = {
  FLAT: 0,
  GOURAUD: 1,
  PHONG: 2
};
var Representation = {
  POINTS: 0,
  WIREFRAME: 1,
  SURFACE: 2
};
var Interpolation = Shading;
var PropertyConst = {
  Shading: Shading,
  Representation: Representation,
  Interpolation: Interpolation
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/RenderWindow.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/RenderWindow.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkRenderWindow$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "listViewAPIs": () => (/* binding */ listViewAPIs),
/* harmony export */   "newAPISpecificView": () => (/* binding */ newAPISpecificView),
/* harmony export */   "newInstance": () => (/* binding */ newInstance),
/* harmony export */   "registerViewConstructor": () => (/* binding */ registerViewConstructor)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");


var DEFAULT_VIEW_API = navigator.gpu ? 'WebGPU' : 'WebGL';
var VIEW_CONSTRUCTORS = Object.create(null); // ----------------------------------------------------------------------------
// static methods
// ----------------------------------------------------------------------------

function registerViewConstructor(name, constructor) {
  VIEW_CONSTRUCTORS[name] = constructor;
}
function listViewAPIs() {
  return Object.keys(VIEW_CONSTRUCTORS);
}
function newAPISpecificView(name) {
  var initialValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return VIEW_CONSTRUCTORS[name] && VIEW_CONSTRUCTORS[name](initialValues);
} // ----------------------------------------------------------------------------
// vtkRenderWindow methods
// ----------------------------------------------------------------------------

function vtkRenderWindow(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkRenderWindow'); // Add renderer

  publicAPI.addRenderer = function (renderer) {
    if (publicAPI.hasRenderer(renderer)) {
      return;
    }

    renderer.setRenderWindow(publicAPI);
    model.renderers.push(renderer); // for (this->Renderers->InitTraversal(rsit);
    //      (aren = this->Renderers->GetNextRenderer(rsit)); )
    //   {
    //   aren->SetAllocatedRenderTime
    //     (1.0/(this->DesiredUpdateRate*this->Renderers->GetNumberOfItems()));
    //   }

    publicAPI.modified();
  }; // Remove renderer


  publicAPI.removeRenderer = function (renderer) {
    model.renderers = model.renderers.filter(function (r) {
      return r !== renderer;
    });
    publicAPI.modified();
  };

  publicAPI.hasRenderer = function (ren) {
    return model.renderers.indexOf(ren) !== -1;
  }; // get an API specific view of this data


  publicAPI.newAPISpecificView = function (name) {
    var initialValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return newAPISpecificView(name || model.defaultViewAPI, initialValues);
  }; // Add renderer


  publicAPI.addView = function (view) {
    if (publicAPI.hasView(view)) {
      return;
    }

    view.setRenderable(publicAPI);
    model.views.push(view);
    publicAPI.modified();
  }; // Remove renderer


  publicAPI.removeView = function (view) {
    model.views = model.views.filter(function (r) {
      return r !== view;
    });
    publicAPI.modified();
  };

  publicAPI.hasView = function (view) {
    return model.views.indexOf(view) !== -1;
  };

  publicAPI.render = function () {
    if (model.interactor) {
      model.interactor.render();
    } else {
      model.views.forEach(function (view) {
        return view.traverseAllPasses();
      });
    }
  };

  publicAPI.getStatistics = function () {
    var results = {
      propCount: 0,
      invisiblePropCount: 0
    };
    model.renderers.forEach(function (ren) {
      var props = ren.getViewProps();
      props.forEach(function (prop) {
        if (prop.getVisibility()) {
          results.propCount += 1;
          var mpr = prop.getMapper && prop.getMapper();

          if (mpr && mpr.getPrimitiveCount) {
            var pcount = mpr.getPrimitiveCount();
            Object.keys(pcount).forEach(function (keyName) {
              if (!results[keyName]) {
                results[keyName] = 0;
              }

              results[keyName] += pcount[keyName];
            });
          }
        } else {
          results.invisiblePropCount += 1;
        }
      });
    });
    results.str = Object.keys(results).map(function (keyName) {
      return "".concat(keyName, ": ").concat(results[keyName]);
    }).join('\n');
    return results;
  };

  publicAPI.captureImages = function () {
    var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'image/png';
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setImmediate(publicAPI.render);
    return model.views.map(function (view) {
      return view.captureNextImage ? view.captureNextImage(format, opts) : undefined;
    }).filter(function (i) {
      return !!i;
    });
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  defaultViewAPI: DEFAULT_VIEW_API,
  renderers: [],
  views: [],
  interactor: null,
  neverRendered: true,
  numberOfLayers: 1
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['interactor', 'numberOfLayers', 'views', 'defaultViewAPI']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].get(publicAPI, model, ['neverRendered']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].getArray(publicAPI, model, ['renderers']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].event(publicAPI, model, 'completion'); // Object methods

  vtkRenderWindow(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkRenderWindow'); // ----------------------------------------------------------------------------

var vtkRenderWindow$1 = {
  newInstance: newInstance,
  extend: extend,
  registerViewConstructor: registerViewConstructor,
  listViewAPIs: listViewAPIs,
  newAPISpecificView: newAPISpecificView
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/RenderWindowInteractor.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/RenderWindowInteractor.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkRenderWindowInteractor$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Common/Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");
/* harmony import */ var _RenderWindowInteractor_Constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RenderWindowInteractor/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/RenderWindowInteractor/Constants.js");





function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var Device = _RenderWindowInteractor_Constants_js__WEBPACK_IMPORTED_MODULE_3__["default"].Device,
    Input = _RenderWindowInteractor_Constants_js__WEBPACK_IMPORTED_MODULE_3__["default"].Input;
var vtkWarningMacro = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].vtkWarningMacro,
    vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].vtkErrorMacro,
    normalizeWheel = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].normalizeWheel,
    vtkOnceErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].vtkOnceErrorMacro; // ----------------------------------------------------------------------------
// Global methods
// ----------------------------------------------------------------------------

var deviceInputMap = {
  'OpenVR Gamepad': [Input.TrackPad, Input.Trigger, Input.Grip, Input.ApplicationMenu]
};
var handledEvents = ['StartAnimation', 'Animation', 'EndAnimation', 'MouseEnter', 'MouseLeave', 'StartMouseMove', 'MouseMove', 'EndMouseMove', 'LeftButtonPress', 'LeftButtonRelease', 'MiddleButtonPress', 'MiddleButtonRelease', 'RightButtonPress', 'RightButtonRelease', 'KeyPress', 'KeyDown', 'KeyUp', 'StartMouseWheel', 'MouseWheel', 'EndMouseWheel', 'StartPinch', 'Pinch', 'EndPinch', 'StartPan', 'Pan', 'EndPan', 'StartRotate', 'Rotate', 'EndRotate', 'Button3D', 'Move3D', 'StartPointerLock', 'EndPointerLock', 'StartInteraction', 'Interaction', 'EndInteraction'];

function preventDefault(event) {
  if (event.cancelable) {
    event.stopPropagation();
    event.preventDefault();
  }

  return false;
} // ----------------------------------------------------------------------------
// vtkRenderWindowInteractor methods
// ----------------------------------------------------------------------------


function vtkRenderWindowInteractor(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkRenderWindowInteractor'); // Initialize list of requesters

  var animationRequesters = new Set(); // track active event listeners to handle simultaneous button tracking

  var activeListenerCount = 0; // Public API methods
  //----------------------------------------------------------------------

  publicAPI.start = function () {
    // Let the compositing handle the event loop if it wants to.
    // if (publicAPI.HasObserver(vtkCommand::StartEvent) && !publicAPI.HandleEventLoop) {
    //   publicAPI.invokeEvent({ type: 'StartEvent' });
    //   return;
    // }
    // As a convenience, initialize if we aren't initialized yet.
    if (!model.initialized) {
      publicAPI.initialize();

      if (!model.initialized) {
        return;
      }
    } // Pass execution to the subclass which will run the event loop,
    // this will not return until TerminateApp is called.


    publicAPI.startEventLoop();
  }; //----------------------------------------------------------------------


  publicAPI.setRenderWindow = function (aren) {
    vtkErrorMacro('you want to call setView(view) instead of setRenderWindow on a vtk.js interactor');
  }; //----------------------------------------------------------------------


  publicAPI.setInteractorStyle = function (style) {
    if (model.interactorStyle !== style) {
      if (model.interactorStyle != null) {
        model.interactorStyle.setInteractor(null);
      }

      model.interactorStyle = style;

      if (model.interactorStyle != null) {
        if (model.interactorStyle.getInteractor() !== publicAPI) {
          model.interactorStyle.setInteractor(publicAPI);
        }
      }
    }
  }; //---------------------------------------------------------------------


  publicAPI.initialize = function () {
    model.initialized = true;
    publicAPI.enable();
    publicAPI.render();
  };

  publicAPI.enable = function () {
    return publicAPI.setEnabled(true);
  };

  publicAPI.disable = function () {
    return publicAPI.setEnabled(false);
  };

  publicAPI.startEventLoop = function () {
    return vtkWarningMacro('empty event loop');
  };

  function updateCurrentRenderer(x, y) {
    if (!model._forcedRenderer) {
      model.currentRenderer = publicAPI.findPokedRenderer(x, y);
    }
  }

  publicAPI.getCurrentRenderer = function () {
    if (model.currentRenderer) {
      return model.currentRenderer;
    }

    updateCurrentRenderer(0, 0);
    return model.currentRenderer;
  };

  function getScreenEventPositionFor(source) {
    var bounds = model.container.getBoundingClientRect();
    var canvas = model.view.getCanvas();
    var scaleX = canvas.width / bounds.width;
    var scaleY = canvas.height / bounds.height;
    var position = {
      x: scaleX * (source.clientX - bounds.left),
      y: scaleY * (bounds.height - source.clientY + bounds.top),
      z: 0
    };
    updateCurrentRenderer(position.x, position.y);
    return position;
  }

  function getTouchEventPositionsFor(touches) {
    var positions = {};

    for (var i = 0; i < touches.length; i++) {
      var touch = touches[i];
      positions[touch.identifier] = getScreenEventPositionFor(touch);
    }

    return positions;
  }

  function getModifierKeysFor(event) {
    return {
      controlKey: event.ctrlKey,
      altKey: event.altKey,
      shiftKey: event.shiftKey
    };
  }

  function getKeysFor(event) {
    var modifierKeys = getModifierKeysFor(event);

    var keys = _objectSpread({
      key: event.key,
      keyCode: event.charCode
    }, modifierKeys);

    return keys;
  }

  function interactionRegistration(addListeners) {
    var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var rootElm = document;
    var method = addListeners ? 'addEventListener' : 'removeEventListener';
    var invMethod = addListeners ? 'removeEventListener' : 'addEventListener';

    if (!force && !addListeners && activeListenerCount > 0) {
      --activeListenerCount;
    } // only add/remove listeners when there are no registered listeners


    if (!activeListenerCount || force) {
      activeListenerCount = 0;

      if (model.container) {
        model.container[invMethod]('mousemove', publicAPI.handleMouseMove);
      }

      rootElm[method]('mouseup', publicAPI.handleMouseUp);
      rootElm[method]('mousemove', publicAPI.handleMouseMove);
      rootElm[method]('touchend', publicAPI.handleTouchEnd, false);
      rootElm[method]('touchcancel', publicAPI.handleTouchEnd, false);
      rootElm[method]('touchmove', publicAPI.handleTouchMove, false);
    }

    if (!force && addListeners) {
      ++activeListenerCount;
    }
  }

  publicAPI.bindEvents = function (container) {
    model.container = container;
    container.addEventListener('contextmenu', preventDefault); // container.addEventListener('click', preventDefault); // Avoid stopping event propagation

    container.addEventListener('wheel', publicAPI.handleWheel);
    container.addEventListener('DOMMouseScroll', publicAPI.handleWheel);
    container.addEventListener('mouseenter', publicAPI.handleMouseEnter);
    container.addEventListener('mouseleave', publicAPI.handleMouseLeave);
    container.addEventListener('mousemove', publicAPI.handleMouseMove);
    container.addEventListener('mousedown', publicAPI.handleMouseDown);
    document.addEventListener('keypress', publicAPI.handleKeyPress);
    document.addEventListener('keydown', publicAPI.handleKeyDown);
    document.addEventListener('keyup', publicAPI.handleKeyUp);
    document.addEventListener('pointerlockchange', publicAPI.handlePointerLockChange);
    container.addEventListener('touchstart', publicAPI.handleTouchStart, false);
  };

  publicAPI.unbindEvents = function () {
    // force unbinding listeners
    interactionRegistration(false, true);
    model.container.removeEventListener('contextmenu', preventDefault); // model.container.removeEventListener('click', preventDefault); // Avoid stopping event propagation

    model.container.removeEventListener('wheel', publicAPI.handleWheel);
    model.container.removeEventListener('DOMMouseScroll', publicAPI.handleWheel);
    model.container.removeEventListener('mouseenter', publicAPI.handleMouseEnter);
    model.container.removeEventListener('mouseleave', publicAPI.handleMouseLeave);
    model.container.removeEventListener('mousemove', publicAPI.handleMouseMove);
    model.container.removeEventListener('mousedown', publicAPI.handleMouseDown);
    document.removeEventListener('keypress', publicAPI.handleKeyPress);
    document.removeEventListener('keydown', publicAPI.handleKeyDown);
    document.removeEventListener('keyup', publicAPI.handleKeyUp);
    document.removeEventListener('pointerlockchange', publicAPI.handlePointerLockChange);
    model.container.removeEventListener('touchstart', publicAPI.handleTouchStart);
    model.container = null;
  };

  publicAPI.handleKeyPress = function (event) {
    var data = getKeysFor(event);
    publicAPI.keyPressEvent(data);
  };

  publicAPI.handleKeyDown = function (event) {
    var data = getKeysFor(event);
    publicAPI.keyDownEvent(data);
  };

  publicAPI.handleKeyUp = function (event) {
    var data = getKeysFor(event);
    publicAPI.keyUpEvent(data);
  };

  publicAPI.handleMouseDown = function (event) {
    if (event.button > 2) {
      // ignore events from extra mouse buttons such as `back` and `forward`
      return;
    }

    interactionRegistration(true);
    preventDefault(event);

    var callData = _objectSpread(_objectSpread({}, getModifierKeysFor(event)), {}, {
      position: getScreenEventPositionFor(event)
    });

    switch (event.button) {
      case 0:
        publicAPI.leftButtonPressEvent(callData);
        break;

      case 1:
        publicAPI.middleButtonPressEvent(callData);
        break;

      case 2:
        publicAPI.rightButtonPressEvent(callData);
        break;

      default:
        vtkErrorMacro("Unknown mouse button pressed: ".concat(event.button));
        break;
    }
  }; //----------------------------------------------------------------------


  publicAPI.requestPointerLock = function () {
    var canvas = publicAPI.getView().getCanvas();
    canvas.requestPointerLock();
  }; //----------------------------------------------------------------------


  publicAPI.exitPointerLock = function () {
    return document.exitPointerLock();
  }; //----------------------------------------------------------------------


  publicAPI.isPointerLocked = function () {
    return !!document.pointerLockElement;
  }; //----------------------------------------------------------------------


  publicAPI.handlePointerLockChange = function () {
    if (publicAPI.isPointerLocked()) {
      publicAPI.startPointerLockEvent();
    } else {
      publicAPI.endPointerLockEvent();
    }
  }; //----------------------------------------------------------------------


  function forceRender() {
    if (model.view && model.enabled && model.enableRender) {
      model.inRender = true;
      model.view.traverseAllPasses();
      model.inRender = false;
    } // outside the above test so that third-party code can redirect
    // the render to the appropriate class


    publicAPI.invokeRenderEvent();
  }

  publicAPI.requestAnimation = function (requestor) {
    if (requestor === undefined) {
      vtkErrorMacro("undefined requester, can not start animating");
      return;
    }

    if (animationRequesters.has(requestor)) {
      vtkWarningMacro("requester is already registered for animating");
      return;
    }

    animationRequesters.add(requestor);

    if (animationRequesters.size === 1) {
      model.lastFrameTime = 0.1;
      model.lastFrameStart = Date.now();
      model.animationRequest = requestAnimationFrame(publicAPI.handleAnimation);
      publicAPI.startAnimationEvent();
    }
  };

  publicAPI.isAnimating = function () {
    return model.vrAnimation || model.animationRequest !== null;
  };

  publicAPI.cancelAnimation = function (requestor) {
    var skipWarning = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (!animationRequesters.has(requestor)) {
      if (!skipWarning) {
        var requestStr = requestor && requestor.getClassName ? requestor.getClassName() : requestor;
        vtkWarningMacro("".concat(requestStr, " did not request an animation"));
      }

      return;
    }

    animationRequesters.delete(requestor);

    if (model.animationRequest && animationRequesters.size === 0) {
      cancelAnimationFrame(model.animationRequest);
      model.animationRequest = null;
      publicAPI.endAnimationEvent();
      publicAPI.render();
    }
  };

  publicAPI.switchToVRAnimation = function () {
    // cancel existing animation if any
    if (model.animationRequest) {
      cancelAnimationFrame(model.animationRequest);
      model.animationRequest = null;
    }

    model.vrAnimation = true;
  };

  publicAPI.returnFromVRAnimation = function () {
    model.vrAnimation = false;

    if (animationRequesters.size !== 0) {
      model.FrameTime = -1;
      model.animationRequest = requestAnimationFrame(publicAPI.handleAnimation);
    }
  };

  publicAPI.updateGamepads = function (displayId) {
    var gamepads = navigator.getGamepads(); // watch for when buttons change state and fire events

    for (var i = 0; i < gamepads.length; ++i) {
      var gp = gamepads[i];

      if (gp && gp.displayId === displayId) {
        if (!(gp.index in model.lastGamepadValues)) {
          model.lastGamepadValues[gp.index] = {
            buttons: {}
          };
        }

        for (var b = 0; b < gp.buttons.length; ++b) {
          if (!(b in model.lastGamepadValues[gp.index].buttons)) {
            model.lastGamepadValues[gp.index].buttons[b] = false;
          }

          if (model.lastGamepadValues[gp.index].buttons[b] !== gp.buttons[b].pressed) {
            publicAPI.button3DEvent({
              gamepad: gp,
              position: gp.pose.position,
              orientation: gp.pose.orientation,
              pressed: gp.buttons[b].pressed,
              device: gp.hand === 'left' ? Device.LeftController : Device.RightController,
              input: deviceInputMap[gp.id] && deviceInputMap[gp.id][b] ? deviceInputMap[gp.id][b] : Input.Trigger
            });
            model.lastGamepadValues[gp.index].buttons[b] = gp.buttons[b].pressed;
          }

          if (model.lastGamepadValues[gp.index].buttons[b]) {
            publicAPI.move3DEvent({
              gamepad: gp,
              position: gp.pose.position,
              orientation: gp.pose.orientation,
              device: gp.hand === 'left' ? Device.LeftController : Device.RightController
            });
          }
        }
      }
    }
  };

  publicAPI.handleMouseMove = function (event) {
    // Do not consume event for move
    // preventDefault(event);
    var callData = _objectSpread(_objectSpread({}, getModifierKeysFor(event)), {}, {
      position: getScreenEventPositionFor(event)
    });

    if (model.moveTimeoutID === 0) {
      publicAPI.startMouseMoveEvent(callData);
    } else {
      publicAPI.mouseMoveEvent(callData);
      clearTimeout(model.moveTimeoutID);
    } // start a timer to keep us animating while we get mouse move events


    model.moveTimeoutID = setTimeout(function () {
      publicAPI.endMouseMoveEvent();
      model.moveTimeoutID = 0;
    }, 200);
  };

  publicAPI.handleAnimation = function () {
    var currTime = Date.now();

    if (model.FrameTime === -1.0) {
      model.lastFrameTime = 0.1;
    } else {
      model.lastFrameTime = (currTime - model.lastFrameStart) / 1000.0;
    }

    model.lastFrameTime = Math.max(0.01, model.lastFrameTime);
    model.lastFrameStart = currTime;
    publicAPI.animationEvent();
    forceRender();
    model.animationRequest = requestAnimationFrame(publicAPI.handleAnimation);
  };

  publicAPI.handleWheel = function (event) {
    preventDefault(event);
    /**
     * wheel event values can vary significantly across browsers, platforms
     * and devices [1]. `normalizeWheel` uses facebook's solution from their
     * fixed-data-table repository [2].
     *
     * [1] https://developer.mozilla.org/en-US/docs/Web/Events/mousewheel
     * [2] https://github.com/facebookarchive/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js
     *
     * This code will return an object with properties:
     *
     *   spinX   -- normalized spin speed (use for zoom) - x plane
     *   spinY   -- " - y plane
     *   pixelX  -- normalized distance (to pixels) - x plane
     *   pixelY  -- " - y plane
     *
     */

    var callData = _objectSpread(_objectSpread(_objectSpread({}, normalizeWheel(event)), getModifierKeysFor(event)), {}, {
      position: getScreenEventPositionFor(event)
    });

    if (model.wheelTimeoutID === 0) {
      publicAPI.startMouseWheelEvent(callData);
    } else {
      publicAPI.mouseWheelEvent(callData);
      clearTimeout(model.wheelTimeoutID);
    } // start a timer to keep us animating while we get wheel events


    model.wheelTimeoutID = setTimeout(function () {
      publicAPI.endMouseWheelEvent();
      model.wheelTimeoutID = 0;
    }, 200);
  };

  publicAPI.handleMouseEnter = function (event) {
    var callData = _objectSpread(_objectSpread({}, getModifierKeysFor(event)), {}, {
      position: getScreenEventPositionFor(event)
    });

    publicAPI.mouseEnterEvent(callData);
  };

  publicAPI.handleMouseLeave = function (event) {
    var callData = _objectSpread(_objectSpread({}, getModifierKeysFor(event)), {}, {
      position: getScreenEventPositionFor(event)
    });

    publicAPI.mouseLeaveEvent(callData);
  };

  publicAPI.handleMouseUp = function (event) {
    interactionRegistration(false);
    preventDefault(event);

    var callData = _objectSpread(_objectSpread({}, getModifierKeysFor(event)), {}, {
      position: getScreenEventPositionFor(event)
    });

    switch (event.button) {
      case 0:
        publicAPI.leftButtonReleaseEvent(callData);
        break;

      case 1:
        publicAPI.middleButtonReleaseEvent(callData);
        break;

      case 2:
        publicAPI.rightButtonReleaseEvent(callData);
        break;

      default:
        vtkErrorMacro("Unknown mouse button released: ".concat(event.button));
        break;
    }
  };

  publicAPI.handleTouchStart = function (event) {
    interactionRegistration(true);
    preventDefault(event); // If multitouch

    if (model.recognizeGestures && event.touches.length > 1) {
      var positions = getTouchEventPositionsFor(event.touches); // did we just transition to multitouch?

      if (event.touches.length === 2) {
        var touch = event.touches[0];
        var callData = {
          position: getScreenEventPositionFor(touch),
          shiftKey: false,
          altKey: false,
          controlKey: false
        };
        publicAPI.leftButtonReleaseEvent(callData);
      } // handle the gesture


      publicAPI.recognizeGesture('TouchStart', positions);
    } else {
      var _touch = event.touches[0];
      var _callData = {
        position: getScreenEventPositionFor(_touch),
        shiftKey: false,
        altKey: false,
        controlKey: false
      };
      publicAPI.leftButtonPressEvent(_callData);
    }
  };

  publicAPI.handleTouchMove = function (event) {
    preventDefault(event);

    if (model.recognizeGestures && event.touches.length > 1) {
      var positions = getTouchEventPositionsFor(event.touches);
      publicAPI.recognizeGesture('TouchMove', positions);
    } else {
      var touch = event.touches[0];
      var callData = {
        position: getScreenEventPositionFor(touch),
        shiftKey: false,
        altKey: false,
        controlKey: false
      };
      publicAPI.mouseMoveEvent(callData);
    }
  };

  publicAPI.handleTouchEnd = function (event) {
    preventDefault(event);

    if (model.recognizeGestures) {
      // No more fingers down
      if (event.touches.length === 0) {
        // If just one finger released, consider as left button
        if (event.changedTouches.length === 1) {
          var touch = event.changedTouches[0];
          var callData = {
            position: getScreenEventPositionFor(touch),
            shiftKey: false,
            altKey: false,
            controlKey: false
          };
          publicAPI.leftButtonReleaseEvent(callData);
          interactionRegistration(false);
        } else {
          // If more than one finger released, recognize touchend
          var positions = getTouchEventPositionsFor(event.changedTouches);
          publicAPI.recognizeGesture('TouchEnd', positions);
          interactionRegistration(false);
        }
      } else if (event.touches.length === 1) {
        // If one finger left, end touch and start button press
        var _positions = getTouchEventPositionsFor(event.changedTouches);

        publicAPI.recognizeGesture('TouchEnd', _positions);
        var _touch2 = event.touches[0];
        var _callData2 = {
          position: getScreenEventPositionFor(_touch2),
          shiftKey: false,
          altKey: false,
          controlKey: false
        };
        publicAPI.leftButtonPressEvent(_callData2);
      } else {
        // If more than one finger left, keep touch move
        var _positions2 = getTouchEventPositionsFor(event.touches);

        publicAPI.recognizeGesture('TouchMove', _positions2);
      }
    } else {
      var _touch3 = event.changedTouches[0];
      var _callData3 = {
        position: getScreenEventPositionFor(_touch3),
        shiftKey: false,
        altKey: false,
        controlKey: false
      };
      publicAPI.leftButtonReleaseEvent(_callData3);
      interactionRegistration(false);
    }
  };

  publicAPI.setView = function (val) {
    if (model.view === val) {
      return;
    }

    model.view = val;
    model.view.getRenderable().setInteractor(publicAPI);
    publicAPI.modified();
  };

  publicAPI.getFirstRenderer = function () {
    return model.view.getRenderable().getRenderersByReference()[0];
  };

  publicAPI.findPokedRenderer = function () {
    var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    if (!model.view) {
      return null;
    } // The original order of renderers needs to remain as
    // the first one is the one we want to manipulate the camera on.


    var rc = model.view.getRenderable().getRenderers();
    rc.sort(function (a, b) {
      return a.getLayer() - b.getLayer();
    });
    var interactiveren = null;
    var viewportren = null;
    var currentRenderer = null;
    var count = rc.length;

    while (count--) {
      var aren = rc[count];

      if (model.view.isInViewport(x, y, aren) && aren.getInteractive()) {
        currentRenderer = aren;
        break;
      }

      if (interactiveren === null && aren.getInteractive()) {
        // Save this renderer in case we can't find one in the viewport that
        // is interactive.
        interactiveren = aren;
      }

      if (viewportren === null && model.view.isInViewport(x, y, aren)) {
        // Save this renderer in case we can't find one in the viewport that
        // is interactive.
        viewportren = aren;
      }
    } // We must have a value.  If we found an interactive renderer before, that's
    // better than a non-interactive renderer.


    if (currentRenderer === null) {
      currentRenderer = interactiveren;
    } // We must have a value.  If we found a renderer that is in the viewport,
    // that is better than any old viewport (but not as good as an interactive
    // one).


    if (currentRenderer === null) {
      currentRenderer = viewportren;
    } // We must have a value - take anything.


    if (currentRenderer == null) {
      currentRenderer = rc[0];
    }

    return currentRenderer;
  }; // only render if we are not animating. If we are animating
  // then renders will happen naturally anyhow and we definitely
  // do not want extra renders as the make the apparent interaction
  // rate slower.


  publicAPI.render = function () {
    if (model.animationRequest === null && !model.inRender) {
      forceRender();
    }
  }; // create the generic Event methods


  handledEvents.forEach(function (eventName) {
    var lowerFirst = eventName.charAt(0).toLowerCase() + eventName.slice(1);

    publicAPI["".concat(lowerFirst, "Event")] = function (arg) {
      // Check that interactor enabled
      if (!model.enabled) {
        return;
      } // Check that a poked renderer exists


      var renderer = publicAPI.getCurrentRenderer();

      if (!renderer) {
        vtkOnceErrorMacro("\n          Can not forward events without a current renderer on the interactor.\n        ");
        return;
      } // Pass the eventName and the poked renderer


      var callData = _objectSpread({
        type: eventName,
        pokedRenderer: model.currentRenderer,
        firstRenderer: publicAPI.getFirstRenderer()
      }, arg); // Call invoke


      publicAPI["invoke".concat(eventName)](callData);
    };
  }); // we know we are in multitouch now, so start recognizing

  publicAPI.recognizeGesture = function (event, positions) {
    // more than two pointers we ignore
    if (Object.keys(positions).length > 2) {
      return;
    }

    if (!model.startingEventPositions) {
      model.startingEventPositions = {};
    } // store the initial positions


    if (event === 'TouchStart') {
      Object.keys(positions).forEach(function (key) {
        model.startingEventPositions[key] = positions[key];
      }); // we do not know what the gesture is yet

      model.currentGesture = 'Start';
      return;
    } // end the gesture if needed


    if (event === 'TouchEnd') {
      if (model.currentGesture === 'Pinch') {
        publicAPI.render();
        publicAPI.endPinchEvent();
      }

      if (model.currentGesture === 'Rotate') {
        publicAPI.render();
        publicAPI.endRotateEvent();
      }

      if (model.currentGesture === 'Pan') {
        publicAPI.render();
        publicAPI.endPanEvent();
      }

      model.currentGesture = 'Start';
      model.startingEventPositions = {};
      return;
    } // what are the two pointers we are working with


    var count = 0;
    var posVals = [];
    var startVals = [];
    Object.keys(positions).forEach(function (key) {
      posVals[count] = positions[key];
      startVals[count] = model.startingEventPositions[key];
      count++;
    }); // The meat of the algorithm
    // on move events we analyze them to determine what type
    // of movement it is and then deal with it.
    // calculate the distances

    var originalDistance = Math.sqrt((startVals[0].x - startVals[1].x) * (startVals[0].x - startVals[1].x) + (startVals[0].y - startVals[1].y) * (startVals[0].y - startVals[1].y));
    var newDistance = Math.sqrt((posVals[0].x - posVals[1].x) * (posVals[0].x - posVals[1].x) + (posVals[0].y - posVals[1].y) * (posVals[0].y - posVals[1].y)); // calculate rotations

    var originalAngle = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.y)(Math.atan2(startVals[1].y - startVals[0].y, startVals[1].x - startVals[0].x));
    var newAngle = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.y)(Math.atan2(posVals[1].y - posVals[0].y, posVals[1].x - posVals[0].x)); // angles are cyclic so watch for that, 1 and 359 are only 2 apart :)

    var angleDeviation = newAngle - originalAngle;
    newAngle = newAngle + 180.0 >= 360.0 ? newAngle - 180.0 : newAngle + 180.0;
    originalAngle = originalAngle + 180.0 >= 360.0 ? originalAngle - 180.0 : originalAngle + 180.0;

    if (Math.abs(newAngle - originalAngle) < Math.abs(angleDeviation)) {
      angleDeviation = newAngle - originalAngle;
    } // calculate the translations


    var trans = [];
    trans[0] = (posVals[0].x - startVals[0].x + posVals[1].x - startVals[1].x) / 2.0;
    trans[1] = (posVals[0].y - startVals[0].y + posVals[1].y - startVals[1].y) / 2.0;

    if (event === 'TouchMove') {
      // OK we want to
      // - immediately respond to the user
      // - allow the user to zoom without panning (saves focal point)
      // - allow the user to rotate without panning (saves focal point)
      // do we know what gesture we are doing yet? If not
      // see if we can figure it out
      if (model.currentGesture === 'Start') {
        // pinch is a move to/from the center point
        // rotate is a move along the circumference
        // pan is a move of the center point
        // compute the distance along each of these axes in pixels
        // the first to break thresh wins
        var thresh = 0.01 * Math.sqrt(model.container.clientWidth * model.container.clientWidth + model.container.clientHeight * model.container.clientHeight);

        if (thresh < 15.0) {
          thresh = 15.0;
        }

        var pinchDistance = Math.abs(newDistance - originalDistance);
        var rotateDistance = newDistance * 3.1415926 * Math.abs(angleDeviation) / 360.0;
        var panDistance = Math.sqrt(trans[0] * trans[0] + trans[1] * trans[1]);

        if (pinchDistance > thresh && pinchDistance > rotateDistance && pinchDistance > panDistance) {
          model.currentGesture = 'Pinch';
          var callData = {
            scale: 1.0,
            touches: positions
          };
          publicAPI.startPinchEvent(callData);
        } else if (rotateDistance > thresh && rotateDistance > panDistance) {
          model.currentGesture = 'Rotate';
          var _callData4 = {
            rotation: 0.0,
            touches: positions
          };
          publicAPI.startRotateEvent(_callData4);
        } else if (panDistance > thresh) {
          model.currentGesture = 'Pan';
          var _callData5 = {
            translation: [0, 0],
            touches: positions
          };
          publicAPI.startPanEvent(_callData5);
        }
      } else {
        // if we have found a specific type of movement then
        // handle it
        if (model.currentGesture === 'Rotate') {
          var _callData6 = {
            rotation: angleDeviation,
            touches: positions
          };
          publicAPI.rotateEvent(_callData6);
        }

        if (model.currentGesture === 'Pinch') {
          var _callData7 = {
            scale: newDistance / originalDistance,
            touches: positions
          };
          publicAPI.pinchEvent(_callData7);
        }

        if (model.currentGesture === 'Pan') {
          var _callData8 = {
            translation: trans,
            touches: positions
          };
          publicAPI.panEvent(_callData8);
        }
      }
    }
  };

  publicAPI.handleVisibilityChange = function () {
    model.lastFrameStart = Date.now();
  };

  publicAPI.setCurrentRenderer = function (r) {
    model._forcedRenderer = !!r;
    model.currentRenderer = r;
  }; // Stop animating if the renderWindowInteractor is deleted.


  var superDelete = publicAPI.delete;

  publicAPI.delete = function () {
    while (animationRequesters.size) {
      publicAPI.cancelAnimation(animationRequesters.values().next().value);
    }

    if (typeof document.hidden !== 'undefined') {
      document.removeEventListener('visibilitychange', publicAPI.handleVisibilityChange);
    }

    superDelete();
  }; // Use the Page Visibility API to detect when we switch away from or back to
  // this tab, and reset the lastFrameStart. When tabs are not active, browsers
  // will stop calling requestAnimationFrame callbacks.


  if (typeof document.hidden !== 'undefined') {
    document.addEventListener('visibilitychange', publicAPI.handleVisibilityChange, false);
  }
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  renderWindow: null,
  interactorStyle: null,
  picker: null,
  pickingManager: null,
  initialized: false,
  enabled: false,
  enableRender: true,
  currentRenderer: null,
  lightFollowCamera: true,
  desiredUpdateRate: 30.0,
  stillUpdateRate: 2.0,
  container: null,
  view: null,
  recognizeGestures: true,
  currentGesture: 'Start',
  animationRequest: null,
  lastFrameTime: 0.1,
  wheelTimeoutID: 0,
  moveTimeoutID: 0,
  lastGamepadValues: {}
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods

  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].event(publicAPI, model, 'RenderEvent');
  handledEvents.forEach(function (eventName) {
    return _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].event(publicAPI, model, eventName);
  }); // Create get-only macros

  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].get(publicAPI, model, ['initialized', 'container', 'interactorStyle', 'lastFrameTime', 'view']); // Create get-set macros

  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGet(publicAPI, model, ['lightFollowCamera', 'enabled', 'enableRender', 'recognizeGestures', 'desiredUpdateRate', 'stillUpdateRate', 'picker']); // For more macro methods, see "Sources/macros.js"
  // Object specific methods

  vtkRenderWindowInteractor(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkRenderWindowInteractor'); // ----------------------------------------------------------------------------

var vtkRenderWindowInteractor$1 = _objectSpread({
  newInstance: newInstance,
  extend: extend,
  handledEvents: handledEvents
}, _RenderWindowInteractor_Constants_js__WEBPACK_IMPORTED_MODULE_3__["default"]);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/RenderWindowInteractor/Constants.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/RenderWindowInteractor/Constants.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Device": () => (/* binding */ Device),
/* harmony export */   "Input": () => (/* binding */ Input),
/* harmony export */   "default": () => (/* binding */ Constants)
/* harmony export */ });
var Device = {
  Unknown: 0,
  LeftController: 1,
  RightController: 2
};
var Input = {
  Unknown: 0,
  Trigger: 1,
  TrackPad: 2,
  Grip: 3,
  ApplicationMenu: 4
};
var Constants = {
  Device: Device,
  Input: Input
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/Renderer.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/Renderer.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkRenderer$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Camera_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Camera.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Camera.js");
/* harmony import */ var _Light_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Light.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Light.js");
/* harmony import */ var _Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Common/Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");
/* harmony import */ var _Viewport_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Viewport.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Viewport.js");
/* harmony import */ var _Common_DataModel_BoundingBox_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Common/DataModel/BoundingBox.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/BoundingBox.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js");
/* harmony import */ var _vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/vec3.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/vec3.js");









var vtkDebugMacro = _macros_js__WEBPACK_IMPORTED_MODULE_0__.vtkDebugMacro,
    vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_0__.vtkErrorMacro,
    vtkWarningMacro = _macros_js__WEBPACK_IMPORTED_MODULE_0__.vtkWarningMacro;

function notImplemented(method) {
  return function () {
    return vtkErrorMacro("vtkRenderer::".concat(method, " - NOT IMPLEMENTED"));
  };
} // ----------------------------------------------------------------------------
// vtkRenderer methods
// ----------------------------------------------------------------------------


function vtkRenderer(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkRenderer'); // make sure background has 4 entries. Default to opaque black

  if (!model.background) model.background = [0, 0, 0, 1];

  while (model.background.length < 3) {
    model.background.push(0);
  }

  if (model.background.length === 3) model.background.push(1); // Events

  var COMPUTE_VISIBLE_PROP_BOUNDS_EVENT = {
    type: 'ComputeVisiblePropBoundsEvent',
    renderer: publicAPI
  };
  var RESET_CAMERA_CLIPPING_RANGE_EVENT = {
    type: 'ResetCameraClippingRangeEvent',
    renderer: publicAPI
  };
  var RESET_CAMERA_EVENT = {
    type: 'ResetCameraEvent',
    renderer: publicAPI
  };

  publicAPI.updateCamera = function () {
    if (!model.activeCamera) {
      vtkDebugMacro('No cameras are on, creating one.'); // the get method will automagically create a camera
      // and reset it since one hasn't been specified yet.

      publicAPI.getActiveCameraAndResetIfCreated();
    } // update the viewing transformation


    model.activeCamera.render(publicAPI);
    return true;
  };

  publicAPI.updateLightsGeometryToFollowCamera = function () {
    // only update the light's geometry if this Renderer is tracking
    // this lights.  That allows one renderer to view the lights that
    // another renderer is setting up.
    var camera = publicAPI.getActiveCameraAndResetIfCreated();
    model.lights.forEach(function (light) {
      if (light.lightTypeIsSceneLight() || light.lightTypeIsCameraLight()) ; else if (light.lightTypeIsHeadLight()) {
        // update position and orientation of light to match camera.
        light.setPositionFrom(camera.getPositionByReference());
        light.setFocalPointFrom(camera.getFocalPointByReference());
        light.modified(camera.getMTime());
      } else {
        vtkErrorMacro('light has unknown light type', light.get());
      }
    });
  };

  publicAPI.updateLightGeometry = function () {
    if (model.lightFollowCamera) {
      // only update the light's geometry if this Renderer is tracking
      // this lights.  That allows one renderer to view the lights that
      // another renderer is setting up.
      return publicAPI.updateLightsGeometryToFollowCamera();
    }

    return true;
  };

  publicAPI.allocateTime = notImplemented('allocateTime');
  publicAPI.updateGeometry = notImplemented('updateGeometry');

  publicAPI.getVTKWindow = function () {
    return model.renderWindow;
  };

  publicAPI.setLayer = function (layer) {
    vtkDebugMacro(publicAPI.getClassName(), publicAPI, 'setting Layer to ', layer);

    if (model.layer !== layer) {
      model.layer = layer;
      publicAPI.modified();
    }

    publicAPI.setPreserveColorBuffer(!!layer);
  };

  publicAPI.setActiveCamera = function (camera) {
    if (model.activeCamera === camera) {
      return false;
    }

    model.activeCamera = camera;
    publicAPI.modified();
    publicAPI.invokeEvent({
      type: 'ActiveCameraEvent',
      camera: camera
    });
    return true;
  };

  publicAPI.makeCamera = function () {
    var camera = _Camera_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance();
    publicAPI.invokeEvent({
      type: 'CreateCameraEvent',
      camera: camera
    });
    return camera;
  }; // Replace the set/get macro method


  publicAPI.getActiveCamera = function () {
    if (!model.activeCamera) {
      model.activeCamera = publicAPI.makeCamera();
    }

    return model.activeCamera;
  };

  publicAPI.getActiveCameraAndResetIfCreated = function () {
    if (!model.activeCamera) {
      publicAPI.getActiveCamera();
      publicAPI.resetCamera();
    }

    return model.activeCamera;
  };

  publicAPI.getActors = function () {
    model.actors = [];
    model.props.forEach(function (prop) {
      model.actors = model.actors.concat(prop.getActors());
    });
    return model.actors;
  };

  publicAPI.addActor = publicAPI.addViewProp;

  publicAPI.removeActor = function (actor) {
    model.actors = model.actors.filter(function (a) {
      return a !== actor;
    });
    publicAPI.removeViewProp(actor);
    publicAPI.modified();
  };

  publicAPI.removeAllActors = function () {
    var actors = publicAPI.getActors();
    actors.forEach(function (actor) {
      publicAPI.removeViewProp(actor);
    });
    model.actors = [];
    publicAPI.modified();
  };

  publicAPI.getVolumes = function () {
    model.volumes = [];
    model.props.forEach(function (prop) {
      model.volumes = model.volumes.concat(prop.getVolumes());
    });
    return model.volumes;
  };

  publicAPI.addVolume = publicAPI.addViewProp;

  publicAPI.removeVolume = function (volume) {
    model.volumes = model.volumes.filter(function (v) {
      return v !== volume;
    });
    publicAPI.removeViewProp(volume);
    publicAPI.modified();
  };

  publicAPI.removeAllVolumes = function () {
    var volumes = publicAPI.getVolumes();
    volumes.forEach(function (volume) {
      publicAPI.removeViewProp(volume);
    });
    model.volumes = [];
    publicAPI.modified();
  };

  publicAPI.addLight = function (light) {
    model.lights = [].concat(model.lights, light);
    publicAPI.modified();
  };

  publicAPI.removeLight = function (light) {
    model.lights = model.lights.filter(function (l) {
      return l !== light;
    });
    publicAPI.modified();
  };

  publicAPI.removeAllLights = function () {
    model.lights = [];
    publicAPI.modified();
  };

  publicAPI.setLightCollection = function (lights) {
    model.lights = lights;
    publicAPI.modified();
  };

  publicAPI.makeLight = _Light_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance;

  publicAPI.createLight = function () {
    if (!model.automaticLightCreation) {
      return;
    }

    if (model.createdLight) {
      publicAPI.removeLight(model.createdLight);
      model.createdLight.delete();
      model.createdLight = null;
    }

    model.createdLight = publicAPI.makeLight();
    publicAPI.addLight(model.createdLight);
    model.createdLight.setLightTypeToHeadLight(); // set these values just to have a good default should LightFollowCamera
    // be turned off.

    model.createdLight.setPosition(publicAPI.getActiveCamera().getPosition());
    model.createdLight.setFocalPoint(publicAPI.getActiveCamera().getFocalPoint());
  }; // requires the aspect ratio of the viewport as X/Y


  publicAPI.normalizedDisplayToWorld = function (x, y, z, aspect) {
    var vpd = publicAPI.normalizedDisplayToProjection(x, y, z);
    vpd = publicAPI.projectionToView(vpd[0], vpd[1], vpd[2], aspect);
    return publicAPI.viewToWorld(vpd[0], vpd[1], vpd[2]);
  }; // requires the aspect ratio of the viewport as X/Y


  publicAPI.worldToNormalizedDisplay = function (x, y, z, aspect) {
    var vpd = publicAPI.worldToView(x, y, z);
    vpd = publicAPI.viewToProjection(vpd[0], vpd[1], vpd[2], aspect);
    return publicAPI.projectionToNormalizedDisplay(vpd[0], vpd[1], vpd[2]);
  }; // requires the aspect ratio of the viewport as X/Y


  publicAPI.viewToWorld = function (x, y, z) {
    if (model.activeCamera === null) {
      vtkErrorMacro('ViewToWorld: no active camera, cannot compute view to world, returning 0,0,0');
      return [0, 0, 0];
    } // get the view matrix from the active camera


    var matrix = model.activeCamera.getViewMatrix();
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_6__.g)(matrix, matrix);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_6__.j)(matrix, matrix); // Transform point to world coordinates

    var result = new Float64Array([x, y, z]);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.t)(result, result, matrix);
    return result;
  };

  publicAPI.projectionToView = function (x, y, z, aspect) {
    if (model.activeCamera === null) {
      vtkErrorMacro('ProjectionToView: no active camera, cannot compute projection to view, returning 0,0,0');
      return [0, 0, 0];
    } // get the projection transformation from the active camera


    var matrix = model.activeCamera.getProjectionMatrix(aspect, -1.0, 1.0);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_6__.g)(matrix, matrix);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_6__.j)(matrix, matrix); // Transform point to world coordinates

    var result = new Float64Array([x, y, z]);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.t)(result, result, matrix);
    return result;
  }; // Convert world point coordinates to view coordinates.


  publicAPI.worldToView = function (x, y, z) {
    if (model.activeCamera === null) {
      vtkErrorMacro('WorldToView: no active camera, cannot compute view to world, returning 0,0,0');
      return [0, 0, 0];
    } // get the view transformation from the active camera


    var matrix = model.activeCamera.getViewMatrix();
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_6__.j)(matrix, matrix);
    var result = new Float64Array([x, y, z]);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.t)(result, result, matrix);
    return result;
  }; // Convert world point coordinates to view coordinates.
  // requires the aspect ratio of the viewport as X/Y


  publicAPI.viewToProjection = function (x, y, z, aspect) {
    if (model.activeCamera === null) {
      vtkErrorMacro('ViewToProjection: no active camera, cannot compute view to projection, returning 0,0,0');
      return [0, 0, 0];
    } // get the projeciton transformation from the active camera


    var matrix = model.activeCamera.getProjectionMatrix(aspect, -1.0, 1.0);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_6__.j)(matrix, matrix);
    var result = new Float64Array([x, y, z]);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.t)(result, result, matrix);
    return result;
  };

  publicAPI.computeVisiblePropBounds = function () {
    model.allBounds[0] = _Common_DataModel_BoundingBox_js__WEBPACK_IMPORTED_MODULE_5__["default"].INIT_BOUNDS[0];
    model.allBounds[1] = _Common_DataModel_BoundingBox_js__WEBPACK_IMPORTED_MODULE_5__["default"].INIT_BOUNDS[1];
    model.allBounds[2] = _Common_DataModel_BoundingBox_js__WEBPACK_IMPORTED_MODULE_5__["default"].INIT_BOUNDS[2];
    model.allBounds[3] = _Common_DataModel_BoundingBox_js__WEBPACK_IMPORTED_MODULE_5__["default"].INIT_BOUNDS[3];
    model.allBounds[4] = _Common_DataModel_BoundingBox_js__WEBPACK_IMPORTED_MODULE_5__["default"].INIT_BOUNDS[4];
    model.allBounds[5] = _Common_DataModel_BoundingBox_js__WEBPACK_IMPORTED_MODULE_5__["default"].INIT_BOUNDS[5];
    var nothingVisible = true;
    publicAPI.invokeEvent(COMPUTE_VISIBLE_PROP_BOUNDS_EVENT); // loop through all props

    for (var index = 0; index < model.props.length; ++index) {
      var prop = model.props[index];

      if (prop.getVisibility() && prop.getUseBounds()) {
        var bounds = prop.getBounds();

        if (bounds && (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.O)(bounds)) {
          nothingVisible = false;

          if (bounds[0] < model.allBounds[0]) {
            model.allBounds[0] = bounds[0];
          }

          if (bounds[1] > model.allBounds[1]) {
            model.allBounds[1] = bounds[1];
          }

          if (bounds[2] < model.allBounds[2]) {
            model.allBounds[2] = bounds[2];
          }

          if (bounds[3] > model.allBounds[3]) {
            model.allBounds[3] = bounds[3];
          }

          if (bounds[4] < model.allBounds[4]) {
            model.allBounds[4] = bounds[4];
          }

          if (bounds[5] > model.allBounds[5]) {
            model.allBounds[5] = bounds[5];
          }
        }
      }
    }

    if (nothingVisible) {
      (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.u)(model.allBounds);
      vtkDebugMacro("Can't compute bounds, no 3D props are visible");
    }

    return model.allBounds;
  };

  publicAPI.resetCamera = function () {
    var bounds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var boundsToUse = bounds || publicAPI.computeVisiblePropBounds();
    var center = [0, 0, 0];

    if (!(0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.O)(boundsToUse)) {
      vtkDebugMacro('Cannot reset camera!');
      return false;
    }

    var vn = null;

    if (publicAPI.getActiveCamera()) {
      vn = model.activeCamera.getViewPlaneNormal();
    } else {
      vtkErrorMacro('Trying to reset non-existent camera');
      return false;
    } // Reset the perspective zoom factors, otherwise subsequent zooms will cause
    // the view angle to become very small and cause bad depth sorting.


    model.activeCamera.setViewAngle(30.0);
    center[0] = (boundsToUse[0] + boundsToUse[1]) / 2.0;
    center[1] = (boundsToUse[2] + boundsToUse[3]) / 2.0;
    center[2] = (boundsToUse[4] + boundsToUse[5]) / 2.0;
    var w1 = boundsToUse[1] - boundsToUse[0];
    var w2 = boundsToUse[3] - boundsToUse[2];
    var w3 = boundsToUse[5] - boundsToUse[4];
    w1 *= w1;
    w2 *= w2;
    w3 *= w3;
    var radius = w1 + w2 + w3; // If we have just a single point, pick a radius of 1.0

    radius = radius === 0 ? 1.0 : radius; // compute the radius of the enclosing sphere

    radius = Math.sqrt(radius) * 0.5; // default so that the bounding sphere fits within the view fustrum
    // compute the distance from the intersection of the view frustum with the
    // bounding sphere. Basically in 2D draw a circle representing the bounding
    // sphere in 2D then draw a horizontal line going out from the center of
    // the circle. That is the camera view. Then draw a line from the camera
    // position to the point where it intersects the circle. (it will be tangent
    // to the circle at this point, this is important, only go to the tangent
    // point, do not draw all the way to the view plane). Then draw the radius
    // from the tangent point to the center of the circle. You will note that
    // this forms a right triangle with one side being the radius, another being
    // the target distance for the camera, then just find the target dist using
    // a sin.

    var angle = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.r)(model.activeCamera.getViewAngle());
    var parallelScale = radius;
    var distance = radius / Math.sin(angle * 0.5); // check view-up vector against view plane normal

    var vup = model.activeCamera.getViewUp();

    if (Math.abs((0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.d)(vup, vn)) > 0.999) {
      vtkWarningMacro('Resetting view-up since view plane normal is parallel');
      model.activeCamera.setViewUp(-vup[2], vup[0], vup[1]);
    } // update the camera


    model.activeCamera.setFocalPoint(center[0], center[1], center[2]);
    model.activeCamera.setPosition(center[0] + distance * vn[0], center[1] + distance * vn[1], center[2] + distance * vn[2]);
    publicAPI.resetCameraClippingRange(boundsToUse); // setup default parallel scale

    model.activeCamera.setParallelScale(parallelScale); // update reasonable world to physical values

    model.activeCamera.setPhysicalScale(radius);
    model.activeCamera.setPhysicalTranslation(-center[0], -center[1], -center[2]); // Here to let parallel/distributed compositing intercept
    // and do the right thing.

    publicAPI.invokeEvent(RESET_CAMERA_EVENT);
    return true;
  };

  publicAPI.resetCameraClippingRange = function () {
    var bounds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
    var boundsToUse = bounds || publicAPI.computeVisiblePropBounds();

    if (!(0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.O)(boundsToUse)) {
      vtkDebugMacro('Cannot reset camera clipping range!');
      return false;
    } // Make sure we have an active camera


    publicAPI.getActiveCameraAndResetIfCreated();

    if (!model.activeCamera) {
      vtkErrorMacro('Trying to reset clipping range of non-existent camera');
      return false;
    } // Get the exact range for the bounds


    var range = model.activeCamera.computeClippingRange(boundsToUse); // do not let far - near be less than 0.1 of the window height
    // this is for cases such as 2D images which may have zero range

    var minGap = 0.0;

    if (model.activeCamera.getParallelProjection()) {
      minGap = 0.2 * model.activeCamera.getParallelScale();
    } else {
      var angle = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.r)(model.activeCamera.getViewAngle());
      minGap = 0.2 * Math.tan(angle / 2.0) * range[1];
    }

    if (range[1] - range[0] < minGap) {
      minGap = minGap - range[1] + range[0];
      range[1] += minGap / 2.0;
      range[0] -= minGap / 2.0;
    } // Do not let the range behind the camera throw off the calculation.


    if (range[0] < 0.0) {
      range[0] = 0.0;
    } // Give ourselves a little breathing room


    range[0] = 0.99 * range[0] - (range[1] - range[0]) * model.clippingRangeExpansion;
    range[1] = 1.01 * range[1] + (range[1] - range[0]) * model.clippingRangeExpansion; // Make sure near is not bigger than far

    range[0] = range[0] >= range[1] ? 0.01 * range[1] : range[0]; // Make sure near is at least some fraction of far - this prevents near
    // from being behind the camera or too close in front. How close is too
    // close depends on the resolution of the depth buffer

    if (!model.nearClippingPlaneTolerance) {
      model.nearClippingPlaneTolerance = 0.01;
    } // make sure the front clipping range is not too far from the far clippnig
    // range, this is to make sure that the zbuffer resolution is effectively
    // used


    if (range[0] < model.nearClippingPlaneTolerance * range[1]) {
      range[0] = model.nearClippingPlaneTolerance * range[1];
    }

    model.activeCamera.setClippingRange(range[0], range[1]); // Here to let parallel/distributed compositing intercept
    // and do the right thing.

    publicAPI.invokeEvent(RESET_CAMERA_CLIPPING_RANGE_EVENT);
    return false;
  };

  publicAPI.setRenderWindow = function (renderWindow) {
    if (renderWindow !== model.renderWindow) {
      model.vtkWindow = renderWindow;
      model.renderWindow = renderWindow;
    }
  };

  publicAPI.visibleActorCount = function () {
    return model.props.filter(function (prop) {
      return prop.getVisibility();
    }).length;
  };

  publicAPI.visibleVolumeCount = publicAPI.visibleActorCount;

  publicAPI.getMTime = function () {
    var m1 = model.mtime;
    var m2 = model.activeCamera ? model.activeCamera.getMTime() : 0;

    if (m2 > m1) {
      m1 = m2;
    }

    var m3 = model.createdLight ? model.createdLight.getMTime() : 0;

    if (m3 > m1) {
      m1 = m3;
    }

    return m1;
  };

  publicAPI.getTransparent = function () {
    return !!model.preserveColorBuffer;
  };

  publicAPI.isActiveCameraCreated = function () {
    return !!model.activeCamera;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  pickedProp: null,
  activeCamera: null,
  allBounds: [],
  ambient: [1, 1, 1],
  allocatedRenderTime: 100,
  timeFactor: 1,
  createdLight: null,
  automaticLightCreation: true,
  twoSidedLighting: true,
  lastRenderTimeInSeconds: -1,
  renderWindow: null,
  lights: [],
  actors: [],
  volumes: [],
  lightFollowCamera: true,
  numberOfPropsRendered: 0,
  propArray: null,
  pathArray: null,
  layer: 0,
  preserveColorBuffer: false,
  preserveDepthBuffer: false,
  computeVisiblePropBounds: (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_3__.M)(),
  interactive: true,
  nearClippingPlaneTolerance: 0,
  clippingRangeExpansion: 0.05,
  erase: true,
  draw: true,
  useShadows: false,
  useDepthPeeling: false,
  occlusionRatio: 0,
  maximumNumberOfPeels: 4,
  selector: null,
  delegate: null,
  texturedBackground: false,
  backgroundTexture: null,
  pass: 0
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _Viewport_js__WEBPACK_IMPORTED_MODULE_4__["default"].extend(publicAPI, model, initialValues); // Build VTK API

  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.get)(publicAPI, model, ['renderWindow', 'allocatedRenderTime', 'timeFactor', 'lastRenderTimeInSeconds', 'numberOfPropsRendered', 'lastRenderingUsedDepthPeeling', 'selector']);
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.setGet)(publicAPI, model, ['twoSidedLighting', 'lightFollowCamera', 'automaticLightCreation', 'erase', 'draw', 'nearClippingPlaneTolerance', 'clippingRangeExpansion', 'backingStore', 'interactive', 'layer', 'preserveColorBuffer', 'preserveDepthBuffer', 'useDepthPeeling', 'occlusionRatio', 'maximumNumberOfPeels', 'delegate', 'backgroundTexture', 'texturedBackground', 'useShadows', 'pass']);
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.getArray)(publicAPI, model, ['actors', 'volumes', 'lights']);
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.setGetArray)(publicAPI, model, ['background'], 4, 1.0); // Object methods

  vtkRenderer(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.newInstance)(extend, 'vtkRenderer'); // ----------------------------------------------------------------------------

var vtkRenderer$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/Texture.js":
/*!****************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/Texture.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkTexture$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");


// vtkTexture methods
// ----------------------------------------------------------------------------

function vtkTexture(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkTexture');

  publicAPI.imageLoaded = function () {
    model.image.removeEventListener('load', publicAPI.imageLoaded);
    model.imageLoaded = true;
    publicAPI.modified();
  };

  publicAPI.setImage = function (image) {
    if (model.image === image) {
      return;
    }

    if (image !== null) {
      publicAPI.setInputData(null);
      publicAPI.setInputConnection(null);
    }

    model.image = image;
    model.imageLoaded = false;

    if (image.complete) {
      publicAPI.imageLoaded();
    } else {
      image.addEventListener('load', publicAPI.imageLoaded);
    }

    publicAPI.modified();
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  repeat: false,
  interpolate: false,
  edgeClamp: false,
  image: null,
  imageLoaded: false
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].algo(publicAPI, model, 6, 0);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].get(publicAPI, model, ['imageLoaded']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['repeat', 'edgeClamp', 'interpolate', 'image']);
  vtkTexture(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkTexture'); // ----------------------------------------------------------------------------

var vtkTexture$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/Viewport.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/Viewport.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkViewport$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");


var vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].vtkErrorMacro;

function notImplemented(method) {
  return function () {
    return vtkErrorMacro("vtkViewport::".concat(method, " - NOT IMPLEMENTED"));
  };
} // ----------------------------------------------------------------------------
// vtkViewport methods
// ----------------------------------------------------------------------------


function vtkViewport(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkViewport'); // Public API methods

  publicAPI.getViewProps = function () {
    return model.props;
  };

  publicAPI.hasViewProp = function (prop) {
    return !!model.props.filter(function (item) {
      return item === prop;
    }).length;
  };

  publicAPI.addViewProp = function (prop) {
    if (prop && !publicAPI.hasViewProp(prop)) {
      model.props = model.props.concat(prop);
    }
  };

  publicAPI.removeViewProp = function (prop) {
    var newPropList = model.props.filter(function (item) {
      return item !== prop;
    });

    if (model.props.length !== newPropList.length) {
      model.props = newPropList;
    }
  };

  publicAPI.removeAllViewProps = function () {
    model.props = [];
  }; // this method get all the props including any nested props


  function gatherProps(prop) {
    var allProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    allProps.push(prop);
    var children = prop.getNestedProps();

    if (children && children.length) {
      for (var i = 0; i < children.length; i++) {
        gatherProps(children[i], allProps);
      }
    }

    return allProps;
  }

  publicAPI.getViewPropsWithNestedProps = function () {
    var allPropsArray = [];

    for (var i = 0; i < model.props.length; i++) {
      gatherProps(model.props[i], allPropsArray);
    }

    return allPropsArray;
  };

  publicAPI.addActor2D = publicAPI.addViewProp;

  publicAPI.removeActor2D = function (prop) {
    // VTK way: model.actors2D.RemoveItem(prop);
    publicAPI.removeViewProp(prop);
  };

  publicAPI.getActors2D = function () {
    model.actors2D = [];
    model.props.forEach(function (prop) {
      model.actors2D = model.actors2D.concat(prop.getActors2D());
    });
    return model.actors2D;
  };

  publicAPI.displayToView = function () {
    return vtkErrorMacro('call displayToView on your view instead');
  };

  publicAPI.viewToDisplay = function () {
    return vtkErrorMacro('callviewtodisplay on your view instead');
  };

  publicAPI.getSize = function () {
    return vtkErrorMacro('call getSize on your View instead');
  };

  publicAPI.normalizedDisplayToProjection = function (x, y, z) {
    // first to normalized viewport
    var nvp = publicAPI.normalizedDisplayToNormalizedViewport(x, y, z); // then to view

    return publicAPI.normalizedViewportToProjection(nvp[0], nvp[1], nvp[2]);
  };

  publicAPI.normalizedDisplayToNormalizedViewport = function (x, y, z) {
    var scale = [model.viewport[2] - model.viewport[0], model.viewport[3] - model.viewport[1]];
    return [(x - model.viewport[0]) / scale[0], (y - model.viewport[1]) / scale[1], z];
  };

  publicAPI.normalizedViewportToProjection = function (x, y, z) {
    return [x * 2.0 - 1.0, y * 2.0 - 1.0, z * 2.0 - 1.0];
  };

  publicAPI.projectionToNormalizedDisplay = function (x, y, z) {
    // first to nvp
    var nvp = publicAPI.projectionToNormalizedViewport(x, y, z); // then to ndp

    return publicAPI.normalizedViewportToNormalizedDisplay(nvp[0], nvp[1], nvp[2]);
  };

  publicAPI.normalizedViewportToNormalizedDisplay = function (x, y, z) {
    var scale = [model.viewport[2] - model.viewport[0], model.viewport[3] - model.viewport[1]];
    return [x * scale[0] + model.viewport[0], y * scale[1] + model.viewport[1], z];
  };

  publicAPI.projectionToNormalizedViewport = function (x, y, z) {
    return [(x + 1.0) * 0.5, (y + 1.0) * 0.5, (z + 1.0) * 0.5];
  };

  publicAPI.PickPropFrom = notImplemented('PickPropFrom');
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  vtkWindow: null,
  background: [0, 0, 0],
  background2: [0.2, 0.2, 0.2],
  gradientBackground: false,
  viewport: [0, 0, 1, 1],
  aspect: [1, 1],
  pixelAspect: [1, 1],
  props: [],
  actors2D: []
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].event(publicAPI, model, 'event');
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGetArray(publicAPI, model, ['viewport'], 4);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGetArray(publicAPI, model, ['background', 'background2'], 3);
  vtkViewport(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkViewport'); // ----------------------------------------------------------------------------

var vtkViewport$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/VolumeMapper/Constants.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/VolumeMapper/Constants.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BlendMode": () => (/* binding */ BlendMode),
/* harmony export */   "FilterMode": () => (/* binding */ FilterMode),
/* harmony export */   "default": () => (/* binding */ Constants)
/* harmony export */ });
var BlendMode = {
  COMPOSITE_BLEND: 0,
  MAXIMUM_INTENSITY_BLEND: 1,
  MINIMUM_INTENSITY_BLEND: 2,
  AVERAGE_INTENSITY_BLEND: 3,
  ADDITIVE_INTENSITY_BLEND: 4
};
var FilterMode = {
  OFF: 0,
  NORMALIZED: 1,
  RAW: 2
};
var Constants = {
  BlendMode: BlendMode,
  FilterMode: FilterMode
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Core/VolumeProperty/Constants.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Core/VolumeProperty/Constants.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "InterpolationType": () => (/* binding */ InterpolationType),
/* harmony export */   "OpacityMode": () => (/* binding */ OpacityMode),
/* harmony export */   "default": () => (/* binding */ Constants)
/* harmony export */ });
var InterpolationType = {
  NEAREST: 0,
  LINEAR: 1,
  FAST_LINEAR: 2
};
var OpacityMode = {
  FRACTIONAL: 0,
  PROPORTIONAL: 1
};
var Constants = {
  InterpolationType: InterpolationType,
  OpacityMode: OpacityMode
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Misc/GenericRenderWindow.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Misc/GenericRenderWindow.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkGenericRenderWindow$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _OpenGL_RenderWindow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../OpenGL/RenderWindow.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/RenderWindow.js");
/* harmony import */ var _Core_Renderer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Core/Renderer.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Renderer.js");
/* harmony import */ var _Core_RenderWindow_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Core/RenderWindow.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/RenderWindow.js");
/* harmony import */ var _Core_RenderWindowInteractor_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Core/RenderWindowInteractor.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/RenderWindowInteractor.js");
/* harmony import */ var _Interaction_Style_InteractorStyleTrackballCamera_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../Interaction/Style/InteractorStyleTrackballCamera.js */ "./node_modules/@kitware/vtk.js/Interaction/Style/InteractorStyleTrackballCamera.js");
/* harmony import */ var _Common_Core_Points_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Common/Core/Points.js */ "./node_modules/@kitware/vtk.js/Common/Core/Points.js");
/* harmony import */ var _Common_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Common/Core/DataArray.js */ "./node_modules/@kitware/vtk.js/Common/Core/DataArray.js");
/* harmony import */ var _Common_DataModel_PolyData_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../Common/DataModel/PolyData.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/PolyData.js");
/* harmony import */ var _Core_Actor_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../Core/Actor.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Actor.js");
/* harmony import */ var _Core_Mapper_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../Core/Mapper.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Mapper.js");













function vtkGenericRenderWindow(publicAPI, model) {
  // Capture resize trigger method to remove from publicAPI
  var invokeResize = publicAPI.invokeResize;
  delete publicAPI.invokeResize; // VTK renderWindow/renderer

  model.renderWindow = _Core_RenderWindow_js__WEBPACK_IMPORTED_MODULE_4__["default"].newInstance();
  model.renderer = _Core_Renderer_js__WEBPACK_IMPORTED_MODULE_3__["default"].newInstance();
  model.renderWindow.addRenderer(model.renderer); // OpenGLRenderWindow

  model.openGLRenderWindow = _OpenGL_RenderWindow_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance();
  model.renderWindow.addView(model.openGLRenderWindow); // Interactor

  model.interactor = _Core_RenderWindowInteractor_js__WEBPACK_IMPORTED_MODULE_5__["default"].newInstance();
  model.interactor.setInteractorStyle(_Interaction_Style_InteractorStyleTrackballCamera_js__WEBPACK_IMPORTED_MODULE_6__["default"].newInstance());
  model.interactor.setView(model.openGLRenderWindow);
  model.interactor.initialize(); // Expose background

  publicAPI.setBackground = model.renderer.setBackground; // Update BG color

  publicAPI.setBackground.apply(publicAPI, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(model.background)); // Handle window resize

  publicAPI.resize = function () {
    if (model.container) {
      var dims = model.container.getBoundingClientRect();
      var devicePixelRatio = window.devicePixelRatio || 1;
      model.openGLRenderWindow.setSize(Math.floor(dims.width * devicePixelRatio), Math.floor(dims.height * devicePixelRatio));
      invokeResize();
      model.renderWindow.render();
    }
  }; // Handle DOM container relocation


  publicAPI.setContainer = function (el) {
    if (model.container) {
      model.interactor.unbindEvents(model.container);
    } // Switch container


    model.container = el;
    model.openGLRenderWindow.setContainer(model.container); // Bind to new container

    if (model.container) {
      model.interactor.bindEvents(model.container);
    }
  }; // Properly release GL context


  publicAPI.delete = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].chain(publicAPI.setContainer, model.openGLRenderWindow.delete, publicAPI.delete); // Handle size

  if (model.listenWindowResize) {
    window.addEventListener('resize', publicAPI.resize);
  }

  publicAPI.resize();
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  background: [0.32, 0.34, 0.43],
  listenWindowResize: true,
  container: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods

  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].get(publicAPI, model, ['renderWindow', 'renderer', 'openGLRenderWindow', 'interactor', 'container']);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].event(publicAPI, model, 'resize'); // Object specific methods

  vtkGenericRenderWindow(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend); // ----------------------------------------------------------------------------

var vtkGenericRenderWindow$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Actor.js":
/*!****************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/Actor.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkActor),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../SceneGraph/ViewNode.js */ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/ViewNode.js");
/* harmony import */ var _ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ViewNodeFactory.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ViewNodeFactory.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat3_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat3.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat3.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js");






// vtkOpenGLActor methods
// ----------------------------------------------------------------------------

function vtkOpenGLActor(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkOpenGLActor'); // Builds myself.

  publicAPI.buildPass = function (prepass) {
    if (prepass) {
      model.openGLRenderWindow = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderWindow');
      model.openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');
      model.context = model.openGLRenderWindow.getContext();
      publicAPI.prepareNodes();
      publicAPI.addMissingNodes(model.renderable.getTextures());
      publicAPI.addMissingNode(model.renderable.getMapper());
      publicAPI.removeUnusedNodes(); // we store textures and mapper

      model.ogltextures = null;
      model.activeTextures = null;

      for (var index = 0; index < model.children.length; index++) {
        var child = model.children[index];

        if (child.isA('vtkOpenGLTexture')) {
          if (!model.ogltextures) {
            model.ogltextures = [];
          }

          model.ogltextures.push(child);
        } else {
          model.oglmapper = child;
        }
      }
    }
  };

  publicAPI.traverseOpaqueZBufferPass = function (renderPass) {
    publicAPI.traverseOpaquePass(renderPass);
  }; // we draw textures, then mapper, then post pass textures


  publicAPI.traverseOpaquePass = function (renderPass) {
    if (!model.renderable || !model.renderable.getNestedVisibility() || !model.renderable.getIsOpaque() || model.openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {
      return;
    }

    publicAPI.apply(renderPass, true);
    model.oglmapper.traverse(renderPass);
    publicAPI.apply(renderPass, false);
  }; // we draw textures, then mapper, then post pass textures


  publicAPI.traverseTranslucentPass = function (renderPass) {
    if (!model.renderable || !model.renderable.getNestedVisibility() || model.renderable.getIsOpaque() || model.openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {
      return;
    }

    publicAPI.apply(renderPass, true);
    model.oglmapper.traverse(renderPass);
    publicAPI.apply(renderPass, false);
  };

  publicAPI.activateTextures = function () {
    // always traverse textures first, then mapper
    if (!model.ogltextures) {
      return;
    }

    model.activeTextures = [];

    for (var index = 0; index < model.ogltextures.length; index++) {
      var child = model.ogltextures[index];
      child.render();

      if (child.getHandle()) {
        model.activeTextures.push(child);
      }
    }
  };

  publicAPI.queryPass = function (prepass, renderPass) {
    if (prepass) {
      if (!model.renderable || !model.renderable.getVisibility()) {
        return;
      }

      if (model.renderable.getIsOpaque()) {
        renderPass.incrementOpaqueActorCount();
      } else {
        renderPass.incrementTranslucentActorCount();
      }
    }
  };

  publicAPI.opaqueZBufferPass = function (prepass, renderPass) {
    return publicAPI.opaquePass(prepass, renderPass);
  };

  publicAPI.opaquePass = function (prepass, renderPass) {
    if (prepass) {
      model.openGLRenderWindow.enableDepthMask();
      publicAPI.activateTextures();
    } else if (model.activeTextures) {
      for (var index = 0; index < model.activeTextures.length; index++) {
        model.activeTextures[index].deactivate();
      }
    }
  }; // Renders myself


  publicAPI.translucentPass = function (prepass, renderPass) {
    if (prepass) {
      model.openGLRenderWindow.disableDepthMask();
      publicAPI.activateTextures();
    } else if (model.activeTextures) {
      for (var index = 0; index < model.activeTextures.length; index++) {
        model.activeTextures[index].deactivate();
      }
    }
  };

  publicAPI.getKeyMatrices = function () {
    // has the actor changed?
    if (model.renderable.getMTime() > model.keyMatrixTime.getMTime()) {
      model.renderable.computeMatrix();
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.d)(model.keyMatrices.mcwc, model.renderable.getMatrix());
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.j)(model.keyMatrices.mcwc, model.keyMatrices.mcwc);

      if (model.renderable.getIsIdentity()) {
        (0,_vendor_gl_matrix_esm_mat3_js__WEBPACK_IMPORTED_MODULE_3__.i)(model.keyMatrices.normalMatrix);
      } else {
        (0,_vendor_gl_matrix_esm_mat3_js__WEBPACK_IMPORTED_MODULE_3__.f)(model.keyMatrices.normalMatrix, model.keyMatrices.mcwc);
        (0,_vendor_gl_matrix_esm_mat3_js__WEBPACK_IMPORTED_MODULE_3__.a)(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);
        (0,_vendor_gl_matrix_esm_mat3_js__WEBPACK_IMPORTED_MODULE_3__.t)(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);
      }

      model.keyMatrixTime.modified();
    }

    return model.keyMatrices;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  context: null,
  keyMatrixTime: null,
  keyMatrices: null,
  activeTextures: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues);
  model.keyMatrixTime = {};
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.obj)(model.keyMatrixTime, {
    mtime: 0
  });
  model.keyMatrices = {
    normalMatrix: (0,_vendor_gl_matrix_esm_mat3_js__WEBPACK_IMPORTED_MODULE_3__.i)(new Float64Array(9)),
    mcwc: (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_4__.i)(new Float64Array(16))
  }; // Build VTK API

  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.setGet)(publicAPI, model, ['context']);
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.get)(publicAPI, model, ['activeTextures']); // Object methods

  vtkOpenGLActor(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.newInstance)(extend); // ----------------------------------------------------------------------------

var vtkActor = {
  newInstance: newInstance,
  extend: extend
}; // Register ourself to OpenGL backend if imported

(0,_ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_2__.registerOverride)('vtkActor', newInstance);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Actor2D.js":
/*!******************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/Actor2D.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkActor2D),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../SceneGraph/ViewNode.js */ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/ViewNode.js");
/* harmony import */ var _ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ViewNodeFactory.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ViewNodeFactory.js");




// vtkOpenGLActor methods
// ----------------------------------------------------------------------------

function vtkOpenGLActor2D(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkOpenGLActor2D'); // Builds myself.

  publicAPI.buildPass = function (prepass) {
    if (prepass) {
      if (!model.renderable) {
        return;
      }

      model.openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');
      publicAPI.prepareNodes();
      publicAPI.addMissingNodes(model.renderable.getTextures());
      publicAPI.addMissingNode(model.renderable.getMapper());
      publicAPI.removeUnusedNodes();
    }
  }; // we draw textures, then mapper, then post pass textures


  publicAPI.traverseOpaquePass = function (renderPass) {
    if (!model.renderable || !model.renderable.getNestedVisibility() || !model.renderable.getIsOpaque() || model.openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {
      return;
    }

    publicAPI.apply(renderPass, true);
    model.children.forEach(function (child) {
      if (!child.isA('vtkOpenGLTexture')) {
        child.traverse(renderPass);
      }
    });
    publicAPI.apply(renderPass, false);
  }; // we draw textures, then mapper, then post pass textures


  publicAPI.traverseTranslucentPass = function (renderPass) {
    if (!model.renderable || !model.renderable.getNestedVisibility() || model.renderable.getIsOpaque() || model.openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {
      return;
    }

    publicAPI.apply(renderPass, true);
    model.children.forEach(function (child) {
      if (!child.isA('vtkOpenGLTexture')) {
        child.traverse(renderPass);
      }
    });
    publicAPI.apply(renderPass, false);
  };

  publicAPI.activateTextures = function () {
    // always traverse textures first, then mapper
    model.activeTextures = [];
    model.children.forEach(function (child) {
      if (child.isA('vtkOpenGLTexture')) {
        child.render();

        if (child.getHandle()) {
          model.activeTextures.push(child);
        }
      }
    });
  }; // Renders myself


  publicAPI.opaquePass = function (prepass, renderPass) {
    if (prepass) {
      model.context = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderWindow').getContext();
      model.context.depthMask(true);
      publicAPI.activateTextures();
    } else {
      // deactivate textures
      model.activeTextures.forEach(function (child) {
        child.deactivate();
      });
    }
  }; // Renders myself


  publicAPI.translucentPass = function (prepass, renderPass) {
    if (prepass) {
      model.context = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderWindow').getContext();
      model.context.depthMask(false);
      publicAPI.activateTextures();
    } else {
      // deactivate textures
      model.activeTextures.forEach(function (child) {
        child.deactivate();
      });
      model.context.depthMask(true);
    }
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  context: null,
  activeTextures: []
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues); // Build VTK API

  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.setGet)(publicAPI, model, ['context']);
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.get)(publicAPI, model, ['activeTextures']); // Object methods

  vtkOpenGLActor2D(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.newInstance)(extend); // ----------------------------------------------------------------------------

var vtkActor2D = {
  newInstance: newInstance,
  extend: extend
}; // Register ourself to OpenGL backend if imported

(0,_ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_2__.registerOverride)('vtkActor2D', newInstance);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/BufferObject.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/BufferObject.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "STATIC": () => (/* binding */ STATIC),
/* harmony export */   "default": () => (/* binding */ vtkBufferObject),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _BufferObject_Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BufferObject/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/BufferObject/Constants.js");




function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var ObjectType = _BufferObject_Constants_js__WEBPACK_IMPORTED_MODULE_2__["default"].ObjectType; // ----------------------------------------------------------------------------
// Global methods
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// Static API
// ----------------------------------------------------------------------------

var STATIC = {}; // ----------------------------------------------------------------------------
// vtkOpenGLBufferObject methods
// ----------------------------------------------------------------------------

function vtkOpenGLBufferObject(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkOpenGLBufferObject'); // Class-specific private functions

  function convertType(type) {
    switch (type) {
      case ObjectType.ELEMENT_ARRAY_BUFFER:
        return model.context.ELEMENT_ARRAY_BUFFER;

      case ObjectType.TEXTURE_BUFFER:
        if ('TEXTURE_BUFFER' in model.context) {
          return model.context.TEXTURE_BUFFER;
        }

      /* eslint-disable no-fallthrough */
      // Intentional fallthrough in case there is no TEXTURE_BUFFER in WebGL

      default:
      /* eslint-enable no-fallthrough */

      case ObjectType.ARRAY_BUFFER:
        return model.context.ARRAY_BUFFER;
    }
  }

  var internalType = null;
  var internalHandle = null;
  var dirty = true;
  var error = ''; // Public API methods

  publicAPI.getType = function () {
    return internalType;
  };

  publicAPI.setType = function (value) {
    internalType = value;
  };

  publicAPI.getHandle = function () {
    return internalHandle;
  };

  publicAPI.isReady = function () {
    return dirty === false;
  };

  publicAPI.generateBuffer = function (type) {
    var objectTypeGL = convertType(type);

    if (internalHandle === null) {
      internalHandle = model.context.createBuffer();
      internalType = type;
    }

    return convertType(internalType) === objectTypeGL;
  };

  publicAPI.upload = function (data, type) {
    // buffer, size, type
    var alreadyGenerated = publicAPI.generateBuffer(type);

    if (!alreadyGenerated) {
      error = 'Trying to upload array buffer to incompatible buffer.';
      return false;
    }

    model.context.bindBuffer(convertType(internalType), internalHandle);
    model.context.bufferData(convertType(internalType), data, model.context.STATIC_DRAW);
    dirty = false;
    return true;
  };

  publicAPI.bind = function () {
    if (!internalHandle) {
      return false;
    }

    model.context.bindBuffer(convertType(internalType), internalHandle);
    return true;
  };

  publicAPI.release = function () {
    if (!internalHandle) {
      return false;
    }

    model.context.bindBuffer(convertType(internalType), null);
    return true;
  };

  publicAPI.releaseGraphicsResources = function () {
    if (internalHandle !== null) {
      model.context.bindBuffer(convertType(internalType), null);
      model.context.deleteBuffer(internalHandle);
      internalHandle = null;
    }
  };

  publicAPI.setOpenGLRenderWindow = function (rw) {
    if (model.openGLRenderWindow === rw) {
      return;
    }

    publicAPI.releaseGraphicsResources();
    model.openGLRenderWindow = rw;
    model.context = null;

    if (rw) {
      model.context = model.openGLRenderWindow.getContext();
    }
  };

  publicAPI.getError = function () {
    return error;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  objectType: ObjectType.ARRAY_BUFFER,
  openGLRenderWindow: null,
  context: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods

  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].get(publicAPI, model, ['openGLRenderWindow']);
  vtkOpenGLBufferObject(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend); // ----------------------------------------------------------------------------

var vtkBufferObject = _objectSpread(_objectSpread({
  newInstance: newInstance,
  extend: extend
}, STATIC), _BufferObject_Constants_js__WEBPACK_IMPORTED_MODULE_2__["default"]);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/BufferObject/Constants.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/BufferObject/Constants.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ObjectType": () => (/* binding */ ObjectType),
/* harmony export */   "default": () => (/* binding */ Constants)
/* harmony export */ });
var ObjectType = {
  ARRAY_BUFFER: 0,
  ELEMENT_ARRAY_BUFFER: 1,
  TEXTURE_BUFFER: 2
};
var Constants = {
  ObjectType: ObjectType
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Camera.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/Camera.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkCamera),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../SceneGraph/ViewNode.js */ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/ViewNode.js");
/* harmony import */ var _ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ViewNodeFactory.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ViewNodeFactory.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat3_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat3.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat3.js");






// vtkOpenGLCamera methods
// ----------------------------------------------------------------------------

function vtkOpenGLCamera(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkOpenGLCamera');

  publicAPI.buildPass = function (prepass) {
    if (prepass) {
      model.openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');
      model.openGLRenderWindow = model.openGLRenderer.getParent();
      model.context = model.openGLRenderWindow.getContext();
    }
  }; // Renders myself


  publicAPI.opaquePass = function (prepass) {
    if (prepass) {
      var tsize = model.openGLRenderer.getTiledSizeAndOrigin();
      model.context.viewport(tsize.lowerLeftU, tsize.lowerLeftV, tsize.usize, tsize.vsize);
      model.context.scissor(tsize.lowerLeftU, tsize.lowerLeftV, tsize.usize, tsize.vsize);
    }
  };

  publicAPI.translucentPass = publicAPI.opaquePass;
  publicAPI.opaqueZBufferPass = publicAPI.opaquePass;
  publicAPI.volumePass = publicAPI.opaquePass;

  publicAPI.getKeyMatrices = function (ren) {
    // has the camera changed?
    if (ren !== model.lastRenderer || model.openGLRenderWindow.getMTime() > model.keyMatrixTime.getMTime() || publicAPI.getMTime() > model.keyMatrixTime.getMTime() || ren.getMTime() > model.keyMatrixTime.getMTime() || model.renderable.getMTime() > model.keyMatrixTime.getMTime()) {
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.d)(model.keyMatrices.wcvc, model.renderable.getViewMatrix());
      (0,_vendor_gl_matrix_esm_mat3_js__WEBPACK_IMPORTED_MODULE_4__.f)(model.keyMatrices.normalMatrix, model.keyMatrices.wcvc);
      (0,_vendor_gl_matrix_esm_mat3_js__WEBPACK_IMPORTED_MODULE_4__.a)(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.j)(model.keyMatrices.wcvc, model.keyMatrices.wcvc);
      var aspectRatio = model.openGLRenderer.getAspectRatio();
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.d)(model.keyMatrices.vcpc, model.renderable.getProjectionMatrix(aspectRatio, -1, 1));
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.j)(model.keyMatrices.vcpc, model.keyMatrices.vcpc);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.m)(model.keyMatrices.wcpc, model.keyMatrices.vcpc, model.keyMatrices.wcvc);
      model.keyMatrixTime.modified();
      model.lastRenderer = ren;
    }

    return model.keyMatrices;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  context: null,
  lastRenderer: null,
  keyMatrixTime: null,
  keyMatrices: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues);
  model.keyMatrixTime = {};
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.obj)(model.keyMatrixTime); // values always get set by the get method

  model.keyMatrices = {
    normalMatrix: new Float64Array(9),
    vcpc: new Float64Array(16),
    wcvc: new Float64Array(16),
    wcpc: new Float64Array(16)
  }; // Build VTK API

  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.setGet)(publicAPI, model, ['context', 'keyMatrixTime']); // Object methods

  vtkOpenGLCamera(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.newInstance)(extend); // ----------------------------------------------------------------------------

var vtkCamera = {
  newInstance: newInstance,
  extend: extend
}; // Register ourself to OpenGL backend if imported

(0,_ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_2__.registerOverride)('vtkCamera', newInstance);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/CellArrayBufferObject.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/CellArrayBufferObject.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkCellArrayBufferObject),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _BufferObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BufferObject.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/BufferObject.js");
/* harmony import */ var _BufferObject_Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BufferObject/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/BufferObject/Constants.js");
/* harmony import */ var _Core_Property_Constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Core/Property/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Property/Constants.js");
/* harmony import */ var _vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/vec3.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/vec3.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js");
/* harmony import */ var _vendor_gl_matrix_esm_quat_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/quat.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/quat.js");








var vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].vtkErrorMacro; // ----------------------------------------------------------------------------
// Static functions
// ----------------------------------------------------------------------------

function computeInverseShiftAndScaleMatrix(coordShift, coordScale) {
  var inverseScale = new Float64Array(3);
  (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_4__.m)(inverseScale, coordScale);
  var matrix = new Float64Array(16);
  (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_5__.p)(matrix, (0,_vendor_gl_matrix_esm_quat_js__WEBPACK_IMPORTED_MODULE_6__.c)(), coordShift, inverseScale);
  return matrix;
}

function shouldApplyCoordShiftAndScale(coordShift, coordScale) {
  if (coordShift === null || coordScale === null) {
    return false;
  }

  return !((0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_4__.g)(coordShift, [0, 0, 0]) && (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_4__.g)(coordScale, [1, 1, 1]));
} // ----------------------------------------------------------------------------
// vtkOpenGLCellArrayBufferObject methods
// ----------------------------------------------------------------------------


function vtkOpenGLCellArrayBufferObject(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkOpenGLCellArrayBufferObject');
  publicAPI.setType(_BufferObject_Constants_js__WEBPACK_IMPORTED_MODULE_2__.ObjectType.ARRAY_BUFFER);

  publicAPI.createVBO = function (cellArray, inRep, outRep, options) {
    if (!cellArray.getData() || !cellArray.getData().length) {
      model.elementCount = 0;
      return 0;
    } // Figure out how big each block will be, currently 6 or 7 floats.


    model.blockSize = 3;
    model.vertexOffset = 0;
    model.normalOffset = 0;
    model.tCoordOffset = 0;
    model.tCoordComponents = 0;
    model.colorComponents = 0;
    model.colorOffset = 0;
    model.customData = [];
    var pointData = options.points.getData();
    var normalData = null;
    var tcoordData = null;
    var colorData = null;
    var colorComponents = options.colors ? options.colors.getNumberOfComponents() : 0;
    var textureComponents = options.tcoords ? options.tcoords.getNumberOfComponents() : 0; // the values of 4 below are because floats are 4 bytes

    if (options.normals) {
      model.normalOffset = 4 * model.blockSize;
      model.blockSize += 3;
      normalData = options.normals.getData();
    }

    if (options.customAttributes) {
      options.customAttributes.forEach(function (a) {
        if (a) {
          model.customData.push({
            data: a.getData(),
            offset: 4 * model.blockSize,
            components: a.getNumberOfComponents(),
            name: a.getName()
          });
          model.blockSize += a.getNumberOfComponents();
        }
      });
    }

    if (options.tcoords) {
      model.tCoordOffset = 4 * model.blockSize;
      model.tCoordComponents = textureComponents;
      model.blockSize += textureComponents;
      tcoordData = options.tcoords.getData();
    }

    if (options.colors) {
      model.colorComponents = options.colors.getNumberOfComponents();
      model.colorOffset = 0;
      colorData = options.colors.getData();

      if (!model.colorBO) {
        model.colorBO = _BufferObject_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance();
      }

      model.colorBO.setOpenGLRenderWindow(model.openGLRenderWindow);
    } else {
      model.colorBO = null;
    }

    model.stride = 4 * model.blockSize;
    var pointIdx = 0;
    var normalIdx = 0;
    var tcoordIdx = 0;
    var colorIdx = 0;
    var custIdx = 0;
    var cellCount = 0;
    var addAPoint;
    var cellBuilders = {
      // easy, every input point becomes an output point
      anythingToPoints: function anythingToPoints(numPoints, cellPts, offset) {
        for (var i = 0; i < numPoints; ++i) {
          addAPoint(cellPts[offset + i]);
        }
      },
      linesToWireframe: function linesToWireframe(numPoints, cellPts, offset) {
        // for lines we add a bunch of segments
        for (var i = 0; i < numPoints - 1; ++i) {
          addAPoint(cellPts[offset + i]);
          addAPoint(cellPts[offset + i + 1]);
        }
      },
      polysToWireframe: function polysToWireframe(numPoints, cellPts, offset) {
        // for polys we add a bunch of segments and close it
        if (numPoints > 2) {
          for (var i = 0; i < numPoints; ++i) {
            addAPoint(cellPts[offset + i]);
            addAPoint(cellPts[offset + (i + 1) % numPoints]);
          }
        }
      },
      stripsToWireframe: function stripsToWireframe(numPoints, cellPts, offset) {
        if (numPoints > 2) {
          // for strips we add a bunch of segments and close it
          for (var i = 0; i < numPoints - 1; ++i) {
            addAPoint(cellPts[offset + i]);
            addAPoint(cellPts[offset + i + 1]);
          }

          for (var _i = 0; _i < numPoints - 2; _i++) {
            addAPoint(cellPts[offset + _i]);
            addAPoint(cellPts[offset + _i + 2]);
          }
        }
      },
      polysToSurface: function polysToSurface(npts, cellPts, offset) {
        for (var i = 0; i < npts - 2; i++) {
          addAPoint(cellPts[offset + 0]);
          addAPoint(cellPts[offset + i + 1]);
          addAPoint(cellPts[offset + i + 2]);
        }
      },
      stripsToSurface: function stripsToSurface(npts, cellPts, offset) {
        for (var i = 0; i < npts - 2; i++) {
          addAPoint(cellPts[offset + i]);
          addAPoint(cellPts[offset + i + 1 + i % 2]);
          addAPoint(cellPts[offset + i + 1 + (i + 1) % 2]);
        }
      }
    };
    var cellCounters = {
      // easy, every input point becomes an output point
      anythingToPoints: function anythingToPoints(numPoints, cellPts) {
        return numPoints;
      },
      linesToWireframe: function linesToWireframe(numPoints, cellPts) {
        if (numPoints > 1) {
          return (numPoints - 1) * 2;
        }

        return 0;
      },
      polysToWireframe: function polysToWireframe(numPoints, cellPts) {
        if (numPoints > 2) {
          return numPoints * 2;
        }

        return 0;
      },
      stripsToWireframe: function stripsToWireframe(numPoints, cellPts) {
        if (numPoints > 2) {
          return numPoints * 4 - 6;
        }

        return 0;
      },
      polysToSurface: function polysToSurface(npts, cellPts) {
        if (npts > 2) {
          return (npts - 2) * 3;
        }

        return 0;
      },
      stripsToSurface: function stripsToSurface(npts, cellPts, offset) {
        if (npts > 2) {
          return (npts - 2) * 3;
        }

        return 0;
      }
    };
    var func = null;
    var countFunc = null;

    if (outRep === _Core_Property_Constants_js__WEBPACK_IMPORTED_MODULE_3__.Representation.POINTS || inRep === 'verts') {
      func = cellBuilders.anythingToPoints;
      countFunc = cellCounters.anythingToPoints;
    } else if (outRep === _Core_Property_Constants_js__WEBPACK_IMPORTED_MODULE_3__.Representation.WIREFRAME || inRep === 'lines') {
      func = cellBuilders["".concat(inRep, "ToWireframe")];
      countFunc = cellCounters["".concat(inRep, "ToWireframe")];
    } else {
      func = cellBuilders["".concat(inRep, "ToSurface")];
      countFunc = cellCounters["".concat(inRep, "ToSurface")];
    }

    var array = cellArray.getData();
    var size = array.length;
    var caboCount = 0;

    for (var index = 0; index < size;) {
      caboCount += countFunc(array[index], array);
      index += array[index] + 1;
    }

    var packedUCVBO = null;
    var packedVBO = new Float32Array(caboCount * model.blockSize);

    if (colorData) {
      packedUCVBO = new Uint8Array(caboCount * 4);
    }

    var vboidx = 0;
    var ucidx = 0; // Find out if shift scale should be used
    // Compute squares of diagonal size and distance from the origin

    var diagSq = 0.0;
    var distSq = 0.0;

    for (var i = 0; i < 3; ++i) {
      var range = options.points.getRange(i);
      var delta = range[1] - range[0];
      diagSq += delta * delta;
      var distShift = 0.5 * (range[1] + range[0]);
      distSq += distShift * distShift;
    }

    var useShiftAndScale = diagSq > 0 && (Math.abs(distSq) / diagSq > 1.0e6 || // If data is far from the origin relative to its size
    Math.abs(Math.log10(diagSq)) > 3.0 || diagSq === 0 && distSq > 1.0e6); // If data is a point, but far from the origin

    if (useShiftAndScale) {
      // Compute shift and scale vectors
      var coordShift = new Float64Array(3);
      var coordScale = new Float64Array(3);

      for (var _i2 = 0; _i2 < 3; ++_i2) {
        var _range = options.points.getRange(_i2);

        var _delta = _range[1] - _range[0];

        coordShift[_i2] = 0.5 * (_range[1] + _range[0]);
        coordScale[_i2] = _delta > 0 ? 1.0 / _delta : 1.0;
      }

      publicAPI.setCoordShiftAndScale(coordShift, coordScale);
    } else if (model.coordShiftAndScaleEnabled === true) {
      // Make sure to reset
      publicAPI.setCoordShiftAndScale(null, null);
    }

    addAPoint = function addAPointFunc(i) {
      // Vertices
      pointIdx = i * 3;

      if (!model.coordShiftAndScaleEnabled) {
        packedVBO[vboidx++] = pointData[pointIdx++];
        packedVBO[vboidx++] = pointData[pointIdx++];
        packedVBO[vboidx++] = pointData[pointIdx++];
      } else {
        // Apply shift and scale
        packedVBO[vboidx++] = (pointData[pointIdx++] - model.coordShift[0]) * model.coordScale[0];
        packedVBO[vboidx++] = (pointData[pointIdx++] - model.coordShift[1]) * model.coordScale[1];
        packedVBO[vboidx++] = (pointData[pointIdx++] - model.coordShift[2]) * model.coordScale[2];
      }

      if (normalData !== null) {
        if (options.haveCellNormals) {
          normalIdx = (cellCount + options.cellOffset) * 3;
        } else {
          normalIdx = i * 3;
        }

        packedVBO[vboidx++] = normalData[normalIdx++];
        packedVBO[vboidx++] = normalData[normalIdx++];
        packedVBO[vboidx++] = normalData[normalIdx++];
      }

      model.customData.forEach(function (attr) {
        custIdx = i * attr.components;

        for (var j = 0; j < attr.components; ++j) {
          packedVBO[vboidx++] = attr.data[custIdx++];
        }
      });

      if (tcoordData !== null) {
        tcoordIdx = i * textureComponents;

        for (var j = 0; j < textureComponents; ++j) {
          packedVBO[vboidx++] = tcoordData[tcoordIdx++];
        }
      }

      if (colorData !== null) {
        if (options.haveCellScalars) {
          colorIdx = (cellCount + options.cellOffset) * colorComponents;
        } else {
          colorIdx = i * colorComponents;
        }

        packedUCVBO[ucidx++] = colorData[colorIdx++];
        packedUCVBO[ucidx++] = colorData[colorIdx++];
        packedUCVBO[ucidx++] = colorData[colorIdx++];
        packedUCVBO[ucidx++] = colorComponents === 4 ? colorData[colorIdx++] : 255;
      }
    };

    for (var _index = 0; _index < size;) {
      func(array[_index], array, _index + 1);
      _index += array[_index] + 1;
      cellCount++;
    }

    model.elementCount = caboCount;
    publicAPI.upload(packedVBO, _BufferObject_Constants_js__WEBPACK_IMPORTED_MODULE_2__.ObjectType.ARRAY_BUFFER);

    if (model.colorBO) {
      model.colorBOStride = 4;
      model.colorBO.upload(packedUCVBO, _BufferObject_Constants_js__WEBPACK_IMPORTED_MODULE_2__.ObjectType.ARRAY_BUFFER);
    }

    return cellCount;
  };

  publicAPI.setCoordShiftAndScale = function (coordShift, coordScale) {
    if (coordShift !== null && (coordShift.constructor !== Float64Array || coordShift.length !== 3)) {
      vtkErrorMacro('Wrong type for coordShift, expected vec3 or null');
      return;
    }

    if (coordScale !== null && (coordScale.constructor !== Float64Array || coordScale.length !== 3)) {
      vtkErrorMacro('Wrong type for coordScale, expected vec3 or null');
      return;
    }

    if (model.coordShift === null || coordShift === null || !(0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_4__.k)(coordShift, model.coordShift)) {
      model.coordShift = coordShift;
    }

    if (model.coordScale === null || coordScale === null || !(0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_4__.k)(coordScale, model.coordScale)) {
      model.coordScale = coordScale;
    }

    model.coordShiftAndScaleEnabled = shouldApplyCoordShiftAndScale(model.coordShift, model.coordScale);

    if (model.coordShiftAndScaleEnabled) {
      model.inverseShiftAndScaleMatrix = computeInverseShiftAndScaleMatrix(model.coordShift, model.coordScale);
    } else {
      model.inverseShiftAndScaleMatrix = null;
    }
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  elementCount: 0,
  stride: 0,
  colorBOStride: 0,
  vertexOffset: 0,
  normalOffset: 0,
  tCoordOffset: 0,
  tCoordComponents: 0,
  colorOffset: 0,
  colorComponents: 0,
  tcoordBO: null,
  customData: [],
  coordShift: null,
  coordScale: null,
  coordShiftAndScaleEnabled: false,
  inverseShiftAndScaleMatrix: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _BufferObject_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['colorBO', 'elementCount', 'stride', 'colorBOStride', 'vertexOffset', 'normalOffset', 'tCoordOffset', 'tCoordComponents', 'colorOffset', 'colorComponents', 'customData']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].get(publicAPI, model, ['coordShift', 'coordScale', 'coordShiftAndScaleEnabled', 'inverseShiftAndScaleMatrix']); // Object specific methods

  vtkOpenGLCellArrayBufferObject(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend); // ----------------------------------------------------------------------------

var vtkCellArrayBufferObject = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ForwardPass.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/ForwardPass.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkForwardPass$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Framebuffer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Framebuffer.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Framebuffer.js");
/* harmony import */ var _SceneGraph_RenderPass_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../SceneGraph/RenderPass.js */ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/RenderPass.js");




function vtkForwardPass(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkForwardPass'); // this pass implements a forward rendering pipeline
  // if both volumes and opaque geometry are present
  // it will mix the two together by capturing a zbuffer
  // first

  publicAPI.traverse = function (viewNode) {
    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    if (model.deleted) {
      return;
    } // we just render our delegates in order


    model.currentParent = parent; // build

    publicAPI.setCurrentOperation('buildPass');
    viewNode.traverse(publicAPI);
    var numlayers = viewNode.getRenderable().getNumberOfLayers(); // iterate over renderers

    var renderers = viewNode.getChildren();

    for (var i = 0; i < numlayers; i++) {
      for (var index = 0; index < renderers.length; index++) {
        var renNode = renderers[index];
        var ren = viewNode.getRenderable().getRenderers()[index];

        if (ren.getDraw() && ren.getLayer() === i) {
          // check for both opaque and volume actors
          model.opaqueActorCount = 0;
          model.translucentActorCount = 0;
          model.volumeCount = 0;
          publicAPI.setCurrentOperation('queryPass');
          renNode.traverse(publicAPI); // do we need to capture a zbuffer?

          if (model.opaqueActorCount > 0 && model.volumeCount > 0 || model.depthRequested) {
            var size = viewNode.getFramebufferSize(); // make sure the framebuffer is setup

            if (model.framebuffer === null) {
              model.framebuffer = _Framebuffer_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance();
            }

            model.framebuffer.setOpenGLRenderWindow(viewNode);
            model.framebuffer.saveCurrentBindingsAndBuffers();
            var fbSize = model.framebuffer.getSize();

            if (fbSize === null || fbSize[0] !== size[0] || fbSize[1] !== size[1]) {
              model.framebuffer.create(size[0], size[1]);
              model.framebuffer.populateFramebuffer();
            }

            model.framebuffer.bind();
            publicAPI.setCurrentOperation('opaqueZBufferPass');
            renNode.traverse(publicAPI);
            model.framebuffer.restorePreviousBindingsAndBuffers(); // reset now that we have done it

            model.depthRequested = false;
          }

          publicAPI.setCurrentOperation('cameraPass');
          renNode.traverse(publicAPI);

          if (model.opaqueActorCount > 0) {
            publicAPI.setCurrentOperation('opaquePass');
            renNode.traverse(publicAPI);
          }

          if (model.translucentActorCount > 0) {
            publicAPI.setCurrentOperation('translucentPass');
            renNode.traverse(publicAPI);
          }

          if (model.volumeCount > 0) {
            publicAPI.setCurrentOperation('volumePass');
            renNode.traverse(publicAPI);
          }
        }
      }
    }
  };

  publicAPI.getZBufferTexture = function () {
    if (model.framebuffer) {
      return model.framebuffer.getColorTexture();
    }

    return null;
  };

  publicAPI.requestDepth = function () {
    model.depthRequested = true;
  };

  publicAPI.incrementOpaqueActorCount = function () {
    return model.opaqueActorCount++;
  };

  publicAPI.incrementTranslucentActorCount = function () {
    return model.translucentActorCount++;
  };

  publicAPI.incrementVolumeCount = function () {
    return model.volumeCount++;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  opaqueActorCount: 0,
  translucentActorCount: 0,
  volumeCount: 0,
  framebuffer: null,
  depthRequested: false
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  _SceneGraph_RenderPass_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(publicAPI, model, initialValues);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].get(publicAPI, model, ['framebuffer']); // Object methods

  vtkForwardPass(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkForwardPass'); // ----------------------------------------------------------------------------

var vtkForwardPass$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Framebuffer.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/Framebuffer.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkOpenGLFramebuffer),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Texture_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Texture.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Texture.js");
/* harmony import */ var _Common_Core_DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Common/Core/DataArray/Constants.js */ "./node_modules/@kitware/vtk.js/Common/Core/DataArray/Constants.js");
/* harmony import */ var _Texture_Constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Texture/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Texture/Constants.js");





// vtkFramebuffer methods
// ----------------------------------------------------------------------------

function vtkFramebuffer(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkFramebuffer');

  publicAPI.getBothMode = function () {
    return model.context.FRAMEBUFFER;
  }; // publicAPI.getDrawMode = () => model.context.DRAW_FRAMEBUFFER;
  // publicAPI.getReadMode = () => model.context.READ_FRAMEBUFFER;


  publicAPI.saveCurrentBindingsAndBuffers = function (modeIn) {
    var mode = typeof modeIn !== 'undefined' ? modeIn : publicAPI.getBothMode();
    publicAPI.saveCurrentBindings(mode);
    publicAPI.saveCurrentBuffers(mode);
  };

  publicAPI.saveCurrentBindings = function (modeIn) {
    var gl = model.context;
    model.previousDrawBinding = gl.getParameter(model.context.FRAMEBUFFER_BINDING);
    model.previousActiveFramebuffer = model.openGLRenderWindow.getActiveFramebuffer();
  };

  publicAPI.saveCurrentBuffers = function (modeIn) {// noop on webgl 1
  };

  publicAPI.restorePreviousBindingsAndBuffers = function (modeIn) {
    var mode = typeof modeIn !== 'undefined' ? modeIn : publicAPI.getBothMode();
    publicAPI.restorePreviousBindings(mode);
    publicAPI.restorePreviousBuffers(mode);
  };

  publicAPI.restorePreviousBindings = function (modeIn) {
    var gl = model.context;
    gl.bindFramebuffer(gl.FRAMEBUFFER, model.previousDrawBinding);
    model.openGLRenderWindow.setActiveFramebuffer(model.previousActiveFramebuffer);
  };

  publicAPI.restorePreviousBuffers = function (modeIn) {// currently a noop on webgl1
  };

  publicAPI.bind = function () {
    model.context.bindFramebuffer(model.context.FRAMEBUFFER, model.glFramebuffer);

    if (model.colorTexture) {
      model.colorTexture.bind();
    }

    model.openGLRenderWindow.setActiveFramebuffer(publicAPI);
  };

  publicAPI.create = function (width, height) {
    model.glFramebuffer = model.context.createFramebuffer();
    model.glFramebuffer.width = width;
    model.glFramebuffer.height = height;
  };

  publicAPI.setColorBuffer = function (texture) {
    var attachment = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var gl = model.context;
    var glAttachment = gl.COLOR_ATTACHMENT0;

    if (attachment > 0) {
      if (model.openGLRenderWindow.getWebgl2()) {
        glAttachment += attachment;
      } else {
        (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.vtkErrorMacro)('Using multiple framebuffer attachments requires WebGL 2');
        return;
      }
    }

    model.colorTexture = texture;
    gl.framebufferTexture2D(gl.FRAMEBUFFER, glAttachment, gl.TEXTURE_2D, texture.getHandle(), 0);
  };

  publicAPI.removeColorBuffer = function () {
    var attachment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var gl = model.context;
    var glAttachment = gl.COLOR_ATTACHMENT0;

    if (attachment > 0) {
      if (model.openGLRenderWindow.getWebgl2()) {
        glAttachment += attachment;
      } else {
        (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.vtkErrorMacro)('Using multiple framebuffer attachments requires WebGL 2');
        return;
      }
    }

    gl.framebufferTexture2D(gl.FRAMEBUFFER, glAttachment, gl.TEXTURE_2D, null, 0);
  };

  publicAPI.setDepthBuffer = function (texture) {
    if (model.openGLRenderWindow.getWebgl2()) {
      var gl = model.context;
      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, texture.getHandle(), 0);
    } else {
      (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.vtkErrorMacro)('Attaching depth buffer textures to fbo requires WebGL 2');
    }
  };

  publicAPI.removeDepthBuffer = function () {
    if (model.openGLRenderWindow.getWebgl2()) {
      var gl = model.context;
      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, null, 0);
    } else {
      (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.vtkErrorMacro)('Attaching depth buffer textures to framebuffers requires WebGL 2');
    }
  };

  publicAPI.getGLFramebuffer = function () {
    return model.glFramebuffer;
  };

  publicAPI.setOpenGLRenderWindow = function (rw) {
    if (model.openGLRenderWindow === rw) {
      return;
    }

    publicAPI.releaseGraphicsResources();
    model.openGLRenderWindow = rw;
    model.context = null;

    if (rw) {
      model.context = model.openGLRenderWindow.getContext();
    }
  };

  publicAPI.releaseGraphicsResources = function () {
    if (model.glFramebuffer) {
      model.context.deleteFramebuffer(model.glFramebuffer);
    }

    if (model.colorTexture) {
      model.colorTexture.releaseGraphicsResources();
    }
  };

  publicAPI.getSize = function () {
    var size = [0, 0];

    if (model.glFramebuffer !== null) {
      size[0] = model.glFramebuffer.width;
      size[1] = model.glFramebuffer.height;
    }

    return size;
  };

  publicAPI.populateFramebuffer = function () {
    publicAPI.bind();
    var gl = model.context;
    var texture = _Texture_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance();
    texture.setOpenGLRenderWindow(model.openGLRenderWindow);
    texture.setMinificationFilter(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_3__.Filter.LINEAR);
    texture.setMagnificationFilter(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_3__.Filter.LINEAR);
    texture.create2DFromRaw(model.glFramebuffer.width, model.glFramebuffer.height, 4, _Common_Core_DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_2__.VtkDataTypes.UNSIGNED_CHAR, null);
    publicAPI.setColorBuffer(texture); // for now do not count on having a depth buffer texture
    // as they are not standard webgl 1

    model.depthTexture = gl.createRenderbuffer();
    gl.bindRenderbuffer(gl.RENDERBUFFER, model.depthTexture);
    gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, model.glFramebuffer.width, model.glFramebuffer.height);
    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, model.depthTexture);
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  openGLRenderWindow: null,
  glFramebuffer: null,
  colorTexture: null,
  depthTexture: null,
  previousDrawBinding: 0,
  previousReadBinding: 0,
  previousDrawBuffer: 0,
  previousReadBuffer: 0,
  previousActiveFramebuffer: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.obj)(publicAPI, model);
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.setGet)(publicAPI, model, ['colorTexture']); // For more macro methods, see "Sources/macros.js"
  // Object specific methods

  vtkFramebuffer(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.newInstance)(extend, 'vtkFramebuffer'); // ----------------------------------------------------------------------------

var vtkOpenGLFramebuffer = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/HardwareSelector.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/HardwareSelector.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkHardwareSelector),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js");
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _HardwareSelector_Constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./HardwareSelector/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/HardwareSelector/Constants.js");
/* harmony import */ var _Core_HardwareSelector_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Core/HardwareSelector.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/HardwareSelector.js");
/* harmony import */ var _Framebuffer_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Framebuffer.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Framebuffer.js");
/* harmony import */ var _Common_DataModel_SelectionNode_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Common/DataModel/SelectionNode.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/SelectionNode.js");
/* harmony import */ var _Common_DataModel_DataSet_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../Common/DataModel/DataSet.js */ "./node_modules/@kitware/vtk.js/Common/DataModel/DataSet.js");











function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var PassTypes = _HardwareSelector_Constants_js__WEBPACK_IMPORTED_MODULE_5__["default"].PassTypes;
var SelectionContent = _Common_DataModel_SelectionNode_js__WEBPACK_IMPORTED_MODULE_8__["default"].SelectionContent,
    SelectionField = _Common_DataModel_SelectionNode_js__WEBPACK_IMPORTED_MODULE_8__["default"].SelectionField;
var FieldAssociations = _Common_DataModel_DataSet_js__WEBPACK_IMPORTED_MODULE_9__["default"].FieldAssociations;
var vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_4__["default"].vtkErrorMacro;
var idOffset = 1;

function getInfoHash(info) {
  return "".concat(info.propID, " ").concat(info.compositeID);
}

function convert(xx, yy, pb, area) {
  if (!pb) {
    return 0;
  }

  var offset = (yy * (area[2] - area[0] + 1) + xx) * 4;
  var rgb = [];
  rgb[0] = pb[offset];
  rgb[1] = pb[offset + 1];
  rgb[2] = pb[offset + 2];
  var val = rgb[2];
  val *= 256;
  val += rgb[1];
  val *= 256;
  val += rgb[0];
  return val;
}

function getPixelInformationWithData(buffdata, inDisplayPosition, maxDistance, outSelectedPosition) {
  // Base case
  var maxDist = maxDistance < 0 ? 0 : maxDistance;

  if (maxDist === 0) {
    outSelectedPosition[0] = inDisplayPosition[0];
    outSelectedPosition[1] = inDisplayPosition[1];

    if (inDisplayPosition[0] < buffdata.area[0] || inDisplayPosition[0] > buffdata.area[2] || inDisplayPosition[1] < buffdata.area[1] || inDisplayPosition[1] > buffdata.area[3]) {
      return null;
    } // offset inDisplayPosition based on the lower-left-corner of the Area.


    var displayPosition = [inDisplayPosition[0] - buffdata.area[0], inDisplayPosition[1] - buffdata.area[1]];
    var actorid = convert(displayPosition[0], displayPosition[1], buffdata.pixBuffer[PassTypes.ACTOR_PASS], buffdata.area);

    if (actorid <= 0) {
      // the pixel did not hit any actor.
      return null;
    }

    var _info = {};
    _info.valid = true;
    _info.propID = actorid - idOffset;
    _info.prop = buffdata.props[_info.propID];
    var compositeID = convert(displayPosition[0], displayPosition[1], buffdata.pixBuffer[PassTypes.COMPOSITE_INDEX_PASS], buffdata.area);

    if (compositeID < 0 || compositeID > 0xffffff) {
      compositeID = 0;
    }

    _info.compositeID = compositeID - idOffset;

    if (buffdata.captureZValues) {
      var offset = (displayPosition[1] * (buffdata.area[2] - buffdata.area[0] + 1) + displayPosition[0]) * 4;
      _info.zValue = (256 * buffdata.zBuffer[offset] + buffdata.zBuffer[offset + 1]) / 65535.0;
      _info.displayPosition = inDisplayPosition;
    }

    return _info;
  } // Iterate over successively growing boxes.
  // They recursively call the base case to handle single pixels.


  var dispPos = [inDisplayPosition[0], inDisplayPosition[1]];
  var curPos = [0, 0];
  var info = getPixelInformationWithData(buffdata, inDisplayPosition, 0, outSelectedPosition);

  if (info && info.valid) {
    return info;
  }

  for (var dist = 1; dist < maxDist; ++dist) {
    // Vertical sides of box.
    for (var y = dispPos[1] > dist ? dispPos[1] - dist : 0; y <= dispPos[1] + dist; ++y) {
      curPos[1] = y;

      if (dispPos[0] >= dist) {
        curPos[0] = dispPos[0] - dist;
        info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);

        if (info && info.valid) {
          return info;
        }
      }

      curPos[0] = dispPos[0] + dist;
      info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);

      if (info && info.valid) {
        return info;
      }
    } // Horizontal sides of box.


    for (var x = dispPos[0] >= dist ? dispPos[0] - (dist - 1) : 0; x <= dispPos[0] + (dist - 1); ++x) {
      curPos[0] = x;

      if (dispPos[1] >= dist) {
        curPos[1] = dispPos[1] - dist;
        info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);

        if (info && info.valid) {
          return info;
        }
      }

      curPos[1] = dispPos[1] + dist;
      info = getPixelInformationWithData(buffdata, curPos, 0, outSelectedPosition);

      if (info && info.valid) {
        return info;
      }
    }
  } // nothing hit.


  outSelectedPosition[0] = inDisplayPosition[0];
  outSelectedPosition[1] = inDisplayPosition[1];
  return null;
} //-----------------------------------------------------------------------------


function convertSelection(fieldassociation, dataMap, captureZValues, renderer, openGLRenderWindow) {
  var sel = [];
  var count = 0;
  dataMap.forEach(function (value, key) {
    var child = _Common_DataModel_SelectionNode_js__WEBPACK_IMPORTED_MODULE_8__["default"].newInstance();
    child.setContentType(SelectionContent.INDICES);

    switch (fieldassociation) {
      case FieldAssociations.FIELD_ASSOCIATION_CELLS:
        child.setFieldType(SelectionField.CELL);
        break;

      case FieldAssociations.FIELD_ASSOCIATION_POINTS:
        child.setFieldType(SelectionField.POINT);
        break;

      default:
        vtkErrorMacro('Unknown field association');
    }

    child.getProperties().propID = value.info.propID;
    child.getProperties().prop = value.info.prop;
    child.getProperties().compositeID = value.info.compositeID;
    child.getProperties().pixelCount = value.pixelCount;

    if (captureZValues) {
      child.getProperties().displayPosition = [value.info.displayPosition[0], value.info.displayPosition[1], value.info.zValue];
      child.getProperties().worldPosition = openGLRenderWindow.displayToWorld(value.info.displayPosition[0], value.info.displayPosition[1], value.info.zValue, renderer);
    }

    child.setSelectionList(value.attributeIDs);
    sel[count] = child;
    count++;
  });
  return sel;
} //----------------------------------------------------------------------------


function generateSelectionWithData(buffdata, fx1, fy1, fx2, fy2) {
  var x1 = Math.floor(fx1);
  var y1 = Math.floor(fy1);
  var x2 = Math.floor(fx2);
  var y2 = Math.floor(fy2);
  var dataMap = new Map();
  var outSelectedPosition = [0, 0];

  for (var yy = y1; yy <= y2; yy++) {
    for (var xx = x1; xx <= x2; xx++) {
      var pos = [xx, yy];
      var info = getPixelInformationWithData(buffdata, pos, 0, outSelectedPosition);

      if (info && info.valid) {
        var hash = getInfoHash(info);

        if (!dataMap.has(hash)) {
          dataMap.set(hash, {
            info: info,
            pixelCount: 1,
            attributeIDs: [info.attributeID]
          });
        } else {
          var dmv = dataMap.get(hash);
          dmv.pixelCount++;

          if (buffdata.captureZValues) {
            if (info.zValue < dmv.info.zValue) {
              dmv.info = info;
            }
          }

          if (dmv.attributeIDs.indexOf(info.attributeID) === -1) {
            dmv.attributeIDs.push(info.attributeID);
          }
        }
      }
    }
  }

  return convertSelection(buffdata.fieldAssociation, dataMap, buffdata.captureZValues, buffdata.renderer, buffdata.openGLRenderWindow);
} // ----------------------------------------------------------------------------
// vtkOpenGLHardwareSelector methods
// ----------------------------------------------------------------------------


function vtkOpenGLHardwareSelector(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkOpenGLHardwareSelector'); //----------------------------------------------------------------------------

  publicAPI.releasePixBuffers = function () {
    model.pixBuffer = [];
    model.zBuffer = null;
  }; //----------------------------------------------------------------------------


  publicAPI.beginSelection = function () {
    model.openGLRenderer = model.openGLRenderWindow.getViewNodeFor(model.renderer);
    model.maxAttributeId = 0;
    var size = model.openGLRenderWindow.getSize();

    if (!model.framebuffer) {
      model.framebuffer = _Framebuffer_js__WEBPACK_IMPORTED_MODULE_7__["default"].newInstance();
      model.framebuffer.setOpenGLRenderWindow(model.openGLRenderWindow);
      model.framebuffer.saveCurrentBindingsAndBuffers();
      model.framebuffer.create(size[0], size[1]); // this calls model.framebuffer.bind()

      model.framebuffer.populateFramebuffer();
    } else {
      model.framebuffer.setOpenGLRenderWindow(model.openGLRenderWindow);
      model.framebuffer.saveCurrentBindingsAndBuffers();
      var fbSize = model.framebuffer.getSize();

      if (fbSize[0] !== size[0] || fbSize[1] !== size[1]) {
        model.framebuffer.create(size[0], size[1]); // this calls model.framebuffer.bind()

        model.framebuffer.populateFramebuffer();
      } else {
        model.framebuffer.bind();
      }
    }

    model.openGLRenderer.clear();
    model.openGLRenderer.setSelector(publicAPI);
    model.hitProps = {};
    model.props = [];
    publicAPI.releasePixBuffers();
  }; //----------------------------------------------------------------------------


  publicAPI.endSelection = function () {
    model.hitProps = {};
    model.openGLRenderer.setSelector(null);
    model.framebuffer.restorePreviousBindingsAndBuffers();
  };

  publicAPI.preCapturePass = function () {};

  publicAPI.postCapturePass = function () {}; //----------------------------------------------------------------------------


  publicAPI.select = function () {
    var sel = null;

    if (publicAPI.captureBuffers()) {
      sel = publicAPI.generateSelection(model.area[0], model.area[1], model.area[2], model.area[3]);
      publicAPI.releasePixBuffers();
    }

    return sel;
  };

  publicAPI.getSourceDataAsync = /*#__PURE__*/function () {
    var _ref = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__["default"])( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().mark(function _callee(renderer, fx1, fy1, fx2, fy2) {
      var size, result;
      return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              // assign the renderer
              model.renderer = renderer; // set area to all if no arguments provided

              if (fx1 === undefined) {
                size = model.openGLRenderWindow.getSize();
                publicAPI.setArea(0, 0, size[0] - 1, size[1] - 1);
              } else {
                publicAPI.setArea(fx1, fy1, fx2, fy2);
              } // just do capture buffers and package up the result


              if (publicAPI.captureBuffers()) {
                _context.next = 4;
                break;
              }

              return _context.abrupt("return", false);

            case 4:
              result = {
                area: (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__["default"])(model.area),
                pixBuffer: (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__["default"])(model.pixBuffer),
                captureZValues: model.captureZValues,
                zBuffer: model.zBuffer,
                props: (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__["default"])(model.props),
                fieldAssociation: model.fieldAssociation,
                renderer: renderer,
                openGLRenderWindow: model.openGLRenderWindow
              };

              result.generateSelection = function () {
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                return generateSelectionWithData.apply(void 0, [result].concat(args));
              };

              return _context.abrupt("return", result);

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2, _x3, _x4, _x5) {
      return _ref.apply(this, arguments);
    };
  }(); //----------------------------------------------------------------------------


  publicAPI.captureBuffers = function () {
    if (!model.renderer || !model.openGLRenderWindow) {
      vtkErrorMacro('Renderer and view must be set before calling Select.');
      return false;
    }

    model.openGLRenderer = model.openGLRenderWindow.getViewNodeFor(model.renderer); // int rgba[4];
    // rwin.getColorBufferSizes(rgba);
    // if (rgba[0] < 8 || rgba[1] < 8 || rgba[2] < 8) {
    //   vtkErrorMacro("Color buffer depth must be at least 8 bit. "
    //     "Currently: " << rgba[0] << ", " << rgba[1] << ", " <<rgba[2]);
    //   return false;
    // }

    publicAPI.invokeEvent({
      type: 'StartEvent'
    }); // Initialize renderer for selection.
    // change the renderer's background to black, which will indicate a miss

    model.originalBackground = model.renderer.getBackgroundByReference();
    model.renderer.setBackground(0.0, 0.0, 0.0);
    var rpasses = model.openGLRenderWindow.getRenderPasses();
    publicAPI.beginSelection();

    for (model.currentPass = PassTypes.MIN_KNOWN_PASS; model.currentPass <= PassTypes.COMPOSITE_INDEX_PASS; model.currentPass++) {
      if (publicAPI.passRequired(model.currentPass)) {
        publicAPI.preCapturePass(model.currentPass);

        if (model.captureZValues && model.currentPass === PassTypes.ACTOR_PASS && typeof rpasses[0].requestDepth === 'function' && typeof rpasses[0].getFramebuffer === 'function') {
          rpasses[0].requestDepth();
          model.openGLRenderWindow.traverseAllPasses();
        } else {
          model.openGLRenderWindow.traverseAllPasses();
        }

        publicAPI.postCapturePass(model.currentPass);
        publicAPI.savePixelBuffer(model.currentPass);
      }
    }

    publicAPI.endSelection(); // restore original background

    model.renderer.setBackground(model.originalBackground);
    publicAPI.invokeEvent({
      type: 'EndEvent'
    }); // restore image, not needed?
    // model.openGLRenderWindow.traverseAllPasses();

    return true;
  }; //----------------------------------------------------------------------------


  publicAPI.passRequired = function (pass) {
    return true;
  }; //----------------------------------------------------------------------------


  publicAPI.savePixelBuffer = function (passNo) {
    model.pixBuffer[passNo] = model.openGLRenderWindow.getPixelData(model.area[0], model.area[1], model.area[2], model.area[3]);

    if (passNo === PassTypes.ACTOR_PASS) {
      if (model.captureZValues) {
        var rpasses = model.openGLRenderWindow.getRenderPasses();

        if (typeof rpasses[0].requestDepth === 'function' && typeof rpasses[0].getFramebuffer === 'function') {
          var fb = rpasses[0].getFramebuffer();
          fb.saveCurrentBindingsAndBuffers();
          fb.bind();
          model.zBuffer = model.openGLRenderWindow.getPixelData(model.area[0], model.area[1], model.area[2], model.area[3]);
          fb.restorePreviousBindingsAndBuffers();
        }
      }

      publicAPI.buildPropHitList(model.pixBuffer[passNo]);
    }
  }; //----------------------------------------------------------------------------


  publicAPI.buildPropHitList = function (pixelbuffer) {
    for (var yy = 0; yy <= model.area[3] - model.area[1]; yy++) {
      for (var xx = 0; xx <= model.area[2] - model.area[0]; xx++) {
        var val = convert(xx, yy, pixelbuffer, model.area);

        if (val > 0) {
          val--;

          if (!(val in model.hitProps)) {
            model.hitProps[val] = true;
          }
        }
      }
    }
  }; //----------------------------------------------------------------------------


  publicAPI.renderProp = function (prop) {
    if (model.currentPass === PassTypes.ACTOR_PASS) {
      publicAPI.setPropColorValueFromInt(model.props.length + idOffset);
      model.props.push(prop);
    }
  }; //----------------------------------------------------------------------------


  publicAPI.renderCompositeIndex = function (index) {
    if (model.currentPass === PassTypes.COMPOSITE_INDEX_PASS) {
      publicAPI.setPropColorValueFromInt(index + idOffset);
    }
  }; //----------------------------------------------------------------------------
  // TODO: make inline


  publicAPI.renderAttributeId = function (attribid) {
    if (attribid < 0) {
      // negative attribid is valid. It happens when rendering higher order
      // elements where new points are added for rendering smooth surfaces.
      return;
    }

    model.maxAttributeId = attribid > model.maxAttributeId ? attribid : model.maxAttributeId; // if (model.currentPass < PassTypes.ID_LOW24) {
    //   return; // useless...
    // }
  }; //----------------------------------------------------------------------------


  publicAPI.passTypeToString = function (type) {
    return _macros_js__WEBPACK_IMPORTED_MODULE_4__["default"].enumToString(PassTypes, type);
  }; //----------------------------------------------------------------------------


  publicAPI.isPropHit = function (id) {
    return Boolean(model.hitProps[id]);
  };

  publicAPI.setPropColorValueFromInt = function (val) {
    model.propColorValue[0] = val % 256 / 255.0;
    model.propColorValue[1] = Math.floor(val / 256) % 256 / 255.0;
    model.propColorValue[2] = Math.floor(val / 65536) % 256 / 255.0;
  }; // info has
  //   valid
  //   propId
  //   prop
  //   compositeID
  //   attributeID
  //----------------------------------------------------------------------------


  publicAPI.getPixelInformation = function (inDisplayPosition, maxDistance, outSelectedPosition) {
    // Base case
    var maxDist = maxDistance < 0 ? 0 : maxDistance;

    if (maxDist === 0) {
      outSelectedPosition[0] = inDisplayPosition[0];
      outSelectedPosition[1] = inDisplayPosition[1];

      if (inDisplayPosition[0] < model.area[0] || inDisplayPosition[0] > model.area[2] || inDisplayPosition[1] < model.area[1] || inDisplayPosition[1] > model.area[3]) {
        return null;
      } // offset inDisplayPosition based on the lower-left-corner of the Area.


      var displayPosition = [inDisplayPosition[0] - model.area[0], inDisplayPosition[1] - model.area[1]];
      var actorid = convert(displayPosition[0], displayPosition[1], model.pixBuffer[PassTypes.ACTOR_PASS], model.area);

      if (actorid <= 0) {
        // the pixel did not hit any actor.
        return null;
      }

      var _info2 = {};
      _info2.valid = true;
      _info2.propID = actorid - idOffset;
      _info2.prop = model.props[_info2.propID];
      var compositeID = convert(displayPosition[0], displayPosition[1], model.pixBuffer[PassTypes.COMPOSITE_INDEX_PASS], model.area);

      if (compositeID < 0 || compositeID > 0xffffff) {
        compositeID = 0;
      }

      _info2.compositeID = compositeID - idOffset;

      if (model.captureZValues) {
        var offset = (displayPosition[1] * (model.area[2] - model.area[0] + 1) + displayPosition[0]) * 4;
        _info2.zValue = (256 * model.zBuffer[offset] + model.zBuffer[offset + 1]) / 65535.0;
        _info2.displayPosition = inDisplayPosition;
      }

      return _info2;
    } // Iterate over successively growing boxes.
    // They recursively call the base case to handle single pixels.


    var dispPos = [inDisplayPosition[0], inDisplayPosition[1]];
    var curPos = [0, 0];
    var info = publicAPI.getPixelInformation(inDisplayPosition, 0, outSelectedPosition);

    if (info && info.valid) {
      return info;
    }

    for (var dist = 1; dist < maxDist; ++dist) {
      // Vertical sides of box.
      for (var y = dispPos[1] > dist ? dispPos[1] - dist : 0; y <= dispPos[1] + dist; ++y) {
        curPos[1] = y;

        if (dispPos[0] >= dist) {
          curPos[0] = dispPos[0] - dist;
          info = publicAPI.getPixelInformation(curPos, 0, outSelectedPosition);

          if (info && info.valid) {
            return info;
          }
        }

        curPos[0] = dispPos[0] + dist;
        info = publicAPI.getPixelInformation(curPos, 0, outSelectedPosition);

        if (info && info.valid) {
          return info;
        }
      } // Horizontal sides of box.


      for (var x = dispPos[0] >= dist ? dispPos[0] - (dist - 1) : 0; x <= dispPos[0] + (dist - 1); ++x) {
        curPos[0] = x;

        if (dispPos[1] >= dist) {
          curPos[1] = dispPos[1] - dist;
          info = publicAPI.getPixelInformation(curPos, 0, outSelectedPosition);

          if (info && info.valid) {
            return info;
          }
        }

        curPos[1] = dispPos[1] + dist;
        info = publicAPI.getPixelInformation(curPos, 0, outSelectedPosition);

        if (info && info.valid) {
          return info;
        }
      }
    } // nothing hit.


    outSelectedPosition[0] = inDisplayPosition[0];
    outSelectedPosition[1] = inDisplayPosition[1];
    return null;
  }; //----------------------------------------------------------------------------


  publicAPI.generateSelection = function (fx1, fy1, fx2, fy2) {
    var x1 = Math.floor(fx1);
    var y1 = Math.floor(fy1);
    var x2 = Math.floor(fx2);
    var y2 = Math.floor(fy2);
    var dataMap = new Map();
    var outSelectedPosition = [0, 0];

    for (var yy = y1; yy <= y2; yy++) {
      for (var xx = x1; xx <= x2; xx++) {
        var pos = [xx, yy];
        var info = publicAPI.getPixelInformation(pos, 0, outSelectedPosition);

        if (info && info.valid) {
          var hash = getInfoHash(info);

          if (!dataMap.has(hash)) {
            dataMap.set(hash, {
              info: info,
              pixelCount: 1,
              attributeIDs: [info.attributeID]
            });
          } else {
            var dmv = dataMap.get(hash);
            dmv.pixelCount++;

            if (model.captureZValues) {
              if (info.zValue < dmv.info.zValue) {
                dmv.info = info;
              }
            }

            if (dmv.attributeIDs.indexOf(info.attributeID) === -1) {
              dmv.attributeIDs.push(info.attributeID);
            }
          }
        }
      }
    }

    return convertSelection(model.fieldAssociation, dataMap, model.captureZValues, model.renderer, model.openGLRenderWindow);
  }; //----------------------------------------------------------------------------


  publicAPI.attach = function (w, r) {
    model.openGLRenderWindow = w;
    model.renderer = r;
  }; // override


  var superSetArea = publicAPI.setArea;

  publicAPI.setArea = function () {
    if (superSetArea.apply(void 0, arguments)) {
      model.area[0] = Math.floor(model.area[0]);
      model.area[1] = Math.floor(model.area[1]);
      model.area[2] = Math.floor(model.area[2]);
      model.area[3] = Math.floor(model.area[3]);
      return true;
    }

    return false;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  area: undefined,
  renderer: null,
  openGLRenderWindow: null,
  openGLRenderer: null,
  currentPass: -1,
  propColorValue: null,
  props: null,
  idOffset: 1
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  _Core_HardwareSelector_js__WEBPACK_IMPORTED_MODULE_6__["default"].extend(publicAPI, model, initialValues);
  model.propColorValue = [0, 0, 0];
  model.props = [];

  if (!model.area) {
    model.area = [0, 0, 0, 0];
  }

  _macros_js__WEBPACK_IMPORTED_MODULE_4__["default"].setGetArray(publicAPI, model, ['area'], 4);
  _macros_js__WEBPACK_IMPORTED_MODULE_4__["default"].setGet(publicAPI, model, ['renderer', 'currentPass', 'openGLRenderWindow']);
  _macros_js__WEBPACK_IMPORTED_MODULE_4__["default"].setGetArray(publicAPI, model, ['propColorValue'], 3);
  _macros_js__WEBPACK_IMPORTED_MODULE_4__["default"].event(publicAPI, model, 'event'); // Object methods

  vtkOpenGLHardwareSelector(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_4__["default"].newInstance(extend, 'vtkOpenGLHardwareSelector'); // ----------------------------------------------------------------------------

var vtkHardwareSelector = _objectSpread({
  newInstance: newInstance,
  extend: extend
}, _HardwareSelector_Constants_js__WEBPACK_IMPORTED_MODULE_5__["default"]);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/HardwareSelector/Constants.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/HardwareSelector/Constants.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PassTypes": () => (/* binding */ PassTypes),
/* harmony export */   "default": () => (/* binding */ Constants)
/* harmony export */ });
var PassTypes = {
  MIN_KNOWN_PASS: 0,
  ACTOR_PASS: 0,
  COMPOSITE_INDEX_PASS: 1,
  ID_LOW24: 2,
  MAX_KNOWN_PASS: 2
};
var Constants = {
  PassTypes: PassTypes
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Helper.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/Helper.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkHelper),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _CellArrayBufferObject_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CellArrayBufferObject.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/CellArrayBufferObject.js");
/* harmony import */ var _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ShaderProgram.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ShaderProgram.js");
/* harmony import */ var _VertexArrayObject_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./VertexArrayObject.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/VertexArrayObject.js");





// vtkOpenGLHelper methods
// ----------------------------------------------------------------------------

function vtkOpenGLHelper(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkOpenGLHelper');

  publicAPI.setOpenGLRenderWindow = function (win) {
    model.program.setContext(win.getContext());
    model.VAO.setOpenGLRenderWindow(win);
    model.CABO.setOpenGLRenderWindow(win);
  };

  publicAPI.releaseGraphicsResources = function (oglwin) {
    model.VAO.releaseGraphicsResources();
    model.CABO.releaseGraphicsResources();
    model.CABO.setElementCount(0);
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  program: null,
  shaderSourceTime: null,
  VAO: null,
  attributeUpdateTime: null,
  CABO: null,
  primitiveType: 0
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  model.shaderSourceTime = {};
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(model.shaderSourceTime);
  model.attributeUpdateTime = {};
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(model.attributeUpdateTime);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['program', 'shaderSourceTime', 'VAO', 'attributeUpdateTime', 'CABO', 'primitiveType']);
  model.program = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance();
  model.VAO = _VertexArrayObject_js__WEBPACK_IMPORTED_MODULE_3__["default"].newInstance();
  model.CABO = _CellArrayBufferObject_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(); // Object methods

  vtkOpenGLHelper(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend); // ----------------------------------------------------------------------------

var vtkHelper = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ImageMapper.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/ImageMapper.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkImageMapper),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _Core_ImageMapper_Constants_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Core/ImageMapper/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/ImageMapper/Constants.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Common_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Common/Core/DataArray.js */ "./node_modules/@kitware/vtk.js/Common/Core/DataArray.js");
/* harmony import */ var _Common_Core_DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Common/Core/DataArray/Constants.js */ "./node_modules/@kitware/vtk.js/Common/Core/DataArray/Constants.js");
/* harmony import */ var _Helper_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Helper.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Helper.js");
/* harmony import */ var _Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Common/Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");
/* harmony import */ var _Texture_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Texture.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Texture.js");
/* harmony import */ var _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ShaderProgram.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ShaderProgram.js");
/* harmony import */ var _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../SceneGraph/ViewNode.js */ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/ViewNode.js");
/* harmony import */ var _Core_Property_Constants_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../Core/Property/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Property/Constants.js");
/* harmony import */ var _Texture_Constants_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./Texture/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Texture/Constants.js");
/* harmony import */ var _Core_ImageProperty_Constants_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../Core/ImageProperty/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/ImageProperty/Constants.js");
/* harmony import */ var _glsl_vtkPolyDataVS_glsl_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./glsl/vtkPolyDataVS.glsl.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/glsl/vtkPolyDataVS.glsl.js");
/* harmony import */ var _glsl_vtkPolyDataFS_glsl_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./glsl/vtkPolyDataFS.glsl.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/glsl/vtkPolyDataFS.glsl.js");
/* harmony import */ var _ReplacementShaderMapper_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./ReplacementShaderMapper.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ReplacementShaderMapper.js");
/* harmony import */ var _ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ViewNodeFactory.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ViewNodeFactory.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js");


















var vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_1__.vtkErrorMacro;
var SlicingMode = _Core_ImageMapper_Constants_js__WEBPACK_IMPORTED_MODULE_0__["default"].SlicingMode; // ----------------------------------------------------------------------------
// helper methods
// ----------------------------------------------------------------------------

function computeFnToString(property, fn, numberOfComponents) {
  var pwfun = fn.apply(property);

  if (pwfun) {
    var iComps = property.getIndependentComponents();
    return "".concat(property.getMTime(), "-").concat(iComps, "-").concat(numberOfComponents);
  }

  return '0';
} // ----------------------------------------------------------------------------
// vtkOpenGLImageMapper methods
// ----------------------------------------------------------------------------


function vtkOpenGLImageMapper(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkOpenGLImageMapper');

  publicAPI.buildPass = function (prepass) {
    if (prepass) {
      model.openGLImageSlice = publicAPI.getFirstAncestorOfType('vtkOpenGLImageSlice');
      model.openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');
      model.openGLRenderWindow = model.openGLRenderer.getParent();
      model.context = model.openGLRenderWindow.getContext();
      model.tris.setOpenGLRenderWindow(model.openGLRenderWindow);
      model.openGLTexture.setOpenGLRenderWindow(model.openGLRenderWindow);
      model.colorTexture.setOpenGLRenderWindow(model.openGLRenderWindow);
      model.pwfTexture.setOpenGLRenderWindow(model.openGLRenderWindow);
      var ren = model.openGLRenderer.getRenderable();
      model.openGLCamera = model.openGLRenderer.getViewNodeFor(ren.getActiveCamera()); // is slice set by the camera

      if (model.renderable.getSliceAtFocalPoint()) {
        model.renderable.setSliceFromCamera(ren.getActiveCamera());
      }
    }
  };

  publicAPI.translucentPass = function (prepass) {
    if (prepass) {
      publicAPI.render();
    }
  };

  publicAPI.opaqueZBufferPass = function (prepass) {
    if (prepass) {
      model.haveSeenDepthRequest = true;
      model.renderDepth = true;
      publicAPI.render();
      model.renderDepth = false;
    }
  };

  publicAPI.opaquePass = function (prepass) {
    if (prepass) {
      publicAPI.render();
    }
  };

  publicAPI.getCoincidentParameters = function (ren, actor) {
    if (model.renderable.getResolveCoincidentTopology()) {
      return model.renderable.getCoincidentTopologyPolygonOffsetParameters();
    }

    return null;
  }; // Renders myself


  publicAPI.render = function () {
    var actor = model.openGLImageSlice.getRenderable();
    var ren = model.openGLRenderer.getRenderable();
    publicAPI.renderPiece(ren, actor);
  };

  publicAPI.buildShaders = function (shaders, ren, actor) {
    publicAPI.getShaderTemplate(shaders, ren, actor);
    publicAPI.replaceShaderValues(shaders, ren, actor);
  };

  publicAPI.getShaderTemplate = function (shaders, ren, actor) {
    shaders.Vertex = _glsl_vtkPolyDataVS_glsl_js__WEBPACK_IMPORTED_MODULE_12__.v;
    shaders.Fragment = _glsl_vtkPolyDataFS_glsl_js__WEBPACK_IMPORTED_MODULE_13__.v;
    shaders.Geometry = '';
  };

  publicAPI.replaceShaderValues = function (shaders, ren, actor) {
    var VSSource = shaders.Vertex;
    var FSSource = shaders.Fragment;
    VSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_7__["default"].substitute(VSSource, '//VTK::Camera::Dec', ['uniform mat4 MCPCMatrix;']).result;
    VSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_7__["default"].substitute(VSSource, '//VTK::PositionVC::Impl', ['  gl_Position = MCPCMatrix * vertexMC;']).result;
    VSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_7__["default"].substitute(VSSource, '//VTK::TCoord::Impl', 'tcoordVCVSOutput = tcoordMC;').result;
    VSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_7__["default"].substitute(VSSource, '//VTK::TCoord::Dec', 'attribute vec2 tcoordMC; varying vec2 tcoordVCVSOutput;').result;
    var tNumComp = model.openGLTexture.getComponents();
    var iComps = actor.getProperty().getIndependentComponents();
    var tcoordDec = ['varying vec2 tcoordVCVSOutput;', // color shift and scale
    'uniform float cshift0;', 'uniform float cscale0;', // pwf shift and scale
    'uniform float pwfshift0;', 'uniform float pwfscale0;', 'uniform sampler2D texture1;', 'uniform sampler2D colorTexture1;', 'uniform sampler2D pwfTexture1;', 'uniform float opacity;'];

    if (iComps) {
      for (var comp = 1; comp < tNumComp; comp++) {
        tcoordDec = tcoordDec.concat([// color shift and scale
        "uniform float cshift".concat(comp, ";"), "uniform float cscale".concat(comp, ";"), // weighting shift and scale
        "uniform float pwfshift".concat(comp, ";"), "uniform float pwfscale".concat(comp, ";")]);
      } // the heights defined below are the locations
      // for the up to four components of the tfuns
      // the tfuns have a height of 2XnumComps pixels so the
      // values are computed to hit the middle of the two rows
      // for that component


      switch (tNumComp) {
        case 1:
          tcoordDec = tcoordDec.concat(['uniform float mix0;', '#define height0 0.5']);
          break;

        case 2:
          tcoordDec = tcoordDec.concat(['uniform float mix0;', 'uniform float mix1;', '#define height0 0.25', '#define height1 0.75']);
          break;

        case 3:
          tcoordDec = tcoordDec.concat(['uniform float mix0;', 'uniform float mix1;', 'uniform float mix2;', '#define height0 0.17', '#define height1 0.5', '#define height2 0.83']);
          break;

        case 4:
          tcoordDec = tcoordDec.concat(['uniform float mix0;', 'uniform float mix1;', 'uniform float mix2;', 'uniform float mix3;', '#define height0 0.125', '#define height1 0.375', '#define height2 0.625', '#define height3 0.875']);
          break;

        default:
          vtkErrorMacro('Unsupported number of independent coordinates.');
      }
    }

    FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_7__["default"].substitute(FSSource, '//VTK::TCoord::Dec', tcoordDec).result;

    if (iComps) {
      var rgba = ['r', 'g', 'b', 'a'];
      var tcoordImpl = ['vec4 tvalue = texture2D(texture1, tcoordVCVSOutput);'];

      for (var _comp = 0; _comp < tNumComp; _comp++) {
        tcoordImpl = tcoordImpl.concat(["vec3 tcolor".concat(_comp, " = mix").concat(_comp, " * texture2D(colorTexture1, vec2(tvalue.").concat(rgba[_comp], " * cscale").concat(_comp, " + cshift").concat(_comp, ", height").concat(_comp, ")).rgb;"), "float compWeight".concat(_comp, " = mix").concat(_comp, " * texture2D(pwfTexture1, vec2(tvalue.").concat(rgba[_comp], " * pwfscale").concat(_comp, " + pwfshift").concat(_comp, ", height").concat(_comp, ")).r;")]);
      }

      switch (tNumComp) {
        case 1:
          tcoordImpl = tcoordImpl.concat(['gl_FragData[0] = vec4(tcolor0.rgb, opacity);']);
          break;

        case 2:
          tcoordImpl = tcoordImpl.concat(['float weightSum = compWeight0 + compWeight1;', 'gl_FragData[0] = vec4(vec3((tcolor0.rgb * (compWeight0 / weightSum)) + (tcolor1.rgb * (compWeight1 / weightSum))), opacity);']);
          break;

        case 3:
          tcoordImpl = tcoordImpl.concat(['float weightSum = compWeight0 + compWeight1 + compWeight2;', 'gl_FragData[0] = vec4(vec3((tcolor0.rgb * (compWeight0 / weightSum)) + (tcolor1.rgb * (compWeight1 / weightSum)) + (tcolor2.rgb * (compWeight2 / weightSum))), opacity);']);
          break;

        case 4:
          tcoordImpl = tcoordImpl.concat(['float weightSum = compWeight0 + compWeight1 + compWeight2 + compWeight3;', 'gl_FragData[0] = vec4(vec3((tcolor0.rgb * (compWeight0 / weightSum)) + (tcolor1.rgb * (compWeight1 / weightSum)) + (tcolor2.rgb * (compWeight2 / weightSum)) + (tcolor3.rgb * (compWeight3 / weightSum))), opacity);']);
          break;

        default:
          vtkErrorMacro('Unsupported number of independent coordinates.');
      }

      FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_7__["default"].substitute(FSSource, '//VTK::TCoord::Impl', tcoordImpl).result;
    } else {
      // dependent components
      switch (tNumComp) {
        case 1:
          FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_7__["default"].substitute(FSSource, '//VTK::TCoord::Impl', ['float intensity = texture2D(texture1, tcoordVCVSOutput).r;', 'vec3 tcolor = texture2D(colorTexture1, vec2(intensity * cscale0 + cshift0, 0.5)).rgb;', 'float scalarOpacity = texture2D(pwfTexture1, vec2(intensity * pwfscale0 + pwfshift0, 0.5)).r;', 'gl_FragData[0] = vec4(tcolor, scalarOpacity * opacity);']).result;
          break;

        case 2:
          FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_7__["default"].substitute(FSSource, '//VTK::TCoord::Impl', ['vec4 tcolor = texture2D(texture1, tcoordVCVSOutput);', 'float intensity = tcolor.r*cscale0 + cshift0;', 'gl_FragData[0] = vec4(texture2D(colorTexture1, vec2(intensity, 0.5)).rgb, pwfscale0*tcolor.g + pwfshift0);']).result;
          break;

        default:
          FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_7__["default"].substitute(FSSource, '//VTK::TCoord::Impl', ['vec4 tcolor = cscale0*texture2D(texture1, tcoordVCVSOutput.st) + cshift0;', 'gl_FragData[0] = vec4(texture2D(colorTexture1, vec2(tcolor.r,0.5)).r,', '  texture2D(colorTexture1, vec2(tcolor.g,0.5)).r,', '  texture2D(colorTexture1, vec2(tcolor.b,0.5)).r, tcolor.a);']).result;
      }
    }

    if (model.haveSeenDepthRequest) {
      FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_7__["default"].substitute(FSSource, '//VTK::ZBuffer::Dec', 'uniform int depthRequest;').result;
      FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_7__["default"].substitute(FSSource, '//VTK::ZBuffer::Impl', ['if (depthRequest == 1) {', 'float iz = floor(gl_FragCoord.z*65535.0 + 0.1);', 'float rf = floor(iz/256.0)/255.0;', 'float gf = mod(iz,256.0)/255.0;', 'gl_FragData[0] = vec4(rf, gf, 0.0, 1.0); }']).result;
    }

    shaders.Vertex = VSSource;
    shaders.Fragment = FSSource;
    publicAPI.replaceShaderClip(shaders, ren, actor);
    publicAPI.replaceShaderCoincidentOffset(shaders, ren, actor);
  };

  publicAPI.replaceShaderClip = function (shaders, ren, actor) {
    var VSSource = shaders.Vertex;
    var FSSource = shaders.Fragment;

    if (model.renderable.getNumberOfClippingPlanes()) {
      var numClipPlanes = model.renderable.getNumberOfClippingPlanes();

      if (numClipPlanes > 6) {
        (0,_macros_js__WEBPACK_IMPORTED_MODULE_1__.vtkErrorMacro)('OpenGL has a limit of 6 clipping planes');
        numClipPlanes = 6;
      }

      VSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_7__["default"].substitute(VSSource, '//VTK::Clip::Dec', ['uniform int numClipPlanes;', 'uniform vec4 clipPlanes[6];', 'varying float clipDistancesVSOutput[6];']).result;
      VSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_7__["default"].substitute(VSSource, '//VTK::Clip::Impl', ['for (int planeNum = 0; planeNum < 6; planeNum++)', '    {', '    if (planeNum >= numClipPlanes)', '        {', '        break;', '        }', '    clipDistancesVSOutput[planeNum] = dot(clipPlanes[planeNum], vertexMC);', '    }']).result;
      FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_7__["default"].substitute(FSSource, '//VTK::Clip::Dec', ['uniform int numClipPlanes;', 'varying float clipDistancesVSOutput[6];']).result;
      FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_7__["default"].substitute(FSSource, '//VTK::Clip::Impl', ['for (int planeNum = 0; planeNum < 6; planeNum++)', '    {', '    if (planeNum >= numClipPlanes)', '        {', '        break;', '        }', '    if (clipDistancesVSOutput[planeNum] < 0.0) discard;', '    }']).result;
    }

    shaders.Vertex = VSSource;
    shaders.Fragment = FSSource;
  };

  publicAPI.getNeedToRebuildShaders = function (cellBO, ren, actor) {
    // has something changed that would require us to recreate the shader?
    // candidates are
    // property modified (representation interpolation and lighting)
    // input modified
    // light complexity changed
    var tNumComp = model.openGLTexture.getComponents();
    var iComp = actor.getProperty().getIndependentComponents();

    if (model.lastHaveSeenDepthRequest !== model.haveSeenDepthRequest || cellBO.getProgram() === 0 || model.lastTextureComponents !== tNumComp || model.lastIndependentComponents !== iComp) {
      model.lastHaveSeenDepthRequest = model.haveSeenDepthRequest;
      model.lastTextureComponents = tNumComp;
      model.lastIndependentComponents = iComp;
      return true;
    }

    return false;
  };

  publicAPI.updateShaders = function (cellBO, ren, actor) {
    model.lastBoundBO = cellBO; // has something changed that would require us to recreate the shader?

    if (publicAPI.getNeedToRebuildShaders(cellBO, ren, actor)) {
      var shaders = {
        Vertex: null,
        Fragment: null,
        Geometry: null
      };
      publicAPI.buildShaders(shaders, ren, actor); // compile and bind the program if needed

      var newShader = model.openGLRenderWindow.getShaderCache().readyShaderProgramArray(shaders.Vertex, shaders.Fragment, shaders.Geometry); // if the shader changed reinitialize the VAO

      if (newShader !== cellBO.getProgram()) {
        cellBO.setProgram(newShader); // reset the VAO as the shader has changed

        cellBO.getVAO().releaseGraphicsResources();
      }

      cellBO.getShaderSourceTime().modified();
    } else {
      model.openGLRenderWindow.getShaderCache().readyShaderProgram(cellBO.getProgram());
    }

    cellBO.getVAO().bind();
    publicAPI.setMapperShaderParameters(cellBO, ren, actor);
    publicAPI.setCameraShaderParameters(cellBO, ren, actor);
    publicAPI.setPropertyShaderParameters(cellBO, ren, actor);
  };

  publicAPI.setMapperShaderParameters = function (cellBO, ren, actor) {
    // Now to update the VAO too, if necessary.
    if (cellBO.getCABO().getElementCount() && (model.VBOBuildTime > cellBO.getAttributeUpdateTime().getMTime() || cellBO.getShaderSourceTime().getMTime() > cellBO.getAttributeUpdateTime().getMTime())) {
      if (cellBO.getProgram().isAttributeUsed('vertexMC')) {
        if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'vertexMC', cellBO.getCABO().getVertexOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, 3, model.context.FALSE)) {
          vtkErrorMacro('Error setting vertexMC in shader VAO.');
        }
      }

      if (cellBO.getProgram().isAttributeUsed('tcoordMC') && cellBO.getCABO().getTCoordOffset()) {
        if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'tcoordMC', cellBO.getCABO().getTCoordOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, cellBO.getCABO().getTCoordComponents(), model.context.FALSE)) {
          vtkErrorMacro('Error setting tcoordMC in shader VAO.');
        }
      }

      cellBO.getAttributeUpdateTime().modified();
    }

    var texUnit = model.openGLTexture.getTextureUnit();
    cellBO.getProgram().setUniformi('texture1', texUnit);
    var numComp = model.openGLTexture.getComponents();
    var iComps = actor.getProperty().getIndependentComponents();

    if (iComps) {
      for (var i = 0; i < numComp; i++) {
        cellBO.getProgram().setUniformf("mix".concat(i), actor.getProperty().getComponentWeight(i));
      }
    }

    var oglShiftScale = model.openGLTexture.getShiftAndScale(); // three levels of shift scale combined into one
    // for performance in the fragment shader

    for (var _i = 0; _i < numComp; _i++) {
      var cw = actor.getProperty().getColorWindow();
      var cl = actor.getProperty().getColorLevel();
      var target = iComps ? _i : 0;
      var cfun = actor.getProperty().getRGBTransferFunction(target);

      if (cfun) {
        var cRange = cfun.getRange();
        cw = cRange[1] - cRange[0];
        cl = 0.5 * (cRange[1] + cRange[0]);
      }

      var scale = oglShiftScale.scale / cw;
      var shift = (oglShiftScale.shift - cl) / cw + 0.5;
      cellBO.getProgram().setUniformf("cshift".concat(_i), shift);
      cellBO.getProgram().setUniformf("cscale".concat(_i), scale);
    } // pwf shift/scale


    for (var _i2 = 0; _i2 < numComp; _i2++) {
      var pwfScale = 1.0;
      var pwfShift = 0.0;

      var _target = iComps ? _i2 : 0;

      var pwfun = actor.getProperty().getPiecewiseFunction(_target);

      if (pwfun) {
        var pwfRange = pwfun.getRange();
        var length = pwfRange[1] - pwfRange[0];
        var mid = 0.5 * (pwfRange[0] + pwfRange[1]);
        pwfScale = oglShiftScale.scale / length;
        pwfShift = (oglShiftScale.shift - mid) / length + 0.5;
      }

      cellBO.getProgram().setUniformf("pwfshift".concat(_i2), pwfShift);
      cellBO.getProgram().setUniformf("pwfscale".concat(_i2), pwfScale);
    }

    if (model.haveSeenDepthRequest) {
      cellBO.getProgram().setUniformi('depthRequest', model.renderDepth ? 1 : 0);
    } // handle coincident


    if (cellBO.getProgram().isUniformUsed('coffset')) {
      var cp = publicAPI.getCoincidentParameters(ren, actor);
      cellBO.getProgram().setUniformf('coffset', cp.offset); // cfactor isn't always used when coffset is.

      if (cellBO.getProgram().isUniformUsed('cfactor')) {
        cellBO.getProgram().setUniformf('cfactor', cp.factor);
      }
    }

    var texColorUnit = model.colorTexture.getTextureUnit();
    cellBO.getProgram().setUniformi('colorTexture1', texColorUnit);
    var texOpacityUnit = model.pwfTexture.getTextureUnit();
    cellBO.getProgram().setUniformi('pwfTexture1', texOpacityUnit);

    if (model.renderable.getNumberOfClippingPlanes()) {
      // add all the clipping planes
      var numClipPlanes = model.renderable.getNumberOfClippingPlanes();

      if (numClipPlanes > 6) {
        (0,_macros_js__WEBPACK_IMPORTED_MODULE_1__.vtkErrorMacro)('OpenGL has a limit of 6 clipping planes');
        numClipPlanes = 6;
      }

      var image = model.currentInput;
      var w2imat4 = image.getWorldToIndex();
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_16__.m)(model.imagematinv, w2imat4, actor.getMatrix());
      var planeEquations = [];

      for (var _i3 = 0; _i3 < numClipPlanes; _i3++) {
        var planeEquation = [];
        model.renderable.getClippingPlaneInDataCoords(model.imagematinv, _i3, planeEquation);

        for (var j = 0; j < 4; j++) {
          planeEquations.push(planeEquation[j]);
        }
      }

      cellBO.getProgram().setUniformi('numClipPlanes', numClipPlanes);
      cellBO.getProgram().setUniform4fv('clipPlanes', 6, planeEquations);
    }
  };

  publicAPI.setCameraShaderParameters = function (cellBO, ren, actor) {
    var program = cellBO.getProgram();
    var actMats = model.openGLImageSlice.getKeyMatrices();
    var image = model.currentInput;
    var i2wmat4 = image.getIndexToWorld();
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_16__.m)(model.imagemat, actMats.mcwc, i2wmat4);
    var keyMats = model.openGLCamera.getKeyMatrices(ren);
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_16__.m)(model.imagemat, keyMats.wcpc, model.imagemat);

    if (cellBO.getCABO().getCoordShiftAndScaleEnabled()) {
      var inverseShiftScaleMat = cellBO.getCABO().getInverseShiftAndScaleMatrix();
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_16__.m)(model.imagemat, model.imagemat, inverseShiftScaleMat);
    }

    program.setUniformMatrix('MCPCMatrix', model.imagemat);
  };

  publicAPI.setPropertyShaderParameters = function (cellBO, ren, actor) {
    var program = cellBO.getProgram();
    var ppty = actor.getProperty();
    var opacity = ppty.getOpacity();
    program.setUniformf('opacity', opacity);
  };

  publicAPI.renderPieceStart = function (ren, actor) {
    // make sure the BOs are up to date
    publicAPI.updateBufferObjects(ren, actor); // Bind the OpenGL, this is shared between the different primitive/cell types.

    model.lastBoundBO = null;
  };

  publicAPI.renderPieceDraw = function (ren, actor) {
    var gl = model.context; // activate the texture

    model.openGLTexture.activate();
    model.colorTexture.activate();
    model.pwfTexture.activate(); // draw polygons

    if (model.tris.getCABO().getElementCount()) {
      // First we do the triangles, update the shader, set uniforms, etc.
      publicAPI.updateShaders(model.tris, ren, actor);
      gl.drawArrays(gl.TRIANGLES, 0, model.tris.getCABO().getElementCount());
      model.tris.getVAO().release();
    }

    model.openGLTexture.deactivate();
    model.colorTexture.deactivate();
    model.pwfTexture.deactivate();
  };

  publicAPI.renderPieceFinish = function (ren, actor) {};

  publicAPI.renderPiece = function (ren, actor) {
    // Make sure that we have been properly initialized.
    // if (ren.getRenderWindow().checkAbortStatus()) {
    //   return;
    // }
    publicAPI.invokeEvent({
      type: 'StartEvent'
    });
    model.renderable.update();
    model.currentInput = model.renderable.getInputData();
    publicAPI.invokeEvent({
      type: 'EndEvent'
    });

    if (!model.currentInput) {
      vtkErrorMacro('No input!');
      return;
    }

    publicAPI.renderPieceStart(ren, actor);
    publicAPI.renderPieceDraw(ren, actor);
    publicAPI.renderPieceFinish(ren, actor);
  };

  publicAPI.computeBounds = function (ren, actor) {
    if (!publicAPI.getInput()) {
      (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_5__.u)(model.bounds);
      return;
    }

    model.bounds = publicAPI.getInput().getBounds();
  };

  publicAPI.updateBufferObjects = function (ren, actor) {
    // Rebuild buffers if needed
    if (publicAPI.getNeedToRebuildBufferObjects(ren, actor)) {
      publicAPI.buildBufferObjects(ren, actor);
    }
  };

  publicAPI.getNeedToRebuildBufferObjects = function (ren, actor) {
    // first do a coarse check
    if (model.VBOBuildTime.getMTime() < publicAPI.getMTime() || model.VBOBuildTime.getMTime() < actor.getMTime() || model.VBOBuildTime.getMTime() < model.renderable.getMTime() || model.VBOBuildTime.getMTime() < actor.getProperty().getMTime() || model.VBOBuildTime.getMTime() < model.currentInput.getMTime()) {
      return true;
    }

    return false;
  };

  publicAPI.buildBufferObjects = function (ren, actor) {
    var image = model.currentInput;

    if (!image) {
      return;
    }

    var imgScalars = image.getPointData() && image.getPointData().getScalars();

    if (!imgScalars) {
      return;
    }

    var actorProperty = actor.getProperty(); // set interpolation on the texture based on property setting

    var iType = actorProperty.getInterpolationType();

    if (iType === _Core_ImageProperty_Constants_js__WEBPACK_IMPORTED_MODULE_11__.InterpolationType.NEAREST) {
      model.colorTexture.setMinificationFilter(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_10__.Filter.NEAREST);
      model.colorTexture.setMagnificationFilter(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_10__.Filter.NEAREST);
      model.pwfTexture.setMinificationFilter(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_10__.Filter.NEAREST);
      model.pwfTexture.setMagnificationFilter(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_10__.Filter.NEAREST);
    } else {
      model.colorTexture.setMinificationFilter(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_10__.Filter.LINEAR);
      model.colorTexture.setMagnificationFilter(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_10__.Filter.LINEAR);
      model.pwfTexture.setMinificationFilter(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_10__.Filter.LINEAR);
      model.pwfTexture.setMagnificationFilter(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_10__.Filter.LINEAR);
    }

    var numComp = imgScalars.getNumberOfComponents();
    var iComps = actorProperty.getIndependentComponents();
    var numIComps = iComps ? numComp : 1;
    var textureHeight = iComps ? 2 * numIComps : 1;
    var cfunToString = computeFnToString(actorProperty, actorProperty.getRGBTransferFunction, numIComps);

    if (model.colorTextureString !== cfunToString) {
      var cWidth = 1024;
      var cSize = cWidth * textureHeight * 3;
      var cTable = new Uint8Array(cSize);
      var cfun = actorProperty.getRGBTransferFunction();

      if (cfun) {
        var tmpTable = new Float32Array(cWidth * 3);

        for (var c = 0; c < numIComps; c++) {
          cfun = actorProperty.getRGBTransferFunction(c);
          var cRange = cfun.getRange();
          cfun.getTable(cRange[0], cRange[1], cWidth, tmpTable, 1);

          if (iComps) {
            for (var i = 0; i < cWidth * 3; i++) {
              cTable[c * cWidth * 6 + i] = 255.0 * tmpTable[i];
              cTable[c * cWidth * 6 + i + cWidth * 3] = 255.0 * tmpTable[i];
            }
          } else {
            for (var _i4 = 0; _i4 < cWidth * 3; _i4++) {
              cTable[c * cWidth * 6 + _i4] = 255.0 * tmpTable[_i4];
            }
          }
        }

        model.colorTexture.create2DFromRaw(cWidth, textureHeight, 3, _Common_Core_DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_3__.VtkDataTypes.UNSIGNED_CHAR, cTable);
      } else {
        for (var _i5 = 0; _i5 < cWidth * 3; ++_i5) {
          cTable[_i5] = 255.0 * _i5 / ((cWidth - 1) * 3);
          cTable[_i5 + 1] = 255.0 * _i5 / ((cWidth - 1) * 3);
          cTable[_i5 + 2] = 255.0 * _i5 / ((cWidth - 1) * 3);
        }

        model.colorTexture.create2DFromRaw(cWidth, 1, 3, _Common_Core_DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_3__.VtkDataTypes.UNSIGNED_CHAR, cTable);
      }

      model.colorTextureString = cfunToString;
    } // Build piecewise function buffer.  This buffer is used either
    // for component weighting or opacity, depending on whether we're
    // rendering components independently or not.


    var pwfunToString = computeFnToString(actorProperty, actorProperty.getPiecewiseFunction, numIComps);

    if (model.pwfTextureString !== pwfunToString) {
      var pwfWidth = 1024;
      var pwfSize = pwfWidth * textureHeight;
      var pwfTable = new Uint8Array(pwfSize);
      var pwfun = actorProperty.getPiecewiseFunction(); // support case where pwfun is added/removed

      model.pwfTexture.resetFormatAndType();

      if (pwfun) {
        var pwfFloatTable = new Float32Array(pwfSize);

        var _tmpTable = new Float32Array(pwfWidth);

        for (var _c = 0; _c < numIComps; ++_c) {
          pwfun = actorProperty.getPiecewiseFunction(_c);

          if (pwfun === null) {
            // Piecewise constant max if no function supplied for this component
            pwfFloatTable.fill(1.0);
          } else {
            var pwfRange = pwfun.getRange();
            pwfun.getTable(pwfRange[0], pwfRange[1], pwfWidth, _tmpTable, 1); // adjust for sample distance etc

            if (iComps) {
              for (var _i6 = 0; _i6 < pwfWidth; _i6++) {
                pwfFloatTable[_c * pwfWidth * 2 + _i6] = _tmpTable[_i6];
                pwfFloatTable[_c * pwfWidth * 2 + _i6 + pwfWidth] = _tmpTable[_i6];
              }
            } else {
              for (var _i7 = 0; _i7 < pwfWidth; _i7++) {
                pwfFloatTable[_c * pwfWidth * 2 + _i7] = _tmpTable[_i7];
              }
            }
          }
        }

        model.pwfTexture.create2DFromRaw(pwfWidth, textureHeight, 1, _Common_Core_DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_3__.VtkDataTypes.FLOAT, pwfFloatTable);
      } else {
        // default is opaque
        pwfTable.fill(255.0);
        model.pwfTexture.create2DFromRaw(pwfWidth, 1, 1, _Common_Core_DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_3__.VtkDataTypes.UNSIGNED_CHAR, pwfTable);
      }

      model.pwfTextureString = pwfunToString;
    } // Find what IJK axis and what direction to slice along


    var _model$renderable$get = model.renderable.getClosestIJKAxis(),
        ijkMode = _model$renderable$get.ijkMode; // Find the IJK slice


    var nSlice = model.renderable.getSlice();

    if (ijkMode !== model.renderable.getSlicingMode()) {
      // If not IJK slicing, get the IJK slice from the XYZ position/slice
      nSlice = model.renderable.getSliceAtPosition(nSlice);
    } // Find sliceOffset


    var ext = image.getExtent();
    var sliceOffset;

    if (ijkMode === SlicingMode.I) {
      sliceOffset = nSlice - ext[0];
    }

    if (ijkMode === SlicingMode.J) {
      sliceOffset = nSlice - ext[2];
    }

    if (ijkMode === SlicingMode.K || ijkMode === SlicingMode.NONE) {
      sliceOffset = nSlice - ext[4];
    } // rebuild the VBO if the data has changed


    var toString = "".concat(nSlice, "A").concat(image.getMTime(), "A").concat(imgScalars.getMTime(), "B").concat(publicAPI.getMTime(), "C").concat(model.renderable.getSlicingMode(), "D").concat(actor.getProperty().getMTime());

    if (model.VBOBuildString !== toString) {
      // Build the VBOs
      var dims = image.getDimensions();

      if (iType === _Core_ImageProperty_Constants_js__WEBPACK_IMPORTED_MODULE_11__.InterpolationType.NEAREST) {
        if (numComp === 4) {
          model.openGLTexture.setGenerateMipmap(true);
          model.openGLTexture.setMinificationFilter(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_10__.Filter.NEAREST);
        } else {
          model.openGLTexture.setMinificationFilter(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_10__.Filter.NEAREST);
        }

        model.openGLTexture.setMagnificationFilter(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_10__.Filter.NEAREST);
      } else {
        if (numComp === 4) {
          model.openGLTexture.setGenerateMipmap(true);
          model.openGLTexture.setMinificationFilter(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_10__.Filter.LINEAR_MIPMAP_LINEAR);
        } else {
          model.openGLTexture.setMinificationFilter(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_10__.Filter.LINEAR);
        }

        model.openGLTexture.setMagnificationFilter(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_10__.Filter.LINEAR);
      }

      model.openGLTexture.setWrapS(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_10__.Wrap.CLAMP_TO_EDGE);
      model.openGLTexture.setWrapT(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_10__.Wrap.CLAMP_TO_EDGE);
      var sliceSize = dims[0] * dims[1] * numComp;
      var ptsArray = new Float32Array(12);
      var tcoordArray = new Float32Array(8);

      for (var _i8 = 0; _i8 < 4; _i8++) {
        tcoordArray[_i8 * 2] = _i8 % 2 ? 1.0 : 0.0;
        tcoordArray[_i8 * 2 + 1] = _i8 > 1 ? 1.0 : 0.0;
      }

      var basicScalars = imgScalars.getData();
      var scalars = null; // Get right scalars according to slicing mode

      if (ijkMode === SlicingMode.I) {
        scalars = new basicScalars.constructor(dims[2] * dims[1] * numComp);
        var id = 0;

        for (var k = 0; k < dims[2]; k++) {
          for (var j = 0; j < dims[1]; j++) {
            var bsIdx = (sliceOffset + j * dims[0] + k * dims[0] * dims[1]) * numComp;
            id = (k * dims[1] + j) * numComp;
            scalars.set(basicScalars.subarray(bsIdx, bsIdx + numComp), id);
          }
        }

        dims[0] = dims[1];
        dims[1] = dims[2];
        ptsArray[0] = nSlice;
        ptsArray[1] = ext[2];
        ptsArray[2] = ext[4];
        ptsArray[3] = nSlice;
        ptsArray[4] = ext[3];
        ptsArray[5] = ext[4];
        ptsArray[6] = nSlice;
        ptsArray[7] = ext[2];
        ptsArray[8] = ext[5];
        ptsArray[9] = nSlice;
        ptsArray[10] = ext[3];
        ptsArray[11] = ext[5];
      } else if (ijkMode === SlicingMode.J) {
        scalars = new basicScalars.constructor(dims[2] * dims[0] * numComp);
        var _id = 0;

        for (var _k = 0; _k < dims[2]; _k++) {
          for (var _i9 = 0; _i9 < dims[0]; _i9++) {
            var _bsIdx = (_i9 + sliceOffset * dims[0] + _k * dims[0] * dims[1]) * numComp;

            _id = (_k * dims[0] + _i9) * numComp;
            scalars.set(basicScalars.subarray(_bsIdx, _bsIdx + numComp), _id);
          }
        }

        dims[1] = dims[2];
        ptsArray[0] = ext[0];
        ptsArray[1] = nSlice;
        ptsArray[2] = ext[4];
        ptsArray[3] = ext[1];
        ptsArray[4] = nSlice;
        ptsArray[5] = ext[4];
        ptsArray[6] = ext[0];
        ptsArray[7] = nSlice;
        ptsArray[8] = ext[5];
        ptsArray[9] = ext[1];
        ptsArray[10] = nSlice;
        ptsArray[11] = ext[5];
      } else if (ijkMode === SlicingMode.K || ijkMode === SlicingMode.NONE) {
        scalars = basicScalars.subarray(sliceOffset * sliceSize, (sliceOffset + 1) * sliceSize);
        ptsArray[0] = ext[0];
        ptsArray[1] = ext[2];
        ptsArray[2] = nSlice;
        ptsArray[3] = ext[1];
        ptsArray[4] = ext[2];
        ptsArray[5] = nSlice;
        ptsArray[6] = ext[0];
        ptsArray[7] = ext[3];
        ptsArray[8] = nSlice;
        ptsArray[9] = ext[1];
        ptsArray[10] = ext[3];
        ptsArray[11] = nSlice;
      } else {
        vtkErrorMacro('Reformat slicing not yet supported.');
      }

      model.openGLTexture.create2DFromRaw(dims[0], dims[1], numComp, imgScalars.getDataType(), scalars);
      model.openGLTexture.activate();
      model.openGLTexture.sendParameters();
      model.openGLTexture.deactivate();
      var points = _Common_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance({
        numberOfComponents: 3,
        values: ptsArray
      });
      points.setName('points');
      var tcoords = _Common_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance({
        numberOfComponents: 2,
        values: tcoordArray
      });
      tcoords.setName('tcoords');
      var cellArray = new Uint16Array(8);
      cellArray[0] = 3;
      cellArray[1] = 0;
      cellArray[2] = 1;
      cellArray[3] = 3;
      cellArray[4] = 3;
      cellArray[5] = 0;
      cellArray[6] = 3;
      cellArray[7] = 2;
      var cells = _Common_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance({
        numberOfComponents: 1,
        values: cellArray
      });
      model.tris.getCABO().createVBO(cells, 'polys', _Core_Property_Constants_js__WEBPACK_IMPORTED_MODULE_9__.Representation.SURFACE, {
        points: points,
        tcoords: tcoords,
        cellOffset: 0
      });
      model.VBOBuildTime.modified();
      model.VBOBuildString = toString;
    }
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  VBOBuildTime: 0,
  VBOBuildString: null,
  openGLTexture: null,
  tris: null,
  imagemat: null,
  imagematinv: null,
  colorTexture: null,
  pwfTexture: null,
  lastHaveSeenDepthRequest: false,
  haveSeenDepthRequest: false,
  lastTextureComponents: 0
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_8__["default"].extend(publicAPI, model, initialValues);
  _ReplacementShaderMapper_js__WEBPACK_IMPORTED_MODULE_14__["default"].implementReplaceShaderCoincidentOffset(publicAPI, model, initialValues);
  model.tris = _Helper_js__WEBPACK_IMPORTED_MODULE_4__["default"].newInstance();
  model.openGLTexture = _Texture_js__WEBPACK_IMPORTED_MODULE_6__["default"].newInstance();
  model.colorTexture = _Texture_js__WEBPACK_IMPORTED_MODULE_6__["default"].newInstance();
  model.pwfTexture = _Texture_js__WEBPACK_IMPORTED_MODULE_6__["default"].newInstance();
  model.imagemat = (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_16__.i)(new Float64Array(16));
  model.imagematinv = (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_16__.i)(new Float64Array(16)); // Build VTK API

  (0,_macros_js__WEBPACK_IMPORTED_MODULE_1__.setGet)(publicAPI, model, []);
  model.VBOBuildTime = {};
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_1__.obj)(model.VBOBuildTime); // Object methods

  vtkOpenGLImageMapper(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = (0,_macros_js__WEBPACK_IMPORTED_MODULE_1__.newInstance)(extend, 'vtkOpenGLImageMapper'); // ----------------------------------------------------------------------------

var vtkImageMapper = {
  newInstance: newInstance,
  extend: extend
}; // Register ourself to OpenGL backend if imported

(0,_ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_15__.registerOverride)('vtkImageMapper', newInstance);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ImageSlice.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/ImageSlice.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkImageSlice),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../SceneGraph/ViewNode.js */ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/ViewNode.js");
/* harmony import */ var _ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ViewNodeFactory.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ViewNodeFactory.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js");





// vtkOpenGLImageSlice methods
// ----------------------------------------------------------------------------

function vtkOpenGLImageSlice(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkOpenGLImageSlice'); // Builds myself.

  publicAPI.buildPass = function (prepass) {
    if (!model.renderable || !model.renderable.getVisibility()) {
      return;
    }

    if (prepass) {
      if (!model.renderable) {
        return;
      }

      model.openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');
      publicAPI.prepareNodes();
      publicAPI.addMissingNode(model.renderable.getMapper());
      publicAPI.removeUnusedNodes();
    }
  };

  publicAPI.traverseOpaqueZBufferPass = function (renderPass) {
    publicAPI.traverseOpaquePass(renderPass);
  }; // we draw textures, then mapper, then post pass textures


  publicAPI.traverseOpaquePass = function (renderPass) {
    if (!model.renderable || !model.renderable.getNestedVisibility() || !model.renderable.getIsOpaque() || model.openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {
      return;
    }

    publicAPI.apply(renderPass, true);
    model.children.forEach(function (child) {
      child.traverse(renderPass);
    });
    publicAPI.apply(renderPass, false);
  }; // we draw textures, then mapper, then post pass textures


  publicAPI.traverseTranslucentPass = function (renderPass) {
    if (!model.renderable || !model.renderable.getNestedVisibility() || model.renderable.getIsOpaque() || model.openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {
      return;
    }

    publicAPI.apply(renderPass, true);
    model.children.forEach(function (child) {
      child.traverse(renderPass);
    });
    publicAPI.apply(renderPass, false);
  };

  publicAPI.queryPass = function (prepass, renderPass) {
    if (prepass) {
      if (!model.renderable || !model.renderable.getVisibility()) {
        return;
      }

      if (model.renderable.getIsOpaque()) {
        renderPass.incrementOpaqueActorCount();
      } else {
        renderPass.incrementTranslucentActorCount();
      }
    }
  };

  publicAPI.opaqueZBufferPass = function (prepass, renderPass) {
    return publicAPI.opaquePass(prepass, renderPass);
  }; // Renders myself


  publicAPI.opaquePass = function (prepass, renderPass) {
    if (prepass) {
      model.context = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderWindow').getContext();
      model.context.depthMask(true);
    }
  }; // Renders myself


  publicAPI.translucentPass = function (prepass, renderPass) {
    if (prepass) {
      model.context = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderWindow').getContext();
      model.context.depthMask(false);
    } else {
      model.context.depthMask(true);
    }
  };

  publicAPI.getKeyMatrices = function () {
    // has the actor changed?
    if (model.renderable.getMTime() > model.keyMatrixTime.getMTime()) {
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.d)(model.keyMatrices.mcwc, model.renderable.getMatrix());
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.j)(model.keyMatrices.mcwc, model.keyMatrices.mcwc);
      model.keyMatrixTime.modified();
    }

    return model.keyMatrices;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  context: null,
  keyMatrixTime: null,
  keyMatrices: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues);
  model.keyMatrixTime = {};
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.obj)(model.keyMatrixTime, {
    mtime: 0
  });
  model.keyMatrices = {
    mcwc: (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.i)(new Float64Array(16))
  }; // Build VTK API

  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.setGet)(publicAPI, model, ['context']); // Object methods

  vtkOpenGLImageSlice(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.newInstance)(extend, 'vtkOpenGLImageSlice'); // ----------------------------------------------------------------------------

var vtkImageSlice = {
  newInstance: newInstance,
  extend: extend
}; // Register ourself to OpenGL backend if imported

(0,_ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_2__.registerOverride)('vtkImageSlice', newInstance);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/PixelSpaceCallbackMapper.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/PixelSpaceCallbackMapper.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkPixelSpaceCallbackMapper),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../SceneGraph/ViewNode.js */ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/ViewNode.js");
/* harmony import */ var _ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ViewNodeFactory.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ViewNodeFactory.js");




// import { mat4, vec3 }     from 'gl-matrix';
var vtkDebugMacro = _macros_js__WEBPACK_IMPORTED_MODULE_0__.vtkDebugMacro; // ----------------------------------------------------------------------------
// vtkOpenGLPixelSpaceCallbackMapper methods
// ----------------------------------------------------------------------------

function vtkOpenGLPixelSpaceCallbackMapper(publicAPI, model) {
  model.classHierarchy.push('vtkOpenGLPixelSpaceCallbackMapper');

  publicAPI.opaquePass = function (prepass, renderPass) {
    model.openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');
    model.openGLRenderWindow = model.openGLRenderer.getParent();
    var aspectRatio = model.openGLRenderer.getAspectRatio();
    var camera = model.openGLRenderer ? model.openGLRenderer.getRenderable().getActiveCamera() : null;
    var tsize = model.openGLRenderer.getTiledSizeAndOrigin();
    var texels = null;

    if (model.renderable.getUseZValues()) {
      var zbt = renderPass.getZBufferTexture();
      var width = Math.floor(zbt.getWidth());
      var height = Math.floor(zbt.getHeight());
      var gl = model.openGLRenderWindow.getContext();
      zbt.bind(); // Here we need to use vtkFramebuffer to save current settings (bindings/buffers)

      var fb = renderPass.getFramebuffer();

      if (!fb) {
        vtkDebugMacro('No framebuffer to save/restore');
      } else {
        // save framebuffer settings
        fb.saveCurrentBindingsAndBuffers();
      }

      var framebuffer = gl.createFramebuffer();
      gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, zbt.getHandle(), 0);

      if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE) {
        texels = new Uint8Array(width * height * 4);
        gl.viewport(0, 0, width, height);
        gl.readPixels(0, 0, width, height, gl.RGBA, gl.UNSIGNED_BYTE, texels);
      } // Now we need to restore framebuffer bindings/buffers


      if (fb) {
        fb.restorePreviousBindingsAndBuffers();
      }

      gl.deleteFramebuffer(framebuffer);
    }

    model.renderable.invokeCallback(model.renderable.getInputData(), camera, aspectRatio, tsize, texels);
  };

  publicAPI.queryPass = function (prepass, renderPass) {
    if (prepass) {
      if (model.renderable.getUseZValues()) {
        renderPass.requestDepth();
      }
    }
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues); // Object methods

  vtkOpenGLPixelSpaceCallbackMapper(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.newInstance)(extend, 'vtkOpenGLPixelSpaceCallbackMapper'); // ----------------------------------------------------------------------------

var vtkPixelSpaceCallbackMapper = {
  newInstance: newInstance,
  extend: extend
}; // Register ourself to OpenGL backend if imported

(0,_ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_2__.registerOverride)('vtkPixelSpaceCallbackMapper', newInstance);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/PolyDataMapper.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/PolyDataMapper.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkOpenGLPolyDataMapper$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat3.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat3.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js");
/* harmony import */ var _vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/vec3.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/vec3.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Helper_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./Helper.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Helper.js");
/* harmony import */ var _Core_Mapper_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Core/Mapper.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Mapper.js");
/* harmony import */ var _Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../Common/Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");
/* harmony import */ var _Texture_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./Texture.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Texture.js");
/* harmony import */ var _Core_Property_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../Core/Property.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Property.js");
/* harmony import */ var _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./ShaderProgram.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ShaderProgram.js");
/* harmony import */ var _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../SceneGraph/ViewNode.js */ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/ViewNode.js");
/* harmony import */ var _glsl_vtkPolyDataVS_glsl_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./glsl/vtkPolyDataVS.glsl.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/glsl/vtkPolyDataVS.glsl.js");
/* harmony import */ var _glsl_vtkPolyDataFS_glsl_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./glsl/vtkPolyDataFS.glsl.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/glsl/vtkPolyDataFS.glsl.js");
/* harmony import */ var _ReplacementShaderMapper_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./ReplacementShaderMapper.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ReplacementShaderMapper.js");
/* harmony import */ var _ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./ViewNodeFactory.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ViewNodeFactory.js");

















/* eslint-disable no-lonely-if */

var primTypes = {
  Start: 0,
  Points: 0,
  Lines: 1,
  Tris: 2,
  TriStrips: 3,
  TrisEdges: 4,
  TriStripsEdges: 5,
  End: 6
};
var Representation = _Core_Property_js__WEBPACK_IMPORTED_MODULE_9__["default"].Representation,
    Shading = _Core_Property_js__WEBPACK_IMPORTED_MODULE_9__["default"].Shading;
var ScalarMode = _Core_Mapper_js__WEBPACK_IMPORTED_MODULE_6__["default"].ScalarMode;
var Filter = _Texture_js__WEBPACK_IMPORTED_MODULE_8__["default"].Filter,
    Wrap = _Texture_js__WEBPACK_IMPORTED_MODULE_8__["default"].Wrap;
var vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_4__.vtkErrorMacro;
var StartEvent = {
  type: 'StartEvent'
};
var EndEvent = {
  type: 'EndEvent'
}; // ----------------------------------------------------------------------------
// vtkOpenGLPolyDataMapper methods
// ----------------------------------------------------------------------------

function vtkOpenGLPolyDataMapper(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkOpenGLPolyDataMapper');

  publicAPI.buildPass = function (prepass) {
    if (prepass) {
      model.openGLActor = publicAPI.getFirstAncestorOfType('vtkOpenGLActor');
      model.openGLRenderer = model.openGLActor.getFirstAncestorOfType('vtkOpenGLRenderer');
      model.openGLRenderWindow = model.openGLRenderer.getParent();
      model.openGLCamera = model.openGLRenderer.getViewNodeFor(model.openGLRenderer.getRenderable().getActiveCamera());
    }
  }; // Renders myself


  publicAPI.translucentPass = function (prepass) {
    if (prepass) {
      publicAPI.render();
    }
  };

  publicAPI.opaqueZBufferPass = function (prepass) {
    if (prepass) {
      model.haveSeenDepthRequest = true;
      model.renderDepth = true;
      publicAPI.render();
      model.renderDepth = false;
    }
  };

  publicAPI.opaquePass = function (prepass) {
    if (prepass) {
      publicAPI.render();
    }
  };

  publicAPI.render = function () {
    var ctx = model.openGLRenderWindow.getContext();

    if (model.context !== ctx) {
      model.context = ctx;

      for (var i = primTypes.Start; i < primTypes.End; i++) {
        model.primitives[i].setOpenGLRenderWindow(model.openGLRenderWindow);
      }
    }

    var actor = model.openGLActor.getRenderable();
    var ren = model.openGLRenderer.getRenderable();
    publicAPI.renderPiece(ren, actor);
  };

  publicAPI.buildShaders = function (shaders, ren, actor) {
    publicAPI.getShaderTemplate(shaders, ren, actor); // user specified pre replacements

    var openGLSpec = model.renderable.getViewSpecificProperties().OpenGL;
    var shaderReplacements = null;

    if (openGLSpec) {
      shaderReplacements = openGLSpec.ShaderReplacements;
    }

    if (shaderReplacements) {
      for (var i = 0; i < shaderReplacements.length; i++) {
        var currReplacement = shaderReplacements[i];

        if (currReplacement.replaceFirst) {
          var shaderType = currReplacement.shaderType;
          var ssrc = shaders[shaderType];
          var substituteRes = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(ssrc, currReplacement.originalValue, currReplacement.replacementValue, currReplacement.replaceAll);
          shaders[shaderType] = substituteRes.result;
        }
      }
    }

    publicAPI.replaceShaderValues(shaders, ren, actor); // user specified post replacements

    if (shaderReplacements) {
      for (var _i = 0; _i < shaderReplacements.length; _i++) {
        var _currReplacement = shaderReplacements[_i];

        if (!_currReplacement.replaceFirst) {
          var _shaderType = _currReplacement.shaderType;
          var _ssrc = shaders[_shaderType];

          var _substituteRes = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(_ssrc, _currReplacement.originalValue, _currReplacement.replacementValue, _currReplacement.replaceAll);

          shaders[_shaderType] = _substituteRes.result;
        }
      }
    }
  };

  publicAPI.getShaderTemplate = function (shaders, ren, actor) {
    var openGLSpecProp = model.renderable.getViewSpecificProperties().OpenGL;
    var vertexShaderCode = _glsl_vtkPolyDataVS_glsl_js__WEBPACK_IMPORTED_MODULE_12__.v;

    if (openGLSpecProp) {
      var vertexSpecProp = openGLSpecProp.VertexShaderCode;

      if (vertexSpecProp !== undefined && vertexSpecProp !== '') {
        vertexShaderCode = vertexSpecProp;
      }
    }

    shaders.Vertex = vertexShaderCode;
    var fragmentShaderCode = _glsl_vtkPolyDataFS_glsl_js__WEBPACK_IMPORTED_MODULE_13__.v;

    if (openGLSpecProp) {
      var fragmentSpecProp = openGLSpecProp.FragmentShaderCode;

      if (fragmentSpecProp !== undefined && fragmentSpecProp !== '') {
        fragmentShaderCode = fragmentSpecProp;
      }
    }

    shaders.Fragment = fragmentShaderCode;
    var geometryShaderCode = '';

    if (openGLSpecProp) {
      var geometrySpecProp = openGLSpecProp.GeometryShaderCode;

      if (geometrySpecProp !== undefined) {
        geometryShaderCode = geometrySpecProp;
      }
    }

    shaders.Geometry = geometryShaderCode;
  };

  publicAPI.replaceShaderColor = function (shaders, ren, actor) {
    var VSSource = shaders.Vertex;
    var GSSource = shaders.Geometry;
    var FSSource = shaders.Fragment;
    var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity'); // create the material/color property declarations, and VS implementation
    // these are always defined

    var colorDec = ['uniform float ambient;', 'uniform float diffuse;', 'uniform float specular;', 'uniform float opacityUniform; // the fragment opacity', 'uniform vec3 ambientColorUniform;', 'uniform vec3 diffuseColorUniform;']; // add more for specular

    if (lastLightComplexity) {
      colorDec = colorDec.concat(['uniform vec3 specularColorUniform;', 'uniform float specularPowerUniform;']);
    } // now handle the more complex fragment shader implementation
    // the following are always defined variables.  We start
    // by assigning a default value from the uniform


    var colorImpl = ['vec3 ambientColor;', '  vec3 diffuseColor;', '  float opacity;'];

    if (lastLightComplexity) {
      colorImpl = colorImpl.concat(['  vec3 specularColor;', '  float specularPower;']);
    }

    colorImpl = colorImpl.concat(['  ambientColor = ambientColorUniform;', '  diffuseColor = diffuseColorUniform;', '  opacity = opacityUniform;']);

    if (lastLightComplexity) {
      colorImpl = colorImpl.concat(['  specularColor = specularColorUniform;', '  specularPower = specularPowerUniform;']);
    } // add scalar vertex coloring


    if (model.lastBoundBO.getCABO().getColorComponents() !== 0 && !model.drawingEdges) {
      colorDec = colorDec.concat(['varying vec4 vertexColorVSOutput;']);
      VSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(VSSource, '//VTK::Color::Dec', ['attribute vec4 scalarColor;', 'varying vec4 vertexColorVSOutput;']).result;
      VSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(VSSource, '//VTK::Color::Impl', ['vertexColorVSOutput =  scalarColor;']).result;
      GSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(GSSource, '//VTK::Color::Dec', ['in vec4 vertexColorVSOutput[];', 'out vec4 vertexColorGSOutput;']).result;
      GSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(GSSource, '//VTK::Color::Impl', ['vertexColorGSOutput = vertexColorVSOutput[i];']).result;
    }

    if (model.lastBoundBO.getCABO().getColorComponents() !== 0 && !model.drawingEdges) {
      FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::Color::Impl', colorImpl.concat(['  diffuseColor = vertexColorVSOutput.rgb;', '  ambientColor = vertexColorVSOutput.rgb;', '  opacity = opacity*vertexColorVSOutput.a;'])).result;
    } else {
      if (model.renderable.getInterpolateScalarsBeforeMapping() && model.renderable.getColorCoordinates() && !model.drawingEdges) {
        FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::Color::Impl', colorImpl.concat(['  vec4 texColor = texture2D(texture1, tcoordVCVSOutput.st);', '  diffuseColor = texColor.rgb;', '  ambientColor = texColor.rgb;', '  opacity = opacity*texColor.a;'])).result;
      } else {
        if (actor.getBackfaceProperty() && !model.drawingEdges) {
          colorDec = colorDec.concat(['uniform float opacityUniformBF; // the fragment opacity', 'uniform float ambientIntensityBF; // the material ambient', 'uniform float diffuseIntensityBF; // the material diffuse', 'uniform vec3 ambientColorUniformBF; // ambient material color', 'uniform vec3 diffuseColorUniformBF; // diffuse material color']);

          if (lastLightComplexity) {
            colorDec = colorDec.concat(['uniform float specularIntensityBF; // the material specular intensity', 'uniform vec3 specularColorUniformBF; // intensity weighted color', 'uniform float specularPowerUniformBF;']);
            colorImpl = colorImpl.concat(['if (gl_FrontFacing == false) {', '  ambientColor = ambientIntensityBF * ambientColorUniformBF;', '  diffuseColor = diffuseIntensityBF * diffuseColorUniformBF;', '  specularColor = specularIntensityBF * specularColorUniformBF;', '  specularPower = specularPowerUniformBF;', '  opacity = opacityUniformBF; }']);
          } else {
            colorImpl = colorImpl.concat(['if (gl_FrontFacing == false) {', '  ambientColor = ambientIntensityBF * ambientColorUniformBF;', '  diffuseColor = diffuseIntensityBF * diffuseColorUniformBF;', '  opacity = opacityUniformBF; }']);
          }
        }

        if (model.haveCellScalars && !model.drawingEdges) {
          colorDec = colorDec.concat(['uniform samplerBuffer texture1;']);
        }

        FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::Color::Impl', colorImpl).result;
      }
    }

    FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::Color::Dec', colorDec).result;
    shaders.Vertex = VSSource;
    shaders.Geometry = GSSource;
    shaders.Fragment = FSSource;
  };

  publicAPI.replaceShaderLight = function (shaders, ren, actor) {
    var FSSource = shaders.Fragment; // check for shadow maps

    var shadowFactor = '';
    var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');
    var lastLightCount = model.lastBoundBO.getReferenceByName('lastLightCount');
    var sstring = [];

    switch (lastLightComplexity) {
      case 0:
        // no lighting or RENDER_VALUES
        FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::Light::Impl', ['  gl_FragData[0] = vec4(ambientColor * ambient + diffuseColor * diffuse, opacity);', '  //VTK::Light::Impl'], false).result;
        break;

      case 1:
        // headlight
        FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::Light::Impl', ['  float df = max(0.0, normalVCVSOutput.z);', '  float sf = pow(df, specularPower);', '  vec3 diffuseL = df * diffuseColor;', '  vec3 specularL = sf * specularColor;', '  gl_FragData[0] = vec4(ambientColor * ambient + diffuseL * diffuse + specularL * specular, opacity);', '  //VTK::Light::Impl'], false).result;
        break;

      case 2:
        // light kit
        for (var lc = 0; lc < lastLightCount; ++lc) {
          sstring = sstring.concat(["uniform vec3 lightColor".concat(lc, ";"), "uniform vec3 lightDirectionVC".concat(lc, "; // normalized"), "uniform vec3 lightHalfAngleVC".concat(lc, "; // normalized")]);
        }

        FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::Light::Dec', sstring).result;
        sstring = ['vec3 diffuseL = vec3(0,0,0);', '  vec3 specularL = vec3(0,0,0);', '  float df;'];

        for (var _lc = 0; _lc < lastLightCount; ++_lc) {
          sstring = sstring.concat(["  df = max(0.0, dot(normalVCVSOutput, -lightDirectionVC".concat(_lc, "));"), "  diffuseL += ((df".concat(shadowFactor, ") * lightColor").concat(_lc, ");"), "  if (dot(normalVCVSOutput, lightDirectionVC".concat(_lc, ") < 0.0)"), '    {', "    float sf = pow( max(0.0, dot(lightHalfAngleVC".concat(_lc, ",normalVCVSOutput)), specularPower);"), "    specularL += ((sf".concat(shadowFactor, ") * lightColor").concat(_lc, ");"), '    }']);
        }

        sstring = sstring.concat(['  diffuseL = diffuseL * diffuseColor;', '  specularL = specularL * specularColor;', '  gl_FragData[0] = vec4(ambientColor * ambient + diffuseL * diffuse + specularL * specular, opacity);', '  //VTK::Light::Impl']);
        FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::Light::Impl', sstring, false).result;
        break;

      case 3:
        // positional
        for (var _lc2 = 0; _lc2 < lastLightCount; ++_lc2) {
          sstring = sstring.concat(["uniform vec3 lightColor".concat(_lc2, ";"), "uniform vec3 lightDirectionVC".concat(_lc2, "; // normalized"), "uniform vec3 lightHalfAngleVC".concat(_lc2, "; // normalized"), "uniform vec3 lightPositionVC".concat(_lc2, ";"), "uniform vec3 lightAttenuation".concat(_lc2, ";"), "uniform float lightConeAngle".concat(_lc2, ";"), "uniform float lightExponent".concat(_lc2, ";"), "uniform int lightPositional".concat(_lc2, ";")]);
        }

        FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::Light::Dec', sstring).result;
        sstring = ['vec3 diffuseL = vec3(0,0,0);', '  vec3 specularL = vec3(0,0,0);', '  vec3 vertLightDirectionVC;', '  float attenuation;', '  float df;'];

        for (var _lc3 = 0; _lc3 < lastLightCount; ++_lc3) {
          sstring = sstring.concat(['  attenuation = 1.0;', "  if (lightPositional".concat(_lc3, " == 0)"), '    {', "      vertLightDirectionVC = lightDirectionVC".concat(_lc3, ";"), '    }', '  else', '    {', "    vertLightDirectionVC = vertexVC.xyz - lightPositionVC".concat(_lc3, ";"), '    float distanceVC = length(vertLightDirectionVC);', '    vertLightDirectionVC = normalize(vertLightDirectionVC);', '    attenuation = 1.0 /', "      (lightAttenuation".concat(_lc3, ".x"), "       + lightAttenuation".concat(_lc3, ".y * distanceVC"), "       + lightAttenuation".concat(_lc3, ".z * distanceVC * distanceVC);"), '    // per OpenGL standard cone angle is 90 or less for a spot light', "    if (lightConeAngle".concat(_lc3, " <= 90.0)"), '      {', "      float coneDot = dot(vertLightDirectionVC, lightDirectionVC".concat(_lc3, ");"), '      // if inside the cone', "      if (coneDot >= cos(radians(lightConeAngle".concat(_lc3, ")))"), '        {', "        attenuation = attenuation * pow(coneDot, lightExponent".concat(_lc3, ");"), '        }', '      else', '        {', '        attenuation = 0.0;', '        }', '      }', '    }', '    df = max(0.0, attenuation*dot(normalVCVSOutput, -vertLightDirectionVC));', "    diffuseL += ((df".concat(shadowFactor, ") * lightColor").concat(_lc3, ");"), '    if (dot(normalVCVSOutput, vertLightDirectionVC) < 0.0)', '      {', "      float sf = attenuation*pow( max(0.0, dot(lightHalfAngleVC".concat(_lc3, ",normalVCVSOutput)), specularPower);"), "    specularL += ((sf".concat(shadowFactor, ") * lightColor").concat(_lc3, ");"), '    }']);
        }

        sstring = sstring.concat(['  diffuseL = diffuseL * diffuseColor;', '  specularL = specularL * specularColor;', '  gl_FragData[0] = vec4(ambientColor * ambient + diffuseL * diffuse + specularL * specular, opacity);', '  //VTK::Light::Impl']);
        FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::Light::Impl', sstring, false).result;
        break;

      default:
        vtkErrorMacro('bad light complexity');
    }

    shaders.Fragment = FSSource;
  };

  publicAPI.replaceShaderNormal = function (shaders, ren, actor) {
    var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');

    if (lastLightComplexity > 0) {
      var VSSource = shaders.Vertex;
      var GSSource = shaders.Geometry;
      var FSSource = shaders.Fragment;

      if (model.lastBoundBO.getCABO().getNormalOffset()) {
        VSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(VSSource, '//VTK::Normal::Dec', ['attribute vec3 normalMC;', 'uniform mat3 normalMatrix;', 'varying vec3 normalVCVSOutput;']).result;
        VSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(VSSource, '//VTK::Normal::Impl', ['normalVCVSOutput = normalMatrix * normalMC;']).result;
        GSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(GSSource, '//VTK::Normal::Dec', ['in vec3 normalVCVSOutput[];', 'out vec3 normalVCGSOutput;']).result;
        GSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(GSSource, '//VTK::Normal::Impl', ['normalVCGSOutput = normalVCVSOutput[i];']).result;
        FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::Normal::Dec', ['varying vec3 normalVCVSOutput;']).result;
        FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::Normal::Impl', ['vec3 normalVCVSOutput = normalize(normalVCVSOutput);', //  if (!gl_FrontFacing) does not work in intel hd4000 mac
        //  if (int(gl_FrontFacing) == 0) does not work on mesa
        '  if (gl_FrontFacing == false) { normalVCVSOutput = -normalVCVSOutput; }']).result;
      } else {
        if (model.haveCellNormals) {
          FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::Normal::Dec', ['uniform mat3 normalMatrix;', 'uniform samplerBuffer textureN;']).result;
          FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::Normal::Impl', ['vec3 normalVCVSOutput = normalize(normalMatrix *', '    texelFetchBuffer(textureN, gl_PrimitiveID + PrimitiveIDOffset).xyz);', '  if (gl_FrontFacing == false) { normalVCVSOutput = -normalVCVSOutput; }']).result;
        } else {
          if (publicAPI.getOpenGLMode(actor.getProperty().getRepresentation(), model.lastBoundBO.getPrimitiveType()) === model.context.LINES) {
            // generate a normal for lines, it will be perpendicular to the line
            // and maximally aligned with the camera view direction
            // no clue if this is the best way to do this.
            // the code below has been optimized a bit so what follows is
            // an explanation of the basic approach. Compute the gradient of the line
            // with respect to x and y, the the larger of the two
            // cross that with the camera view direction. That gives a vector
            // orthogonal to the camera view and the line. Note that the line and the camera
            // view are probably not orthogonal. Which is why when we cross result that with
            // the line gradient again we get a reasonable normal. It will be othogonal to
            // the line (which is a plane but maximally aligned with the camera view.
            FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::UniformFlow::Impl', ['  vec3 fdx = dFdx(vertexVC.xyz);', '  vec3 fdy = dFdy(vertexVC.xyz);', '  //VTK::UniformFlow::Impl'] // For further replacements
            ).result;
            FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::Normal::Impl', ['vec3 normalVCVSOutput;', '  if (abs(fdx.x) > 0.0)', '    { fdx = normalize(fdx); normalVCVSOutput = normalize(cross(vec3(fdx.y, -fdx.x, 0.0), fdx)); }', '  else { fdy = normalize(fdy); normalVCVSOutput = normalize(cross(vec3(fdy.y, -fdy.x, 0.0), fdy));}']).result;
          } else {
            FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::Normal::Dec', ['uniform int cameraParallel;']).result;
            FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::UniformFlow::Impl', [// '  vec3 fdx = vec3(dFdx(vertexVC.x),dFdx(vertexVC.y),dFdx(vertexVC.z));',
            // '  vec3 fdy = vec3(dFdy(vertexVC.x),dFdy(vertexVC.y),dFdy(vertexVC.z));',
            '  vec3 fdx = dFdx(vertexVC.xyz);', '  vec3 fdy = dFdy(vertexVC.xyz);', '  //VTK::UniformFlow::Impl'] // For further replacements
            ).result;
            FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::Normal::Impl', ['  fdx = normalize(fdx);', '  fdy = normalize(fdy);', '  vec3 normalVCVSOutput = normalize(cross(fdx,fdy));', // the code below is faster, but does not work on some devices
            // 'vec3 normalVC = normalize(cross(dFdx(vertexVC.xyz), dFdy(vertexVC.xyz)));',
            '  if (cameraParallel == 1 && normalVCVSOutput.z < 0.0) { normalVCVSOutput = -1.0*normalVCVSOutput; }', '  if (cameraParallel == 0 && dot(normalVCVSOutput,vertexVC.xyz) > 0.0) { normalVCVSOutput = -1.0*normalVCVSOutput; }']).result;
          }
        }
      }

      shaders.Vertex = VSSource;
      shaders.Geometry = GSSource;
      shaders.Fragment = FSSource;
    }
  };

  publicAPI.replaceShaderPositionVC = function (shaders, ren, actor) {
    var VSSource = shaders.Vertex;
    var GSSource = shaders.Geometry;
    var FSSource = shaders.Fragment; // for points make sure to add in the point size

    if (actor.getProperty().getRepresentation() === Representation.POINTS || model.lastBoundBO.getPrimitiveType() === primTypes.Points) {
      VSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(VSSource, '//VTK::PositionVC::Impl', ['//VTK::PositionVC::Impl', "  gl_PointSize = ".concat(actor.getProperty().getPointSize(), ".0;")], false).result;
    } // do we need the vertex in the shader in View Coordinates


    var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');

    if (lastLightComplexity > 0) {
      VSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(VSSource, '//VTK::PositionVC::Dec', ['varying vec4 vertexVCVSOutput;']).result;
      VSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(VSSource, '//VTK::PositionVC::Impl', ['vertexVCVSOutput = MCVCMatrix * vertexMC;', '  gl_Position = MCPCMatrix * vertexMC;']).result;
      VSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(VSSource, '//VTK::Camera::Dec', ['uniform mat4 MCPCMatrix;', 'uniform mat4 MCVCMatrix;']).result;
      GSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(GSSource, '//VTK::PositionVC::Dec', ['in vec4 vertexVCVSOutput[];', 'out vec4 vertexVCGSOutput;']).result;
      GSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(GSSource, '//VTK::PositionVC::Impl', ['vertexVCGSOutput = vertexVCVSOutput[i];']).result;
      FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::PositionVC::Dec', ['varying vec4 vertexVCVSOutput;']).result;
      FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::PositionVC::Impl', ['vec4 vertexVC = vertexVCVSOutput;']).result;
    } else {
      VSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(VSSource, '//VTK::Camera::Dec', ['uniform mat4 MCPCMatrix;']).result;
      VSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(VSSource, '//VTK::PositionVC::Impl', ['  gl_Position = MCPCMatrix * vertexMC;']).result;
    }

    shaders.Vertex = VSSource;
    shaders.Geometry = GSSource;
    shaders.Fragment = FSSource;
  };

  publicAPI.replaceShaderTCoord = function (shaders, ren, actor) {
    if (model.lastBoundBO.getCABO().getTCoordOffset()) {
      var VSSource = shaders.Vertex;
      var GSSource = shaders.Geometry;
      var FSSource = shaders.Fragment;

      if (model.drawingEdges) {
        return;
      }

      VSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(VSSource, '//VTK::TCoord::Impl', 'tcoordVCVSOutput = tcoordMC;').result; // we only handle the first texture by default
      // additional textures are activated and we set the uniform
      // for the texture unit they are assigned to, but you have to
      // add in the shader code to do something with them

      var tus = model.openGLActor.getActiveTextures();
      var tNumComp = 2;
      var tcdim = 2;

      if (tus && tus.length > 0) {
        tNumComp = tus[0].getComponents();

        if (tus[0].getTarget() === model.context.TEXTURE_CUBE_MAP) {
          tcdim = 3;
        }
      }

      if (model.renderable.getColorTextureMap()) {
        tNumComp = model.renderable.getColorTextureMap().getPointData().getScalars().getNumberOfComponents();
        tcdim = 2;
      }

      if (tcdim === 2) {
        VSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(VSSource, '//VTK::TCoord::Dec', 'attribute vec2 tcoordMC; varying vec2 tcoordVCVSOutput;').result;
        GSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(GSSource, '//VTK::TCoord::Dec', ['in vec2 tcoordVCVSOutput[];', 'out vec2 tcoordVCGSOutput;']).result;
        GSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(GSSource, '//VTK::TCoord::Impl', 'tcoordVCGSOutput = tcoordVCVSOutput[i];').result;
        FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::TCoord::Dec', ['varying vec2 tcoordVCVSOutput;', 'uniform sampler2D texture1;']).result;

        if (tus && tus.length >= 1) {
          switch (tNumComp) {
            case 1:
              FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::TCoord::Impl', ['vec4 tcolor = texture2D(texture1, tcoordVCVSOutput);', 'gl_FragData[0] = clamp(gl_FragData[0],0.0,1.0)*', '  vec4(tcolor.r,tcolor.r,tcolor.r,1.0);']).result;
              break;

            case 2:
              FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::TCoord::Impl', ['vec4 tcolor = texture2D(texture1, tcoordVCVSOutput);', 'gl_FragData[0] = clamp(gl_FragData[0],0.0,1.0)*', '  vec4(tcolor.r,tcolor.r,tcolor.r,tcolor.g);']).result;
              break;

            default:
              FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::TCoord::Impl', 'gl_FragData[0] = clamp(gl_FragData[0],0.0,1.0)*texture2D(texture1, tcoordVCVSOutput.st);').result;
          }
        }
      } else {
        VSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(VSSource, '//VTK::TCoord::Dec', 'attribute vec3 tcoordMC; varying vec3 tcoordVCVSOutput;').result;
        GSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(GSSource, '//VTK::TCoord::Dec', ['in vec3 tcoordVCVSOutput[];', 'out vec3 tcoordVCGSOutput;']).result;
        GSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(GSSource, '//VTK::TCoord::Impl', 'tcoordVCGSOutput = tcoordVCVSOutput[i];').result;
        FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::TCoord::Dec', ['varying vec3 tcoordVCVSOutput;', 'uniform samplerCube texture1;']).result;

        switch (tNumComp) {
          case 1:
            FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::TCoord::Impl', ['vec4 tcolor = textureCube(texture1, tcoordVCVSOutput);', 'gl_FragData[0] = clamp(gl_FragData[0],0.0,1.0)*', '  vec4(tcolor.r,tcolor.r,tcolor.r,1.0);']).result;
            break;

          case 2:
            FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::TCoord::Impl', ['vec4 tcolor = textureCube(texture1, tcoordVCVSOutput);', 'gl_FragData[0] = clamp(gl_FragData[0],0.0,1.0)*', '  vec4(tcolor.r,tcolor.r,tcolor.r,tcolor.g);']).result;
            break;

          default:
            FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::TCoord::Impl', 'gl_FragData[0] = clamp(gl_FragData[0],0.0,1.0)*textureCube(texture1, tcoordVCVSOutput);').result;
        }
      }

      shaders.Vertex = VSSource;
      shaders.Geometry = GSSource;
      shaders.Fragment = FSSource;
    }
  };

  publicAPI.replaceShaderClip = function (shaders, ren, actor) {
    var VSSource = shaders.Vertex;
    var FSSource = shaders.Fragment;

    if (model.renderable.getNumberOfClippingPlanes()) {
      var numClipPlanes = model.renderable.getNumberOfClippingPlanes();

      if (numClipPlanes > 6) {
        (0,_macros_js__WEBPACK_IMPORTED_MODULE_4__.vtkErrorMacro)('OpenGL has a limit of 6 clipping planes');
        numClipPlanes = 6;
      }

      VSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(VSSource, '//VTK::Clip::Dec', ['uniform int numClipPlanes;', 'uniform vec4 clipPlanes[6];', 'varying float clipDistancesVSOutput[6];']).result;
      VSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(VSSource, '//VTK::Clip::Impl', ['for (int planeNum = 0; planeNum < 6; planeNum++)', '    {', '    if (planeNum >= numClipPlanes)', '        {', '        break;', '        }', '    clipDistancesVSOutput[planeNum] = dot(clipPlanes[planeNum], vertexMC);', '    }']).result;
      FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::Clip::Dec', ['uniform int numClipPlanes;', 'varying float clipDistancesVSOutput[6];']).result;
      FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::Clip::Impl', ['for (int planeNum = 0; planeNum < 6; planeNum++)', '    {', '    if (planeNum >= numClipPlanes)', '        {', '        break;', '        }', '    if (clipDistancesVSOutput[planeNum] < 0.0) discard;', '    }']).result;
    }

    shaders.Vertex = VSSource;
    shaders.Fragment = FSSource;
  };

  publicAPI.getCoincidentParameters = function (ren, actor) {
    // 1. ResolveCoincidentTopology is On and non zero for this primitive
    // type
    var cp = null;
    var prop = actor.getProperty();

    if (model.renderable.getResolveCoincidentTopology() || prop.getEdgeVisibility() && prop.getRepresentation() === Representation.SURFACE) {
      var primType = model.lastBoundBO.getPrimitiveType();

      if (primType === primTypes.Points || prop.getRepresentation() === Representation.POINTS) {
        cp = model.renderable.getCoincidentTopologyPointOffsetParameter();
      } else if (primType === primTypes.Lines || prop.getRepresentation() === Representation.WIREFRAME) {
        cp = model.renderable.getCoincidentTopologyLineOffsetParameters();
      } else if (primType === primTypes.Tris || primType === primTypes.TriStrips) {
        cp = model.renderable.getCoincidentTopologyPolygonOffsetParameters();
      }

      if (primType === primTypes.TrisEdges || primType === primTypes.TriStripsEdges) {
        cp = model.renderable.getCoincidentTopologyPolygonOffsetParameters();
        cp.factor /= 2.0;
        cp.offset /= 2.0;
      }
    } // hardware picking always offset due to saved zbuffer
    // This gets you above the saved surface depth buffer.
    // vtkHardwareSelector* selector = ren->GetSelector();
    // if (selector &&
    //     selector->GetFieldAssociation() == vtkDataObject::FIELD_ASSOCIATION_POINTS)
    // {
    //   offset -= 2.0;
    //   return;
    // }


    return cp;
  };

  publicAPI.replaceShaderPicking = function (shaders, ren, actor) {
    var FSSource = shaders.Fragment;
    FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::Picking::Dec', ['uniform vec3 mapperIndex;', 'uniform int picking;']).result;
    FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::Picking::Impl', '  gl_FragData[0] = picking != 0 ? vec4(mapperIndex,1.0) : gl_FragData[0];').result;
    shaders.Fragment = FSSource;
  };

  publicAPI.replaceShaderValues = function (shaders, ren, actor) {
    publicAPI.replaceShaderColor(shaders, ren, actor);
    publicAPI.replaceShaderNormal(shaders, ren, actor);
    publicAPI.replaceShaderLight(shaders, ren, actor);
    publicAPI.replaceShaderTCoord(shaders, ren, actor);
    publicAPI.replaceShaderPicking(shaders, ren, actor);
    publicAPI.replaceShaderClip(shaders, ren, actor);
    publicAPI.replaceShaderCoincidentOffset(shaders, ren, actor);
    publicAPI.replaceShaderPositionVC(shaders, ren, actor);

    if (model.haveSeenDepthRequest) {
      var FSSource = shaders.Fragment;
      FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::ZBuffer::Dec', 'uniform int depthRequest;').result;
      FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_10__["default"].substitute(FSSource, '//VTK::ZBuffer::Impl', ['if (depthRequest == 1) {', 'float iz = floor(gl_FragCoord.z*65535.0 + 0.1);', 'float rf = floor(iz/256.0)/255.0;', 'float gf = mod(iz,256.0)/255.0;', 'gl_FragData[0] = vec4(rf, gf, 0.0, 1.0); }']).result;
      shaders.Fragment = FSSource;
    }
  };

  publicAPI.getNeedToRebuildShaders = function (cellBO, ren, actor) {
    var lightComplexity = 0;
    var numberOfLights = 0;
    var primType = cellBO.getPrimitiveType();
    var poly = model.currentInput; // different algo from C++ as of 5/2019

    var needLighting = false;
    var pointNormals = poly.getPointData().getNormals();
    var cellNormals = poly.getCellData().getNormals();
    var flat = actor.getProperty().getInterpolation() === Shading.FLAT;
    var representation = actor.getProperty().getRepresentation();
    var mode = publicAPI.getOpenGLMode(representation, primType); // 1) all surfaces need lighting

    if (mode === model.context.TRIANGLES) {
      needLighting = true; // 2) all cell normals without point normals need lighting
    } else if (cellNormals && !pointNormals) {
      needLighting = true; // 3) Phong + pointNormals need lighting
    } else if (!flat && pointNormals) {
      needLighting = true; // 4) Phong Lines need lighting
    } else if (!flat && mode === model.context.LINES) {
      needLighting = true;
    } // 5) everything else is unlit
    // do we need lighting?


    if (actor.getProperty().getLighting() && needLighting) {
      // consider the lighting complexity to determine which case applies
      // simple headlight, Light Kit, the whole feature set of VTK
      lightComplexity = 0;
      var lights = ren.getLightsByReference();

      for (var index = 0; index < lights.length; ++index) {
        var light = lights[index];
        var status = light.getSwitch();

        if (status > 0) {
          numberOfLights++;

          if (lightComplexity === 0) {
            lightComplexity = 1;
          }
        }

        if (lightComplexity === 1 && (numberOfLights > 1 || light.getIntensity() !== 1.0 || !light.lightTypeIsHeadLight())) {
          lightComplexity = 2;
        }

        if (lightComplexity < 3 && light.getPositional()) {
          lightComplexity = 3;
        }
      }
    }

    var needRebuild = false;
    var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');
    var lastLightCount = model.lastBoundBO.getReferenceByName('lastLightCount');

    if (lastLightComplexity !== lightComplexity || lastLightCount !== numberOfLights) {
      model.lastBoundBO.set({
        lastLightComplexity: lightComplexity
      }, true);
      model.lastBoundBO.set({
        lastLightCount: numberOfLights
      }, true);
      needRebuild = true;
    } // has something changed that would require us to recreate the shader?
    // candidates are
    // property modified (representation interpolation and lighting)
    // input modified
    // light complexity changed


    if (model.lastHaveSeenDepthRequest !== model.haveSeenDepthRequest || cellBO.getProgram() === 0 || cellBO.getShaderSourceTime().getMTime() < publicAPI.getMTime() || cellBO.getShaderSourceTime().getMTime() < actor.getMTime() || cellBO.getShaderSourceTime().getMTime() < model.renderable.getMTime() || cellBO.getShaderSourceTime().getMTime() < model.currentInput.getMTime() || needRebuild) {
      model.lastHaveSeenDepthRequest = model.haveSeenDepthRequest;
      return true;
    }

    return false;
  };

  publicAPI.updateShaders = function (cellBO, ren, actor) {
    model.lastBoundBO = cellBO; // has something changed that would require us to recreate the shader?

    if (publicAPI.getNeedToRebuildShaders(cellBO, ren, actor)) {
      var shaders = {
        Vertex: null,
        Fragment: null,
        Geometry: null
      };
      publicAPI.buildShaders(shaders, ren, actor); // compile and bind the program if needed

      var newShader = model.openGLRenderWindow.getShaderCache().readyShaderProgramArray(shaders.Vertex, shaders.Fragment, shaders.Geometry); // if the shader changed reinitialize the VAO

      if (newShader !== cellBO.getProgram()) {
        cellBO.setProgram(newShader); // reset the VAO as the shader has changed

        cellBO.getVAO().releaseGraphicsResources();
      }

      cellBO.getShaderSourceTime().modified();
    } else {
      model.openGLRenderWindow.getShaderCache().readyShaderProgram(cellBO.getProgram());
    }

    cellBO.getVAO().bind();
    publicAPI.setMapperShaderParameters(cellBO, ren, actor);
    publicAPI.setPropertyShaderParameters(cellBO, ren, actor);
    publicAPI.setCameraShaderParameters(cellBO, ren, actor);
    publicAPI.setLightingShaderParameters(cellBO, ren, actor);
    var listCallbacks = model.renderable.getViewSpecificProperties().ShadersCallbacks;

    if (listCallbacks) {
      listCallbacks.forEach(function (object) {
        object.callback(object.userData, cellBO, ren, actor);
      });
    }
  };

  publicAPI.setMapperShaderParameters = function (cellBO, ren, actor) {
    // Now to update the VAO too, if necessary.
    if (cellBO.getProgram().isUniformUsed('PrimitiveIDOffset')) {
      cellBO.getProgram().setUniformi('PrimitiveIDOffset', model.primitiveIDOffset);
    }

    if (cellBO.getCABO().getElementCount() && (model.VBOBuildTime.getMTime() > cellBO.getAttributeUpdateTime().getMTime() || cellBO.getShaderSourceTime().getMTime() > cellBO.getAttributeUpdateTime().getMTime())) {
      var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');

      if (cellBO.getProgram().isAttributeUsed('vertexMC')) {
        if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'vertexMC', cellBO.getCABO().getVertexOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, 3, false)) {
          vtkErrorMacro('Error setting vertexMC in shader VAO.');
        }
      }

      if (cellBO.getProgram().isAttributeUsed('normalMC') && cellBO.getCABO().getNormalOffset() && lastLightComplexity > 0) {
        if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'normalMC', cellBO.getCABO().getNormalOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, 3, false)) {
          vtkErrorMacro('Error setting normalMC in shader VAO.');
        }
      } else {
        cellBO.getVAO().removeAttributeArray('normalMC');
      }

      model.renderable.getCustomShaderAttributes().forEach(function (attrName, idx) {
        if (cellBO.getProgram().isAttributeUsed("".concat(attrName, "MC"))) {
          if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), "".concat(attrName, "MC"), cellBO.getCABO().getCustomData()[idx].offset, cellBO.getCABO().getStride(), model.context.FLOAT, cellBO.getCABO().getCustomData()[idx].components, false)) {
            vtkErrorMacro("Error setting ".concat(attrName, "MC in shader VAO."));
          }
        }
      });

      if (cellBO.getProgram().isAttributeUsed('tcoordMC') && cellBO.getCABO().getTCoordOffset()) {
        if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO(), 'tcoordMC', cellBO.getCABO().getTCoordOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, cellBO.getCABO().getTCoordComponents(), false)) {
          vtkErrorMacro('Error setting tcoordMC in shader VAO.');
        }
      } else {
        cellBO.getVAO().removeAttributeArray('tcoordMC');
      }

      if (cellBO.getProgram().isAttributeUsed('scalarColor') && cellBO.getCABO().getColorComponents()) {
        if (!cellBO.getVAO().addAttributeArray(cellBO.getProgram(), cellBO.getCABO().getColorBO(), 'scalarColor', cellBO.getCABO().getColorOffset(), cellBO.getCABO().getColorBOStride(), model.context.UNSIGNED_BYTE, 4, true)) {
          vtkErrorMacro('Error setting scalarColor in shader VAO.');
        }
      } else {
        cellBO.getVAO().removeAttributeArray('scalarColor');
      }

      cellBO.getAttributeUpdateTime().modified();
    }

    if (model.renderable.getNumberOfClippingPlanes()) {
      // add all the clipping planes
      var numClipPlanes = model.renderable.getNumberOfClippingPlanes();

      if (numClipPlanes > 6) {
        (0,_macros_js__WEBPACK_IMPORTED_MODULE_4__.vtkErrorMacro)('OpenGL has a limit of 6 clipping planes');
        numClipPlanes = 6;
      }

      var planeEquations = [];

      for (var i = 0; i < numClipPlanes; i++) {
        var planeEquation = [];
        model.renderable.getClippingPlaneInDataCoords(actor.getMatrix(), i, planeEquation);

        for (var j = 0; j < 4; j++) {
          planeEquations.push(planeEquation[j]);
        }
      }

      cellBO.getProgram().setUniformi('numClipPlanes', numClipPlanes);
      cellBO.getProgram().setUniform4fv('clipPlanes', 6, planeEquations);
    }

    if (model.internalColorTexture && cellBO.getProgram().isUniformUsed('texture1')) {
      cellBO.getProgram().setUniformi('texture1', model.internalColorTexture.getTextureUnit());
    }

    var tus = model.openGLActor.getActiveTextures();

    if (tus) {
      for (var index = 0; index < tus.length; ++index) {
        var tex = tus[index];
        var texUnit = tex.getTextureUnit();
        var tname = "texture".concat(texUnit + 1);

        if (cellBO.getProgram().isUniformUsed(tname)) {
          cellBO.getProgram().setUniformi(tname, texUnit);
        }
      }
    } // handle depth requests


    if (model.haveSeenDepthRequest) {
      cellBO.getProgram().setUniformi('depthRequest', model.renderDepth ? 1 : 0);
    } // handle coincident


    if (cellBO.getProgram().isUniformUsed('coffset')) {
      var cp = publicAPI.getCoincidentParameters(ren, actor);
      cellBO.getProgram().setUniformf('coffset', cp.offset); // cfactor isn't always used when coffset is.

      if (cellBO.getProgram().isUniformUsed('cfactor')) {
        cellBO.getProgram().setUniformf('cfactor', cp.factor);
      }
    }

    var selector = model.openGLRenderer.getSelector();
    cellBO.getProgram().setUniform3fArray('mapperIndex', selector ? selector.getPropColorValue() : [0.0, 0.0, 0.0]);
    cellBO.getProgram().setUniformi('picking', selector ? selector.getCurrentPass() + 1 : 0);
  };

  publicAPI.setLightingShaderParameters = function (cellBO, ren, actor) {
    // for unlit and headlight there are no lighting parameters
    var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');

    if (lastLightComplexity < 2) {
      return;
    }

    var program = cellBO.getProgram(); // bind some light settings

    var numberOfLights = 0;
    var lights = ren.getLightsByReference();

    for (var index = 0; index < lights.length; ++index) {
      var light = lights[index];
      var status = light.getSwitch();

      if (status > 0.0) {
        var dColor = light.getColorByReference();
        var intensity = light.getIntensity();
        model.lightColor[0] = dColor[0] * intensity;
        model.lightColor[1] = dColor[1] * intensity;
        model.lightColor[2] = dColor[2] * intensity; // get required info from light

        var ld = light.getDirection();
        var transform = ren.getActiveCamera().getViewMatrix();

        var newLightDirection = (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(ld);

        if (light.lightTypeIsSceneLight()) {
          newLightDirection[0] = transform[0] * ld[0] + transform[1] * ld[1] + transform[2] * ld[2];
          newLightDirection[1] = transform[4] * ld[0] + transform[5] * ld[1] + transform[6] * ld[2];
          newLightDirection[2] = transform[8] * ld[0] + transform[9] * ld[1] + transform[10] * ld[2];
          (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_7__.l)(newLightDirection);
        }

        model.lightDirection[0] = newLightDirection[0];
        model.lightDirection[1] = newLightDirection[1];
        model.lightDirection[2] = newLightDirection[2];
        model.lightHalfAngle[0] = -model.lightDirection[0];
        model.lightHalfAngle[1] = -model.lightDirection[1];
        model.lightHalfAngle[2] = -model.lightDirection[2] + 1.0;
        (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_7__.l)(model.lightDirection);
        program.setUniform3fArray("lightColor".concat(numberOfLights), model.lightColor);
        program.setUniform3fArray("lightDirectionVC".concat(numberOfLights), model.lightDirection);
        program.setUniform3fArray("lightHalfAngleVC".concat(numberOfLights), model.lightHalfAngle);
        numberOfLights++;
      }
    } // we are done unless we have positional lights


    if (lastLightComplexity < 3) {
      return;
    } // for lightkit case there are some parameters to set


    var cam = ren.getActiveCamera();
    var viewTF = cam.getViewMatrix();
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_2__.j)(viewTF, viewTF);
    numberOfLights = 0;

    for (var _index = 0; _index < lights.length; ++_index) {
      var _light = lights[_index];

      var _status = _light.getSwitch();

      if (_status > 0.0) {
        var lp = _light.getTransformedPosition();

        var np = new Float64Array(3);
        (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_3__.t)(np, lp, viewTF);
        program.setUniform3fArray("lightAttenuation".concat(numberOfLights), _light.getAttenuationValuesByReference());
        program.setUniformi("lightPositional".concat(numberOfLights), _light.getPositional());
        program.setUniformf("lightExponent".concat(numberOfLights), _light.getExponent());
        program.setUniformf("lightConeAngle".concat(numberOfLights), _light.getConeAngle());
        program.setUniform3fArray("lightPositionVC".concat(numberOfLights), [np[0], np[1], np[2]]);
        numberOfLights++;
      }
    }
  };

  function safeMatrixMultiply(matrixArray, matrixType, tmpMat) {
    matrixType.identity(tmpMat);
    return matrixArray.reduce(function (res, matrix, index) {
      if (index === 0) {
        return matrix ? matrixType.copy(res, matrix) : matrixType.identity(res);
      }

      return matrix ? matrixType.multiply(res, res, matrix) : res;
    }, tmpMat);
  }

  publicAPI.setCameraShaderParameters = function (cellBO, ren, actor) {
    var program = cellBO.getProgram(); // [WMVP]C == {world, model, view, projection} coordinates
    // E.g., WCPC == world to projection coordinate transformation

    var keyMats = model.openGLCamera.getKeyMatrices(ren);
    var cam = ren.getActiveCamera();
    var camm = model.openGLCamera.getKeyMatrixTime().getMTime();
    var progm = program.getLastCameraMTime();
    var shiftScaleEnabled = cellBO.getCABO().getCoordShiftAndScaleEnabled();
    var inverseShiftScaleMatrix = shiftScaleEnabled ? cellBO.getCABO().getInverseShiftAndScaleMatrix() : null;
    var actorIsIdentity = actor.getIsIdentity();
    var actMats = actorIsIdentity ? {
      mcwc: null,
      normalMatrix: null
    } : model.openGLActor.getKeyMatrices();
    program.setUniformMatrix('MCPCMatrix', safeMatrixMultiply([keyMats.wcpc, actMats.mcwc, inverseShiftScaleMatrix], _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_2__.q, model.tmpMat4));

    if (program.isUniformUsed('MCVCMatrix')) {
      program.setUniformMatrix('MCVCMatrix', safeMatrixMultiply([keyMats.wcvc, actMats.mcwc, inverseShiftScaleMatrix], _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_2__.q, model.tmpMat4));
    }

    if (program.isUniformUsed('normalMatrix')) {
      program.setUniformMatrix3x3('normalMatrix', safeMatrixMultiply([keyMats.normalMatrix, actMats.normalMatrix], _vendor_gl_matrix_esm_mat3_js__WEBPACK_IMPORTED_MODULE_1__.b, model.tmpMat3));
    }

    if (progm !== camm) {
      if (program.isUniformUsed('cameraParallel')) {
        program.setUniformi('cameraParallel', cam.getParallelProjection());
      }

      program.setLastCameraMTime(camm);
    }

    if (!actorIsIdentity) {
      // reset the cam mtime as actor modified the shader values
      program.setLastCameraMTime(0);
    }
  };

  publicAPI.setPropertyShaderParameters = function (cellBO, ren, actor) {
    var program = cellBO.getProgram();
    var ppty = actor.getProperty();
    var opacity = ppty.getOpacity();
    var aColor = model.drawingEdges ? ppty.getEdgeColorByReference() : ppty.getAmbientColorByReference();
    var dColor = model.drawingEdges ? ppty.getEdgeColorByReference() : ppty.getDiffuseColorByReference();
    var aIntensity = model.drawingEdges ? 1.0 : ppty.getAmbient();
    var dIntensity = model.drawingEdges ? 0.0 : ppty.getDiffuse();
    var sIntensity = model.drawingEdges ? 0.0 : ppty.getSpecular();
    var specularPower = ppty.getSpecularPower();
    program.setUniformf('opacityUniform', opacity);
    program.setUniform3fArray('ambientColorUniform', aColor);
    program.setUniform3fArray('diffuseColorUniform', dColor);
    program.setUniformf('ambient', aIntensity);
    program.setUniformf('diffuse', dIntensity); // we are done unless we have lighting

    var lastLightComplexity = model.lastBoundBO.getReferenceByName('lastLightComplexity');

    if (lastLightComplexity < 1) {
      return;
    }

    var sColor = ppty.getSpecularColorByReference();
    program.setUniform3fArray('specularColorUniform', sColor);
    program.setUniformf('specularPowerUniform', specularPower);
    program.setUniformf('specular', sIntensity); // now set the backface properties if we have them

    if (program.isUniformUsed('ambientIntensityBF')) {
      ppty = actor.getBackfaceProperty();
      opacity = ppty.getOpacity();
      aColor = ppty.getAmbientColor();
      aIntensity = ppty.getAmbient();
      dColor = ppty.getDiffuseColor();
      dIntensity = ppty.getDiffuse();
      sColor = ppty.getSpecularColor();
      sIntensity = ppty.getSpecular();
      program.setUniformf('ambientIntensityBF', aIntensity);
      program.setUniformf('diffuseIntensityBF', dIntensity);
      program.setUniformf('opacityUniformBF', opacity);
      program.setUniform3fArray('ambientColorUniformBF', aColor);
      program.setUniform3fArray('diffuseColorUniformBF', dColor); // we are done unless we have lighting

      if (lastLightComplexity < 1) {
        return;
      }

      program.setUniformf('specularIntensityBF', sIntensity);
      program.setUniform3fArray('specularColorUniformBF', sColor);
      program.setUniformf('specularPowerUniformBF', specularPower);
    }
  };

  publicAPI.renderPieceStart = function (ren, actor) {
    model.primitiveIDOffset = 0;

    if (model.openGLRenderer.getSelector()) {
      switch (model.openGLRenderer.getSelector().getCurrentPass()) {
        default:
          model.openGLRenderer.getSelector().renderProp(actor);
      }
    } // make sure the BOs are up to date


    publicAPI.updateBufferObjects(ren, actor); // If we are coloring by texture, then load the texture map.
    // Use Map as indicator, because texture hangs around.

    if (model.renderable.getColorTextureMap()) {
      model.internalColorTexture.activate();
    } // Bind the OpenGL, this is shared between the different primitive/cell types.


    model.lastBoundBO = null;
  };

  publicAPI.renderPieceDraw = function (ren, actor) {
    var representation = actor.getProperty().getRepresentation();
    var gl = model.context;
    var drawSurfaceWithEdges = actor.getProperty().getEdgeVisibility() && representation === Representation.SURFACE;
    gl.lineWidth(actor.getProperty().getLineWidth()); // for every primitive type

    for (var i = primTypes.Start; i < primTypes.End; i++) {
      // if there are entries
      var cabo = model.primitives[i].getCABO();

      if (cabo.getElementCount()) {
        // are we drawing edges
        model.drawingEdges = drawSurfaceWithEdges && (i === primTypes.TrisEdges || i === primTypes.TriStripsEdges);
        var mode = publicAPI.getOpenGLMode(representation, i);

        if (!model.drawingEdges || !model.renderDepth) {
          publicAPI.updateShaders(model.primitives[i], ren, actor);
          gl.drawArrays(mode, 0, cabo.getElementCount());
        }

        var stride = (mode === gl.POINTS ? 1 : 0) || (mode === gl.LINES ? 2 : 3);
        model.primitiveIDOffset += cabo.getElementCount() / stride;
      }
    } // reset the line width


    gl.lineWidth(1);
  };

  publicAPI.getOpenGLMode = function (rep, type) {
    if (rep === Representation.POINTS || type === primTypes.Points) {
      return model.context.POINTS;
    }

    if (rep === Representation.WIREFRAME || type === primTypes.Lines || type === primTypes.TrisEdges || type === primTypes.TriStripsEdges) {
      return model.context.LINES;
    }

    return model.context.TRIANGLES;
  };

  publicAPI.renderPieceFinish = function (ren, actor) {
    if (model.LastBoundBO) {
      model.LastBoundBO.getVAO().release();
    }

    if (model.renderable.getColorTextureMap()) {
      model.internalColorTexture.deactivate();
    }
  };

  publicAPI.renderPiece = function (ren, actor) {
    // Make sure that we have been properly initialized.
    // if (ren.getRenderWindow().checkAbortStatus()) {
    //   return;
    // }
    publicAPI.invokeEvent(StartEvent);

    if (!model.renderable.getStatic()) {
      model.renderable.update();
    }

    model.currentInput = model.renderable.getInputData();
    publicAPI.invokeEvent(EndEvent);

    if (!model.currentInput) {
      vtkErrorMacro('No input!');
      return;
    } // if there are no points then we are done


    if (!model.currentInput.getPoints || !model.currentInput.getPoints().getNumberOfValues()) {
      return;
    } // apply faceCulling


    var gl = model.context;
    var backfaceCulling = actor.getProperty().getBackfaceCulling();
    var frontfaceCulling = actor.getProperty().getFrontfaceCulling();

    if (!backfaceCulling && !frontfaceCulling) {
      model.openGLRenderWindow.disableCullFace();
    } else if (frontfaceCulling) {
      model.openGLRenderWindow.enableCullFace();
      gl.cullFace(gl.FRONT);
    } else {
      model.openGLRenderWindow.enableCullFace();
      gl.cullFace(gl.BACK);
    }

    publicAPI.renderPieceStart(ren, actor);
    publicAPI.renderPieceDraw(ren, actor);
    publicAPI.renderPieceFinish(ren, actor);
  };

  publicAPI.computeBounds = function (ren, actor) {
    if (!publicAPI.getInput()) {
      (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_7__.u)(model.bounds);
      return;
    }

    model.bounds = publicAPI.getInput().getBounds();
  };

  publicAPI.updateBufferObjects = function (ren, actor) {
    // Rebuild buffers if needed
    if (publicAPI.getNeedToRebuildBufferObjects(ren, actor)) {
      publicAPI.buildBufferObjects(ren, actor);
    }
  };

  publicAPI.getNeedToRebuildBufferObjects = function (ren, actor) {
    // first do a coarse check
    // Note that the actor's mtime includes it's properties mtime
    var vmtime = model.VBOBuildTime.getMTime();

    if (vmtime < publicAPI.getMTime() || vmtime < model.renderable.getMTime() || vmtime < actor.getMTime() || vmtime < model.currentInput.getMTime()) {
      return true;
    }

    return false;
  };

  publicAPI.buildBufferObjects = function (ren, actor) {
    var poly = model.currentInput;

    if (poly === null) {
      return;
    }

    model.renderable.mapScalars(poly, 1.0);
    var c = model.renderable.getColorMapColors();
    model.haveCellScalars = false;
    var scalarMode = model.renderable.getScalarMode();

    if (model.renderable.getScalarVisibility()) {
      // We must figure out how the scalars should be mapped to the polydata.
      if ((scalarMode === ScalarMode.USE_CELL_DATA || scalarMode === ScalarMode.USE_CELL_FIELD_DATA || scalarMode === ScalarMode.USE_FIELD_DATA || !poly.getPointData().getScalars()) && scalarMode !== ScalarMode.USE_POINT_FIELD_DATA && c) {
        model.haveCellScalars = true;
      }
    } // Do we have normals?


    var n = actor.getProperty().getInterpolation() !== Shading.FLAT ? poly.getPointData().getNormals() : null;

    if (n === null && poly.getCellData().getNormals()) {
      model.haveCellNormals = true;
      n = poly.getCellData().getNormals();
    } // rebuild the VBO if the data has changed we create a string for the VBO what
    // can change the VBO? points normals tcoords colors so what can change those?
    // the input data is clearly one as it can change all four items tcoords may
    // haveTextures or not colors may change based on quite a few mapping
    // parameters in the mapper


    var representation = actor.getProperty().getRepresentation();
    var tcoords = poly.getPointData().getTCoords();

    if (!model.openGLActor.getActiveTextures()) {
      tcoords = null;
    } // handle color mapping via texture


    if (model.renderable.getColorCoordinates()) {
      tcoords = model.renderable.getColorCoordinates();

      if (!model.internalColorTexture) {
        model.internalColorTexture = _Texture_js__WEBPACK_IMPORTED_MODULE_8__["default"].newInstance();
      }

      var tex = model.internalColorTexture; // the following 4 lines allow for NPOT textures

      tex.setMinificationFilter(Filter.NEAREST);
      tex.setMagnificationFilter(Filter.NEAREST);
      tex.setWrapS(Wrap.CLAMP_TO_EDGE);
      tex.setWrapT(Wrap.CLAMP_TO_EDGE);
      tex.setOpenGLRenderWindow(model.openGLRenderWindow);
      var input = model.renderable.getColorTextureMap();
      var ext = input.getExtent();
      var inScalars = input.getPointData().getScalars();
      tex.create2DFromRaw(ext[1] - ext[0] + 1, ext[3] - ext[2] + 1, inScalars.getNumberOfComponents(), inScalars.getDataType(), inScalars.getData());
      tex.activate();
      tex.sendParameters();
      tex.deactivate();
    }

    var toString = "".concat(poly.getMTime(), "A").concat(representation, "B").concat(poly.getMTime()) + "C".concat(n ? n.getMTime() : 1, "D").concat(c ? c.getMTime() : 1) + "E".concat(actor.getProperty().getEdgeVisibility()) + "F".concat(tcoords ? tcoords.getMTime() : 1);

    if (model.VBOBuildString !== toString) {
      // Build the VBOs
      var points = poly.getPoints();
      var options = {
        points: points,
        normals: n,
        tcoords: tcoords,
        colors: c,
        cellOffset: 0,
        haveCellScalars: model.haveCellScalars,
        haveCellNormals: model.haveCellNormals,
        customAttributes: model.renderable.getCustomShaderAttributes().map(function (arrayName) {
          return poly.getPointData().getArrayByName(arrayName);
        })
      };
      options.cellOffset += model.primitives[primTypes.Points].getCABO().createVBO(poly.getVerts(), 'verts', representation, options);
      options.cellOffset += model.primitives[primTypes.Lines].getCABO().createVBO(poly.getLines(), 'lines', representation, options);
      options.cellOffset += model.primitives[primTypes.Tris].getCABO().createVBO(poly.getPolys(), 'polys', representation, options);
      options.cellOffset += model.primitives[primTypes.TriStrips].getCABO().createVBO(poly.getStrips(), 'strips', representation, options);
      var drawSurfaceWithEdges = actor.getProperty().getEdgeVisibility() && representation === Representation.SURFACE; // if we have edge visibility build the edge VBOs

      if (drawSurfaceWithEdges) {
        model.primitives[primTypes.TrisEdges].getCABO().createVBO(poly.getPolys(), 'polys', Representation.WIREFRAME, {
          points: points,
          normals: n,
          tcoords: null,
          colors: null,
          cellOffset: 0,
          haveCellScalars: false,
          haveCellNormals: false
        });
        model.primitives[primTypes.TriStripsEdges].getCABO().createVBO(poly.getStrips(), 'strips', Representation.WIREFRAME, {
          points: points,
          normals: n,
          tcoords: null,
          colors: null,
          cellOffset: 0,
          haveCellScalars: false,
          haveCellNormals: false
        });
      } else {
        // otherwise free them
        model.primitives[primTypes.TrisEdges].releaseGraphicsResources(model.openGLRenderWindow);
        model.primitives[primTypes.TriStripsEdges].releaseGraphicsResources(model.openGLRenderWindow);
      }

      model.VBOBuildTime.modified();
      model.VBOBuildString = toString;
    }
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  context: null,
  VBOBuildTime: 0,
  VBOBuildString: null,
  primitives: null,
  primTypes: null,
  shaderRebuildString: null,
  tmpMat4: null,
  ambientColor: [],
  // used internally
  diffuseColor: [],
  // used internally
  specularColor: [],
  // used internally
  lightColor: [],
  // used internally
  lightHalfAngle: [],
  // used internally
  lightDirection: [],
  // used internally
  lastHaveSeenDepthRequest: false,
  haveSeenDepthRequest: false
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_11__["default"].extend(publicAPI, model, initialValues);
  _ReplacementShaderMapper_js__WEBPACK_IMPORTED_MODULE_14__["default"].implementReplaceShaderCoincidentOffset(publicAPI, model, initialValues);
  model.primitives = [];
  model.primTypes = primTypes;
  model.tmpMat3 = (0,_vendor_gl_matrix_esm_mat3_js__WEBPACK_IMPORTED_MODULE_1__.i)(new Float64Array(9));
  model.tmpMat4 = (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_2__.i)(new Float64Array(16));

  for (var i = primTypes.Start; i < primTypes.End; i++) {
    model.primitives[i] = _Helper_js__WEBPACK_IMPORTED_MODULE_5__["default"].newInstance();
    model.primitives[i].setPrimitiveType(i);
    model.primitives[i].set({
      lastLightComplexity: 0,
      lastLightCount: 0,
      lastSelectionPass: false
    }, true);
  } // Build VTK API


  (0,_macros_js__WEBPACK_IMPORTED_MODULE_4__.setGet)(publicAPI, model, ['context']);
  model.VBOBuildTime = {};
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_4__.obj)(model.VBOBuildTime, {
    mtime: 0
  }); // Object methods

  vtkOpenGLPolyDataMapper(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = (0,_macros_js__WEBPACK_IMPORTED_MODULE_4__.newInstance)(extend, 'vtkOpenGLPolyDataMapper'); // ----------------------------------------------------------------------------

var vtkOpenGLPolyDataMapper$1 = {
  newInstance: newInstance,
  extend: extend
}; // Register ourself to OpenGL backend if imported

(0,_ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_15__.registerOverride)('vtkMapper', newInstance);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/RenderWindow.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/RenderWindow.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkRenderWindow),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance),
/* harmony export */   "popMonitorGLContextCount": () => (/* binding */ popMonitorGLContextCount),
/* harmony export */   "pushMonitorGLContextCount": () => (/* binding */ pushMonitorGLContextCount)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Core_RenderWindow_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Core/RenderWindow.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/RenderWindow.js");
/* harmony import */ var _ForwardPass_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ForwardPass.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ForwardPass.js");
/* harmony import */ var _ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ViewNodeFactory.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ViewNodeFactory.js");
/* harmony import */ var _SceneGraph_RenderPass_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../SceneGraph/RenderPass.js */ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/RenderPass.js");
/* harmony import */ var _ShaderCache_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ShaderCache.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ShaderCache.js");
/* harmony import */ var _SceneGraph_RenderWindowViewNode_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../SceneGraph/RenderWindowViewNode.js */ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/RenderWindowViewNode.js");
/* harmony import */ var _TextureUnitManager_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./TextureUnitManager.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/TextureUnitManager.js");
/* harmony import */ var _HardwareSelector_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./HardwareSelector.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/HardwareSelector.js");
/* harmony import */ var _Common_Core_DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../Common/Core/DataArray/Constants.js */ "./node_modules/@kitware/vtk.js/Common/Core/DataArray/Constants.js");













var vtkDebugMacro = _macros_js__WEBPACK_IMPORTED_MODULE_2__["default"].vtkDebugMacro,
    vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_2__["default"].vtkErrorMacro;
var IS_CHROME = navigator.userAgent.indexOf('Chrome') !== -1;
var SCREENSHOT_PLACEHOLDER = {
  position: 'absolute',
  top: 0,
  left: 0,
  width: '100%',
  height: '100%'
};

function checkRenderTargetSupport(gl, format, type) {
  // create temporary frame buffer and texture
  var framebuffer = gl.createFramebuffer();
  var texture = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, texture);
  gl.texImage2D(gl.TEXTURE_2D, 0, format, 2, 2, 0, format, type, null);
  gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
  gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0); // check frame buffer status

  var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER); // clean up

  gl.bindFramebuffer(gl.FRAMEBUFFER, null);
  gl.bindTexture(gl.TEXTURE_2D, null);
  return status === gl.FRAMEBUFFER_COMPLETE;
} // ----------------------------------------------------------------------------
// Monitor the usage of GL context across vtkOpenGLRenderWindow instances
// ----------------------------------------------------------------------------


var GL_CONTEXT_COUNT = 0;
var GL_CONTEXT_LISTENERS = [];

function createGLContext() {
  GL_CONTEXT_COUNT++;
  GL_CONTEXT_LISTENERS.forEach(function (cb) {
    return cb(GL_CONTEXT_COUNT);
  });
}

function deleteGLContext() {
  GL_CONTEXT_COUNT--;
  GL_CONTEXT_LISTENERS.forEach(function (cb) {
    return cb(GL_CONTEXT_COUNT);
  });
}

function pushMonitorGLContextCount(cb) {
  GL_CONTEXT_LISTENERS.push(cb);
}
function popMonitorGLContextCount(cb) {
  return GL_CONTEXT_LISTENERS.pop();
} // ----------------------------------------------------------------------------
// vtkOpenGLRenderWindow methods
// ----------------------------------------------------------------------------

function vtkOpenGLRenderWindow(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkOpenGLRenderWindow');

  publicAPI.getViewNodeFactory = function () {
    return model.myFactory;
  }; // Auto update style


  var previousSize = [0, 0];

  function updateWindow() {
    // Canvas size
    if (model.renderable) {
      if (model.size[0] !== previousSize[0] || model.size[1] !== previousSize[1]) {
        previousSize[0] = model.size[0];
        previousSize[1] = model.size[1];
        model.canvas.setAttribute('width', model.size[0]);
        model.canvas.setAttribute('height', model.size[1]);
      }
    } // ImageStream size


    if (model.viewStream) {
      // If same size that's a NoOp
      model.viewStream.setSize(model.size[0], model.size[1]);
    } // Offscreen ?


    model.canvas.style.display = model.useOffScreen ? 'none' : 'block'; // Cursor type

    if (model.el) {
      model.el.style.cursor = model.cursorVisibility ? model.cursor : 'none';
    } // Invalidate cached DOM container size


    model.containerSize = null;
  }

  publicAPI.onModified(updateWindow); // Builds myself.

  publicAPI.buildPass = function (prepass) {
    if (prepass) {
      if (!model.renderable) {
        return;
      }

      publicAPI.prepareNodes();
      publicAPI.addMissingNodes(model.renderable.getRenderersByReference());
      publicAPI.removeUnusedNodes();
      publicAPI.initialize();
      model.children.forEach(function (child) {
        child.setOpenGLRenderWindow(publicAPI);
      });
    }
  };

  publicAPI.initialize = function () {
    if (!model.initialized) {
      model.context = publicAPI.get3DContext();
      model.textureUnitManager = _TextureUnitManager_js__WEBPACK_IMPORTED_MODULE_9__["default"].newInstance();
      model.textureUnitManager.setContext(model.context);
      model.shaderCache.setContext(model.context); // initialize blending for transparency

      var gl = model.context;
      gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
      gl.depthFunc(gl.LEQUAL);
      gl.enable(gl.BLEND);
      model.initialized = true;
    }
  };

  publicAPI.makeCurrent = function () {
    model.context.makeCurrent();
  };

  publicAPI.setContainer = function (el) {
    if (model.el && model.el !== el) {
      if (model.canvas.parentNode !== model.el) {
        vtkErrorMacro('Error: canvas parent node does not match container');
      } // Remove canvas from previous container


      model.el.removeChild(model.canvas); // If the renderer has previously added
      // a background image, remove it from the DOM.

      if (model.el.contains(model.bgImage)) {
        model.el.removeChild(model.bgImage);
      }
    }

    if (model.el !== el) {
      model.el = el;

      if (model.el) {
        model.el.appendChild(model.canvas); // If the renderer is set to use a background
        // image, attach it to the DOM.

        if (model.useBackgroundImage) {
          model.el.appendChild(model.bgImage);
        }
      } // Trigger modified()


      publicAPI.modified();
    }
  };

  publicAPI.getContainer = function () {
    return model.el;
  };

  publicAPI.getContainerSize = function () {
    if (!model.containerSize && model.el) {
      var _model$el$getBounding = model.el.getBoundingClientRect(),
          width = _model$el$getBounding.width,
          height = _model$el$getBounding.height;

      model.containerSize = [width, height];
    }

    return model.containerSize || model.size;
  };

  publicAPI.getFramebufferSize = function () {
    if (model.activeFramebuffer) {
      return model.activeFramebuffer.getSize();
    }

    return model.size;
  };

  publicAPI.getPixelData = function (x1, y1, x2, y2) {
    var pixels = new Uint8Array((x2 - x1 + 1) * (y2 - y1 + 1) * 4);
    model.context.readPixels(x1, y1, x2 - x1 + 1, y2 - y1 + 1, model.context.RGBA, model.context.UNSIGNED_BYTE, pixels);
    return pixels;
  };

  publicAPI.get3DContext = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      preserveDrawingBuffer: false,
      depth: true,
      alpha: true
    };
    var result = null;
    var webgl2Supported = typeof WebGL2RenderingContext !== 'undefined';
    model.webgl2 = false;

    if (model.defaultToWebgl2 && webgl2Supported) {
      result = model.canvas.getContext('webgl2', options);

      if (result) {
        model.webgl2 = true;
        vtkDebugMacro('using webgl2');
      }
    }

    if (!result) {
      vtkDebugMacro('using webgl1');
      result = model.canvas.getContext('webgl', options) || model.canvas.getContext('experimental-webgl', options);
    } // Do we have webvr support


    if (navigator.getVRDisplays) {
      navigator.getVRDisplays().then(function (displays) {
        if (displays.length > 0) {
          // take the first display for now
          model.vrDisplay = displays[0]; // set the clipping ranges

          model.vrDisplay.depthNear = 0.01; // meters

          model.vrDisplay.depthFar = 100.0; // meters

          publicAPI.invokeHaveVRDisplay();
        }
      });
    } // prevent default context lost handler


    model.canvas.addEventListener('webglcontextlost', function (event) {
      event.preventDefault();
    }, false);
    model.canvas.addEventListener('webglcontextrestored', publicAPI.restoreContext, false);
    return result;
  };

  publicAPI.startVR = function () {
    model.oldCanvasSize = model.size.slice();

    if (model.vrDisplay.capabilities.canPresent) {
      model.vrDisplay.requestPresent([{
        source: model.canvas
      }]).then(function () {
        if (model.el && model.vrDisplay.capabilities.hasExternalDisplay && model.hideCanvasInVR) {
          model.el.style.display = 'none';
        }

        if (model.queryVRSize) {
          var leftEye = model.vrDisplay.getEyeParameters('left');
          var rightEye = model.vrDisplay.getEyeParameters('right');
          var width = Math.floor(leftEye.renderWidth + rightEye.renderWidth);
          var height = Math.floor(Math.max(leftEye.renderHeight, rightEye.renderHeight));
          publicAPI.setSize(width, height);
        } else {
          publicAPI.setSize(model.vrResolution);
        }

        var ren = model.renderable.getRenderers()[0];
        ren.resetCamera();
        model.vrFrameData = new VRFrameData();
        model.renderable.getInteractor().switchToVRAnimation();
        model.vrSceneFrame = model.vrDisplay.requestAnimationFrame(publicAPI.vrRender); // If Broswer is chrome we need to request animation again to canvas update

        if (IS_CHROME) {
          model.vrSceneFrame = model.vrDisplay.requestAnimationFrame(publicAPI.vrRender);
        }
      }).catch(function () {
        console.error('failed to requestPresent');
      });
    } else {
      vtkErrorMacro('vrDisplay is not connected');
    }
  };

  publicAPI.stopVR = function () {
    model.renderable.getInteractor().returnFromVRAnimation();
    model.vrDisplay.exitPresent();
    model.vrDisplay.cancelAnimationFrame(model.vrSceneFrame);
    publicAPI.setSize.apply(publicAPI, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__["default"])(model.oldCanvasSize));

    if (model.el && model.vrDisplay.capabilities.hasExternalDisplay) {
      model.el.style.display = 'block';
    }

    var ren = model.renderable.getRenderers()[0];
    ren.getActiveCamera().setProjectionMatrix(null);
    ren.setViewport(0.0, 0, 1.0, 1.0);
    publicAPI.traverseAllPasses();
  };

  publicAPI.vrRender = function () {
    // If not presenting for any reason, we do not submit frame
    if (!model.vrDisplay.isPresenting) {
      return;
    }

    model.renderable.getInteractor().updateGamepads(model.vrDisplay.displayId);
    model.vrSceneFrame = model.vrDisplay.requestAnimationFrame(publicAPI.vrRender);
    model.vrDisplay.getFrameData(model.vrFrameData); // get the first renderer

    var ren = model.renderable.getRenderers()[0]; // do the left eye

    ren.setViewport(0, 0, 0.5, 1.0);
    ren.getActiveCamera().computeViewParametersFromPhysicalMatrix(model.vrFrameData.leftViewMatrix);
    ren.getActiveCamera().setProjectionMatrix(model.vrFrameData.leftProjectionMatrix);
    publicAPI.traverseAllPasses();
    ren.setViewport(0.5, 0, 1.0, 1.0);
    ren.getActiveCamera().computeViewParametersFromPhysicalMatrix(model.vrFrameData.rightViewMatrix);
    ren.getActiveCamera().setProjectionMatrix(model.vrFrameData.rightProjectionMatrix);
    publicAPI.traverseAllPasses();
    model.vrDisplay.submitFrame();
  };

  publicAPI.restoreContext = function () {
    var rp = _SceneGraph_RenderPass_js__WEBPACK_IMPORTED_MODULE_6__["default"].newInstance();
    rp.setCurrentOperation('Release');
    rp.traverse(publicAPI, null);
  };

  publicAPI.activateTexture = function (texture) {
    // Only add if it isn't already there
    var result = model._textureResourceIds.get(texture);

    if (result !== undefined) {
      model.context.activeTexture(model.context.TEXTURE0 + result);
      return;
    }

    var activeUnit = publicAPI.getTextureUnitManager().allocate();

    if (activeUnit < 0) {
      vtkErrorMacro('Hardware does not support the number of textures defined.');
      return;
    }

    model._textureResourceIds.set(texture, activeUnit);

    model.context.activeTexture(model.context.TEXTURE0 + activeUnit);
  };

  publicAPI.deactivateTexture = function (texture) {
    // Only deactivate if it isn't already there
    var result = model._textureResourceIds.get(texture);

    if (result !== undefined) {
      publicAPI.getTextureUnitManager().free(result);
      delete model._textureResourceIds.delete(texture);
    }
  };

  publicAPI.getTextureUnitForTexture = function (texture) {
    var result = model._textureResourceIds.get(texture);

    if (result !== undefined) {
      return result;
    }

    return -1;
  };

  publicAPI.getDefaultTextureInternalFormat = function (vtktype, numComps, useFloat) {
    if (model.webgl2) {
      switch (vtktype) {
        case _Common_Core_DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_11__.VtkDataTypes.UNSIGNED_CHAR:
          switch (numComps) {
            case 1:
              return model.context.R8;

            case 2:
              return model.context.RG8;

            case 3:
              return model.context.RGB8;

            case 4:
            default:
              return model.context.RGBA8;
          }

        default:
        case _Common_Core_DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_11__.VtkDataTypes.FLOAT:
          switch (numComps) {
            case 1:
              return model.context.R16F;

            case 2:
              return model.context.RG16F;

            case 3:
              return model.context.RGB16F;

            case 4:
            default:
              return model.context.RGBA16F;
          }

      }
    } // webgl1 only supports four types


    switch (numComps) {
      case 1:
        return model.context.LUMINANCE;

      case 2:
        return model.context.LUMINANCE_ALPHA;

      case 3:
        return model.context.RGB;

      case 4:
      default:
        return model.context.RGBA;
    }
  };

  publicAPI.setBackgroundImage = function (img) {
    model.bgImage.src = img.src;
  };

  publicAPI.setUseBackgroundImage = function (value) {
    model.useBackgroundImage = value; // Add or remove the background image from the
    // DOM as specified.

    if (model.useBackgroundImage && !model.el.contains(model.bgImage)) {
      model.el.appendChild(model.bgImage);
    } else if (!model.useBackgroundImage && model.el.contains(model.bgImage)) {
      model.el.removeChild(model.bgImage);
    }
  };

  function getCanvasDataURL() {
    var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : model.imageFormat;
    // Copy current canvas to not modify the original
    var temporaryCanvas = document.createElement('canvas');
    var temporaryContext = temporaryCanvas.getContext('2d');
    temporaryCanvas.width = model.canvas.width;
    temporaryCanvas.height = model.canvas.height;
    temporaryContext.drawImage(model.canvas, 0, 0); // Get current client rect to place canvas

    var mainBoundingClientRect = model.canvas.getBoundingClientRect();
    var renderWindow = model.renderable;
    var renderers = renderWindow.getRenderers();
    renderers.forEach(function (renderer) {
      var viewProps = renderer.getViewProps();
      viewProps.forEach(function (viewProp) {
        // Check if the prop has a container that should have canvas
        if (viewProp.getContainer) {
          var container = viewProp.getContainer();
          var canvasList = container.getElementsByTagName('canvas'); // Go throughout all canvas and copy it into temporary main canvas

          for (var i = 0; i < canvasList.length; i++) {
            var currentCanvas = canvasList[i];
            var boundingClientRect = currentCanvas.getBoundingClientRect();
            var newXPosition = boundingClientRect.x - mainBoundingClientRect.x;
            var newYPosition = boundingClientRect.y - mainBoundingClientRect.y;
            temporaryContext.drawImage(currentCanvas, newXPosition, newYPosition);
          }
        }
      });
    });
    var screenshot = temporaryCanvas.toDataURL(format);
    temporaryCanvas.remove();
    publicAPI.invokeImageReady(screenshot);
  }

  publicAPI.captureNextImage = function () {
    var format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'image/png';

    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$resetCamera = _ref.resetCamera,
        resetCamera = _ref$resetCamera === void 0 ? false : _ref$resetCamera,
        _ref$size = _ref.size,
        size = _ref$size === void 0 ? null : _ref$size,
        _ref$scale = _ref.scale,
        scale = _ref$scale === void 0 ? 1 : _ref$scale;

    if (model.deleted) {
      return null;
    }

    model.imageFormat = format;
    var previous = model.notifyStartCaptureImage;
    model.notifyStartCaptureImage = true;
    model._screenshot = {
      size: !!size || scale !== 1 ? size || model.size.map(function (val) {
        return val * scale;
      }) : null
    };
    return new Promise(function (resolve, reject) {
      var subscription = publicAPI.onImageReady(function (imageURL) {
        if (model._screenshot.size === null) {
          model.notifyStartCaptureImage = previous;
          subscription.unsubscribe();

          if (model._screenshot.placeHolder) {
            // resize the main canvas back to its original size and show it
            model.size = model._screenshot.originalSize; // process the resize

            publicAPI.modified(); // restore the saved camera parameters, if applicable

            if (model._screenshot.cameras) {
              model._screenshot.cameras.forEach(function (_ref2) {
                var restoreParamsFn = _ref2.restoreParamsFn,
                    arg = _ref2.arg;
                return restoreParamsFn(arg);
              });
            } // Trigger a render at the original size


            publicAPI.traverseAllPasses(); // Remove and clean up the placeholder, revealing the original

            model.el.removeChild(model._screenshot.placeHolder);

            model._screenshot.placeHolder.remove();

            model._screenshot = null;
          }

          resolve(imageURL);
        } else {
          // Create a placeholder image overlay while we resize and render
          var tmpImg = document.createElement('img');
          tmpImg.style = SCREENSHOT_PLACEHOLDER;
          tmpImg.src = imageURL;
          model._screenshot.placeHolder = model.el.appendChild(tmpImg); // hide the main canvas

          model.canvas.style.display = 'none'; // remember the main canvas original size, then resize it

          model._screenshot.originalSize = model.size;
          model.size = model._screenshot.size;
          model._screenshot.size = null; // process the resize

          publicAPI.modified();

          if (resetCamera) {
            // If resetCamera was requested, we first save camera parameters
            // from all the renderers, so we can restore them later
            model._screenshot.cameras = model.renderable.getRenderers().map(function (renderer) {
              var camera = renderer.getActiveCamera();
              var params = camera.get('focalPoint', 'position', 'parallelScale');
              return {
                resetCameraFn: renderer.resetCamera,
                restoreParamsFn: camera.set,
                // "clone" the params so we don't keep refs to properties
                arg: JSON.parse(JSON.stringify(params))
              };
            }); // Perform the resetCamera() on each renderer only after capturing
            // the params from all active cameras, in case there happen to be
            // linked cameras among the renderers.

            model._screenshot.cameras.forEach(function (_ref3) {
              var resetCameraFn = _ref3.resetCameraFn;
              return resetCameraFn();
            });
          } // Trigger a render at the custom size


          publicAPI.traverseAllPasses();
        }
      });
    });
  };

  publicAPI.getGLInformations = function () {
    var gl = publicAPI.get3DContext();
    var glTextureFloat = gl.getExtension('OES_texture_float');
    var glTextureHalfFloat = gl.getExtension('OES_texture_half_float');
    var glDebugRendererInfo = gl.getExtension('WEBGL_debug_renderer_info');
    var glDrawBuffers = gl.getExtension('WEBGL_draw_buffers');
    var glAnisotropic = gl.getExtension('EXT_texture_filter_anisotropic') || gl.getExtension('WEBKIT_EXT_texture_filter_anisotropic');
    var params = [['Max Vertex Attributes', 'MAX_VERTEX_ATTRIBS', gl.getParameter(gl.MAX_VERTEX_ATTRIBS)], ['Max Varying Vectors', 'MAX_VARYING_VECTORS', gl.getParameter(gl.MAX_VARYING_VECTORS)], ['Max Vertex Uniform Vectors', 'MAX_VERTEX_UNIFORM_VECTORS', gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS)], ['Max Fragment Uniform Vectors', 'MAX_FRAGMENT_UNIFORM_VECTORS', gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS)], ['Max Fragment Texture Image Units', 'MAX_TEXTURE_IMAGE_UNITS', gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS)], ['Max Vertex Texture Image Units', 'MAX_VERTEX_TEXTURE_IMAGE_UNITS', gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS)], ['Max Combined Texture Image Units', 'MAX_COMBINED_TEXTURE_IMAGE_UNITS', gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS)], ['Max 2D Texture Size', 'MAX_TEXTURE_SIZE', gl.getParameter(gl.MAX_TEXTURE_SIZE)], ['Max Cube Texture Size', 'MAX_CUBE_MAP_TEXTURE_SIZE', gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE)], ['Max Texture Anisotropy', 'MAX_TEXTURE_MAX_ANISOTROPY_EXT', glAnisotropic && gl.getParameter(glAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT)], ['Point Size Range', 'ALIASED_POINT_SIZE_RANGE', gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE).join(' - ')], ['Line Width Range', 'ALIASED_LINE_WIDTH_RANGE', gl.getParameter(gl.ALIASED_LINE_WIDTH_RANGE).join(' - ')], ['Max Viewport Dimensions', 'MAX_VIEWPORT_DIMS', gl.getParameter(gl.MAX_VIEWPORT_DIMS).join(' - ')], ['Max Renderbuffer Size', 'MAX_RENDERBUFFER_SIZE', gl.getParameter(gl.MAX_RENDERBUFFER_SIZE)], ['Framebuffer Red Bits', 'RED_BITS', gl.getParameter(gl.RED_BITS)], ['Framebuffer Green Bits', 'GREEN_BITS', gl.getParameter(gl.GREEN_BITS)], ['Framebuffer Blue Bits', 'BLUE_BITS', gl.getParameter(gl.BLUE_BITS)], ['Framebuffer Alpha Bits', 'ALPHA_BITS', gl.getParameter(gl.ALPHA_BITS)], ['Framebuffer Depth Bits', 'DEPTH_BITS', gl.getParameter(gl.DEPTH_BITS)], ['Framebuffer Stencil Bits', 'STENCIL_BITS', gl.getParameter(gl.STENCIL_BITS)], ['Framebuffer Subpixel Bits', 'SUBPIXEL_BITS', gl.getParameter(gl.SUBPIXEL_BITS)], ['MSAA Samples', 'SAMPLES', gl.getParameter(gl.SAMPLES)], ['MSAA Sample Buffers', 'SAMPLE_BUFFERS', gl.getParameter(gl.SAMPLE_BUFFERS)], ['Supported Formats for UByte Render Targets     ', 'UNSIGNED_BYTE RENDER TARGET FORMATS', [glTextureFloat && checkRenderTargetSupport(gl, gl.RGBA, gl.UNSIGNED_BYTE) ? 'RGBA' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.RGB, gl.UNSIGNED_BYTE) ? 'RGB' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.LUMINANCE, gl.UNSIGNED_BYTE) ? 'LUMINANCE' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.ALPHA, gl.UNSIGNED_BYTE) ? 'ALPHA' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.LUMINANCE_ALPHA, gl.UNSIGNED_BYTE) ? 'LUMINANCE_ALPHA' : ''].join(' ')], ['Supported Formats for Half Float Render Targets', 'HALF FLOAT RENDER TARGET FORMATS', [glTextureHalfFloat && checkRenderTargetSupport(gl, gl.RGBA, glTextureHalfFloat.HALF_FLOAT_OES) ? 'RGBA' : '', glTextureHalfFloat && checkRenderTargetSupport(gl, gl.RGB, glTextureHalfFloat.HALF_FLOAT_OES) ? 'RGB' : '', glTextureHalfFloat && checkRenderTargetSupport(gl, gl.LUMINANCE, glTextureHalfFloat.HALF_FLOAT_OES) ? 'LUMINANCE' : '', glTextureHalfFloat && checkRenderTargetSupport(gl, gl.ALPHA, glTextureHalfFloat.HALF_FLOAT_OES) ? 'ALPHA' : '', glTextureHalfFloat && checkRenderTargetSupport(gl, gl.LUMINANCE_ALPHA, glTextureHalfFloat.HALF_FLOAT_OES) ? 'LUMINANCE_ALPHA' : ''].join(' ')], ['Supported Formats for Full Float Render Targets', 'FLOAT RENDER TARGET FORMATS', [glTextureFloat && checkRenderTargetSupport(gl, gl.RGBA, gl.FLOAT) ? 'RGBA' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.RGB, gl.FLOAT) ? 'RGB' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.LUMINANCE, gl.FLOAT) ? 'LUMINANCE' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.ALPHA, gl.FLOAT) ? 'ALPHA' : '', glTextureFloat && checkRenderTargetSupport(gl, gl.LUMINANCE_ALPHA, gl.FLOAT) ? 'LUMINANCE_ALPHA' : ''].join(' ')], ['Max Multiple Render Targets Buffers', 'MAX_DRAW_BUFFERS_WEBGL', glDrawBuffers ? gl.getParameter(glDrawBuffers.MAX_DRAW_BUFFERS_WEBGL) : 0], ['High Float Precision in Vertex Shader', 'HIGH_FLOAT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).rangeMax, '</sup>)'].join('')], ['Medium Float Precision in Vertex Shader', 'MEDIUM_FLOAT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).rangeMax, '</sup>)'].join('')], ['Low Float Precision in Vertex Shader', 'LOW_FLOAT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_FLOAT).rangeMax, '</sup>)'].join('')], ['High Float Precision in Fragment Shader', 'HIGH_FLOAT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).rangeMax, '</sup>)'].join('')], ['Medium Float Precision in Fragment Shader', 'MEDIUM_FLOAT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).rangeMax, '</sup>)'].join('')], ['Low Float Precision in Fragment Shader', 'LOW_FLOAT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_FLOAT).rangeMax, '</sup>)'].join('')], ['High Int Precision in Vertex Shader', 'HIGH_INT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_INT).rangeMax, '</sup>)'].join('')], ['Medium Int Precision in Vertex Shader', 'MEDIUM_INT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_INT).rangeMax, '</sup>)'].join('')], ['Low Int Precision in Vertex Shader', 'LOW_INT VERTEX_SHADER', [gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.LOW_INT).rangeMax, '</sup>)'].join('')], ['High Int Precision in Fragment Shader', 'HIGH_INT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_INT).rangeMax, '</sup>)'].join('')], ['Medium Int Precision in Fragment Shader', 'MEDIUM_INT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_INT).rangeMax, '</sup>)'].join('')], ['Low Int Precision in Fragment Shader', 'LOW_INT FRAGMENT_SHADER', [gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT).precision, ' (-2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT).rangeMin, '</sup> - 2<sup>', gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.LOW_INT).rangeMax, '</sup>)'].join('')], ['Supported Extensions', 'EXTENSIONS', gl.getSupportedExtensions().join('<br/>\t\t\t\t\t    ')], ['WebGL Renderer', 'RENDERER', gl.getParameter(gl.RENDERER)], ['WebGL Vendor', 'VENDOR', gl.getParameter(gl.VENDOR)], ['WebGL Version', 'VERSION', gl.getParameter(gl.VERSION)], ['Shading Language Version', 'SHADING_LANGUAGE_VERSION', gl.getParameter(gl.SHADING_LANGUAGE_VERSION)], ['Unmasked Renderer', 'UNMASKED_RENDERER', glDebugRendererInfo && gl.getParameter(glDebugRendererInfo.UNMASKED_RENDERER_WEBGL)], ['Unmasked Vendor', 'UNMASKED_VENDOR', glDebugRendererInfo && gl.getParameter(glDebugRendererInfo.UNMASKED_VENDOR_WEBGL)], ['WebGL Version', 'WEBGL_VERSION', model.webgl2 ? 2 : 1]];
    var result = {};

    while (params.length) {
      var _params$pop = params.pop(),
          _params$pop2 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__["default"])(_params$pop, 3),
          label = _params$pop2[0],
          key = _params$pop2[1],
          value = _params$pop2[2];

      if (key) {
        result[key] = {
          label: label,
          value: value
        };
      }
    }

    return result;
  };

  publicAPI.traverseAllPasses = function () {
    if (model.renderPasses) {
      for (var index = 0; index < model.renderPasses.length; ++index) {
        model.renderPasses[index].traverse(publicAPI, null);
      }
    }

    if (model.notifyStartCaptureImage) {
      getCanvasDataURL();
    }
  };

  publicAPI.disableDepthMask = function () {
    if (model.depthMaskEnabled) {
      model.context.depthMask(false);
      model.depthMaskEnabled = false;
    }
  };

  publicAPI.enableDepthMask = function () {
    if (!model.depthMaskEnabled) {
      model.context.depthMask(true);
      model.depthMaskEnabled = true;
    }
  };

  publicAPI.disableCullFace = function () {
    if (model.cullFaceEnabled) {
      model.context.disable(model.context.CULL_FACE);
      model.cullFaceEnabled = false;
    }
  };

  publicAPI.enableCullFace = function () {
    if (!model.cullFaceEnabled) {
      model.context.enable(model.context.CULL_FACE);
      model.cullFaceEnabled = true;
    }
  };

  publicAPI.setViewStream = function (stream) {
    if (model.viewStream === stream) {
      return false;
    }

    if (model.subscription) {
      model.subscription.unsubscribe();
      model.subscription = null;
    }

    model.viewStream = stream;

    if (model.viewStream) {
      // Force background to be transparent + render
      var mainRenderer = model.renderable.getRenderers()[0];
      mainRenderer.getBackgroundByReference()[3] = 0; // Enable display of the background image

      publicAPI.setUseBackgroundImage(true); // Bind to remote stream

      model.subscription = model.viewStream.onImageReady(function (e) {
        return publicAPI.setBackgroundImage(e.image);
      });
      model.viewStream.setSize(model.size[0], model.size[1]);
      model.viewStream.invalidateCache();
      model.viewStream.render();
      publicAPI.modified();
    }

    return true;
  };

  publicAPI.delete = _macros_js__WEBPACK_IMPORTED_MODULE_2__["default"].chain(publicAPI.delete, publicAPI.setViewStream, deleteGLContext);
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  cullFaceEnabled: false,
  depthMaskEnabled: true,
  shaderCache: null,
  initialized: false,
  context: null,
  canvas: null,
  cursorVisibility: true,
  cursor: 'pointer',
  textureUnitManager: null,
  textureResourceIds: null,
  containerSize: null,
  renderPasses: [],
  notifyStartCaptureImage: false,
  webgl2: false,
  defaultToWebgl2: true,
  // attempt webgl2 on by default
  vrResolution: [2160, 1200],
  queryVRSize: false,
  hideCanvasInVR: true,
  activeFramebuffer: null,
  vrDisplay: null,
  imageFormat: 'image/png',
  useOffScreen: false,
  useBackgroundImage: false
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _SceneGraph_RenderWindowViewNode_js__WEBPACK_IMPORTED_MODULE_8__["default"].extend(publicAPI, model, initialValues); // Create internal instances

  model.canvas = document.createElement('canvas');
  model.canvas.style.width = '100%';
  createGLContext();

  if (!model.selector) {
    model.selector = _HardwareSelector_js__WEBPACK_IMPORTED_MODULE_10__["default"].newInstance();
    model.selector.setOpenGLRenderWindow(publicAPI);
  } // Create internal bgImage


  model.bgImage = new Image();
  model.bgImage.style.position = 'absolute';
  model.bgImage.style.left = '0';
  model.bgImage.style.top = '0';
  model.bgImage.style.width = '100%';
  model.bgImage.style.height = '100%';
  model.bgImage.style.zIndex = '-1';
  model._textureResourceIds = new Map();
  model.myFactory = _ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_5__["default"].newInstance();
  /* eslint-disable no-use-before-define */

  model.myFactory.registerOverride('vtkRenderWindow', newInstance);
  /* eslint-enable no-use-before-define */

  model.shaderCache = _ShaderCache_js__WEBPACK_IMPORTED_MODULE_7__["default"].newInstance();
  model.shaderCache.setOpenGLRenderWindow(publicAPI); // setup default forward pass rendering

  model.renderPasses[0] = _ForwardPass_js__WEBPACK_IMPORTED_MODULE_4__["default"].newInstance();
  _macros_js__WEBPACK_IMPORTED_MODULE_2__["default"].event(publicAPI, model, 'imageReady');
  _macros_js__WEBPACK_IMPORTED_MODULE_2__["default"].event(publicAPI, model, 'haveVRDisplay'); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_2__["default"].get(publicAPI, model, ['shaderCache', 'textureUnitManager', 'webgl2', 'vrDisplay', 'useBackgroundImage']);
  _macros_js__WEBPACK_IMPORTED_MODULE_2__["default"].setGet(publicAPI, model, ['initialized', 'context', 'canvas', 'renderPasses', 'notifyStartCaptureImage', 'defaultToWebgl2', 'cursor', 'queryVRSize', 'hideCanvasInVR', 'useOffScreen', // might want to make this not call modified as
  // we change the active framebuffer a lot. Or maybe
  // only mark modified if the size or depth
  // of the buffer has changed
  'activeFramebuffer']);
  _macros_js__WEBPACK_IMPORTED_MODULE_2__["default"].setGetArray(publicAPI, model, ['size', 'vrResolution'], 2); // Object methods

  vtkOpenGLRenderWindow(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance(extend, 'vtkOpenGLRenderWindow'); // ----------------------------------------------------------------------------
// Register API specific RenderWindow implementation
// ----------------------------------------------------------------------------

(0,_Core_RenderWindow_js__WEBPACK_IMPORTED_MODULE_3__.registerViewConstructor)('WebGL', newInstance); // ----------------------------------------------------------------------------

var vtkRenderWindow = {
  newInstance: newInstance,
  extend: extend,
  pushMonitorGLContextCount: pushMonitorGLContextCount,
  popMonitorGLContextCount: popMonitorGLContextCount
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Renderer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/Renderer.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkRenderer),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../SceneGraph/ViewNode.js */ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/ViewNode.js");
/* harmony import */ var _ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ViewNodeFactory.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ViewNodeFactory.js");




var vtkDebugMacro = _macros_js__WEBPACK_IMPORTED_MODULE_0__.vtkDebugMacro; // ----------------------------------------------------------------------------
// vtkOpenGLRenderer methods
// ----------------------------------------------------------------------------

/* eslint-disable no-bitwise */

function vtkOpenGLRenderer(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkOpenGLRenderer'); // Builds myself.

  publicAPI.buildPass = function (prepass) {
    if (prepass) {
      if (!model.renderable) {
        return;
      } // make sure we have a camera


      if (!model.renderable.isActiveCameraCreated()) {
        model.renderable.resetCamera();
      }

      publicAPI.updateLights();
      publicAPI.prepareNodes();
      publicAPI.addMissingNode(model.renderable.getActiveCamera());
      publicAPI.addMissingNodes(model.renderable.getViewPropsWithNestedProps());
      publicAPI.removeUnusedNodes();
    }
  };

  publicAPI.updateLights = function () {
    var count = 0;
    var lights = model.renderable.getLightsByReference();

    for (var index = 0; index < lights.length; ++index) {
      if (lights[index].getSwitch() > 0.0) {
        count++;
      }
    }

    if (!count) {
      vtkDebugMacro('No lights are on, creating one.');
      model.renderable.createLight();
    }

    return count;
  };

  publicAPI.opaqueZBufferPass = function (prepass) {
    if (prepass) {
      var clearMask = 0;
      var gl = model.context;

      if (!model.renderable.getTransparent()) {
        model.context.clearColor(1.0, 0.0, 0.0, 1.0);
        clearMask |= gl.COLOR_BUFFER_BIT;
      }

      if (!model.renderable.getPreserveDepthBuffer()) {
        gl.clearDepth(1.0);
        clearMask |= gl.DEPTH_BUFFER_BIT;
        gl.depthMask(true);
      }

      var ts = publicAPI.getTiledSizeAndOrigin();
      gl.enable(gl.SCISSOR_TEST);
      gl.scissor(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);
      gl.viewport(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);
      gl.colorMask(true, true, true, true);
      gl.clear(clearMask);
      gl.enable(gl.DEPTH_TEST);
    }
  }; // Renders myself


  publicAPI.cameraPass = function (prepass) {
    if (prepass) {
      publicAPI.clear();
    }
  };

  publicAPI.getAspectRatio = function () {
    var size = model.parent.getSizeByReference();
    var viewport = model.renderable.getViewportByReference();
    return size[0] * (viewport[2] - viewport[0]) / ((viewport[3] - viewport[1]) * size[1]);
  };

  publicAPI.getTiledSizeAndOrigin = function () {
    var vport = model.renderable.getViewportByReference(); // if there is no window assume 0 1

    var tileViewPort = [0.0, 0.0, 1.0, 1.0]; // find the lower left corner of the viewport, taking into account the
    // lower left boundary of this tile

    var vpu = vport[0] - tileViewPort[0];
    var vpv = vport[1] - tileViewPort[1]; // store the result as a pixel value

    var ndvp = model.parent.normalizedDisplayToDisplay(vpu, vpv);
    var lowerLeftU = Math.round(ndvp[0]);
    var lowerLeftV = Math.round(ndvp[1]); // find the upper right corner of the viewport, taking into account the
    // lower left boundary of this tile

    var vpu2 = vport[2] - tileViewPort[0];
    var vpv2 = vport[3] - tileViewPort[1];
    var ndvp2 = model.parent.normalizedDisplayToDisplay(vpu2, vpv2); // now compute the size of the intersection of the viewport with the
    // current tile

    var usize = Math.round(ndvp2[0]) - lowerLeftU;
    var vsize = Math.round(ndvp2[1]) - lowerLeftV;

    if (usize < 0) {
      usize = 0;
    }

    if (vsize < 0) {
      vsize = 0;
    }

    return {
      usize: usize,
      vsize: vsize,
      lowerLeftU: lowerLeftU,
      lowerLeftV: lowerLeftV
    };
  };

  publicAPI.clear = function () {
    var clearMask = 0;
    var gl = model.context;

    if (!model.renderable.getTransparent()) {
      var background = model.renderable.getBackgroundByReference(); // renderable ensures that background has 4 entries.

      model.context.clearColor(background[0], background[1], background[2], background[3]);
      clearMask |= gl.COLOR_BUFFER_BIT;
    }

    if (!model.renderable.getPreserveDepthBuffer()) {
      gl.clearDepth(1.0);
      clearMask |= gl.DEPTH_BUFFER_BIT;
      gl.depthMask(true);
    }

    gl.colorMask(true, true, true, true);
    var ts = publicAPI.getTiledSizeAndOrigin();
    gl.enable(gl.SCISSOR_TEST);
    gl.scissor(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);
    gl.viewport(ts.lowerLeftU, ts.lowerLeftV, ts.usize, ts.vsize);
    gl.clear(clearMask);
    gl.enable(gl.DEPTH_TEST);
    /* eslint-enable no-bitwise */
  };

  publicAPI.releaseGraphicsResources = function () {
    if (model.selector !== null) {
      model.selector.releaseGraphicsResources();
    }
  };

  publicAPI.setOpenGLRenderWindow = function (rw) {
    if (model.openGLRenderWindow === rw) {
      return;
    }

    publicAPI.releaseGraphicsResources();
    model.openGLRenderWindow = rw;
    model.context = null;

    if (rw) {
      model.context = model.openGLRenderWindow.getContext();
    }
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  context: null,
  openGLRenderWindow: null,
  selector: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues); // Build VTK API

  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.get)(publicAPI, model, ['shaderCache']);
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.setGet)(publicAPI, model, ['selector']); // Object methods

  vtkOpenGLRenderer(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.newInstance)(extend, 'vtkOpenGLRenderer'); // ----------------------------------------------------------------------------

var vtkRenderer = {
  newInstance: newInstance,
  extend: extend
}; // Register ourself to OpenGL backend if imported

(0,_ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_2__.registerOverride)('vtkRenderer', newInstance);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ReplacementShaderMapper.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/ReplacementShaderMapper.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkReplacementShaderMapper)
/* harmony export */ });
/* harmony import */ var _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ShaderProgram.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ShaderProgram.js");


function implementReplaceShaderCoincidentOffset(publicAPI, model) {

  publicAPI.replaceShaderCoincidentOffset = function (shaders, ren, actor) {
    var cp = publicAPI.getCoincidentParameters(ren, actor); // if we need an offset handle it here
    // The value of .000016 is suitable for depth buffers
    // of at least 16 bit depth. We do not query the depth
    // right now because we would need some mechanism to
    // cache the result taking into account FBO changes etc.

    if (cp && (cp.factor !== 0.0 || cp.offset !== 0.0)) {
      var FSSource = shaders.Fragment;
      FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_0__["default"].substitute(FSSource, '//VTK::Coincident::Dec', ['uniform float cfactor;', 'uniform float coffset;']).result;

      if (model.context.getExtension('EXT_frag_depth')) {
        if (cp.factor !== 0.0) {
          FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_0__["default"].substitute(FSSource, '//VTK::UniformFlow::Impl', ['float cscale = length(vec2(dFdx(gl_FragCoord.z),dFdy(gl_FragCoord.z)));', '//VTK::UniformFlow::Impl'], false).result;
          FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_0__["default"].substitute(FSSource, '//VTK::Depth::Impl', 'gl_FragDepthEXT = gl_FragCoord.z + cfactor*cscale + 0.000016*coffset;').result;
        } else {
          FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_0__["default"].substitute(FSSource, '//VTK::Depth::Impl', 'gl_FragDepthEXT = gl_FragCoord.z + 0.000016*coffset;').result;
        }
      }

      if (model.openGLRenderWindow.getWebgl2()) {
        if (cp.factor !== 0.0) {
          FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_0__["default"].substitute(FSSource, '//VTK::UniformFlow::Impl', ['float cscale = length(vec2(dFdx(gl_FragCoord.z),dFdy(gl_FragCoord.z)));', '//VTK::UniformFlow::Impl'], false).result;
          FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_0__["default"].substitute(FSSource, '//VTK::Depth::Impl', 'gl_FragDepth = gl_FragCoord.z + cfactor*cscale + 0.000016*coffset;').result;
        } else {
          FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_0__["default"].substitute(FSSource, '//VTK::Depth::Impl', 'gl_FragDepth = gl_FragCoord.z + 0.000016*coffset;').result;
        }
      }

      shaders.Fragment = FSSource;
    }
  };
}

var vtkReplacementShaderMapper = {
  implementReplaceShaderCoincidentOffset: implementReplaceShaderCoincidentOffset
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Shader.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/Shader.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkShader$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");


var vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].vtkErrorMacro; // export const SHADER_TYPES = ['Vertex', 'Fragment', 'Geometry', 'Unknown'];
// ----------------------------------------------------------------------------
// vtkShader methods
// ----------------------------------------------------------------------------

function vtkShader(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkShader');

  publicAPI.compile = function () {
    var stype = model.context.VERTEX_SHADER;

    if (!model.source || !model.source.length || model.shaderType === 'Unknown') {
      return false;
    } // Ensure we delete the previous shader if necessary.


    if (model.handle !== 0) {
      model.context.deleteShader(model.handle);
      model.handle = 0;
    }

    switch (model.shaderType) {
      // case vtkShader::Geometry:
      //   type = GL_GEOMETRY_SHADER;
      //   break;
      case 'Fragment':
        stype = model.context.FRAGMENT_SHADER;
        break;

      case 'Vertex':
      default:
        stype = model.context.VERTEX_SHADER;
        break;
    }

    model.handle = model.context.createShader(stype);
    model.context.shaderSource(model.handle, model.source);
    model.context.compileShader(model.handle);
    var isCompiled = model.context.getShaderParameter(model.handle, model.context.COMPILE_STATUS);

    if (!isCompiled) {
      var lastError = model.context.getShaderInfoLog(model.handle);
      vtkErrorMacro("Error compiling shader '".concat(model.source, "': ").concat(lastError));
      model.context.deleteShader(model.handle);
      model.handle = 0;
      return false;
    } // The shader compiled, store its handle and return success.


    return true;
  };

  publicAPI.cleanup = function () {
    if (model.shaderType === 'Unknown' || model.handle === 0) {
      return;
    }

    model.context.deleteShader(model.handle);
    model.handle = 0;
    model.dirty = true;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  shaderType: 'Unknown',
  source: '',
  error: '',
  handle: 0,
  dirty: false,
  context: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['shaderType', 'source', 'error', 'handle', 'context']); // Object methods

  vtkShader(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkShader'); // ----------------------------------------------------------------------------

var vtkShader$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ShaderCache.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/ShaderCache.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkShaderCache$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _vendor_blueimp_md5_js_md5_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../vendor/blueimp-md5/js/md5.js */ "./node_modules/@kitware/vtk.js/vendor/blueimp-md5/js/md5.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ShaderProgram.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ShaderProgram.js");




var SET_GET_FIELDS = ['lastShaderBound', 'context', 'openGLRenderWindow']; // ----------------------------------------------------------------------------
// vtkShaderCache methods
// ----------------------------------------------------------------------------

function vtkShaderCache(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkShaderCache');

  publicAPI.replaceShaderValues = function (VSSource, FSSource, GSSource) {
    // first handle renaming any Fragment shader inputs
    // if we have a geometry shader. By default fragment shaders
    // assume their inputs come from a Vertex Shader. When we
    // have a Geometry shader we rename the frament shader inputs
    // to come from the geometry shader
    var nFSSource = FSSource;

    if (GSSource.length > 0) {
      nFSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_2__["default"].substitute(nFSSource, 'VSOut', 'GSOut').result;
    }

    var gl2 = model.openGLRenderWindow.getWebgl2();
    var fragDepthString = '\n';
    var version = '#version 100\n';

    if (gl2) {
      version = '#version 300 es\n' + '#define attribute in\n' + '#define textureCube texture\n' + '#define texture2D texture\n' + '#define textureCubeLod textureLod\n' + '#define texture2DLod textureLod\n';
    } else {
      model.context.getExtension('OES_standard_derivatives');

      if (model.context.getExtension('EXT_frag_depth')) {
        fragDepthString = '#extension GL_EXT_frag_depth : enable\n';
      }

      if (model.context.getExtension('EXT_shader_texture_lod')) {
        fragDepthString += '#extension GL_EXT_shader_texture_lod : enable\n' + '#define textureCubeLod textureCubeLodEXT\n' + '#define texture2DLod texture2DLodEXT';
      }
    }

    nFSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_2__["default"].substitute(nFSSource, '//VTK::System::Dec', ["".concat(version, "\n"), gl2 ? '' : '#extension GL_OES_standard_derivatives : enable\n', fragDepthString, '#ifdef GL_FRAGMENT_PRECISION_HIGH', 'precision highp float;', 'precision highp int;', '#else', 'precision mediump float;', 'precision mediump int;', '#endif']).result;
    var nVSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_2__["default"].substitute(VSSource, '//VTK::System::Dec', ["".concat(version, "\n"), '#ifdef GL_FRAGMENT_PRECISION_HIGH', 'precision highp float;', 'precision highp int;', '#else', 'precision mediump float;', 'precision mediump int;', '#endif']).result;

    if (gl2) {
      nVSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_2__["default"].substitute(nVSSource, 'varying', 'out').result;
      nFSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_2__["default"].substitute(nFSSource, 'varying', 'in').result;
      nFSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_2__["default"].substitute(nFSSource, 'gl_FragData\\[0\\]', 'fragOutput0').result;
      nFSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_2__["default"].substitute(nFSSource, '//VTK::Output::Dec', 'layout(location = 0) out vec4 fragOutput0;').result;
    } // nFSSource = ShaderProgram.substitute(nFSSource, 'gl_FragData\\[0\\]',
    //   'gl_FragColor').result;


    var nGSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_2__["default"].substitute(GSSource, '//VTK::System::Dec', version).result;
    return {
      VSSource: nVSSource,
      FSSource: nFSSource,
      GSSource: nGSSource
    };
  }; // return NULL if there is an issue


  publicAPI.readyShaderProgramArray = function (vertexCode, fragmentCode, geometryCode) {
    var data = publicAPI.replaceShaderValues(vertexCode, fragmentCode, geometryCode);
    var shader = publicAPI.getShaderProgram(data.VSSource, data.FSSource, data.GSSource);
    return publicAPI.readyShaderProgram(shader);
  };

  publicAPI.readyShaderProgram = function (shader) {
    if (!shader) {
      return null;
    } // compile if needed


    if (!shader.getCompiled() && !shader.compileShader()) {
      return null;
    } // bind if needed


    if (!publicAPI.bindShader(shader)) {
      return null;
    }

    return shader;
  };

  publicAPI.getShaderProgram = function (vertexCode, fragmentCode, geometryCode) {
    // compute the MD5 and the check the map
    var hashInput = "".concat(vertexCode).concat(fragmentCode).concat(geometryCode);
    var result = (0,_vendor_blueimp_md5_js_md5_js__WEBPACK_IMPORTED_MODULE_0__.m)(hashInput); // does it already exist?

    var loc = Object.keys(model.shaderPrograms).indexOf(result);

    if (loc === -1) {
      // create one
      var sps = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance();
      sps.setContext(model.context);
      sps.getVertexShader().setSource(vertexCode);
      sps.getFragmentShader().setSource(fragmentCode);

      if (geometryCode) {
        sps.getGeometryShader().setSource(geometryCode);
      }

      sps.setMd5Hash(result);
      model.shaderPrograms[result] = sps;
      return sps;
    }

    return model.shaderPrograms[result];
  };

  publicAPI.releaseGraphicsResources = function (win) {
    // NOTE:
    // In the current implementation as of October 26th, if a shader
    // program is created by ShaderCache then it should make sure
    // that it releases the graphics resources used by these programs.
    // It is not wisely for callers to do that since then they would
    // have to loop over all the programs were in use and invoke
    // release graphics resources individually.
    publicAPI.releaseCurrentShader();
    Object.keys(model.shaderPrograms).map(function (key) {
      return model.shaderPrograms[key];
    }).forEach(function (sp) {
      return sp.releaseGraphicsResources(win);
    });
  };

  publicAPI.releaseGraphicsResources = function () {
    // release prior shader
    if (model.astShaderBound) {
      model.lastShaderBound.release();
      model.lastShaderBound = null;
    }
  };

  publicAPI.bindShader = function (shader) {
    if (model.lastShaderBound === shader) {
      return 1;
    } // release prior shader


    if (model.lastShaderBound) {
      model.lastShaderBound.release();
    }

    shader.bind();
    model.lastShaderBound = shader;
    return 1;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  lastShaderBound: null,
  shaderPrograms: null,
  context: null,
  openGLRenderWindow: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Internal objects

  model.shaderPrograms = {}; // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGet(publicAPI, model, SET_GET_FIELDS); // Object methods

  vtkShaderCache(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkShaderCache'); // ----------------------------------------------------------------------------

var vtkShaderCache$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ShaderProgram.js":
/*!************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/ShaderProgram.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkShaderProgram$1)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Shader_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Shader.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Shader.js");



var vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].vtkErrorMacro; // perform in place string substitutions, indicate if a substitution was done
// this is useful for building up shader strings which typically involve
// lots of string substitutions. Return true if a substitution was done.

function substitute(source, search, replace) {
  var all = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  var replaceStr = Array.isArray(replace) ? replace.join('\n') : replace;
  var replaced = false;

  if (source.search(search) !== -1) {
    replaced = true;
  }

  var gflag = '';

  if (all) {
    gflag = 'g';
  }

  var regex = new RegExp(search, gflag);
  var resultstr = source.replace(regex, replaceStr);
  return {
    replace: replaced,
    result: resultstr
  };
} // ----------------------------------------------------------------------------
// vtkShaderProgram methods
// ----------------------------------------------------------------------------


function vtkShaderProgram(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkShaderProgram');

  publicAPI.compileShader = function () {
    if (!model.vertexShader.compile()) {
      vtkErrorMacro(model.vertexShader.getSource().split('\n').map(function (line, index) {
        return "".concat(index, ": ").concat(line);
      }).join('\n'));
      vtkErrorMacro(model.vertexShader.getError());
      return 0;
    }

    if (!model.fragmentShader.compile()) {
      vtkErrorMacro(model.fragmentShader.getSource().split('\n').map(function (line, index) {
        return "".concat(index, ": ").concat(line);
      }).join('\n'));
      vtkErrorMacro(model.fragmentShader.getError());
      return 0;
    } // skip geometry for now


    if (!publicAPI.attachShader(model.vertexShader)) {
      vtkErrorMacro(model.error);
      return 0;
    }

    if (!publicAPI.attachShader(model.fragmentShader)) {
      vtkErrorMacro(model.error);
      return 0;
    }

    if (!publicAPI.link()) {
      vtkErrorMacro("Links failed: ".concat(model.error));
      return 0;
    }

    publicAPI.setCompiled(true);
    return 1;
  };

  publicAPI.cleanup = function () {
    if (model.shaderType === 'Unknown' || model.handle === 0) {
      return;
    }

    model.context.deleteShader(model.handle);
    model.handle = 0;
  };

  publicAPI.bind = function () {
    if (!model.linked && !publicAPI.link()) {
      return false;
    }

    model.context.useProgram(model.handle);
    publicAPI.setBound(true);
    return true;
  };

  publicAPI.isBound = function () {
    return !!model.bound;
  };

  publicAPI.release = function () {
    model.context.useProgram(null);
    publicAPI.setBound(false);
  };

  publicAPI.setContext = function (ctx) {
    model.vertexShader.setContext(ctx);
    model.fragmentShader.setContext(ctx);
    model.geometryShader.setContext(ctx);
  };

  publicAPI.link = function () {
    if (model.inked) {
      return true;
    }

    if (model.handle === 0) {
      model.error = 'Program has not been initialized, and/or does not have shaders.';
      return false;
    } // clear out the list of uniforms used


    model.uniformLocs = {};
    model.context.linkProgram(model.handle);
    var isCompiled = model.context.getProgramParameter(model.handle, model.context.LINK_STATUS);

    if (!isCompiled) {
      var lastError = model.context.getProgramInfoLog(model.handle);
      vtkErrorMacro("Error linking shader ".concat(lastError));
      model.handle = 0;
      return false;
    }

    publicAPI.setLinked(true);
    model.attributeLocs = {};
    return true;
  };

  publicAPI.setUniformMatrix = function (name, v) {
    var location = publicAPI.findUniform(name);

    if (location === -1) {
      model.error = "Could not set uniform ".concat(name, " . No such uniform.");
      return false;
    }

    var f32 = new Float32Array(v);
    model.context.uniformMatrix4fv(location, false, f32);
    return true;
  };

  publicAPI.setUniformMatrix3x3 = function (name, v) {
    var location = publicAPI.findUniform(name);

    if (location === -1) {
      model.error = "Could not set uniform ".concat(name, " . No such uniform.");
      return false;
    }

    var f32 = new Float32Array(v);
    model.context.uniformMatrix3fv(location, false, f32);
    return true;
  };

  publicAPI.setUniformf = function (name, v) {
    var location = publicAPI.findUniform(name);

    if (location === -1) {
      model.error = "Could not set uniform ".concat(name, " . No such uniform.");
      return false;
    }

    model.context.uniform1f(location, v);
    return true;
  };

  publicAPI.setUniformfv = function (name, v) {
    var location = publicAPI.findUniform(name);

    if (location === -1) {
      model.error = "Could not set uniform ".concat(name, " . No such uniform.");
      return false;
    }

    model.context.uniform1fv(location, v);
    return true;
  };

  publicAPI.setUniformi = function (name, v) {
    var location = publicAPI.findUniform(name);

    if (location === -1) {
      model.error = "Could not set uniform ".concat(name, " . No such uniform.");
      return false;
    }

    model.context.uniform1i(location, v);
    return true;
  };

  publicAPI.setUniformiv = function (name, v) {
    var location = publicAPI.findUniform(name);

    if (location === -1) {
      model.error = "Could not set uniform ".concat(name, " . No such uniform.");
      return false;
    }

    model.context.uniform1iv(location, v);
    return true;
  };

  publicAPI.setUniform2f = function (name, v1, v2) {
    var location = publicAPI.findUniform(name);

    if (location === -1) {
      model.error = "Could not set uniform ".concat(name, " . No such uniform.");
      return false;
    }

    if (v2 === undefined) {
      throw new RangeError('Invalid number of values for array');
    }

    model.context.uniform2f(location, v1, v2);
    return true;
  };

  publicAPI.setUniform2fv = function (name, v) {
    var location = publicAPI.findUniform(name);

    if (location === -1) {
      model.error = "Could not set uniform ".concat(name, " . No such uniform.");
      return false;
    }

    model.context.uniform2fv(location, v);
    return true;
  };

  publicAPI.setUniform2i = function (name, v1, v2) {
    var location = publicAPI.findUniform(name);

    if (location === -1) {
      model.error = "Could not set uniform ".concat(name, " . No such uniform.");
      return false;
    }

    if (v2 === undefined) {
      throw new RangeError('Invalid number of values for array');
    }

    model.context.uniform2i(location, v1, v2);
    return true;
  };

  publicAPI.setUniform2iv = function (name, v) {
    var location = publicAPI.findUniform(name);

    if (location === -1) {
      model.error = "Could not set uniform ".concat(name, " . No such uniform.");
      return false;
    }

    model.context.uniform2iv(location, v);
    return true;
  };

  publicAPI.setUniform3f = function (name, a1, a2, a3) {
    var location = publicAPI.findUniform(name);

    if (location === -1) {
      model.error = "Could not set uniform ".concat(name, " . No such uniform.");
      return false;
    }

    if (a3 === undefined) {
      throw new RangeError('Invalid number of values for array');
    }

    model.context.uniform3f(location, a1, a2, a3);
    return true;
  };

  publicAPI.setUniform3fArray = function (name, a) {
    var location = publicAPI.findUniform(name);

    if (location === -1) {
      model.error = "Could not set uniform ".concat(name, " . No such uniform.");
      return false;
    }

    if (!Array.isArray(a) || a.length !== 3) {
      throw new RangeError('Invalid number of values for array');
    }

    model.context.uniform3f(location, a[0], a[1], a[2]);
    return true;
  };

  publicAPI.setUniform3fv = function (name, v) {
    var location = publicAPI.findUniform(name);

    if (location === -1) {
      model.error = "Could not set uniform ".concat(name, " . No such uniform.");
      return false;
    }

    model.context.uniform3fv(location, v);
    return true;
  };

  publicAPI.setUniform3i = function (name) {
    var location = publicAPI.findUniform(name);

    if (location === -1) {
      model.error = "Could not set uniform ".concat(name, " . No such uniform.");
      return false;
    }

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    var array = args; // allow an array passed as a single argument

    if (array.length === 1 && Array.isArray(array[0])) {
      array = array[0];
    }

    if (array.length !== 3) {
      throw new RangeError('Invalid number of values for array');
    }

    model.context.uniform3i(location, array[0], array[1], array[2]);
    return true;
  };

  publicAPI.setUniform3iv = function (name, v) {
    var location = publicAPI.findUniform(name);

    if (location === -1) {
      model.error = "Could not set uniform ".concat(name, " . No such uniform.");
      return false;
    }

    model.context.uniform3iv(location, v);
    return true;
  };

  publicAPI.setUniform4f = function (name) {
    var location = publicAPI.findUniform(name);

    if (location === -1) {
      model.error = "Could not set uniform ".concat(name, " . No such uniform.");
      return false;
    }

    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    var array = args; // allow an array passed as a single argument

    if (array.length === 1 && Array.isArray(array[0])) {
      array = array[0];
    }

    if (array.length !== 4) {
      throw new RangeError('Invalid number of values for array');
    }

    model.context.uniform4f(location, array[0], array[1], array[2], array[3]);
    return true;
  };

  publicAPI.setUniform4fv = function (name, v) {
    var location = publicAPI.findUniform(name);

    if (location === -1) {
      model.error = "Could not set uniform ".concat(name, " . No such uniform.");
      return false;
    }

    model.context.uniform4fv(location, v);
    return true;
  };

  publicAPI.setUniform4i = function (name) {
    var location = publicAPI.findUniform(name);

    if (location === -1) {
      model.error = "Could not set uniform ".concat(name, " . No such uniform.");
      return false;
    }

    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }

    var array = args; // allow an array passed as a single argument

    if (array.length === 1 && Array.isArray(array[0])) {
      array = array[0];
    }

    if (array.length !== 4) {
      throw new RangeError('Invalid number of values for array');
    }

    model.context.uniform4i(location, array[0], array[1], array[2], array[3]);
    return true;
  };

  publicAPI.setUniform4iv = function (name, v) {
    var location = publicAPI.findUniform(name);

    if (location === -1) {
      model.error = "Could not set uniform ".concat(name, " . No such uniform.");
      return false;
    }

    model.context.uniform4iv(location, v);
    return true;
  };

  publicAPI.setUniform4fv = function (name, count, v) {
    var location = publicAPI.findUniform(name);

    if (location === -1) {
      model.error = "Could not set uniform ".concat(name, " . No such uniform.");
      return false;
    }

    model.context.uniform4fv(location, v);
    return true;
  };

  publicAPI.findUniform = function (name) {
    if (!name || !model.linked) {
      return -1;
    } // see if we have cached the result


    var loc = model.uniformLocs[name];

    if (loc !== undefined) {
      return loc;
    }

    loc = model.context.getUniformLocation(model.handle, name);

    if (loc === null) {
      model.error = "Uniform ".concat(name, " not found in current shader program.");
      model.uniformLocs[name] = -1;
      return -1;
    }

    model.uniformLocs[name] = loc;
    return loc;
  };

  publicAPI.isUniformUsed = function (name) {
    if (!name) {
      return false;
    } // see if we have cached the result


    var loc = model.uniformLocs[name];

    if (loc !== undefined) {
      return loc !== null;
    }

    if (!model.linked) {
      vtkErrorMacro('attempt to find uniform when the shader program is not linked');
      return false;
    }

    loc = model.context.getUniformLocation(model.handle, name);
    model.uniformLocs[name] = loc;

    if (loc === null) {
      return false;
    }

    return true;
  };

  publicAPI.isAttributeUsed = function (name) {
    if (!name) {
      return false;
    } // see if we have cached the result


    var loc = Object.keys(model.attributeLocs).indexOf(name);

    if (loc !== -1) {
      return true;
    }

    if (!model.linked) {
      vtkErrorMacro('attempt to find uniform when the shader program is not linked');
      return false;
    }

    loc = model.context.getAttribLocation(model.handle, name);

    if (loc === -1) {
      return false;
    }

    model.attributeLocs[name] = loc;
    return true;
  };

  publicAPI.attachShader = function (shader) {
    if (shader.getHandle() === 0) {
      model.error = 'Shader object was not initialized, cannot attach it.';
      return false;
    }

    if (shader.getShaderType() === 'Unknown') {
      model.error = 'Shader object is of type Unknown and cannot be used.';
      return false;
    }

    if (model.handle === 0) {
      var thandle = model.context.createProgram();

      if (thandle === 0) {
        model.error = 'Could not create shader program.';
        return false;
      }

      model.handle = thandle;
      model.linked = false;
    }

    if (shader.getShaderType() === 'Vertex') {
      if (model.vertexShaderHandle !== 0) {
        model.comntext.detachShader(model.handle, model.vertexShaderHandle);
      }

      model.vertexShaderHandle = shader.getHandle();
    }

    if (shader.getShaderType() === 'Fragment') {
      if (model.fragmentShaderHandle !== 0) {
        model.context.detachShader(model.handle, model.fragmentShaderHandle);
      }

      model.fragmentShaderHandle = shader.getHandle();
    }

    model.context.attachShader(model.handle, shader.getHandle());
    publicAPI.setLinked(false);
    return true;
  };

  publicAPI.detachShader = function (shader) {
    if (shader.getHandle() === 0) {
      model.error = 'shader object was not initialized, cannot attach it.';
      return false;
    }

    if (shader.getShaderType() === 'Unknown') {
      model.error = 'Shader object is of type Unknown and cannot be used.';
      return false;
    }

    if (model.handle === 0) {
      model.error = 'This shader program has not been initialized yet.';
    }

    switch (shader.getShaderType()) {
      case 'Vertex':
        if (model.vertexShaderHandle !== shader.getHandle()) {
          model.error = 'The supplied shader was not attached to this program.';
          return false;
        }

        model.context.detachShader(model.handle, shader.getHandle());
        model.vertexShaderHandle = 0;
        model.linked = false;
        return true;

      case 'Fragment':
        if (model.fragmentShaderHandle !== shader.getHandle()) {
          model.error = 'The supplied shader was not attached to this program.';
          return false;
        }

        model.context.detachShader(model.handle, shader.getHandle());
        model.fragmentShaderHandle = 0;
        model.linked = false;
        return true;

      default:
        return false;
    }
  };

  publicAPI.setContext = function (ctx) {
    model.context = ctx;
    model.vertexShader.setContext(ctx);
    model.fragmentShader.setContext(ctx);
    model.geometryShader.setContext(ctx);
  };

  publicAPI.setLastCameraMTime = function (mtime) {
    model.lastCameraMTime = mtime;
  }; // publicAPI.enableAttributeArray = (name) => {
  //   const location = publicAPI.findAttributeArray(name);
  //   if (location === -1) {
  //     model.error = `Could not enable attribute ${name} No such attribute.`;
  //     return false;
  //   }
  //   model.context.enableVertexAttribArray(location);
  //   return true;
  // };
  // publicAPI.disableAttributeArray = (name) => {
  //   const location = publicAPI.findAttributeArray(name);
  //   if (location === -1) {
  //     model.error = `Could not enable attribute ${name} No such attribute.`;
  //     return false;
  //   }
  //   model.context.disableVertexAttribArray(location);
  //   return true;
  // };

} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  vertexShaderHandle: 0,
  fragmentShaderHandle: 0,
  geometryShaderHandle: 0,
  vertexShader: null,
  fragmentShader: null,
  geometryShader: null,
  linked: false,
  bound: false,
  compiled: false,
  error: '',
  handle: 0,
  numberOfOutputs: 0,
  attributesLocs: null,
  uniformLocs: null,
  md5Hash: 0,
  context: null,
  lastCameraMTime: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Instantiate internal objects

  model.attributesLocs = {};
  model.uniformLocs = {};
  model.vertexShader = _Shader_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance();
  model.vertexShader.setShaderType('Vertex');
  model.fragmentShader = _Shader_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance();
  model.fragmentShader.setShaderType('Fragment');
  model.geometryShader = _Shader_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance();
  model.geometryShader.setShaderType('Geometry'); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].get(publicAPI, model, ['lastCameraMTime']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['error', 'handle', 'compiled', 'bound', 'md5Hash', 'vertexShader', 'fragmentShader', 'geometryShader', 'linked']); // Object methods

  vtkShaderProgram(publicAPI, model);
} // ----------------------------------------------------------------------------


var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkShaderProgram'); // ----------------------------------------------------------------------------

var vtkShaderProgram$1 = {
  newInstance: newInstance,
  extend: extend,
  substitute: substitute
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Skybox.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/Skybox.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkSkybox),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Common_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Common/Core/DataArray.js */ "./node_modules/@kitware/vtk.js/Common/Core/DataArray.js");
/* harmony import */ var _Helper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Helper.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Helper.js");
/* harmony import */ var _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../SceneGraph/ViewNode.js */ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/ViewNode.js");
/* harmony import */ var _Texture_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Texture.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Texture.js");
/* harmony import */ var _Core_Property_Constants_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Core/Property/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Property/Constants.js");
/* harmony import */ var _ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ViewNodeFactory.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ViewNodeFactory.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat3_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat3.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat3.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js");










var vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_0__.vtkErrorMacro; // ----------------------------------------------------------------------------
// vtkOpenGLSkybox methods
// ----------------------------------------------------------------------------

function vtkOpenGLSkybox(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkOpenGLSkybox'); // Builds myself.

  publicAPI.buildPass = function (prepass) {
    if (prepass) {
      model.openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');
      model.openGLRenderWindow = model.openGLRenderer.getParent();
      model.context = model.openGLRenderWindow.getContext();
      model.tris.setOpenGLRenderWindow(model.openGLRenderWindow);
      model.openGLTexture.setOpenGLRenderWindow(model.openGLRenderWindow);
      var ren = model.openGLRenderer.getRenderable();
      model.openGLCamera = model.openGLRenderer.getViewNodeFor(ren.getActiveCamera());
    }
  };

  publicAPI.queryPass = function (prepass, renderPass) {
    if (prepass) {
      if (!model.renderable || !model.renderable.getVisibility()) {
        return;
      }

      renderPass.incrementOpaqueActorCount();
    }
  };

  publicAPI.opaquePass = function (prepass, renderPass) {
    if (prepass && !model.openGLRenderer.getSelector()) {
      publicAPI.updateBufferObjects();
      model.openGLRenderWindow.enableDepthMask();
      model.openGLRenderWindow.getShaderCache().readyShaderProgram(model.tris.getProgram());
      model.openGLTexture.render(model.openGLRenderWindow);
      var texUnit = model.openGLTexture.getTextureUnit();
      model.tris.getProgram().setUniformi('sbtexture', texUnit);
      var ren = model.openGLRenderer.getRenderable();
      var keyMats = model.openGLCamera.getKeyMatrices(ren);
      var imat = new Float64Array(16);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_8__.g)(imat, keyMats.wcpc);
      model.tris.getProgram().setUniformMatrix('IMCPCMatrix', imat);

      if (model.lastFormat === 'box') {
        var camPos = ren.getActiveCamera().getPosition();
        model.tris.getProgram().setUniform3f('camPos', camPos[0], camPos[1], camPos[2]);
      }

      model.tris.getVAO().bind(); // draw polygons

      model.context.drawArrays(model.context.TRIANGLES, 0, model.tris.getCABO().getElementCount());
      model.tris.getVAO().release();
      model.openGLTexture.deactivate();
    }
  };

  publicAPI.updateBufferObjects = function () {
    // build the VBO if needed, only happens once
    if (!model.tris.getCABO().getElementCount()) {
      var ptsArray = new Float32Array(12);

      for (var i = 0; i < 4; i++) {
        ptsArray[i * 3] = i % 2 * 2 - 1.0;
        ptsArray[i * 3 + 1] = i > 1 ? 1.0 : -1.0;
        ptsArray[i * 3 + 2] = 1.0;
      }

      var points = _Common_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance({
        numberOfComponents: 3,
        values: ptsArray
      });
      points.setName('points');
      var cellArray = new Uint16Array(8);
      cellArray[0] = 3;
      cellArray[1] = 0;
      cellArray[2] = 1;
      cellArray[3] = 3;
      cellArray[4] = 3;
      cellArray[5] = 0;
      cellArray[6] = 3;
      cellArray[7] = 2;
      var cells = _Common_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance({
        numberOfComponents: 1,
        values: cellArray
      });
      model.tris.getCABO().createVBO(cells, 'polys', _Core_Property_Constants_js__WEBPACK_IMPORTED_MODULE_5__.Representation.SURFACE, {
        points: points,
        cellOffset: 0
      });
    } // update the program?


    if (model.renderable.getFormat() !== model.lastFormat) {
      model.lastFormat = model.renderable.getFormat();

      if (model.lastFormat === 'box') {
        // we invert Y below because opengl is messed up!
        // Cube Maps have been specified to follow the RenderMan
        // specification (for whatever reason), and RenderMan
        // assumes the images' origin being in the upper left,
        // contrary to the usual OpenGL behaviour of having the
        // image origin in the lower left. That's why things get
        // swapped in the Y direction. It totally breaks with the usual
        // OpenGL semantics and doesn't make sense at all.
        // But now we're stuck with it.  From
        // https://stackoverflow.com/questions/11685608/convention-of-faces-in-opengl-cubemapping
        //
        model.tris.setProgram(model.openGLRenderWindow.getShaderCache().readyShaderProgramArray("//VTK::System::Dec\n             attribute vec3 vertexMC;\n             uniform mat4 IMCPCMatrix;\n             varying vec3 TexCoords;\n             void main () {\n              gl_Position = vec4(vertexMC.xyz, 1.0);\n              vec4 wpos = IMCPCMatrix * gl_Position;\n              TexCoords = wpos.xyz/wpos.w;\n             }", "//VTK::System::Dec\n             //VTK::Output::Dec\n             varying vec3 TexCoords;\n             uniform samplerCube sbtexture;\n             uniform vec3 camPos;\n             void main () {\n               // skybox looks from inside out\n               // which means we have to adjust\n               // our tcoords. Otherwise text would\n               // be flipped\n               vec3 tc = normalize(TexCoords - camPos);\n               if (abs(tc.z) < max(abs(tc.x),abs(tc.y)))\n               {\n                 tc = vec3(1.0, 1.0, -1.0) * tc;\n               }\n               else\n               {\n                 tc = vec3(-1.0, 1.0, 1.0) * tc;\n               }\n               gl_FragData[0] = textureCube(sbtexture, tc);\n             }", ''));
      }

      if (model.lastFormat === 'background') {
        // maps the texture to the window
        model.tris.setProgram(model.openGLRenderWindow.getShaderCache().readyShaderProgramArray("//VTK::System::Dec\n             attribute vec3 vertexMC;\n             uniform mat4 IMCPCMatrix;\n             varying vec2 TexCoords;\n             void main () {\n              gl_Position = vec4(vertexMC.xyz, 1.0);\n              vec4 wpos = IMCPCMatrix * gl_Position;\n              TexCoords = vec2(vertexMC.x, vertexMC.y)*0.5 + 0.5;\n             }", "//VTK::System::Dec\n             //VTK::Output::Dec\n             varying vec2 TexCoords;\n             uniform sampler2D sbtexture;\n             void main () {\n               gl_FragData[0] = texture2D(sbtexture, TexCoords);\n             }", ''));
      }

      model.tris.getShaderSourceTime().modified();
      model.tris.getVAO().bind();

      if (!model.tris.getVAO().addAttributeArray(model.tris.getProgram(), model.tris.getCABO(), 'vertexMC', model.tris.getCABO().getVertexOffset(), model.tris.getCABO().getStride(), model.context.FLOAT, 3, model.context.FALSE)) {
        vtkErrorMacro('Error setting vertexMC in shader VAO.');
      }
    } // set/update the texture map if needed


    var tmaps = model.renderable.getTextures();

    if (!tmaps.length) {
      vtkErrorMacro('vtkSkybox requires a texture map');
    }

    if (model.openGLTexture.getRenderable() !== tmaps[0]) {
      model.openGLTexture.releaseGraphicsResources(model.openGLRenderWindow);
      model.openGLTexture.setRenderable(tmaps[0]);
    }
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  context: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_3__["default"].extend(publicAPI, model, initialValues);
  model.openGLTexture = _Texture_js__WEBPACK_IMPORTED_MODULE_4__["default"].newInstance();
  model.tris = _Helper_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance();
  model.keyMatrixTime = {};
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.obj)(model.keyMatrixTime, {
    mtime: 0
  });
  model.keyMatrices = {
    normalMatrix: (0,_vendor_gl_matrix_esm_mat3_js__WEBPACK_IMPORTED_MODULE_7__.i)(new Float64Array(9)),
    mcwc: (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_8__.i)(new Float64Array(16))
  }; // Build VTK API

  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.setGet)(publicAPI, model, ['context']);
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.get)(publicAPI, model, ['activeTextures']); // Object methods

  vtkOpenGLSkybox(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.newInstance)(extend); // ----------------------------------------------------------------------------

var vtkSkybox = {
  newInstance: newInstance,
  extend: extend
}; // Register ourself to OpenGL backend if imported

(0,_ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_6__.registerOverride)('vtkSkybox', newInstance);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Texture.js":
/*!******************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/Texture.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkOpenGLTexture$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _Texture_Constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Texture/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Texture/Constants.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Common_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Common/Core/DataArray.js */ "./node_modules/@kitware/vtk.js/Common/Core/DataArray.js");
/* harmony import */ var _Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../Common/Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");
/* harmony import */ var _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../SceneGraph/ViewNode.js */ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/ViewNode.js");
/* harmony import */ var _ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ViewNodeFactory.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ViewNodeFactory.js");








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var Wrap = _Texture_Constants_js__WEBPACK_IMPORTED_MODULE_1__["default"].Wrap,
    Filter = _Texture_Constants_js__WEBPACK_IMPORTED_MODULE_1__["default"].Filter;
var VtkDataTypes = _Common_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_3__["default"].VtkDataTypes;
var vtkDebugMacro = _macros_js__WEBPACK_IMPORTED_MODULE_2__.vtkDebugMacro,
    vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_2__.vtkErrorMacro,
    vtkWarningMacro = _macros_js__WEBPACK_IMPORTED_MODULE_2__.vtkWarningMacro;
var floatView = new Float32Array(1);
var int32View = new Int32Array(floatView.buffer);
/* eslint-disable no-bitwise */

/* This method is faster than the OpenEXR implementation (very often
 * used, eg. in Ogre), with the additional benefit of rounding, inspired
 * by James Tursa?s half-precision code. */

function toHalf(val) {
  floatView[0] = val;
  var x = int32View[0];
  var bits = x >> 16 & 0x8000;
  /* Get the sign */

  var m = x >> 12 & 0x07ff;
  /* Keep one extra bit for rounding */

  var e = x >> 23 & 0xff;
  /* Using int is faster here */

  /* If zero, or denormal, or exponent underflows too much for a denormal
   * half, return signed zero. */

  if (e < 103) {
    return bits;
  }
  /* If NaN, return NaN. If Inf or exponent overflow, return Inf. */


  if (e > 142) {
    bits |= 0x7c00;
    /* If exponent was 0xff and one mantissa bit was set, it means NaN,
     * not Inf, so make sure we set one mantissa bit too. */

    bits |= (e === 255 ? 0 : 1) && x & 0x007fffff;
    return bits;
  }
  /* If exponent underflows but not too much, return a denormal */


  if (e < 113) {
    m |= 0x0800;
    /* Extra rounding may overflow and set mantissa to 0 and exponent
     * to 1, which is OK. */

    bits |= (m >> 114 - e) + (m >> 113 - e & 1);
    return bits;
  }

  bits |= e - 112 << 10 | m >> 1;
  /* Extra rounding. An overflow will set mantissa to 0 and increment
   * the exponent, which is OK. */

  bits += m & 1;
  return bits;
}

function fromHalf(h) {
  var s = (h & 0x8000) >> 15;
  var e = (h & 0x7c00) >> 10;
  var f = h & 0x03ff;

  if (e === 0) {
    return (s ? -1 : 1) * Math.pow(2, -14) * (f / Math.pow(2, 10));
  }

  if (e === 0x1f) {
    return f ? NaN : (s ? -1 : 1) * Infinity;
  }

  return (s ? -1 : 1) * Math.pow(2, e - 15) * (1 + f / Math.pow(2, 10));
} // ----------------------------------------------------------------------------
// vtkOpenGLTexture methods
// ----------------------------------------------------------------------------


function vtkOpenGLTexture(publicAPI, model) {
  var _this = this;

  // Set our className
  model.classHierarchy.push('vtkOpenGLTexture'); // Renders myself

  publicAPI.render = function () {
    var renWin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

    if (renWin) {
      model.openGLRenderWindow = renWin;
    } else {
      model.openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer'); // sync renderable properties

      model.openGLRenderWindow = model.openGLRenderer.getParent();
    }

    model.context = model.openGLRenderWindow.getContext();

    if (model.renderable.getInterpolate()) {
      if (model.generateMipmap) {
        publicAPI.setMinificationFilter(Filter.LINEAR_MIPMAP_LINEAR);
      } else {
        publicAPI.setMinificationFilter(Filter.LINEAR);
      }

      publicAPI.setMagnificationFilter(Filter.LINEAR);
    } else {
      publicAPI.setMinificationFilter(Filter.NEAREST);
      publicAPI.setMagnificationFilter(Filter.NEAREST);
    }

    if (model.renderable.getRepeat()) {
      publicAPI.setWrapR(Wrap.REPEAT);
      publicAPI.setWrapS(Wrap.REPEAT);
      publicAPI.setWrapT(Wrap.REPEAT);
    } // clear image if input data is set


    if (model.renderable.getInputData()) {
      model.renderable.setImage(null);
    } // create the texture if it is not done already


    if (!model.handle || model.renderable.getMTime() > model.textureBuildTime.getMTime()) {
      // if we have an Image
      if (model.renderable.getImage() !== null) {
        if (model.renderable.getInterpolate()) {
          model.generateMipmap = true;
          publicAPI.setMinificationFilter(Filter.LINEAR_MIPMAP_LINEAR);
        } // Have an Image which may not be complete


        if (model.renderable.getImage() && model.renderable.getImageLoaded()) {
          publicAPI.create2DFromImage(model.renderable.getImage());
          publicAPI.activate();
          publicAPI.sendParameters();
          model.textureBuildTime.modified();
        }
      } // if we have Inputdata


      var input = model.renderable.getInputData(0);

      if (input && input.getPointData().getScalars()) {
        var ext = input.getExtent();
        var inScalars = input.getPointData().getScalars(); // do we have a cube map? Six inputs

        var data = [];

        for (var i = 0; i < model.renderable.getNumberOfInputPorts(); ++i) {
          var indata = model.renderable.getInputData(i);
          var scalars = indata ? indata.getPointData().getScalars().getData() : null;

          if (scalars) {
            data.push(scalars);
          }
        }

        if (model.renderable.getInterpolate() && inScalars.getNumberOfComponents() === 4) {
          model.generateMipmap = true;
          publicAPI.setMinificationFilter(Filter.LINEAR_MIPMAP_LINEAR);
        }

        if (data.length % 6 === 0) {
          publicAPI.createCubeFromRaw(ext[1] - ext[0] + 1, ext[3] - ext[2] + 1, inScalars.getNumberOfComponents(), inScalars.getDataType(), data);
        } else {
          publicAPI.create2DFromRaw(ext[1] - ext[0] + 1, ext[3] - ext[2] + 1, inScalars.getNumberOfComponents(), inScalars.getDataType(), inScalars.getData());
        }

        publicAPI.activate();
        publicAPI.sendParameters();
        model.textureBuildTime.modified();
      }
    }

    if (model.handle) {
      publicAPI.activate();
    }
  }; //----------------------------------------------------------------------------


  publicAPI.destroyTexture = function () {
    // deactivate it first
    publicAPI.deactivate();

    if (model.context && model.handle) {
      model.context.deleteTexture(model.handle);
    }

    model.handle = 0;
    model.numberOfDimensions = 0;
    model.target = 0;
    model.components = 0;
    model.width = 0;
    model.height = 0;
    model.depth = 0;
    publicAPI.resetFormatAndType();
  }; //----------------------------------------------------------------------------


  publicAPI.createTexture = function () {
    // reuse the existing handle if we have one
    if (!model.handle) {
      model.handle = model.context.createTexture();

      if (model.target) {
        model.context.bindTexture(model.target, model.handle); // See: http://www.openmodel.context..org/wiki/Common_Mistakes#Creating_a_complete_texture
        // turn off mip map filter or set the base and max level correctly. here
        // both are done.

        model.context.texParameteri(model.target, model.context.TEXTURE_MIN_FILTER, publicAPI.getOpenGLFilterMode(model.minificationFilter));
        model.context.texParameteri(model.target, model.context.TEXTURE_MAG_FILTER, publicAPI.getOpenGLFilterMode(model.magnificationFilter));
        model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_S, publicAPI.getOpenGLWrapMode(model.wrapS));
        model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_T, publicAPI.getOpenGLWrapMode(model.wrapT));

        if (model.openGLRenderWindow.getWebgl2()) {
          model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_R, publicAPI.getOpenGLWrapMode(model.wrapR));
        }

        model.context.bindTexture(model.target, null);
      }
    }
  }; //---------------------------------------------------------------------------


  publicAPI.getTextureUnit = function () {
    if (model.openGLRenderWindow) {
      return model.openGLRenderWindow.getTextureUnitForTexture(publicAPI);
    }

    return -1;
  }; //---------------------------------------------------------------------------


  publicAPI.activate = function () {
    // activate a free texture unit for this texture
    model.openGLRenderWindow.activateTexture(publicAPI);
    publicAPI.bind();
  }; //---------------------------------------------------------------------------


  publicAPI.deactivate = function () {
    if (model.openGLRenderWindow) {
      model.openGLRenderWindow.deactivateTexture(publicAPI);
    }
  }; //---------------------------------------------------------------------------


  publicAPI.releaseGraphicsResources = function (rwin) {
    if (rwin && model.handle) {
      rwin.activateTexture(publicAPI);
      rwin.deactivateTexture(publicAPI);
      model.context.deleteTexture(model.handle);
      model.handle = 0;
      model.numberOfDimensions = 0;
      model.target = 0;
      model.internalFormat = 0;
      model.format = 0;
      model.openGLDataType = 0;
      model.components = 0;
      model.width = 0;
      model.height = 0;
      model.depth = 0;
    }

    if (model.shaderProgram) {
      model.shaderProgram.releaseGraphicsResources(rwin);
      model.shaderProgram = null;
    }
  }; //----------------------------------------------------------------------------


  publicAPI.bind = function () {
    model.context.bindTexture(model.target, model.handle);

    if (model.autoParameters && publicAPI.getMTime() > model.sendParametersTime.getMTime()) {
      publicAPI.sendParameters();
    }
  }; //----------------------------------------------------------------------------


  publicAPI.isBound = function () {
    var result = false;

    if (model.context && model.handle) {
      var target = 0;

      switch (model.target) {
        case model.context.TEXTURE_2D:
          target = model.context.TEXTURE_BINDING_2D;
          break;

        default:
          vtkWarningMacro('impossible case');
          break;
      }

      var oid = model.context.getIntegerv(target);
      result = oid === model.handle;
    }

    return result;
  }; //----------------------------------------------------------------------------


  publicAPI.sendParameters = function () {
    model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_S, publicAPI.getOpenGLWrapMode(model.wrapS));
    model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_T, publicAPI.getOpenGLWrapMode(model.wrapT));

    if (model.openGLRenderWindow.getWebgl2()) {
      model.context.texParameteri(model.target, model.context.TEXTURE_WRAP_R, publicAPI.getOpenGLWrapMode(model.wrapR));
    }

    model.context.texParameteri(model.target, model.context.TEXTURE_MIN_FILTER, publicAPI.getOpenGLFilterMode(model.minificationFilter));
    model.context.texParameteri(model.target, model.context.TEXTURE_MAG_FILTER, publicAPI.getOpenGLFilterMode(model.magnificationFilter));

    if (model.openGLRenderWindow.getWebgl2()) {
      model.context.texParameteri(model.target, model.context.TEXTURE_BASE_LEVEL, model.baseLevel);
      model.context.texParameteri(model.target, model.context.TEXTURE_MAX_LEVEL, model.maxLevel);
    } // model.context.texParameterf(model.target, model.context.TEXTURE_MIN_LOD, model.minLOD);
    // model.context.texParameterf(model.target, model.context.TEXTURE_MAX_LOD, model.maxLOD);


    model.sendParametersTime.modified();
  }; //----------------------------------------------------------------------------


  publicAPI.getInternalFormat = function (vtktype, numComps) {
    if (!model.internalFormat) {
      model.internalFormat = publicAPI.getDefaultInternalFormat(vtktype, numComps);
    }

    if (!model.internalFormat) {
      vtkDebugMacro("Unable to find suitable internal format for T=".concat(vtktype, " NC= ").concat(numComps));
    }

    return model.internalFormat;
  }; //----------------------------------------------------------------------------


  publicAPI.getDefaultInternalFormat = function (vtktype, numComps) {
    var result = 0; // try default next

    result = model.openGLRenderWindow.getDefaultTextureInternalFormat(vtktype, numComps, false);

    if (result) {
      return result;
    } // try floating point


    result = _this.openGLRenderWindow.getDefaultTextureInternalFormat(vtktype, numComps, true);

    if (!result) {
      vtkDebugMacro('Unsupported internal texture type!');
      vtkDebugMacro("Unable to find suitable internal format for T=".concat(vtktype, " NC= ").concat(numComps));
    }

    return result;
  }; //----------------------------------------------------------------------------


  publicAPI.setInternalFormat = function (iFormat) {
    if (iFormat !== model.internalFormat) {
      model.internalFormat = iFormat;
      publicAPI.modified();
    }
  }; //----------------------------------------------------------------------------


  publicAPI.getFormat = function (vtktype, numComps) {
    model.format = publicAPI.getDefaultFormat(vtktype, numComps);
    return model.format;
  }; //----------------------------------------------------------------------------


  publicAPI.getDefaultFormat = function (vtktype, numComps) {
    if (model.openGLRenderWindow.getWebgl2()) {
      switch (numComps) {
        case 1:
          return model.context.RED;

        case 2:
          return model.context.RG;

        case 3:
          return model.context.RGB;

        case 4:
          return model.context.RGBA;

        default:
          return model.context.RGB;
      }
    } else {
      // webgl1
      switch (numComps) {
        case 1:
          return model.context.LUMINANCE;

        case 2:
          return model.context.LUMINANCE_ALPHA;

        case 3:
          return model.context.RGB;

        case 4:
          return model.context.RGBA;

        default:
          return model.context.RGB;
      }
    }
  }; //----------------------------------------------------------------------------


  publicAPI.resetFormatAndType = function () {
    model.format = 0;
    model.internalFormat = 0;
    model.openGLDataType = 0;
  }; //----------------------------------------------------------------------------


  publicAPI.getDefaultDataType = function (vtkScalarType) {
    // DON'T DEAL with VTK_CHAR as this is platform dependent.
    if (model.openGLRenderWindow.getWebgl2()) {
      switch (vtkScalarType) {
        // case VtkDataTypes.SIGNED_CHAR:
        //   return model.context.BYTE;
        case VtkDataTypes.UNSIGNED_CHAR:
          return model.context.UNSIGNED_BYTE;
        // case VtkDataTypes.SHORT:
        //   return model.context.SHORT;
        // case VtkDataTypes.UNSIGNED_SHORT:
        //   return model.context.UNSIGNED_SHORT;
        // case VtkDataTypes.INT:
        //   return model.context.INT;
        // case VtkDataTypes.UNSIGNED_INT:
        //   return model.context.UNSIGNED_INT;

        case VtkDataTypes.FLOAT:
        case VtkDataTypes.VOID: // used for depth component textures.

        default:
          return model.context.FLOAT;
      }
    }

    switch (vtkScalarType) {
      // case VtkDataTypes.SIGNED_CHAR:
      //   return model.context.BYTE;
      case VtkDataTypes.UNSIGNED_CHAR:
        return model.context.UNSIGNED_BYTE;
      // case VtkDataTypes.SHORT:
      //   return model.context.SHORT;
      // case VtkDataTypes.UNSIGNED_SHORT:
      //   return model.context.UNSIGNED_SHORT;
      // case VtkDataTypes.INT:
      //   return model.context.INT;
      // case VtkDataTypes.UNSIGNED_INT:
      //   return model.context.UNSIGNED_INT;

      case VtkDataTypes.FLOAT:
      case VtkDataTypes.VOID: // used for depth component textures.

      default:
        if (model.context.getExtension('OES_texture_float') && model.context.getExtension('OES_texture_float_linear')) {
          return model.context.FLOAT;
        }

        {
          var halfFloat = model.context.getExtension('OES_texture_half_float');

          if (halfFloat && model.context.getExtension('OES_texture_half_float_linear')) {
            return halfFloat.HALF_FLOAT_OES;
          }
        }
        return model.context.UNSIGNED_BYTE;
    }
  }; //----------------------------------------------------------------------------


  publicAPI.getOpenGLDataType = function (vtkScalarType) {
    model.openGLDataType = publicAPI.getDefaultDataType(vtkScalarType);
    return model.openGLDataType;
  };

  publicAPI.getShiftAndScale = function () {
    var shift = 0.0;
    var scale = 1.0; // for all float type internal formats

    switch (model.openGLDataType) {
      case model.context.BYTE:
        scale = 127.5;
        shift = scale - 128.0;
        break;

      case model.context.UNSIGNED_BYTE:
        scale = 255.0;
        shift = 0.0;
        break;

      case model.context.SHORT:
        scale = 32767.5;
        shift = scale - 32768.0;
        break;

      case model.context.UNSIGNED_SHORT:
        scale = 65536.0;
        shift = 0.0;
        break;

      case model.context.INT:
        scale = 2147483647.5;
        shift = scale - 2147483648.0;
        break;

      case model.context.UNSIGNED_INT:
        scale = 4294967295.0;
        shift = 0.0;
        break;

      case model.context.FLOAT:
    }

    return {
      shift: shift,
      scale: scale
    };
  }; //----------------------------------------------------------------------------


  publicAPI.getOpenGLFilterMode = function (emode) {
    switch (emode) {
      case Filter.NEAREST:
        return model.context.NEAREST;

      case Filter.LINEAR:
        return model.context.LINEAR;

      case Filter.NEAREST_MIPMAP_NEAREST:
        return model.context.NEAREST_MIPMAP_NEAREST;

      case Filter.NEAREST_MIPMAP_LINEAR:
        return model.context.NEAREST_MIPMAP_LINEAR;

      case Filter.LINEAR_MIPMAP_NEAREST:
        return model.context.LINEAR_MIPMAP_NEAREST;

      case Filter.LINEAR_MIPMAP_LINEAR:
        return model.context.LINEAR_MIPMAP_LINEAR;

      default:
        return model.context.NEAREST;
    }
  }; //----------------------------------------------------------------------------


  publicAPI.getOpenGLWrapMode = function (vtktype) {
    switch (vtktype) {
      case Wrap.CLAMP_TO_EDGE:
        return model.context.CLAMP_TO_EDGE;

      case Wrap.REPEAT:
        return model.context.REPEAT;

      case Wrap.MIRRORED_REPEAT:
        return model.context.MIRRORED_REPEAT;

      default:
        return model.context.CLAMP_TO_EDGE;
    }
  }; //----------------------------------------------------------------------------


  function updateArrayDataType(dataType, data) {
    var pixData = []; // if the opengl data type is float
    // then the data array must be float

    if (dataType !== VtkDataTypes.FLOAT && model.openGLDataType === model.context.FLOAT) {
      var pixCount = model.width * model.height * model.components;

      for (var idx = 0; idx < data.length; idx++) {
        var newArray = new Float32Array(pixCount);

        for (var i = 0; i < pixCount; i++) {
          newArray[i] = data[idx][i];
        }

        pixData.push(newArray);
      }
    } // if the opengl data type is ubyte
    // then the data array must be u8, we currently simply truncate the data


    if (dataType !== VtkDataTypes.UNSIGNED_CHAR && model.openGLDataType === model.context.UNSIGNED_BYTE) {
      var _pixCount = model.width * model.height * model.components;

      for (var _idx = 0; _idx < data.length; _idx++) {
        var _newArray = new Uint8Array(_pixCount);

        for (var _i = 0; _i < _pixCount; _i++) {
          _newArray[_i] = data[_idx][_i];
        }

        pixData.push(_newArray);
      }
    } // if the opengl data type is half float
    // then the data array must be u16


    var halfFloat = model.context.getExtension('OES_texture_half_float');

    if (halfFloat && model.openGLDataType === halfFloat.HALF_FLOAT_OES) {
      var _pixCount2 = model.width * model.height * model.components;

      for (var _idx2 = 0; _idx2 < data.length; _idx2++) {
        var _newArray2 = new Uint16Array(_pixCount2);

        for (var _i2 = 0; _i2 < _pixCount2; _i2++) {
          _newArray2[_i2] = toHalf(data[_idx2][_i2]);
        }

        pixData.push(_newArray2);
      }
    } // The output has to be filled


    if (pixData.length === 0) {
      for (var _i3 = 0; _i3 < data.length; _i3++) {
        pixData.push(data[_i3]);
      }
    }

    return pixData;
  } //----------------------------------------------------------------------------


  function scaleTextureToHighestPowerOfTwo(data) {
    if (model.openGLRenderWindow.getWebgl2()) {
      // No need if webGL2
      return data;
    }

    var pixData = [];
    var width = model.width;
    var height = model.height;
    var numComps = model.components;

    if (data && (!(0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.P)(width) || !(0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.P)(height))) {
      // Scale up the texture to the next highest power of two dimensions.
      var halfFloat = model.context.getExtension('OES_texture_half_float');
      var newWidth = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.K)(width);
      var newHeight = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.K)(height);
      var pixCount = newWidth * newHeight * model.components;

      for (var idx = 0; idx < data.length; idx++) {
        if (data[idx] !== null) {
          var newArray = null;
          var jFactor = height / newHeight;
          var iFactor = width / newWidth;
          var usingHalf = false;

          if (model.openGLDataType === model.context.FLOAT) {
            newArray = new Float32Array(pixCount);
          } else if (halfFloat && model.openGLDataType === halfFloat.HALF_FLOAT_OES) {
            newArray = new Uint16Array(pixCount);
            usingHalf = true;
          } else {
            newArray = new Uint8Array(pixCount);
          }

          for (var j = 0; j < newHeight; j++) {
            var joff = j * newWidth * numComps;
            var jidx = j * jFactor;
            var jlow = Math.floor(jidx);
            var jhi = Math.ceil(jidx);

            if (jhi >= height) {
              jhi = height - 1;
            }

            var jmix = jidx - jlow;
            var jmix1 = 1.0 - jmix;
            jlow = jlow * width * numComps;
            jhi = jhi * width * numComps;

            for (var i = 0; i < newWidth; i++) {
              var ioff = i * numComps;
              var iidx = i * iFactor;
              var ilow = Math.floor(iidx);
              var ihi = Math.ceil(iidx);

              if (ihi >= width) {
                ihi = width - 1;
              }

              var imix = iidx - ilow;
              ilow *= numComps;
              ihi *= numComps;

              for (var c = 0; c < numComps; c++) {
                if (usingHalf) {
                  newArray[joff + ioff + c] = toHalf(fromHalf(data[idx][jlow + ilow + c]) * jmix1 * (1.0 - imix) + fromHalf(data[idx][jlow + ihi + c]) * jmix1 * imix + fromHalf(data[idx][jhi + ilow + c]) * jmix * (1.0 - imix) + fromHalf(data[idx][jhi + ihi + c]) * jmix * imix);
                } else {
                  newArray[joff + ioff + c] = data[idx][jlow + ilow + c] * jmix1 * (1.0 - imix) + data[idx][jlow + ihi + c] * jmix1 * imix + data[idx][jhi + ilow + c] * jmix * (1.0 - imix) + data[idx][jhi + ihi + c] * jmix * imix;
                }
              }
            }
          }

          pixData.push(newArray);
          model.width = newWidth;
          model.height = newHeight;
        } else {
          pixData.push(null);
        }
      }
    } // The output has to be filled


    if (pixData.length === 0) {
      for (var _i4 = 0; _i4 < data.length; _i4++) {
        pixData.push(data[_i4]);
      }
    }

    return pixData;
  } //----------------------------------------------------------------------------


  publicAPI.create2DFromRaw = function (width, height, numComps, dataType, data) {
    // Now determine the texture parameters using the arguments.
    publicAPI.getOpenGLDataType(dataType);
    publicAPI.getInternalFormat(dataType, numComps);
    publicAPI.getFormat(dataType, numComps);

    if (!model.internalFormat || !model.format || !model.openGLDataType) {
      vtkErrorMacro('Failed to determine texture parameters.');
      return false;
    }

    model.target = model.context.TEXTURE_2D;
    model.components = numComps;
    model.width = width;
    model.height = height;
    model.depth = 1;
    model.numberOfDimensions = 2;
    model.openGLRenderWindow.activateTexture(publicAPI);
    publicAPI.createTexture();
    publicAPI.bind(); // Create an array of texture with one texture

    var dataArray = [data];
    var pixData = updateArrayDataType(dataType, dataArray);
    var scaledData = scaleTextureToHighestPowerOfTwo(pixData); // Source texture data from the PBO.
    // model.context.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);

    model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1);
    model.context.texImage2D(model.target, 0, model.internalFormat, model.width, model.height, 0, model.format, model.openGLDataType, scaledData[0]);

    if (model.generateMipmap) {
      model.context.generateMipmap(model.target);
    }

    publicAPI.deactivate();
    return true;
  }; //----------------------------------------------------------------------------


  publicAPI.createCubeFromRaw = function (width, height, numComps, dataType, data) {
    // Now determine the texture parameters using the arguments.
    publicAPI.getOpenGLDataType(dataType);
    publicAPI.getInternalFormat(dataType, numComps);
    publicAPI.getFormat(dataType, numComps);

    if (!model.internalFormat || !model.format || !model.openGLDataType) {
      vtkErrorMacro('Failed to determine texture parameters.');
      return false;
    }

    model.target = model.context.TEXTURE_CUBE_MAP;
    model.components = numComps;
    model.width = width;
    model.height = height;
    model.depth = 1;
    model.numberOfDimensions = 2;
    model.openGLRenderWindow.activateTexture(publicAPI);
    model.maxLevel = data.length / 6 - 1;
    publicAPI.createTexture();
    publicAPI.bind();
    var pixData = updateArrayDataType(dataType, data);
    var scaledData = scaleTextureToHighestPowerOfTwo(pixData); // invert the data because opengl is messed up with cube maps
    // and uses the old renderman standard with Y going down
    // even though it is completely at odds with OpenGL standards

    var invertedData = [];
    var widthLevel = model.width;
    var heightLevel = model.height;

    for (var i = 0; i < scaledData.length; i++) {
      if (i % 6 === 0 && i !== 0) {
        widthLevel /= 2;
        heightLevel /= 2;
      }

      invertedData[i] = (0,_macros_js__WEBPACK_IMPORTED_MODULE_2__.newTypedArray)(dataType, heightLevel * widthLevel * model.components);

      for (var y = 0; y < heightLevel; ++y) {
        var row1 = y * widthLevel * model.components;
        var row2 = (heightLevel - y - 1) * widthLevel * model.components;
        invertedData[i].set(scaledData[i].slice(row2, row2 + widthLevel * model.components), row1);
      }
    } // Source texture data from the PBO.


    model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1); // We get the 6 images

    for (var _i5 = 0; _i5 < 6; _i5++) {
      // For each mipmap level
      var j = 0;
      var w = model.width;
      var h = model.height;

      while (w >= 1 && h >= 1) {
        // In webgl 1, all levels need to be defined. So if the latest level size is
        // 8x8, we have to add 3 more null textures (4x4, 2x2, 1x1)
        // In webgl 2, the attribute maxLevel will be use.
        var tempData = null;

        if (j <= model.maxLevel) {
          tempData = invertedData[6 * j + _i5];
        }

        model.context.texImage2D(model.context.TEXTURE_CUBE_MAP_POSITIVE_X + _i5, j, model.internalFormat, w, h, 0, model.format, model.openGLDataType, tempData);
        j++;
        w /= 2;
        h /= 2;
      }
    } // generateMipmap must not be called here because we manually upload all levels
    // if it is called, all levels will be overwritten


    publicAPI.deactivate();
    return true;
  }; //----------------------------------------------------------------------------


  publicAPI.createDepthFromRaw = function (width, height, dataType, data) {
    // Now determine the texture parameters using the arguments.
    publicAPI.getOpenGLDataType(dataType);
    model.format = model.context.DEPTH_COMPONENT;

    if (model.openGLRenderWindow.getWebgl2()) {
      if (dataType === VtkDataTypes.FLOAT) {
        model.internalFormat = model.context.DEPTH_COMPONENT32F;
      } else {
        model.internalFormat = model.context.DEPTH_COMPONENT16;
      }
    } else {
      model.internalFormat = model.context.DEPTH_COMPONENT;
    }

    if (!model.internalFormat || !model.format || !model.openGLDataType) {
      vtkErrorMacro('Failed to determine texture parameters.');
      return false;
    }

    model.target = model.context.TEXTURE_2D;
    model.components = 1;
    model.width = width;
    model.height = height;
    model.depth = 1;
    model.numberOfDimensions = 2;
    model.openGLRenderWindow.activateTexture(publicAPI);
    publicAPI.createTexture();
    publicAPI.bind(); // Source texture data from the PBO.
    // model.context.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);

    model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1);
    model.context.texImage2D(model.target, 0, model.internalFormat, model.width, model.height, 0, model.format, model.openGLDataType, data);

    if (model.generateMipmap) {
      model.context.generateMipmap(model.target);
    }

    publicAPI.deactivate();
    return true;
  }; //----------------------------------------------------------------------------


  publicAPI.create2DFromImage = function (image) {
    // Now determine the texture parameters using the arguments.
    publicAPI.getOpenGLDataType(VtkDataTypes.UNSIGNED_CHAR);
    publicAPI.getInternalFormat(VtkDataTypes.UNSIGNED_CHAR, 4);
    publicAPI.getFormat(VtkDataTypes.UNSIGNED_CHAR, 4);

    if (!model.internalFormat || !model.format || !model.openGLDataType) {
      vtkErrorMacro('Failed to determine texture parameters.');
      return false;
    }

    model.target = model.context.TEXTURE_2D;
    model.components = 4;
    model.width = image.width;
    model.height = image.height;
    model.depth = 1;
    model.numberOfDimensions = 2;
    model.openGLRenderWindow.activateTexture(publicAPI);
    publicAPI.createTexture();
    publicAPI.bind(); // Source texture data from the PBO.
    // model.context.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);

    model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1); // Scale up the texture to the next highest power of two dimensions (if needed) and flip y.

    var needNearestPowerOfTwo = !(0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.P)(image.width) || !(0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.P)(image.height);
    var canvas = document.createElement('canvas');
    canvas.width = needNearestPowerOfTwo ? (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.K)(image.width) : image.width;
    canvas.height = needNearestPowerOfTwo ? (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.K)(image.height) : image.height;
    var ctx = canvas.getContext('2d');
    ctx.translate(0, canvas.height);
    ctx.scale(1, -1);
    ctx.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height); // In Chrome 69 on Windows and Ubuntu, there is a bug that prevents some
    // canvases from working properly with webGL textures.  By getting any
    // image data from the canvas, this works around the bug.  See
    // https://bugs.chromium.org/p/chromium/issues/detail?id=896307

    if (navigator.userAgent.indexOf('Chrome/69') >= 0) {
      ctx.getImageData(0, 0, 1, 1);
    }

    var safeImage = canvas;
    model.context.texImage2D(model.target, 0, model.internalFormat, model.format, model.openGLDataType, safeImage);

    if (model.generateMipmap) {
      model.context.generateMipmap(model.target);
    }

    publicAPI.deactivate();
    return true;
  }; //----------------------------------------------------------------------------


  publicAPI.create3DFromRaw = function (width, height, depth, numComps, dataType, data) {
    // Now determine the texture parameters using the arguments.
    publicAPI.getOpenGLDataType(dataType);
    publicAPI.getInternalFormat(dataType, numComps);
    publicAPI.getFormat(dataType, numComps);

    if (!model.internalFormat || !model.format || !model.openGLDataType) {
      vtkErrorMacro('Failed to determine texture parameters.');
      return false;
    }

    model.target = model.context.TEXTURE_3D;
    model.components = numComps;
    model.width = width;
    model.height = height;
    model.depth = depth;
    model.numberOfDimensions = 3;
    model.openGLRenderWindow.activateTexture(publicAPI);
    publicAPI.createTexture();
    publicAPI.bind(); // Source texture data from the PBO.
    // model.context.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
    // model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1);

    model.context.texImage3D(model.target, 0, model.internalFormat, model.width, model.height, model.depth, 0, model.format, model.openGLDataType, data);

    if (model.generateMipmap) {
      model.context.generateMipmap(model.target);
    }

    publicAPI.deactivate();
    return true;
  };

  function computeScaleOffsets(numComps, numPixelsIn, data) {
    // compute min and max values per component
    var min = [];
    var max = [];

    for (var c = 0; c < numComps; ++c) {
      min[c] = data[c];
      max[c] = data[c];
    }

    var count = 0;

    for (var i = 0; i < numPixelsIn; ++i) {
      for (var _c = 0; _c < numComps; ++_c) {
        if (data[count] < min[_c]) {
          min[_c] = data[count];
        }

        if (data[count] > max[_c]) {
          max[_c] = data[count];
        }

        count++;
      }
    }

    var offset = [];
    var scale = [];

    for (var _c2 = 0; _c2 < numComps; ++_c2) {
      if (min[_c2] === max[_c2]) {
        max[_c2] = min[_c2] + 1.0;
      }

      offset[_c2] = min[_c2];
      scale[_c2] = max[_c2] - min[_c2];
    }

    return {
      scale: scale,
      offset: offset
    };
  } //----------------------------------------------------------------------------
  // This method simulates a 3D texture using 2D


  publicAPI.create3DFilterableFromRaw = function (width, height, depth, numComps, dataType, data) {
    var numPixelsIn = width * height * depth; // initialize offset/scale

    var offset = [];
    var scale = [];

    for (var c = 0; c < numComps; ++c) {
      offset[c] = 0.0;
      scale[c] = 1.0;
    } // store the information, we will need it later
    // offset and scale are the offset and scale required to get
    // the texture value back to data values ala
    // data = texture * scale + offset
    // and texture = (data - offset)/scale


    model.volumeInfo = {
      scale: scale,
      offset: offset,
      width: width,
      height: height,
      depth: depth
    }; // WebGL2 path, we have 3d textures etc

    if (model.openGLRenderWindow.getWebgl2()) {
      if (dataType === VtkDataTypes.FLOAT) {
        return publicAPI.create3DFromRaw(width, height, depth, numComps, dataType, data);
      }

      if (dataType === VtkDataTypes.UNSIGNED_CHAR) {
        for (var _c3 = 0; _c3 < numComps; ++_c3) {
          model.volumeInfo.scale[_c3] = 255.0;
        }

        return publicAPI.create3DFromRaw(width, height, depth, numComps, dataType, data);
      } // otherwise convert to float


      var _newArray3 = new Float32Array(numPixelsIn * numComps); // compute min and max values


      var _computeScaleOffsets = computeScaleOffsets(numComps, numPixelsIn, data),
          computedOffset = _computeScaleOffsets.offset,
          computedScale = _computeScaleOffsets.scale;

      model.volumeInfo.offset = computedOffset;
      model.volumeInfo.scale = computedScale;
      var count = 0;
      var scaleInverse = computedScale.map(function (s) {
        return 1 / s;
      });

      for (var i = 0; i < numPixelsIn; i++) {
        for (var nc = 0; nc < numComps; nc++) {
          _newArray3[count] = (data[count] - computedOffset[nc]) * scaleInverse[nc];
          count++;
        }
      }

      return publicAPI.create3DFromRaw(width, height, depth, numComps, VtkDataTypes.FLOAT, _newArray3);
    } // not webgl2, deal with webgl1, no 3d textures
    // and maybe no float textures
    // compute min and max values


    var res = computeScaleOffsets(numComps, numPixelsIn, data);

    var volCopyData = function volCopyData(outArray, outIdx, inValue, smin, smax) {
      outArray[outIdx] = inValue;
    };

    var dataTypeToUse = VtkDataTypes.UNSIGNED_CHAR; // unsigned char gets used as is

    if (dataType === VtkDataTypes.UNSIGNED_CHAR) {
      for (var _c4 = 0; _c4 < numComps; ++_c4) {
        res.offset[_c4] = 0.0;
        res.scale[_c4] = 255.0;
      }
    } else if (model.context.getExtension('OES_texture_float') && model.context.getExtension('OES_texture_float_linear')) {
      // use float textures scaled to 0.0 to 1.0
      dataTypeToUse = VtkDataTypes.FLOAT;

      volCopyData = function volCopyData(outArray, outIdx, inValue, soffset, sscale) {
        outArray[outIdx] = (inValue - soffset) / sscale;
      };
    } else {
      // worst case, scale data to uchar
      dataTypeToUse = VtkDataTypes.UNSIGNED_CHAR;

      volCopyData = function volCopyData(outArray, outIdx, inValue, soffset, sscale) {
        outArray[outIdx] = 255.0 * (inValue - soffset) / sscale;
      };
    } // Now determine the texture parameters using the arguments.


    publicAPI.getOpenGLDataType(dataTypeToUse);
    publicAPI.getInternalFormat(dataTypeToUse, numComps);
    publicAPI.getFormat(dataTypeToUse, numComps);

    if (!model.internalFormat || !model.format || !model.openGLDataType) {
      vtkErrorMacro('Failed to determine texture parameters.');
      return false;
    } // have to pack this 3D texture into pot 2D texture


    model.target = model.context.TEXTURE_2D;
    model.components = numComps;
    model.depth = 1;
    model.numberOfDimensions = 2; // MAX_TEXTURE_SIZE gives the max dimensions that can be supported by the GPU,
    // but it doesn't mean it will fit in memory. If we have to use a float data type
    // or 4 components, there are good chances that the texture size will blow up
    // and could not fit in the GPU memory. Use a smaller texture size in that case,
    // which will force a downsampling of the dataset.
    // That problem does not occur when using webGL2 since we can pack the data in
    // denser textures based on our data type.
    // TODO: try to fit in the biggest supported texture, catch the gl error if it
    // does not fix (OUT_OF_MEMORY), then attempt with smaller texture

    var maxTexDim = model.context.getParameter(model.context.MAX_TEXTURE_SIZE);

    if (maxTexDim > 4096 && (dataTypeToUse === VtkDataTypes.FLOAT || numComps >= 3)) {
      maxTexDim = 4096;
    } // compute estimate for XY subsample


    var xstride = 1;
    var ystride = 1;

    if (numPixelsIn > maxTexDim * maxTexDim) {
      xstride = Math.ceil(Math.sqrt(numPixelsIn / (maxTexDim * maxTexDim)));
      ystride = xstride;
    }

    var targetWidth = Math.sqrt(numPixelsIn) / xstride;
    targetWidth = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.K)(targetWidth); // determine X reps

    var xreps = Math.floor(targetWidth * xstride / width);
    var yreps = Math.ceil(depth / xreps);
    var targetHeight = (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_4__.K)(height * yreps / ystride);
    model.width = targetWidth;
    model.height = targetHeight;
    model.openGLRenderWindow.activateTexture(publicAPI);
    publicAPI.createTexture();
    publicAPI.bind(); // store the information, we will need it later

    model.volumeInfo.xreps = xreps;
    model.volumeInfo.yreps = yreps;
    model.volumeInfo.xstride = xstride;
    model.volumeInfo.ystride = ystride;
    model.volumeInfo.offset = res.offset;
    model.volumeInfo.scale = res.scale; // OK stuff the data into the 2d TEXTURE
    // first allocate the new texture

    var newArray;
    var pixCount = targetWidth * targetHeight * numComps;

    if (dataTypeToUse === VtkDataTypes.FLOAT) {
      newArray = new Float32Array(pixCount);
    } else {
      newArray = new Uint8Array(pixCount);
    } // then stuff the data into it, nothing fancy right now
    // for stride


    var outIdx = 0;
    var tileWidth = Math.floor(width / xstride);
    var tileHeight = Math.floor(height / ystride);

    for (var yRep = 0; yRep < yreps; yRep++) {
      var xrepsThisRow = Math.min(xreps, depth - yRep * xreps);
      var outXContIncr = numComps * (model.width - xrepsThisRow * Math.floor(width / xstride));

      for (var tileY = 0; tileY < tileHeight; tileY++) {
        for (var xRep = 0; xRep < xrepsThisRow; xRep++) {
          var inOffset = numComps * ((yRep * xreps + xRep) * width * height + ystride * tileY * width);

          for (var tileX = 0; tileX < tileWidth; tileX++) {
            // copy value
            for (var _nc = 0; _nc < numComps; _nc++) {
              volCopyData(newArray, outIdx, data[inOffset + xstride * tileX * numComps + _nc], res.offset[_nc], res.scale[_nc]);
              outIdx++;
            }
          }
        }

        outIdx += outXContIncr;
      }
    } // Source texture data from the PBO.
    // model.context.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);


    model.context.pixelStorei(model.context.UNPACK_ALIGNMENT, 1);
    model.context.texImage2D(model.target, 0, model.internalFormat, model.width, model.height, 0, model.format, model.openGLDataType, newArray);
    publicAPI.deactivate();
    return true;
  };

  publicAPI.setOpenGLRenderWindow = function (rw) {
    if (model.openGLRenderWindow === rw) {
      return;
    }

    publicAPI.releaseGraphicsResources();
    model.openGLRenderWindow = rw;
    model.context = null;

    if (rw) {
      model.context = model.openGLRenderWindow.getContext();
    }
  }; //----------------------------------------------------------------------------


  publicAPI.getMaximumTextureSize = function (ctx) {
    if (ctx && ctx.isCurrent()) {
      return ctx.getIntegerv(ctx.MAX_TEXTURE_SIZE);
    }

    return -1;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  openGLRenderWindow: null,
  context: null,
  handle: 0,
  sendParametersTime: null,
  textureBuildTime: null,
  numberOfDimensions: 0,
  target: 0,
  format: 0,
  openGLDataType: 0,
  components: 0,
  width: 0,
  height: 0,
  depth: 0,
  autoParameters: true,
  wrapS: Wrap.CLAMP_TO_EDGE,
  wrapT: Wrap.CLAMP_TO_EDGE,
  wrapR: Wrap.CLAMP_TO_EDGE,
  minificationFilter: Filter.NEAREST,
  magnificationFilter: Filter.NEAREST,
  minLOD: -1000.0,
  maxLOD: 1000.0,
  baseLevel: 0,
  maxLevel: 1000,
  generateMipmap: false
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_5__["default"].extend(publicAPI, model, initialValues);
  model.sendParametersTime = {};
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_2__.obj)(model.sendParametersTime, {
    mtime: 0
  });
  model.textureBuildTime = {};
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_2__.obj)(model.textureBuildTime, {
    mtime: 0
  }); // Build VTK API

  (0,_macros_js__WEBPACK_IMPORTED_MODULE_2__.set)(publicAPI, model, ['format', 'openGLDataType']);
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_2__.setGet)(publicAPI, model, ['keyMatrixTime', 'minificationFilter', 'magnificationFilter', 'wrapS', 'wrapT', 'wrapR', 'generateMipmap']);
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_2__.get)(publicAPI, model, ['width', 'height', 'volumeInfo', 'components', 'handle', 'target']); // Object methods

  vtkOpenGLTexture(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = (0,_macros_js__WEBPACK_IMPORTED_MODULE_2__.newInstance)(extend, 'vtkOpenGLTexture'); // ----------------------------------------------------------------------------

var vtkOpenGLTexture$1 = _objectSpread({
  newInstance: newInstance,
  extend: extend
}, _Texture_Constants_js__WEBPACK_IMPORTED_MODULE_1__["default"]); // Register ourself to OpenGL backend if imported

(0,_ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_6__.registerOverride)('vtkTexture', newInstance);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Texture/Constants.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/Texture/Constants.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Filter": () => (/* binding */ Filter),
/* harmony export */   "Wrap": () => (/* binding */ Wrap),
/* harmony export */   "default": () => (/* binding */ Constants)
/* harmony export */ });
var Wrap = {
  CLAMP_TO_EDGE: 0,
  REPEAT: 1,
  MIRRORED_REPEAT: 2
};
var Filter = {
  NEAREST: 0,
  LINEAR: 1,
  NEAREST_MIPMAP_NEAREST: 2,
  NEAREST_MIPMAP_LINEAR: 3,
  LINEAR_MIPMAP_NEAREST: 4,
  LINEAR_MIPMAP_LINEAR: 5
};
var Constants = {
  Wrap: Wrap,
  Filter: Filter
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/TextureUnitManager.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/TextureUnitManager.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkTextureUnitManager),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");


var vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].vtkErrorMacro; // ----------------------------------------------------------------------------
// vtkOpenGLTextureUnitManager methods
// ----------------------------------------------------------------------------

function vtkOpenGLTextureUnitManager(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkOpenGLTextureUnitManager'); // ----------------------------------------------------------------------------
  // Description:
  // Delete the allocation table and check if it is not called before
  // all the texture units have been released.

  publicAPI.deleteTable = function () {
    for (var i = 0; i < model.numberOfTextureUnits; ++i) {
      if (model.textureUnits[i] === true) {
        vtkErrorMacro('some texture units  were not properly released');
      }
    }

    model.textureUnits = [];
    model.numberOfTextureUnits = 0;
  }; // ----------------------------------------------------------------------------


  publicAPI.setContext = function (ctx) {
    if (model.context !== ctx) {
      if (model.context !== 0) {
        publicAPI.deleteTable();
      }

      model.context = ctx;

      if (model.context) {
        model.numberOfTextureUnits = ctx.getParameter(ctx.MAX_TEXTURE_IMAGE_UNITS);

        for (var i = 0; i < model.numberOfTextureUnits; ++i) {
          model.textureUnits[i] = false;
        }
      }

      publicAPI.modified();
    }
  }; // ----------------------------------------------------------------------------
  // Description:
  // Reserve a texture unit. It returns its number.
  // It returns -1 if the allocation failed (because there are no more
  // texture units left).
  // \post valid_result: result==-1 || result>=0 && result<this->GetNumberOfTextureUnits())
  // \post allocated: result==-1 || this->IsAllocated(result)


  publicAPI.allocate = function () {
    for (var i = 0; i < model.numberOfTextureUnits; i++) {
      if (!publicAPI.isAllocated(i)) {
        model.textureUnits[i] = true;
        return i;
      }
    }

    return -1;
  };

  publicAPI.allocateUnit = function (unit) {
    if (publicAPI.isAllocated(unit)) {
      return -1;
    }

    model.textureUnits[unit] = true;
    return unit;
  }; // ----------------------------------------------------------------------------
  // Description:
  // Tell if texture unit `textureUnitId' is already allocated.
  // \pre valid_id_range : textureUnitId>=0 && textureUnitId<this->GetNumberOfTextureUnits()


  publicAPI.isAllocated = function (textureUnitId) {
    return model.textureUnits[textureUnitId];
  }; // ----------------------------------------------------------------------------
  // Description:
  // Release a texture unit.
  // \pre valid_id: textureUnitId>=0 && textureUnitId<this->GetNumberOfTextureUnits()
  // \pre allocated_id: this->IsAllocated(textureUnitId)


  publicAPI.free = function (val) {
    model.textureUnits[val] = false;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  context: null,
  numberOfTextureUnits: 0,
  textureUnits: 0
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  model.textureUnits = []; // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].get(publicAPI, model, ['numberOfTextureUnits']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['context']); // Object methods

  vtkOpenGLTextureUnitManager(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkOpenGLTextureUnitManager'); // ----------------------------------------------------------------------------

var vtkTextureUnitManager = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/VertexArrayObject.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/VertexArrayObject.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkVertexArrayObject),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _BufferObject_Constants_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BufferObject/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/BufferObject/Constants.js");



// vtkOpenGLVertexArrayObject methods
// ----------------------------------------------------------------------------

function vtkOpenGLVertexArrayObject(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkOpenGLVertexArrayObject'); // Public API methods

  publicAPI.exposedMethod = function () {// This is a publicly exposed method of this object
  };

  publicAPI.initialize = function () {
    model.instancingExtension = null;

    if (!model.openGLRenderWindow.getWebgl2()) {
      model.instancingExtension = model.context.getExtension('ANGLE_instanced_arrays');
    }

    if (!model.forceEmulation && model.openGLRenderWindow && model.openGLRenderWindow.getWebgl2()) {
      model.extension = null;
      model.supported = true;
      model.handleVAO = model.context.createVertexArray();
    } else {
      model.extension = model.context.getExtension('OES_vertex_array_object'); // Start setting up VAO

      if (!model.forceEmulation && model.extension) {
        model.supported = true;
        model.handleVAO = model.extension.createVertexArrayOES();
      } else {
        model.supported = false;
      }
    }
  };

  publicAPI.isReady = function () {
    return (// We either probed and allocated a VAO, or are falling back as the current
      // hardware does not support VAOs.
      model.handleVAO !== 0 || model.supported === false
    );
  };

  publicAPI.bind = function () {
    // Either simply bind the VAO, or emulate behavior by binding all attributes.
    if (!publicAPI.isReady()) {
      publicAPI.initialize();
    }

    if (publicAPI.isReady() && model.supported) {
      if (model.extension) {
        model.extension.bindVertexArrayOES(model.handleVAO);
      } else {
        model.context.bindVertexArray(model.handleVAO);
      }
    } else if (publicAPI.isReady()) {
      var gl = model.context;

      for (var ibuff = 0; ibuff < model.buffers.length; ++ibuff) {
        var buff = model.buffers[ibuff];
        model.context.bindBuffer(gl.ARRAY_BUFFER, buff.buffer);

        for (var iatt = 0; iatt < buff.attributes.length; ++iatt) {
          var attrIt = buff.attributes[iatt];
          var matrixCount = attrIt.isMatrix ? attrIt.size : 1;

          for (var i = 0; i < matrixCount; ++i) {
            gl.enableVertexAttribArray(attrIt.index + i);
            gl.vertexAttribPointer(attrIt.index + i, attrIt.size, attrIt.type, attrIt.normalize, attrIt.stride, attrIt.offset + attrIt.stride * i / attrIt.size);

            if (attrIt.divisor > 0) {
              if (model.instancingExtension) {
                model.instancingExtension.vertexAttribDivisorANGLE(attrIt.index + i, 1);
              } else {
                gl.vertexAttribDivisor(attrIt.index + i, 1);
              }
            }
          }
        }
      }
    }
  };

  publicAPI.release = function () {
    // Either simply release the VAO, or emulate behavior by releasing all attributes.
    if (publicAPI.isReady() && model.supported) {
      if (model.extension) {
        model.extension.bindVertexArrayOES(null);
      } else {
        model.context.bindVertexArray(null);
      }
    } else if (publicAPI.isReady()) {
      var gl = model.context;

      for (var ibuff = 0; ibuff < model.buffers.length; ++ibuff) {
        var buff = model.buffers[ibuff];
        model.context.bindBuffer(gl.ARRAY_BUFFER, buff.buffer);

        for (var iatt = 0; iatt < buff.attributes.length; ++iatt) {
          var attrIt = buff.attributes[iatt];
          var matrixCount = attrIt.isMatrix ? attrIt.size : 1;

          for (var i = 0; i < matrixCount; ++i) {
            gl.enableVertexAttribArray(attrIt.index + i);
            gl.vertexAttribPointer(attrIt.index + i, attrIt.size, attrIt.type, attrIt.normalize, attrIt.stride, attrIt.offset + attrIt.stride * i / attrIt.size);

            if (attrIt.divisor > 0) {
              if (model.instancingExtension) {
                model.instancingExtension.vertexAttribDivisorANGLE(attrIt.index + i, 0);
              } else {
                gl.vertexAttribDivisor(attrIt.index + i, 0);
              }
            }

            gl.disableVertexAttribArray(attrIt.index + i);
          }
        }
      }
    }
  };

  publicAPI.shaderProgramChanged = function () {
    publicAPI.release();

    if (model.handleVAO) {
      if (model.extension) {
        model.extension.deleteVertexArrayOES(model.handleVAO);
      } else {
        model.context.deleteVertexArray(model.handleVAO);
      }
    }

    model.handleVAO = 0;
    model.handleProgram = 0;
  };

  publicAPI.releaseGraphicsResources = function () {
    publicAPI.shaderProgramChanged();

    if (model.handleVAO) {
      if (model.extension) {
        model.extension.deleteVertexArrayOES(model.handleVAO);
      } else {
        model.context.deleteVertexArray(model.handleVAO);
      }
    }

    model.handleVAO = 0;
    model.supported = true;
    model.handleProgram = 0;
  };

  publicAPI.addAttributeArray = function (program, buffer, name, offset, stride, elementType, elementTupleSize, normalize) {
    return publicAPI.addAttributeArrayWithDivisor(program, buffer, name, offset, stride, elementType, elementTupleSize, normalize, 0, false);
  };

  publicAPI.addAttributeArrayWithDivisor = function (program, buffer, name, offset, stride, elementType, elementTupleSize, normalize, divisor, isMatrix) {
    if (!program) {
      return false;
    } // Check the program is bound, and the buffer is valid.


    if (!program.isBound() || buffer.getHandle() === 0 || buffer.getType() !== _BufferObject_Constants_js__WEBPACK_IMPORTED_MODULE_1__.ObjectType.ARRAY_BUFFER) {
      return false;
    } // Perform initialization if necessary, ensure program matches VAOs.


    if (model.handleProgram === 0) {
      model.handleProgram = program.getHandle();
    }

    if (!publicAPI.isReady()) {
      publicAPI.initialize();
    }

    if (!publicAPI.isReady() || model.handleProgram !== program.getHandle()) {
      return false;
    }

    var gl = model.context;
    var attribs = {};
    attribs.name = name;
    attribs.index = gl.getAttribLocation(model.handleProgram, name);
    attribs.offset = offset;
    attribs.stride = stride;
    attribs.type = elementType;
    attribs.size = elementTupleSize;
    attribs.normalize = normalize;
    attribs.isMatrix = isMatrix;
    attribs.divisor = divisor;

    if (attribs.Index === -1) {
      return false;
    } // Always make the call as even the first use wants the attrib pointer setting
    // up when we are emulating.


    buffer.bind();
    gl.enableVertexAttribArray(attribs.index);
    gl.vertexAttribPointer(attribs.index, attribs.size, attribs.type, attribs.normalize, attribs.stride, attribs.offset);

    if (divisor > 0) {
      if (model.instancingExtension) {
        model.instancingExtension.vertexAttribDivisorANGLE(attribs.index, 1);
      } else {
        gl.vertexAttribDivisor(attribs.index, 1);
      }
    }

    attribs.buffer = buffer.getHandle(); // If vertex array objects are not supported then build up our list.

    if (!model.supported) {
      // find the buffer
      var buffFound = false;

      for (var ibuff = 0; ibuff < model.buffers.length; ++ibuff) {
        var buff = model.buffers[ibuff];

        if (buff.buffer === attribs.buffer) {
          buffFound = true;
          var found = false;

          for (var iatt = 0; iatt < buff.attributes.length; ++iatt) {
            var attrIt = buff.attributes[iatt];

            if (attrIt.name === name) {
              found = true;
              buff.attributes[iatt] = attribs;
            }
          }

          if (!found) {
            buff.attributes.push(attribs);
          }
        }
      }

      if (!buffFound) {
        model.buffers.push({
          buffer: attribs.buffer,
          attributes: [attribs]
        });
      }
    }

    return true;
  };

  publicAPI.addAttributeMatrixWithDivisor = function (program, buffer, name, offset, stride, elementType, elementTupleSize, normalize, divisor) {
    // bind the first row of values
    var result = publicAPI.addAttributeArrayWithDivisor(program, buffer, name, offset, stride, elementType, elementTupleSize, normalize, divisor, true);

    if (!result) {
      return result;
    }

    var gl = model.context;
    var index = gl.getAttribLocation(model.handleProgram, name);

    for (var i = 1; i < elementTupleSize; i++) {
      gl.enableVertexAttribArray(index + i);
      gl.vertexAttribPointer(index + i, elementTupleSize, elementType, normalize, stride, offset + stride * i / elementTupleSize);

      if (divisor > 0) {
        if (model.instancingExtension) {
          model.instancingExtension.vertexAttribDivisorANGLE(index + i, 1);
        } else {
          gl.vertexAttribDivisor(index + i, 1);
        }
      }
    }

    return true;
  };

  publicAPI.removeAttributeArray = function (name) {
    if (!publicAPI.isReady() || model.handleProgram === 0) {
      return false;
    } // If we don't have real VAOs find the entry and remove it too.


    if (!model.supported) {
      for (var ibuff = 0; ibuff < model.buffers.length; ++ibuff) {
        var buff = model.buffers[ibuff];

        for (var iatt = 0; iatt < buff.attributes.length; ++iatt) {
          var attrIt = buff.attributes[iatt];

          if (attrIt.name === name) {
            buff.attributes.splice(iatt, 1);

            if (!buff.attributes.length) {
              model.buffers.splice(ibuff, 1);
            }

            return true;
          }
        }
      }
    }

    return true;
  };

  publicAPI.setOpenGLRenderWindow = function (rw) {
    if (model.openGLRenderWindow === rw) {
      return;
    }

    publicAPI.releaseGraphicsResources();
    model.openGLRenderWindow = rw;
    model.context = null;

    if (rw) {
      model.context = model.openGLRenderWindow.getContext();
    }
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  forceEmulation: false,
  handleVAO: 0,
  handleProgram: 0,
  supported: true,
  buffers: null,
  context: null,
  openGLRenderWindow: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Internal objects initialization

  model.buffers = []; // Object methods

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model); // Create get-only macros

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].get(publicAPI, model, ['supported']); // Create get-set macros

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['forceEmulation']); // For more macro methods, see "Sources/macros.js"
  // Object specific methods

  vtkOpenGLVertexArrayObject(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkOpenGLVertexArrayObject'); // ----------------------------------------------------------------------------

var vtkVertexArrayObject = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ViewNodeFactory.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/ViewNodeFactory.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkViewNodeFactory),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance),
/* harmony export */   "registerOverride": () => (/* binding */ registerOverride)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _SceneGraph_ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../SceneGraph/ViewNodeFactory.js */ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/ViewNodeFactory.js");



var CLASS_MAPPING = Object.create(null);
function registerOverride(className, fn) {
  CLASS_MAPPING[className] = fn;
} // ----------------------------------------------------------------------------
// vtkOpenGLViewNodeFactory methods
// ----------------------------------------------------------------------------

function vtkOpenGLViewNodeFactory(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkOpenGLViewNodeFactory');
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Static class mapping shared across instances

  model.overrides = CLASS_MAPPING; // Inheritance

  _SceneGraph_ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues); // Object methods

  vtkOpenGLViewNodeFactory(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkOpenGLViewNodeFactory'); // ----------------------------------------------------------------------------

var vtkViewNodeFactory = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Volume.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/Volume.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkVolume),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../SceneGraph/ViewNode.js */ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/ViewNode.js");
/* harmony import */ var _ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ViewNodeFactory.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ViewNodeFactory.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat3_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat3.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat3.js");






// vtkOpenGLVolume methods
// ----------------------------------------------------------------------------

function vtkOpenGLVolume(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkOpenGLVolume'); // Builds myself.

  publicAPI.buildPass = function (prepass) {
    if (!model.renderable || !model.renderable.getVisibility()) {
      return;
    }

    if (prepass) {
      model.openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');
      publicAPI.prepareNodes();
      publicAPI.addMissingNode(model.renderable.getMapper());
      publicAPI.removeUnusedNodes();
    }
  };

  publicAPI.queryPass = function (prepass, renderPass) {
    if (prepass) {
      if (!model.renderable || !model.renderable.getVisibility()) {
        return;
      }

      renderPass.incrementVolumeCount();
    }
  };

  publicAPI.traverseVolumePass = function (renderPass) {
    if (!model.renderable || !model.renderable.getNestedVisibility() || model.openGLRenderer.getSelector() && !model.renderable.getNestedPickable()) {
      return;
    }

    publicAPI.apply(renderPass, true);
    model.children[0].traverse(renderPass);
    publicAPI.apply(renderPass, false);
  }; // Renders myself


  publicAPI.volumePass = function (prepass) {
    if (!model.renderable || !model.renderable.getVisibility()) {
      return;
    }

    if (prepass) {
      model.context = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderWindow').getContext();
      model.context.depthMask(false);
    } else {
      model.context.depthMask(true);
    }
  };

  publicAPI.getKeyMatrices = function () {
    // has the actor changed?
    if (model.renderable.getMTime() > model.keyMatrixTime.getMTime()) {
      model.renderable.computeMatrix();
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.d)(model.MCWCMatrix, model.renderable.getMatrix());
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.j)(model.MCWCMatrix, model.MCWCMatrix);

      if (model.renderable.getIsIdentity()) {
        (0,_vendor_gl_matrix_esm_mat3_js__WEBPACK_IMPORTED_MODULE_4__.i)(model.normalMatrix);
      } else {
        (0,_vendor_gl_matrix_esm_mat3_js__WEBPACK_IMPORTED_MODULE_4__.f)(model.normalMatrix, model.MCWCMatrix);
        (0,_vendor_gl_matrix_esm_mat3_js__WEBPACK_IMPORTED_MODULE_4__.a)(model.normalMatrix, model.normalMatrix);
      }

      model.keyMatrixTime.modified();
    }

    return {
      mcwc: model.MCWCMatrix,
      normalMatrix: model.normalMatrix
    };
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {// context: null,
  // keyMatrixTime: null,
  // normalMatrix: null,
  // MCWCMatrix: null,
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues);
  model.keyMatrixTime = {};
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.obj)(model.keyMatrixTime, {
    mtime: 0
  }); // always set by getter

  model.normalMatrix = new Float64Array(9);
  model.MCWCMatrix = new Float64Array(16); // Build VTK API

  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.setGet)(publicAPI, model, ['context']); // Object methods

  vtkOpenGLVolume(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.newInstance)(extend, 'vtkOpenGLVolume'); // ----------------------------------------------------------------------------

var vtkVolume = {
  newInstance: newInstance,
  extend: extend
}; // Register ourself to OpenGL backend if imported

(0,_ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_2__.registerOverride)('vtkVolume', newInstance);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/VolumeMapper.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/VolumeMapper.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkVolumeMapper),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Common_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Common/Core/DataArray.js */ "./node_modules/@kitware/vtk.js/Common/Core/DataArray.js");
/* harmony import */ var _Common_Core_DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Common/Core/DataArray/Constants.js */ "./node_modules/@kitware/vtk.js/Common/Core/DataArray/Constants.js");
/* harmony import */ var _Helper_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Helper.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Helper.js");
/* harmony import */ var _Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../Common/Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");
/* harmony import */ var _Framebuffer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Framebuffer.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Framebuffer.js");
/* harmony import */ var _Texture_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Texture.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Texture.js");
/* harmony import */ var _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ShaderProgram.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ShaderProgram.js");
/* harmony import */ var _VertexArrayObject_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./VertexArrayObject.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/VertexArrayObject.js");
/* harmony import */ var _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../SceneGraph/ViewNode.js */ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/ViewNode.js");
/* harmony import */ var _Core_Property_Constants_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../Core/Property/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Property/Constants.js");
/* harmony import */ var _Texture_Constants_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./Texture/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Texture/Constants.js");
/* harmony import */ var _Core_VolumeProperty_Constants_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../Core/VolumeProperty/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/VolumeProperty/Constants.js");
/* harmony import */ var _Core_VolumeMapper_Constants_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../Core/VolumeMapper/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/VolumeMapper/Constants.js");
/* harmony import */ var _glsl_vtkVolumeVS_glsl_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./glsl/vtkVolumeVS.glsl.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/glsl/vtkVolumeVS.glsl.js");
/* harmony import */ var _glsl_vtkVolumeFS_glsl_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./glsl/vtkVolumeFS.glsl.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/glsl/vtkVolumeFS.glsl.js");
/* harmony import */ var _ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./ViewNodeFactory.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ViewNodeFactory.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat3_js__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat3.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat3.js");
/* harmony import */ var _vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/vec3.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/vec3.js");






















function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var vtkWarningMacro = _macros_js__WEBPACK_IMPORTED_MODULE_1__.vtkWarningMacro,
    vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_1__.vtkErrorMacro; // TODO: Do we want this in some shared utility? Shouldwe just use lodash.isEqual

function arrayEquals(a, b) {
  if (a.length !== b.length) {
    return false;
  }

  for (var i = 0; i < a.length; ++i) {
    if (a[i] !== b[i]) {
      return false;
    }
  }

  return true;
} // ----------------------------------------------------------------------------
// vtkOpenGLVolumeMapper methods
// ----------------------------------------------------------------------------


function vtkOpenGLVolumeMapper(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkOpenGLVolumeMapper');

  publicAPI.buildPass = function () {
    model.zBufferTexture = null;
  }; // ohh someone is doing a zbuffer pass, use that for
  // intermixed volume rendering


  publicAPI.opaqueZBufferPass = function (prepass, renderPass) {
    if (prepass) {
      var zbt = renderPass.getZBufferTexture();

      if (zbt !== model.zBufferTexture) {
        model.zBufferTexture = zbt;
      }
    }
  }; // Renders myself


  publicAPI.volumePass = function (prepass, renderPass) {
    if (prepass) {
      model.openGLRenderWindow = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderWindow');
      model.context = model.openGLRenderWindow.getContext();
      model.tris.setOpenGLRenderWindow(model.openGLRenderWindow);
      model.jitterTexture.setOpenGLRenderWindow(model.openGLRenderWindow);
      model.framebuffer.setOpenGLRenderWindow(model.openGLRenderWindow); // Per Component?

      model.scalarTexture.setOpenGLRenderWindow(model.openGLRenderWindow);
      model.colorTexture.setOpenGLRenderWindow(model.openGLRenderWindow);
      model.opacityTexture.setOpenGLRenderWindow(model.openGLRenderWindow);
      model.openGLVolume = publicAPI.getFirstAncestorOfType('vtkOpenGLVolume');
      var actor = model.openGLVolume.getRenderable();
      model.openGLRenderer = publicAPI.getFirstAncestorOfType('vtkOpenGLRenderer');
      var ren = model.openGLRenderer.getRenderable();
      model.openGLCamera = model.openGLRenderer.getViewNodeFor(ren.getActiveCamera());
      publicAPI.renderPiece(ren, actor);
    }
  };

  publicAPI.buildShaders = function (shaders, ren, actor) {
    publicAPI.getShaderTemplate(shaders, ren, actor);
    publicAPI.replaceShaderValues(shaders, ren, actor);
  };

  publicAPI.getShaderTemplate = function (shaders, ren, actor) {
    shaders.Vertex = _glsl_vtkVolumeVS_glsl_js__WEBPACK_IMPORTED_MODULE_15__.v;
    shaders.Fragment = _glsl_vtkVolumeFS_glsl_js__WEBPACK_IMPORTED_MODULE_16__.v;
    shaders.Geometry = '';
  };

  publicAPI.replaceShaderValues = function (shaders, ren, actor) {
    var FSSource = shaders.Fragment; // define some values in the shader

    var iType = actor.getProperty().getInterpolationType();

    if (iType === _Core_VolumeProperty_Constants_js__WEBPACK_IMPORTED_MODULE_13__.InterpolationType.LINEAR) {
      FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_8__["default"].substitute(FSSource, '//VTK::TrilinearOn', '#define vtkTrilinearOn').result;
    }

    var vtkImageLabelOutline = actor.getProperty().getUseLabelOutline();

    if (vtkImageLabelOutline === true) {
      FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_8__["default"].substitute(FSSource, '//VTK::ImageLabelOutlineOn', '#define vtkImageLabelOutlineOn').result;
    }

    var numComp = model.scalarTexture.getComponents();
    FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_8__["default"].substitute(FSSource, '//VTK::NumComponents', "#define vtkNumComponents ".concat(numComp)).result;
    var iComps = actor.getProperty().getIndependentComponents();

    if (iComps) {
      FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_8__["default"].substitute(FSSource, '//VTK::IndependentComponentsOn', '#define vtkIndependentComponentsOn').result; // Define any proportional components

      var proportionalComponents = [];

      for (var nc = 0; nc < numComp; nc++) {
        if (actor.getProperty().getOpacityMode(nc) === _Core_VolumeProperty_Constants_js__WEBPACK_IMPORTED_MODULE_13__.OpacityMode.PROPORTIONAL) {
          proportionalComponents.push("#define vtkComponent".concat(nc, "Proportional"));
        }
      }

      if (proportionalComponents.length > 0) {
        FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_8__["default"].substitute(FSSource, '//VTK::vtkProportionalComponents', proportionalComponents.join('\n')).result;
      }
    } // WebGL only supports loops over constants
    // and does not support while loops so we
    // have to hard code how many steps/samples to take
    // We do a break so most systems will gracefully
    // early terminate, but it is always possible
    // a system will execute every step regardless


    var ext = model.currentInput.getExtent();
    var spc = model.currentInput.getSpacing();
    var vsize = new Float64Array(3);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.s)(vsize, (ext[1] - ext[0]) * spc[0], (ext[3] - ext[2]) * spc[1], (ext[5] - ext[4]) * spc[2]);
    var maxSamples = (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.l)(vsize) / model.renderable.getSampleDistance();
    FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_8__["default"].substitute(FSSource, '//VTK::MaximumSamplesValue', "".concat(Math.ceil(maxSamples))).result; // set light complexity

    FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_8__["default"].substitute(FSSource, '//VTK::LightComplexity', "#define vtkLightComplexity ".concat(model.lastLightComplexity)).result; // if using gradient opacity define that

    model.gopacity = actor.getProperty().getUseGradientOpacity(0);

    for (var _nc = 1; iComps && !model.gopacity && _nc < numComp; ++_nc) {
      if (actor.getProperty().getUseGradientOpacity(_nc)) {
        model.gopacity = true;
      }
    }

    if (model.gopacity) {
      FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_8__["default"].substitute(FSSource, '//VTK::GradientOpacityOn', '#define vtkGradientOpacityOn').result;
    } // if we have a ztexture then declare it and use it


    if (model.zBufferTexture !== null) {
      FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_8__["default"].substitute(FSSource, '//VTK::ZBuffer::Dec', ['uniform sampler2D zBufferTexture;', 'uniform float vpWidth;', 'uniform float vpHeight;']).result;
      FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_8__["default"].substitute(FSSource, '//VTK::ZBuffer::Impl', ['vec4 depthVec = texture2D(zBufferTexture, vec2(gl_FragCoord.x / vpWidth, gl_FragCoord.y/vpHeight));', 'float zdepth = (depthVec.r*256.0 + depthVec.g)/257.0;', 'zdepth = zdepth * 2.0 - 1.0;', 'zdepth = -2.0 * camFar * camNear / (zdepth*(camFar-camNear)-(camFar+camNear)) - camNear;', 'zdepth = -zdepth/rayDir.z;', 'dists.y = min(zdepth,dists.y);']).result;
    } // Set the BlendMode approach


    FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_8__["default"].substitute(FSSource, '//VTK::BlendMode', "".concat(model.renderable.getBlendMode())).result;
    var ipScalarRange = model.renderable.getIpScalarRange();
    var min = ipScalarRange[0];
    var max = ipScalarRange[1]; // If min or max is not already a float.
    // make them into floats for glsl

    min = Number.isInteger(min) ? min.toFixed(1).toString() : min.toString();
    max = Number.isInteger(max) ? max.toFixed(1).toString() : max.toString();
    FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_8__["default"].substitute(FSSource, '//VTK::IPScalarRangeMin', min).result;
    FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_8__["default"].substitute(FSSource, '//VTK::IPScalarRangeMax', max).result;
    shaders.Fragment = FSSource;
    publicAPI.replaceShaderLight(shaders, ren, actor);
    publicAPI.replaceShaderClippingPlane(shaders, ren, actor);
  };

  publicAPI.replaceShaderLight = function (shaders, ren, actor) {
    var FSSource = shaders.Fragment; // check for shadow maps

    var shadowFactor = '';

    switch (model.lastLightComplexity) {
      default:
      case 0:
        // no lighting, tcolor is fine as is
        break;

      case 1: // headlight

      case 2: // light kit

      case 3:
        {
          // positional not implemented fallback to directional
          var lightNum = 0;
          ren.getLights().forEach(function (light) {
            var status = light.getSwitch();

            if (status > 0) {
              FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_8__["default"].substitute(FSSource, '//VTK::Light::Dec', [// intensity weighted color
              "uniform vec3 lightColor".concat(lightNum, ";"), "uniform vec3 lightDirectionVC".concat(lightNum, "; // normalized"), "uniform vec3 lightHalfAngleVC".concat(lightNum, "; // normalized"), '//VTK::Light::Dec'], false).result;
              FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_8__["default"].substitute(FSSource, '//VTK::Light::Impl', [//              `  float df = max(0.0, dot(normal.rgb, -lightDirectionVC${lightNum}));`,
              "  float df = abs(dot(normal.rgb, -lightDirectionVC".concat(lightNum, "));"), "  diffuse += ((df".concat(shadowFactor, ") * lightColor").concat(lightNum, ");"), // '  if (df > 0.0)',
              // '    {',
              //              `    float sf = pow( max(0.0, dot(lightHalfAngleWC${lightNum},normal.rgb)), specularPower);`,
              "    float sf = pow( abs(dot(lightHalfAngleVC".concat(lightNum, ",normal.rgb)), vSpecularPower);"), "    specular += ((sf".concat(shadowFactor, ") * lightColor").concat(lightNum, ");"), //              '    }',
              '  //VTK::Light::Impl'], false).result;
              lightNum++;
            }
          });
        }
    }

    shaders.Fragment = FSSource;
  };

  publicAPI.replaceShaderClippingPlane = function (shaders, ren, actor) {
    var FSSource = shaders.Fragment;

    if (model.renderable.getClippingPlanes().length > 0) {
      var clipPlaneSize = model.renderable.getClippingPlanes().length;
      FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_8__["default"].substitute(FSSource, '//VTK::ClipPlane::Dec', ["uniform vec3 vClipPlaneNormals[6];", "uniform float vClipPlaneDistances[6];", '//VTK::ClipPlane::Dec'], false).result;
      FSSource = _ShaderProgram_js__WEBPACK_IMPORTED_MODULE_8__["default"].substitute(FSSource, '//VTK::ClipPlane::Impl', ["for(int i = 0; i < ".concat(clipPlaneSize, "; i++) {"), '  float rayDirRatio = dot(rayDir, vClipPlaneNormals[i]);', '  float equationResult = dot(vertexVCVSOutput, vClipPlaneNormals[i]) + vClipPlaneDistances[i];', '  if (rayDirRatio == 0.0)', '  {', '    if (equationResult < 0.0) dists.x = dists.y;', '    continue;', '  }', '  float result = -1.0 * equationResult / rayDirRatio;', '  if (rayDirRatio < 0.0) dists.y = min(dists.y, result);', '  else dists.x = max(dists.x, result);', '}', '//VTK::ClipPlane::Impl'], false).result;
    }

    shaders.Fragment = FSSource;
  };

  publicAPI.getNeedToRebuildShaders = function (cellBO, ren, actor) {
    // do we need lighting?
    var lightComplexity = 0;

    if (actor.getProperty().getShade() && model.renderable.getBlendMode() === _Core_VolumeMapper_Constants_js__WEBPACK_IMPORTED_MODULE_14__.BlendMode.COMPOSITE_BLEND) {
      // consider the lighting complexity to determine which case applies
      // simple headlight, Light Kit, the whole feature set of VTK
      lightComplexity = 0;
      model.numberOfLights = 0;
      ren.getLights().forEach(function (light) {
        var status = light.getSwitch();

        if (status > 0) {
          model.numberOfLights++;

          if (lightComplexity === 0) {
            lightComplexity = 1;
          }
        }

        if (lightComplexity === 1 && (model.numberOfLights > 1 || light.getIntensity() !== 1.0 || !light.lightTypeIsHeadLight())) {
          lightComplexity = 2;
        }

        if (lightComplexity < 3 && light.getPositional()) {
          lightComplexity = 3;
        }
      });
    }

    var needRebuild = false;

    if (model.lastLightComplexity !== lightComplexity) {
      model.lastLightComplexity = lightComplexity;
      needRebuild = true;
    }

    var numComp = model.scalarTexture.getComponents();
    var iComps = actor.getProperty().getIndependentComponents();
    var usesProportionalComponents = false;
    var proportionalComponents = [];

    if (iComps) {
      // Define any proportional components
      for (var nc = 0; nc < numComp; nc++) {
        proportionalComponents.push(actor.getProperty().getOpacityMode(nc));
      }

      if (proportionalComponents.length > 0) {
        usesProportionalComponents = true;
      }
    }

    var ext = model.currentInput.getExtent();
    var spc = model.currentInput.getSpacing();
    var vsize = new Float64Array(3);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.s)(vsize, (ext[1] - ext[0]) * spc[0], (ext[3] - ext[2]) * spc[1], (ext[5] - ext[4]) * spc[2]);
    var maxSamples = (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.l)(vsize) / model.renderable.getSampleDistance();
    var state = {
      interpolationType: actor.getProperty().getInterpolationType(),
      useLabelOutline: actor.getProperty().getUseLabelOutline(),
      numComp: numComp,
      usesProportionalComponents: usesProportionalComponents,
      iComps: iComps,
      maxSamples: maxSamples,
      useGradientOpacity: actor.getProperty().getUseGradientOpacity(0),
      blendMode: model.renderable.getBlendMode(),
      ipScalarMode: model.renderable.getIpScalarRange(),
      proportionalComponents: proportionalComponents
    }; // We only need to rebuild the shader if one of these variables has changed,
    // since they are used in the shader template replacement step.

    if (!model.previousState || model.previousState.interpolationType !== state.interpolationType || model.previousState.useLabelOutline !== state.useLabelOutline || model.previousState.numComp !== state.numComp || model.previousState.usesProportionalComponents !== state.usesProportionalComponents || model.previousState.iComps !== state.iComps || model.previousState.maxSamples !== state.maxSamples || model.previousState.useGradientOpacity !== state.useGradientOpacity || model.previousState.blendMode !== state.blendMode || !arrayEquals(model.previousState.ipScalarMode, state.ipScalarMode) || !arrayEquals(model.previousState.proportionalComponents, state.proportionalComponents)) {
      model.previousState = _objectSpread({}, state);
      return true;
    } // has something changed that would require us to recreate the shader?


    if (cellBO.getProgram() === 0 || needRebuild || model.lastHaveSeenDepthRequest !== model.haveSeenDepthRequest || !!model.lastZBufferTexture !== !!model.zBufferTexture || cellBO.getShaderSourceTime().getMTime() < publicAPI.getMTime() || cellBO.getShaderSourceTime().getMTime() < model.renderable.getMTime()) {
      model.lastZBufferTexture = model.zBufferTexture;
      return true;
    }

    return false;
  };

  publicAPI.updateShaders = function (cellBO, ren, actor) {
    model.lastBoundBO = cellBO; // has something changed that would require us to recreate the shader?

    if (publicAPI.getNeedToRebuildShaders(cellBO, ren, actor)) {
      var shaders = {
        Vertex: null,
        Fragment: null,
        Geometry: null
      };
      publicAPI.buildShaders(shaders, ren, actor); // compile and bind the program if needed

      var newShader = model.openGLRenderWindow.getShaderCache().readyShaderProgramArray(shaders.Vertex, shaders.Fragment, shaders.Geometry); // if the shader changed reinitialize the VAO

      if (newShader !== cellBO.getProgram()) {
        cellBO.setProgram(newShader); // reset the VAO as the shader has changed

        cellBO.getVAO().releaseGraphicsResources();
      }

      cellBO.getShaderSourceTime().modified();
    } else {
      model.openGLRenderWindow.getShaderCache().readyShaderProgram(cellBO.getProgram());
    }

    cellBO.getVAO().bind();
    publicAPI.setMapperShaderParameters(cellBO, ren, actor);
    publicAPI.setCameraShaderParameters(cellBO, ren, actor);
    publicAPI.setPropertyShaderParameters(cellBO, ren, actor);
    publicAPI.getClippingPlaneShaderParameters(cellBO, ren, actor);
  };

  publicAPI.setMapperShaderParameters = function (cellBO, ren, actor) {
    // Now to update the VAO too, if necessary.
    var program = cellBO.getProgram();

    if (cellBO.getCABO().getElementCount() && (model.VBOBuildTime.getMTime() > cellBO.getAttributeUpdateTime().getMTime() || cellBO.getShaderSourceTime().getMTime() > cellBO.getAttributeUpdateTime().getMTime())) {
      if (program.isAttributeUsed('vertexDC')) {
        if (!cellBO.getVAO().addAttributeArray(program, cellBO.getCABO(), 'vertexDC', cellBO.getCABO().getVertexOffset(), cellBO.getCABO().getStride(), model.context.FLOAT, 3, model.context.FALSE)) {
          vtkErrorMacro('Error setting vertexDC in shader VAO.');
        }
      }

      cellBO.getAttributeUpdateTime().modified();
    }

    program.setUniformi('texture1', model.scalarTexture.getTextureUnit());
    program.setUniformf('sampleDistance', model.renderable.getSampleDistance()); // if we have a zbuffer texture then set it

    if (model.zBufferTexture !== null) {
      program.setUniformi('zBufferTexture', model.zBufferTexture.getTextureUnit());
      var size = publicAPI.getRenderTargetSize();
      program.setUniformf('vpWidth', size[0]);
      program.setUniformf('vpHeight', size[1]);
    }
  };

  publicAPI.setCameraShaderParameters = function (cellBO, ren, actor) {
    // // [WMVP]C == {world, model, view, projection} coordinates
    // // E.g., WCPC == world to projection coordinate transformation
    var keyMats = model.openGLCamera.getKeyMatrices(ren);
    var actMats = model.openGLVolume.getKeyMatrices();
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_18__.m)(model.modelToView, keyMats.wcvc, actMats.mcwc);
    var program = cellBO.getProgram();
    var cam = model.openGLCamera.getRenderable();
    var crange = cam.getClippingRange();
    program.setUniformf('camThick', crange[1] - crange[0]);
    program.setUniformf('camNear', crange[0]);
    program.setUniformf('camFar', crange[1]);
    var bounds = model.currentInput.getBounds();
    var dims = model.currentInput.getDimensions(); // compute the viewport bounds of the volume
    // we will only render those fragments.

    var pos = new Float64Array(3);
    var dir = new Float64Array(3);
    var dcxmin = 1.0;
    var dcxmax = -1.0;
    var dcymin = 1.0;
    var dcymax = -1.0;

    for (var i = 0; i < 8; ++i) {
      (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.s)(pos, bounds[i % 2], bounds[2 + Math.floor(i / 2) % 2], bounds[4 + Math.floor(i / 4)]);
      (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.t)(pos, pos, model.modelToView);

      if (!cam.getParallelProjection()) {
        (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.n)(dir, pos); // now find the projection of this point onto a
        // nearZ distance plane. Since the camera is at 0,0,0
        // in VC the ray is just t*pos and
        // t is -nearZ/dir.z
        // intersection becomes pos.x/pos.z

        var t = -crange[0] / pos[2];
        (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.b)(pos, dir, t);
      } // now convert to DC


      (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.t)(pos, pos, keyMats.vcpc);
      dcxmin = Math.min(pos[0], dcxmin);
      dcxmax = Math.max(pos[0], dcxmax);
      dcymin = Math.min(pos[1], dcymin);
      dcymax = Math.max(pos[1], dcymax);
    }

    program.setUniformf('dcxmin', dcxmin);
    program.setUniformf('dcxmax', dcxmax);
    program.setUniformf('dcymin', dcymin);
    program.setUniformf('dcymax', dcymax);

    if (program.isUniformUsed('cameraParallel')) {
      program.setUniformi('cameraParallel', cam.getParallelProjection());
    }

    var ext = model.currentInput.getExtent();
    var spc = model.currentInput.getSpacing();
    var vsize = new Float64Array(3);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.s)(vsize, (ext[1] - ext[0] + 1) * spc[0], (ext[3] - ext[2] + 1) * spc[1], (ext[5] - ext[4] + 1) * spc[2]);
    program.setUniform3f('vSpacing', spc[0], spc[1], spc[2]);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.s)(pos, ext[0], ext[2], ext[4]);
    model.currentInput.indexToWorldVec3(pos, pos);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.t)(pos, pos, model.modelToView);
    program.setUniform3f('vOriginVC', pos[0], pos[1], pos[2]); // apply the image directions

    var i2wmat4 = model.currentInput.getIndexToWorld();
    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_18__.m)(model.idxToView, model.modelToView, i2wmat4);
    (0,_vendor_gl_matrix_esm_mat3_js__WEBPACK_IMPORTED_MODULE_19__.m)(model.idxNormalMatrix, keyMats.normalMatrix, actMats.normalMatrix);
    (0,_vendor_gl_matrix_esm_mat3_js__WEBPACK_IMPORTED_MODULE_19__.m)(model.idxNormalMatrix, model.idxNormalMatrix, model.currentInput.getDirection());
    var maxSamples = (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.l)(vsize) / model.renderable.getSampleDistance();

    if (maxSamples > model.renderable.getMaximumSamplesPerRay()) {
      vtkWarningMacro("The number of steps required ".concat(Math.ceil(maxSamples), " is larger than the\n        specified maximum number of steps ").concat(model.renderable.getMaximumSamplesPerRay(), ".\n        Please either change the\n        volumeMapper sampleDistance or its maximum number of samples."));
    }

    var vctoijk = new Float64Array(3);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.s)(vctoijk, 1.0, 1.0, 1.0);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.o)(vctoijk, vctoijk, vsize);
    program.setUniform3f('vVCToIJK', vctoijk[0], vctoijk[1], vctoijk[2]);
    program.setUniform3i('volumeDimensions', dims[0], dims[1], dims[2]);

    if (!model.openGLRenderWindow.getWebgl2()) {
      var volInfo = model.scalarTexture.getVolumeInfo();
      program.setUniformf('texWidth', model.scalarTexture.getWidth());
      program.setUniformf('texHeight', model.scalarTexture.getHeight());
      program.setUniformi('xreps', volInfo.xreps);
      program.setUniformi('xstride', volInfo.xstride);
      program.setUniformi('ystride', volInfo.ystride);
    } // map normals through normal matrix
    // then use a point on the plane to compute the distance


    var normal = new Float64Array(3);
    var pos2 = new Float64Array(3);

    for (var _i = 0; _i < 6; ++_i) {
      switch (_i) {
        default:
        case 0:
          (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.s)(normal, 1.0, 0.0, 0.0);
          (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.s)(pos2, ext[1], ext[3], ext[5]);
          break;

        case 1:
          (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.s)(normal, -1.0, 0.0, 0.0);
          (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.s)(pos2, ext[0], ext[2], ext[4]);
          break;

        case 2:
          (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.s)(normal, 0.0, 1.0, 0.0);
          (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.s)(pos2, ext[1], ext[3], ext[5]);
          break;

        case 3:
          (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.s)(normal, 0.0, -1.0, 0.0);
          (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.s)(pos2, ext[0], ext[2], ext[4]);
          break;

        case 4:
          (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.s)(normal, 0.0, 0.0, 1.0);
          (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.s)(pos2, ext[1], ext[3], ext[5]);
          break;

        case 5:
          (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.s)(normal, 0.0, 0.0, -1.0);
          (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.s)(pos2, ext[0], ext[2], ext[4]);
          break;
      }

      (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.p)(normal, normal, model.idxNormalMatrix);
      (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.t)(pos2, pos2, model.idxToView);
      var dist = -1.0 * (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.d)(pos2, normal); // we have the plane in view coordinates
      // specify the planes in view coordinates

      program.setUniform3f("vPlaneNormal".concat(_i), normal[0], normal[1], normal[2]);
      program.setUniformf("vPlaneDistance".concat(_i), dist);

      if (actor.getProperty().getUseLabelOutline()) {
        var image = model.currentInput;
        var worldToIndex = image.getWorldToIndex();
        program.setUniformMatrix('vWCtoIDX', worldToIndex); // Get the projection coordinate to world coordinate transformation matrix.

        (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_18__.g)(model.projectionToWorld, keyMats.wcpc);
        program.setUniformMatrix('PCWCMatrix', model.projectionToWorld);
        var size = publicAPI.getRenderTargetSize();
        program.setUniformf('vpWidth', size[0]);
        program.setUniformf('vpHeight', size[1]);
      }
    }

    (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_18__.g)(model.projectionToView, keyMats.vcpc);
    program.setUniformMatrix('PCVCMatrix', model.projectionToView); // handle lighting values

    switch (model.lastLightComplexity) {
      default:
      case 0:
        // no lighting, tcolor is fine as is
        break;

      case 1: // headlight

      case 2: // light kit

      case 3:
        {
          // positional not implemented fallback to directional
          // mat3.transpose(keyMats.normalMatrix, keyMats.normalMatrix);
          var lightNum = 0;
          var lightColor = [];
          ren.getLights().forEach(function (light) {
            var status = light.getSwitch();

            if (status > 0) {
              var dColor = light.getColor();
              var intensity = light.getIntensity();
              lightColor[0] = dColor[0] * intensity;
              lightColor[1] = dColor[1] * intensity;
              lightColor[2] = dColor[2] * intensity;
              program.setUniform3fArray("lightColor".concat(lightNum), lightColor);
              var ldir = light.getDirection();
              (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.s)(normal, ldir[0], ldir[1], ldir[2]);
              (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.p)(normal, normal, keyMats.normalMatrix);
              program.setUniform3f("lightDirectionVC".concat(lightNum), normal[0], normal[1], normal[2]); // camera DOP is 0,0,-1.0 in VC

              var halfAngle = [-0.5 * normal[0], -0.5 * normal[1], -0.5 * (normal[2] - 1.0)];
              program.setUniform3fArray("lightHalfAngleVC".concat(lightNum), halfAngle);
              lightNum++;
            }
          }); // mat3.transpose(keyMats.normalMatrix, keyMats.normalMatrix);
        }
    }
  };

  publicAPI.setPropertyShaderParameters = function (cellBO, ren, actor) {
    var program = cellBO.getProgram();
    program.setUniformi('ctexture', model.colorTexture.getTextureUnit());
    program.setUniformi('otexture', model.opacityTexture.getTextureUnit());
    program.setUniformi('jtexture', model.jitterTexture.getTextureUnit());
    var volInfo = model.scalarTexture.getVolumeInfo();
    var vprop = actor.getProperty(); // set the component mix when independent

    var numComp = model.scalarTexture.getComponents();
    var iComps = actor.getProperty().getIndependentComponents();

    if (iComps && numComp >= 2) {
      for (var i = 0; i < numComp; i++) {
        program.setUniformf("mix".concat(i), actor.getProperty().getComponentWeight(i));
      }
    } // three levels of shift scale combined into one
    // for performance in the fragment shader


    for (var _i2 = 0; _i2 < numComp; _i2++) {
      var target = iComps ? _i2 : 0;
      var sscale = volInfo.scale[_i2];
      var ofun = vprop.getScalarOpacity(target);
      var oRange = ofun.getRange();
      var oscale = sscale / (oRange[1] - oRange[0]);
      var oshift = (volInfo.offset[_i2] - oRange[0]) / (oRange[1] - oRange[0]);
      program.setUniformf("oshift".concat(_i2), oshift);
      program.setUniformf("oscale".concat(_i2), oscale);
      var cfun = vprop.getRGBTransferFunction(target);
      var cRange = cfun.getRange();
      program.setUniformf("cshift".concat(_i2), (volInfo.offset[_i2] - cRange[0]) / (cRange[1] - cRange[0]));
      program.setUniformf("cscale".concat(_i2), sscale / (cRange[1] - cRange[0]));
    }

    if (model.gopacity) {
      if (iComps) {
        for (var nc = 0; nc < numComp; ++nc) {
          var _sscale = volInfo.scale[nc];
          var useGO = vprop.getUseGradientOpacity(nc);

          if (useGO) {
            var gomin = vprop.getGradientOpacityMinimumOpacity(nc);
            var gomax = vprop.getGradientOpacityMaximumOpacity(nc);
            program.setUniformf("gomin".concat(nc), gomin);
            program.setUniformf("gomax".concat(nc), gomax);
            var goRange = [vprop.getGradientOpacityMinimumValue(nc), vprop.getGradientOpacityMaximumValue(nc)];
            program.setUniformf("goscale".concat(nc), _sscale * (gomax - gomin) / (goRange[1] - goRange[0]));
            program.setUniformf("goshift".concat(nc), -goRange[0] * (gomax - gomin) / (goRange[1] - goRange[0]) + gomin);
          } else {
            program.setUniformf("gomin".concat(nc), 1.0);
            program.setUniformf("gomax".concat(nc), 1.0);
            program.setUniformf("goscale".concat(nc), 0.0);
            program.setUniformf("goshift".concat(nc), 1.0);
          }
        }
      } else {
        var _sscale2 = volInfo.scale[numComp - 1];

        var _gomin = vprop.getGradientOpacityMinimumOpacity(0);

        var _gomax = vprop.getGradientOpacityMaximumOpacity(0);

        program.setUniformf('gomin0', _gomin);
        program.setUniformf('gomax0', _gomax);
        var _goRange = [vprop.getGradientOpacityMinimumValue(0), vprop.getGradientOpacityMaximumValue(0)];
        program.setUniformf('goscale0', _sscale2 * (_gomax - _gomin) / (_goRange[1] - _goRange[0]));
        program.setUniformf('goshift0', -_goRange[0] * (_gomax - _gomin) / (_goRange[1] - _goRange[0]) + _gomin);
      }
    }

    var vtkImageLabelOutline = actor.getProperty().getUseLabelOutline();

    if (vtkImageLabelOutline === true) {
      var labelOutlineThickness = actor.getProperty().getLabelOutlineThickness();
      program.setUniformi('outlineThickness', labelOutlineThickness);
    }

    if (model.lastLightComplexity > 0) {
      program.setUniformf('vAmbient', vprop.getAmbient());
      program.setUniformf('vDiffuse', vprop.getDiffuse());
      program.setUniformf('vSpecular', vprop.getSpecular());
      program.setUniformf('vSpecularPower', vprop.getSpecularPower());
    }
  };

  publicAPI.getClippingPlaneShaderParameters = function (cellBO, ren, actor) {
    if (model.renderable.getClippingPlanes().length > 0) {
      var keyMats = model.openGLCamera.getKeyMatrices(ren);
      var clipPlaneNormals = [];
      var clipPlaneDistances = [];
      var clipPlanes = model.renderable.getClippingPlanes();
      var clipPlaneSize = clipPlanes.length;

      for (var i = 0; i < clipPlaneSize; ++i) {
        var clipPlaneNormal = clipPlanes[i].getNormal();
        var clipPlanePos = clipPlanes[i].getOrigin();
        (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.p)(clipPlaneNormal, clipPlaneNormal, keyMats.normalMatrix);
        (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.t)(clipPlanePos, clipPlanePos, keyMats.wcvc);
        var clipPlaneDist = -1.0 * (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_20__.d)(clipPlanePos, clipPlaneNormal);
        clipPlaneNormals.push(clipPlaneNormal[0]);
        clipPlaneNormals.push(clipPlaneNormal[1]);
        clipPlaneNormals.push(clipPlaneNormal[2]);
        clipPlaneDistances.push(clipPlaneDist);
      }

      var program = cellBO.getProgram();
      program.setUniform3fv("vClipPlaneNormals", clipPlaneNormals);
      program.setUniformfv("vClipPlaneDistances", clipPlaneDistances);
    }
  };

  publicAPI.getRenderTargetSize = function () {
    if (model.lastXYF > 1.43) {
      var sz = model.framebuffer.getSize();
      return [model.fvp[0] * sz[0], model.fvp[1] * sz[1]];
    }

    return model.openGLRenderWindow.getFramebufferSize();
  };

  publicAPI.renderPieceStart = function (ren, actor) {
    if (model.renderable.getAutoAdjustSampleDistances()) {
      var rwi = ren.getVTKWindow().getInteractor();
      var rft = rwi.getLastFrameTime(); // console.log(`last frame time ${Math.floor(1.0 / rft)}`);
      // frame time is typically for a couple frames prior
      // which makes it messy, so keep long running averages
      // of frame times and pixels rendered

      model.avgFrameTime = 0.97 * model.avgFrameTime + 0.03 * rft;
      model.avgWindowArea = 0.97 * model.avgWindowArea + 0.03 / (model.lastXYF * model.lastXYF);

      if (ren.getVTKWindow().getInteractor().isAnimating()) {
        // compute target xy factor
        var txyf = Math.sqrt(model.avgFrameTime * rwi.getDesiredUpdateRate() / model.avgWindowArea); // limit subsampling to a factor of 10

        if (txyf > 10.0) {
          txyf = 10.0;
        }

        model.targetXYF = txyf;
      } else {
        model.targetXYF = Math.sqrt(model.avgFrameTime * rwi.getStillUpdateRate() / model.avgWindowArea);
      } // have some inertia to change states around 1.43


      if (model.targetXYF < 1.53 && model.targetXYF > 1.33) {
        model.targetXYF = model.lastXYF;
      } // and add some inertia to change at all


      if (Math.abs(1.0 - model.targetXYF / model.lastXYF) < 0.1) {
        model.targetXYF = model.lastXYF;
      }

      model.lastXYF = model.targetXYF;
    } else {
      model.lastXYF = model.renderable.getImageSampleDistance();
    } // only use FBO beyond this value


    if (model.lastXYF <= 1.43) {
      model.lastXYF = 1.0;
    } // console.log(`last target  ${model.lastXYF} ${model.targetXYF}`);
    // console.log(`awin aft  ${model.avgWindowArea} ${model.avgFrameTime}`);


    var xyf = model.lastXYF;
    var size = model.openGLRenderWindow.getFramebufferSize(); // const newSize = [
    //   Math.floor((size[0] / xyf) + 0.5),
    //   Math.floor((size[1] / xyf) + 0.5)];
    // const diag = vtkBoundingBox.getDiagonalLength(model.currentInput.getBounds());
    // // so what is the resulting sample size roughly
    // console.log(`sam size ${diag / newSize[0]} ${diag / newSize[1]} ${model.renderable.getImageSampleDistance()}`);
    // // if the sample distance is getting far from the image sample dist
    // if (2.0 * diag / (newSize[0] + newSize[1]) > 4 * model.renderable.getSampleDistance()) {
    //   model.renderable.setSampleDistance(4.0 * model.renderable.getSampleDistance());
    // }
    // if (2.0 * diag / (newSize[0] + newSize[1]) < 0.25 * model.renderable.getSampleDistance()) {
    //   model.renderable.setSampleDistance(0.25 * model.renderable.getSampleDistance());
    // }
    // create/resize framebuffer if needed

    if (xyf > 1.43) {
      model.framebuffer.saveCurrentBindingsAndBuffers();

      if (model.framebuffer.getGLFramebuffer() === null) {
        model.framebuffer.create(Math.floor(size[0] * 0.7), Math.floor(size[1] * 0.7));
        model.framebuffer.populateFramebuffer();
      } else {
        var fbSize = model.framebuffer.getSize();

        if (fbSize[0] !== Math.floor(size[0] * 0.7) || fbSize[1] !== Math.floor(size[1] * 0.7)) {
          model.framebuffer.create(Math.floor(size[0] * 0.7), Math.floor(size[1] * 0.7));
          model.framebuffer.populateFramebuffer();
        }
      }

      model.framebuffer.bind();
      var gl = model.context;
      gl.clearColor(0.0, 0.0, 0.0, 0.0);
      gl.colorMask(true, true, true, true);
      gl.clear(gl.COLOR_BUFFER_BIT);
      gl.viewport(0, 0, size[0] / xyf, size[1] / xyf);
      model.fvp = [Math.floor(size[0] / xyf) / Math.floor(size[0] * 0.7), Math.floor(size[1] / xyf) / Math.floor(size[1] * 0.7)];
    }

    model.context.disable(model.context.DEPTH_TEST); // make sure the BOs are up to date

    publicAPI.updateBufferObjects(ren, actor); // set interpolation on the texture based on property setting

    var iType = actor.getProperty().getInterpolationType();

    if (iType === _Core_VolumeProperty_Constants_js__WEBPACK_IMPORTED_MODULE_13__.InterpolationType.NEAREST) {
      model.scalarTexture.setMinificationFilter(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_12__.Filter.NEAREST);
      model.scalarTexture.setMagnificationFilter(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_12__.Filter.NEAREST);
    } else {
      model.scalarTexture.setMinificationFilter(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_12__.Filter.LINEAR);
      model.scalarTexture.setMagnificationFilter(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_12__.Filter.LINEAR);
    } // Bind the OpenGL, this is shared between the different primitive/cell types.


    model.lastBoundBO = null; // if we have a zbuffer texture then activate it

    if (model.zBufferTexture !== null) {
      model.zBufferTexture.activate();
    }
  };

  publicAPI.renderPieceDraw = function (ren, actor) {
    var gl = model.context; // render the texture

    model.scalarTexture.activate();
    model.opacityTexture.activate();
    model.colorTexture.activate();
    model.jitterTexture.activate();
    publicAPI.updateShaders(model.tris, ren, actor); // First we do the triangles, update the shader, set uniforms, etc.
    // for (let i = 0; i < 11; ++i) {
    //   gl.drawArrays(gl.TRIANGLES, 66 * i, 66);
    // }

    gl.drawArrays(gl.TRIANGLES, 0, model.tris.getCABO().getElementCount());
    model.tris.getVAO().release();
    model.scalarTexture.deactivate();
    model.colorTexture.deactivate();
    model.opacityTexture.deactivate();
    model.jitterTexture.deactivate();
  };

  publicAPI.renderPieceFinish = function (ren, actor) {
    // if we have a zbuffer texture then deactivate it
    if (model.zBufferTexture !== null) {
      model.zBufferTexture.deactivate();
    }

    if (model.lastXYF > 1.43) {
      // now copy the framebuffer with the volume into the
      // regular buffer
      model.framebuffer.restorePreviousBindingsAndBuffers();

      if (model.copyShader === null) {
        model.copyShader = model.openGLRenderWindow.getShaderCache().readyShaderProgramArray(['//VTK::System::Dec', 'attribute vec4 vertexDC;', 'uniform vec2 tfactor;', 'varying vec2 tcoord;', 'void main() { tcoord = vec2(vertexDC.x*0.5 + 0.5, vertexDC.y*0.5 + 0.5) * tfactor; gl_Position = vertexDC; }'].join('\n'), ['//VTK::System::Dec', '//VTK::Output::Dec', 'uniform sampler2D texture1;', 'varying vec2 tcoord;', 'void main() { gl_FragData[0] = texture2D(texture1,tcoord); }'].join('\n'), '');
        var program = model.copyShader;
        model.copyVAO = _VertexArrayObject_js__WEBPACK_IMPORTED_MODULE_9__["default"].newInstance();
        model.copyVAO.setOpenGLRenderWindow(model.openGLRenderWindow);
        model.tris.getCABO().bind();

        if (!model.copyVAO.addAttributeArray(program, model.tris.getCABO(), 'vertexDC', model.tris.getCABO().getVertexOffset(), model.tris.getCABO().getStride(), model.context.FLOAT, 3, model.context.FALSE)) {
          vtkErrorMacro('Error setting vertexDC in copy shader VAO.');
        }
      } else {
        model.openGLRenderWindow.getShaderCache().readyShaderProgram(model.copyShader);
      }

      var size = model.openGLRenderWindow.getFramebufferSize();
      model.context.viewport(0, 0, size[0], size[1]); // activate texture

      var tex = model.framebuffer.getColorTexture();
      tex.activate();
      model.copyShader.setUniformi('texture', tex.getTextureUnit());
      model.copyShader.setUniform2f('tfactor', model.fvp[0], model.fvp[1]);
      var gl = model.context;
      gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA); // render quad

      model.context.drawArrays(model.context.TRIANGLES, 0, model.tris.getCABO().getElementCount());
      tex.deactivate();
      gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
    }
  };

  publicAPI.renderPiece = function (ren, actor) {
    publicAPI.invokeEvent({
      type: 'StartEvent'
    });
    model.renderable.update();
    model.currentInput = model.renderable.getInputData();
    publicAPI.invokeEvent({
      type: 'EndEvent'
    });

    if (!model.currentInput) {
      vtkErrorMacro('No input!');
      return;
    }

    publicAPI.renderPieceStart(ren, actor);
    publicAPI.renderPieceDraw(ren, actor);
    publicAPI.renderPieceFinish(ren, actor);
  };

  publicAPI.computeBounds = function (ren, actor) {
    if (!publicAPI.getInput()) {
      (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_5__.u)(model.Bounds);
      return;
    }

    model.bounds = publicAPI.getInput().getBounds();
  };

  publicAPI.updateBufferObjects = function (ren, actor) {
    // Rebuild buffers if needed
    if (publicAPI.getNeedToRebuildBufferObjects(ren, actor)) {
      publicAPI.buildBufferObjects(ren, actor);
    }
  };

  publicAPI.getNeedToRebuildBufferObjects = function (ren, actor) {
    // first do a coarse check
    if (model.VBOBuildTime.getMTime() < publicAPI.getMTime() || model.VBOBuildTime.getMTime() < actor.getMTime() || model.VBOBuildTime.getMTime() < model.renderable.getMTime() || model.VBOBuildTime.getMTime() < actor.getProperty().getMTime() || model.VBOBuildTime.getMTime() < model.currentInput.getMTime()) {
      return true;
    }

    return false;
  };

  publicAPI.buildBufferObjects = function (ren, actor) {
    var image = model.currentInput;

    if (!image) {
      return;
    }

    var scalars = image.getPointData() && image.getPointData().getScalars();

    if (!scalars) {
      return;
    }

    var vprop = actor.getProperty();

    if (!model.jitterTexture.getHandle()) {
      var oTable = new Uint8Array(32 * 32);

      for (var i = 0; i < 32 * 32; ++i) {
        oTable[i] = 255.0 * Math.random();
      }

      model.jitterTexture.setMinificationFilter(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_12__.Filter.LINEAR);
      model.jitterTexture.setMagnificationFilter(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_12__.Filter.LINEAR);
      model.jitterTexture.create2DFromRaw(32, 32, 1, _Common_Core_DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_3__.VtkDataTypes.UNSIGNED_CHAR, oTable);
    }

    var numComp = scalars.getNumberOfComponents();
    var iComps = vprop.getIndependentComponents();
    var numIComps = iComps ? numComp : 1; // rebuild opacity tfun?

    var toString = "".concat(vprop.getMTime());

    if (model.opacityTextureString !== toString) {
      var oWidth = 1024;
      var oSize = oWidth * 2 * numIComps;
      var ofTable = new Float32Array(oSize);
      var tmpTable = new Float32Array(oWidth);

      for (var c = 0; c < numIComps; ++c) {
        var ofun = vprop.getScalarOpacity(c);
        var opacityFactor = model.renderable.getSampleDistance() / vprop.getScalarOpacityUnitDistance(c);
        var oRange = ofun.getRange();
        ofun.getTable(oRange[0], oRange[1], oWidth, tmpTable, 1); // adjust for sample distance etc

        for (var _i3 = 0; _i3 < oWidth; ++_i3) {
          ofTable[c * oWidth * 2 + _i3] = 1.0 - Math.pow(1.0 - tmpTable[_i3], opacityFactor);
          ofTable[c * oWidth * 2 + _i3 + oWidth] = ofTable[c * oWidth * 2 + _i3];
        }
      }

      model.opacityTexture.releaseGraphicsResources(model.openGLRenderWindow);
      model.opacityTexture.setMinificationFilter(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_12__.Filter.LINEAR);
      model.opacityTexture.setMagnificationFilter(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_12__.Filter.LINEAR); // use float texture where possible because we really need the resolution
      // for this table. Errors in low values of opacity accumulate to
      // visible artifacts. High values of opacity quickly terminate without
      // artifacts.

      if (model.openGLRenderWindow.getWebgl2() || model.context.getExtension('OES_texture_float') && model.context.getExtension('OES_texture_float_linear')) {
        model.opacityTexture.create2DFromRaw(oWidth, 2 * numIComps, 1, _Common_Core_DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_3__.VtkDataTypes.FLOAT, ofTable);
      } else {
        var _oTable = new Uint8Array(oSize);

        for (var _i4 = 0; _i4 < oSize; ++_i4) {
          _oTable[_i4] = 255.0 * ofTable[_i4];
        }

        model.opacityTexture.create2DFromRaw(oWidth, 2 * numIComps, 1, _Common_Core_DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_3__.VtkDataTypes.UNSIGNED_CHAR, _oTable);
      }

      model.opacityTextureString = toString;
    } // rebuild color tfun?


    toString = "".concat(vprop.getMTime());

    if (model.colorTextureString !== toString) {
      var cWidth = 1024;
      var cSize = cWidth * 2 * numIComps * 3;
      var cTable = new Uint8Array(cSize);

      var _tmpTable = new Float32Array(cWidth * 3);

      for (var _c = 0; _c < numIComps; ++_c) {
        var cfun = vprop.getRGBTransferFunction(_c);
        var cRange = cfun.getRange();
        cfun.getTable(cRange[0], cRange[1], cWidth, _tmpTable, 1);

        for (var _i5 = 0; _i5 < cWidth * 3; ++_i5) {
          cTable[_c * cWidth * 6 + _i5] = 255.0 * _tmpTable[_i5];
          cTable[_c * cWidth * 6 + _i5 + cWidth * 3] = 255.0 * _tmpTable[_i5];
        }
      }

      model.colorTexture.releaseGraphicsResources(model.openGLRenderWindow);
      model.colorTexture.setMinificationFilter(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_12__.Filter.LINEAR);
      model.colorTexture.setMagnificationFilter(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_12__.Filter.LINEAR);
      model.colorTexture.create2DFromRaw(cWidth, 2 * numIComps, 3, _Common_Core_DataArray_Constants_js__WEBPACK_IMPORTED_MODULE_3__.VtkDataTypes.UNSIGNED_CHAR, cTable);
      model.colorTextureString = toString;
    } // rebuild the scalarTexture if the data has changed


    toString = "".concat(image.getMTime());

    if (model.scalarTextureString !== toString) {
      // Build the textures
      var dims = image.getDimensions();
      model.scalarTexture.releaseGraphicsResources(model.openGLRenderWindow);
      model.scalarTexture.resetFormatAndType();
      model.scalarTexture.create3DFilterableFromRaw(dims[0], dims[1], dims[2], numComp, scalars.getDataType(), scalars.getData()); // console.log(model.scalarTexture.get());

      model.scalarTextureString = toString;
    }

    if (!model.tris.getCABO().getElementCount()) {
      // build the CABO
      var ptsArray = new Float32Array(12);

      for (var _i6 = 0; _i6 < 4; _i6++) {
        ptsArray[_i6 * 3] = _i6 % 2 * 2 - 1.0;
        ptsArray[_i6 * 3 + 1] = _i6 > 1 ? 1.0 : -1.0;
        ptsArray[_i6 * 3 + 2] = -1.0;
      }

      var cellArray = new Uint16Array(8);
      cellArray[0] = 3;
      cellArray[1] = 0;
      cellArray[2] = 1;
      cellArray[3] = 3;
      cellArray[4] = 3;
      cellArray[5] = 0;
      cellArray[6] = 3;
      cellArray[7] = 2; // const dim = 12.0;
      // const ptsArray = new Float32Array(3 * dim * dim);
      // for (let i = 0; i < dim; i++) {
      //   for (let j = 0; j < dim; j++) {
      //     const offset = ((i * dim) + j) * 3;
      //     ptsArray[offset] = (2.0 * (i / (dim - 1.0))) - 1.0;
      //     ptsArray[offset + 1] = (2.0 * (j / (dim - 1.0))) - 1.0;
      //     ptsArray[offset + 2] = -1.0;
      //   }
      // }
      // const cellArray = new Uint16Array(8 * (dim - 1) * (dim - 1));
      // for (let i = 0; i < dim - 1; i++) {
      //   for (let j = 0; j < dim - 1; j++) {
      //     const offset = 8 * ((i * (dim - 1)) + j);
      //     cellArray[offset] = 3;
      //     cellArray[offset + 1] = (i * dim) + j;
      //     cellArray[offset + 2] = (i * dim) + 1 + j;
      //     cellArray[offset + 3] = ((i + 1) * dim) + 1 + j;
      //     cellArray[offset + 4] = 3;
      //     cellArray[offset + 5] = (i * dim) + j;
      //     cellArray[offset + 6] = ((i + 1) * dim) + 1 + j;
      //     cellArray[offset + 7] = ((i + 1) * dim) + j;
      //   }
      // }

      var points = _Common_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance({
        numberOfComponents: 3,
        values: ptsArray
      });
      points.setName('points');
      var cells = _Common_Core_DataArray_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance({
        numberOfComponents: 1,
        values: cellArray
      });
      model.tris.getCABO().createVBO(cells, 'polys', _Core_Property_Constants_js__WEBPACK_IMPORTED_MODULE_11__.Representation.SURFACE, {
        points: points,
        cellOffset: 0
      });
    }

    model.VBOBuildTime.modified();
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  context: null,
  VBOBuildTime: null,
  scalarTexture: null,
  scalarTextureString: null,
  opacityTexture: null,
  opacityTextureString: null,
  colorTexture: null,
  colorTextureString: null,
  jitterTexture: null,
  tris: null,
  framebuffer: null,
  copyShader: null,
  copyVAO: null,
  lastXYF: 1.0,
  targetXYF: 1.0,
  zBufferTexture: null,
  lastZBufferTexture: null,
  lastLightComplexity: 0,
  fullViewportTime: 1.0,
  idxToView: null,
  idxNormalMatrix: null,
  modelToView: null,
  projectionToView: null,
  avgWindowArea: 0.0,
  avgFrameTime: 0.0
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_10__["default"].extend(publicAPI, model, initialValues);
  model.VBOBuildTime = {};
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_1__.obj)(model.VBOBuildTime, {
    mtime: 0
  });
  model.tris = _Helper_js__WEBPACK_IMPORTED_MODULE_4__["default"].newInstance();
  model.scalarTexture = _Texture_js__WEBPACK_IMPORTED_MODULE_7__["default"].newInstance();
  model.opacityTexture = _Texture_js__WEBPACK_IMPORTED_MODULE_7__["default"].newInstance();
  model.colorTexture = _Texture_js__WEBPACK_IMPORTED_MODULE_7__["default"].newInstance();
  model.jitterTexture = _Texture_js__WEBPACK_IMPORTED_MODULE_7__["default"].newInstance();
  model.jitterTexture.setWrapS(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_12__.Wrap.REPEAT);
  model.jitterTexture.setWrapT(_Texture_Constants_js__WEBPACK_IMPORTED_MODULE_12__.Wrap.REPEAT);
  model.framebuffer = _Framebuffer_js__WEBPACK_IMPORTED_MODULE_6__["default"].newInstance();
  model.idxToView = (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_18__.i)(new Float64Array(16));
  model.idxNormalMatrix = (0,_vendor_gl_matrix_esm_mat3_js__WEBPACK_IMPORTED_MODULE_19__.i)(new Float64Array(9));
  model.modelToView = (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_18__.i)(new Float64Array(16));
  model.projectionToView = (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_18__.i)(new Float64Array(16));
  model.projectionToWorld = (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_18__.i)(new Float64Array(16)); // Build VTK API

  (0,_macros_js__WEBPACK_IMPORTED_MODULE_1__.setGet)(publicAPI, model, ['context']); // Object methods

  vtkOpenGLVolumeMapper(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = (0,_macros_js__WEBPACK_IMPORTED_MODULE_1__.newInstance)(extend, 'vtkOpenGLVolumeMapper'); // ----------------------------------------------------------------------------

var vtkVolumeMapper = {
  newInstance: newInstance,
  extend: extend
}; // Register ourself to OpenGL backend if imported

(0,_ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_17__.registerOverride)('vtkVolumeMapper', newInstance);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/glsl/vtkPolyDataFS.glsl.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/glsl/vtkPolyDataFS.glsl.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "v": () => (/* binding */ vtkPolyDataFS)
/* harmony export */ });
var vtkPolyDataFS = "//VTK::System::Dec\n\n/*=========================================================================\n\n  Program:   Visualization Toolkit\n  Module:    vtkPolyDataFS.glsl\n\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\n  All rights reserved.\n  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\n\n     This software is distributed WITHOUT ANY WARRANTY; without even\n     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n     PURPOSE.  See the above copyright notice for more information.\n\n=========================================================================*/\n// Template for the polydata mappers fragment shader\n\nuniform int PrimitiveIDOffset;\n\n// VC position of this fragment\n//VTK::PositionVC::Dec\n\n// optional color passed in from the vertex shader, vertexColor\n//VTK::Color::Dec\n\n// optional surface normal declaration\n//VTK::Normal::Dec\n\n// extra lighting parameters\n//VTK::Light::Dec\n\n// Texture coordinates\n//VTK::TCoord::Dec\n\n// picking support\n//VTK::Picking::Dec\n\n// Depth Peeling Support\n//VTK::DepthPeeling::Dec\n\n// clipping plane vars\n//VTK::Clip::Dec\n\n// the output of this shader\n//VTK::Output::Dec\n\n// Apple Bug\n//VTK::PrimID::Dec\n\n// handle coincident offsets\n//VTK::Coincident::Dec\n\n//VTK::ZBuffer::Dec\n\nvoid main()\n{\n  // VC position of this fragment. This should not branch/return/discard.\n  //VTK::PositionVC::Impl\n\n  // Place any calls that require uniform flow (e.g. dFdx) here.\n  //VTK::UniformFlow::Impl\n\n  // Set gl_FragDepth here (gl_FragCoord.z by default)\n  //VTK::Depth::Impl\n\n  // Early depth peeling abort:\n  //VTK::DepthPeeling::PreColor\n\n  // Apple Bug\n  //VTK::PrimID::Impl\n\n  //VTK::Clip::Impl\n\n  //VTK::Color::Impl\n\n  // Generate the normal if we are not passed in one\n  //VTK::Normal::Impl\n\n  //VTK::Light::Impl\n\n  //VTK::TCoord::Impl\n\n  if (gl_FragData[0].a <= 0.0)\n    {\n    discard;\n    }\n\n  //VTK::DepthPeeling::Impl\n\n  //VTK::Picking::Impl\n\n  // handle coincident offsets\n  //VTK::Coincident::Impl\n\n  //VTK::ZBuffer::Impl\n}\n";




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/glsl/vtkPolyDataVS.glsl.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/glsl/vtkPolyDataVS.glsl.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "v": () => (/* binding */ vtkPolyDataVS)
/* harmony export */ });
var vtkPolyDataVS = "//VTK::System::Dec\n\n/*=========================================================================\n\n  Program:   Visualization Toolkit\n  Module:    vtkPolyDataVS.glsl\n\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\n  All rights reserved.\n  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\n\n     This software is distributed WITHOUT ANY WARRANTY; without even\n     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n     PURPOSE.  See the above copyright notice for more information.\n\n=========================================================================*/\n\nattribute vec4 vertexMC;\n\n// frag position in VC\n//VTK::PositionVC::Dec\n\n// optional normal declaration\n//VTK::Normal::Dec\n\n// extra lighting parameters\n//VTK::Light::Dec\n\n// Texture coordinates\n//VTK::TCoord::Dec\n\n// material property values\n//VTK::Color::Dec\n\n// clipping plane vars\n//VTK::Clip::Dec\n\n// camera and actor matrix values\n//VTK::Camera::Dec\n\n// Apple Bug\n//VTK::PrimID::Dec\n\n// picking support\n//VTK::Picking::Dec\n\nvoid main()\n{\n  //VTK::Color::Impl\n\n  //VTK::Normal::Impl\n\n  //VTK::TCoord::Impl\n\n  //VTK::Clip::Impl\n\n  //VTK::PrimID::Impl\n\n  //VTK::PositionVC::Impl\n\n  //VTK::Light::Impl\n\n  //VTK::Picking::Impl\n}\n";




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/glsl/vtkVolumeFS.glsl.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/glsl/vtkVolumeFS.glsl.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "v": () => (/* binding */ vtkVolumeFS)
/* harmony export */ });
var vtkVolumeFS = "//VTK::System::Dec\n\n/*=========================================================================\n\n  Program:   Visualization Toolkit\n  Module:    vtkVolumeFS.glsl\n\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\n  All rights reserved.\n  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\n\n     This software is distributed WITHOUT ANY WARRANTY; without even\n     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n     PURPOSE.  See the above copyright notice for more information.\n\n=========================================================================*/\n// Template for the volume mappers fragment shader\n\n// the output of this shader\n//VTK::Output::Dec\n\nvarying vec3 vertexVCVSOutput;\n\n// first declare the settings from the mapper\n// that impact the code paths in here\n\n// always set vtkNumComponents 1,2,3,4\n//VTK::NumComponents\n\n// possibly define vtkUseTriliear\n//VTK::TrilinearOn\n\n// possibly define vtkIndependentComponents\n//VTK::IndependentComponentsOn\n\n// possibly define any \"proportional\" components\n//VTK::vtkProportionalComponents\n\n// Define the blend mode to use\n#define vtkBlendMode //VTK::BlendMode\n\n// Possibly define vtkImageLabelOutlineOn\n//VTK::ImageLabelOutlineOn\n\n#ifdef vtkImageLabelOutlineOn\nuniform int outlineThickness;\nuniform float vpWidth;\nuniform float vpHeight;\nuniform mat4 PCWCMatrix;\nuniform mat4 vWCtoIDX;\n#endif\n\n// define vtkLightComplexity\n//VTK::LightComplexity\n#if vtkLightComplexity > 0\nuniform float vSpecularPower;\nuniform float vAmbient;\nuniform float vDiffuse;\nuniform float vSpecular;\n//VTK::Light::Dec\n#endif\n\n// possibly define vtkGradientOpacityOn\n//VTK::GradientOpacityOn\n#ifdef vtkGradientOpacityOn\nuniform float goscale0;\nuniform float goshift0;\nuniform float gomin0;\nuniform float gomax0;\n#if defined(vtkIndependentComponentsOn) && (vtkNumComponents > 1)\nuniform float goscale1;\nuniform float goshift1;\nuniform float gomin1;\nuniform float gomax1;\n#if vtkNumComponents >= 3\nuniform float goscale2;\nuniform float goshift2;\nuniform float gomin2;\nuniform float gomax2;\n#endif\n#if vtkNumComponents >= 4\nuniform float goscale3;\nuniform float goshift3;\nuniform float gomin3;\nuniform float gomax3;\n#endif\n#endif\n#endif\n\n// if you want to see the raw tiled\n// data in webgl1 uncomment the following line\n// #define debugtile\n\n// camera values\nuniform float camThick;\nuniform float camNear;\nuniform float camFar;\nuniform int cameraParallel;\n\n// values describing the volume geometry\nuniform vec3 vOriginVC;\nuniform vec3 vSpacing;\nuniform ivec3 volumeDimensions; // 3d texture dimensions\nuniform vec3 vPlaneNormal0;\nuniform float vPlaneDistance0;\nuniform vec3 vPlaneNormal1;\nuniform float vPlaneDistance1;\nuniform vec3 vPlaneNormal2;\nuniform float vPlaneDistance2;\nuniform vec3 vPlaneNormal3;\nuniform float vPlaneDistance3;\nuniform vec3 vPlaneNormal4;\nuniform float vPlaneDistance4;\nuniform vec3 vPlaneNormal5;\nuniform float vPlaneDistance5;\n\n//VTK::ClipPlane::Dec\n\n// opacity and color textures\nuniform sampler2D otexture;\nuniform float oshift0;\nuniform float oscale0;\nuniform sampler2D ctexture;\nuniform float cshift0;\nuniform float cscale0;\n\n// jitter texture\nuniform sampler2D jtexture;\n\n// some 3D texture values\nuniform float sampleDistance;\nuniform vec3 vVCToIJK;\n\n// the heights defined below are the locations\n// for the up to four components of the tfuns\n// the tfuns have a height of 2XnumComps pixels so the\n// values are computed to hit the middle of the two rows\n// for that component\n#ifdef vtkIndependentComponentsOn\n#if vtkNumComponents == 2\nuniform float mix0;\nuniform float mix1;\n#define height0 0.25\n#define height1 0.75\n#endif\n#if vtkNumComponents == 3\nuniform float mix0;\nuniform float mix1;\nuniform float mix2;\n#define height0 0.17\n#define height1 0.5\n#define height2 0.83\n#endif\n#if vtkNumComponents == 4\nuniform float mix0;\nuniform float mix1;\nuniform float mix2;\nuniform float mix3;\n#define height0 0.125\n#define height1 0.375\n#define height2 0.625\n#define height3 0.875\n#endif\n#endif\n\n#if vtkNumComponents >= 2\nuniform float oshift1;\nuniform float oscale1;\nuniform float cshift1;\nuniform float cscale1;\n#endif\n#if vtkNumComponents >= 3\nuniform float oshift2;\nuniform float oscale2;\nuniform float cshift2;\nuniform float cscale2;\n#endif\n#if vtkNumComponents >= 4\nuniform float oshift3;\nuniform float oscale3;\nuniform float cshift3;\nuniform float cscale3;\n#endif\n\n// declaration for intermixed geometry\n//VTK::ZBuffer::Dec\n\n// Lighting values\n//VTK::Light::Dec\n\n//=======================================================================\n// Webgl2 specific version of functions\n#if __VERSION__ == 300\n\nuniform highp sampler3D texture1;\n\nvec4 getTextureValue(vec3 pos)\n{\n  vec4 tmp = texture(texture1, pos);\n#if vtkNumComponents == 1\n  tmp.a = tmp.r;\n#endif\n#if vtkNumComponents == 2\n  tmp.a = tmp.g;\n#endif\n#if vtkNumComponents == 3\n  tmp.a = length(tmp.rgb);\n#endif\n  return tmp;\n}\n\n//=======================================================================\n// WebGL1 specific version of functions\n#else\n\nuniform sampler2D texture1;\n\nuniform float texWidth;\nuniform float texHeight;\nuniform int xreps;\nuniform int xstride;\nuniform int ystride;\n\n// if computing triliear values from multiple z slices\n#ifdef vtkTriliearOn\nvec4 getTextureValue(vec3 ijk)\n{\n  float zoff = 1.0/float(volumeDimensions.z);\n  vec4 val1 = getOneTextureValue(ijk);\n  vec4 val2 = getOneTextureValue(vec3(ijk.xy, ijk.z + zoff));\n\n  float indexZ = float(volumeDimensions)*ijk.z;\n  float zmix =  indexZ - floor(indexZ);\n\n  return mix(val1, val2, zmix);\n}\n\nvec4 getOneTextureValue(vec3 ijk)\n#else // nearest or fast linear\nvec4 getTextureValue(vec3 ijk)\n#endif\n{\n  vec3 tdims = vec3(volumeDimensions);\n\n#ifdef debugtile\n  vec2 tpos = vec2(ijk.x, ijk.y);\n  vec4 tmp = texture2D(texture1, tpos);\n  tmp.a = 1.0;\n\n#else\n  int z = int(ijk.z * tdims.z);\n  int yz = z / xreps;\n  int xz = z - yz*xreps;\n\n  int tileWidth = volumeDimensions.x/xstride;\n  int tileHeight = volumeDimensions.y/ystride;\n\n  xz *= tileWidth;\n  yz *= tileHeight;\n\n  float ni = float(xz) + (ijk.x*float(tileWidth));\n  float nj = float(yz) + (ijk.y*float(tileHeight));\n\n  vec2 tpos = vec2(ni/texWidth, nj/texHeight);\n\n  vec4 tmp = texture2D(texture1, tpos);\n\n#if vtkNumComponents == 1\n  tmp.a = tmp.r;\n#endif\n#if vtkNumComponents == 2\n  tmp.g = tmp.a;\n#endif\n#if vtkNumComponents == 3\n  tmp.a = length(tmp.rgb);\n#endif\n#endif\n\n  return tmp;\n}\n\n// End of Webgl1 specific code\n//=======================================================================\n#endif\n\n//=======================================================================\n// compute the normal and gradient magnitude for a position\nvec4 computeNormal(vec3 pos, float scalar, vec3 tstep)\n{\n  vec4 result;\n\n  result.x = getTextureValue(pos + vec3(tstep.x, 0.0, 0.0)).a - scalar;\n  result.y = getTextureValue(pos + vec3(0.0, tstep.y, 0.0)).a - scalar;\n  result.z = getTextureValue(pos + vec3(0.0, 0.0, tstep.z)).a - scalar;\n\n  // divide by spacing\n  result.xyz /= vSpacing;\n\n  result.w = length(result.xyz);\n\n  // rotate to View Coords\n  result.xyz =\n    result.x * vPlaneNormal0 +\n    result.y * vPlaneNormal2 +\n    result.z * vPlaneNormal4;\n\n  if (result.w > 0.0)\n  {\n    result.xyz /= result.w;\n  }\n  return result;\n}\n\n#ifdef vtkImageLabelOutlineOn\nvec3 fragCoordToIndexSpace(vec4 fragCoord) {\n  vec4 pcPos = vec4(\n    (fragCoord.x / vpWidth - 0.5) * 2.0,\n    (fragCoord.y / vpHeight - 0.5) * 2.0,\n    (fragCoord.z - 0.5) * 2.0,\n    1.0);\n\n  vec4 worldCoord = PCWCMatrix * pcPos;\n  vec4 vertex = (worldCoord/worldCoord.w);\n\n  return (vWCtoIDX * vertex).xyz / vec3(volumeDimensions);\n}\n#endif\n\n//=======================================================================\n// compute the normals and gradient magnitudes for a position\n// for independent components\nmat4 computeMat4Normal(vec3 pos, vec4 tValue, vec3 tstep)\n{\n  mat4 result;\n  vec4 distX = getTextureValue(pos + vec3(tstep.x, 0.0, 0.0)) - tValue;\n  vec4 distY = getTextureValue(pos + vec3(0.0, tstep.y, 0.0)) - tValue;\n  vec4 distZ = getTextureValue(pos + vec3(0.0, 0.0, tstep.z)) - tValue;\n\n  // divide by spacing\n  distX /= vSpacing.x;\n  distY /= vSpacing.y;\n  distZ /= vSpacing.z;\n\n  mat3 rot;\n  rot[0] = vPlaneNormal0;\n  rot[1] = vPlaneNormal2;\n  rot[2] = vPlaneNormal4;\n\n#if !defined(vtkComponent0Proportional)\n  result[0].xyz = vec3(distX.r, distY.r, distZ.r);\n  result[0].a = length(result[0].xyz);\n  result[0].xyz *= rot;\n  if (result[0].w > 0.0)\n  {\n    result[0].xyz /= result[0].w;\n  }\n#endif\n\n// optionally compute the 2nd component\n#if vtkNumComponents >= 2 && !defined(vtkComponent1Proportional)\n  result[1].xyz = vec3(distX.g, distY.g, distZ.g);\n  result[1].a = length(result[1].xyz);\n  result[1].xyz *= rot;\n  if (result[1].w > 0.0)\n  {\n    result[1].xyz /= result[1].w;\n  }\n#endif\n\n// optionally compute the 3rd component\n#if vtkNumComponents >= 3 && !defined(vtkComponent2Proportional)\n  result[2].xyz = vec3(distX.b, distY.b, distZ.b);\n  result[2].a = length(result[2].xyz);\n  result[2].xyz *= rot;\n  if (result[2].w > 0.0)\n  {\n    result[2].xyz /= result[2].w;\n  }\n#endif\n\n// optionally compute the 4th component\n#if vtkNumComponents >= 4 && !defined(vtkComponent3Proportional)\n  result[3].xyz = vec3(distX.a, distY.a, distZ.a);\n  result[3].a = length(result[3].xyz);\n  result[3].xyz *= rot;\n  if (result[3].w > 0.0)\n  {\n    result[3].xyz /= result[3].w;\n  }\n#endif\n\n  return result;\n}\n\n//=======================================================================\n// Given a normal compute the gradient opacity factors\n//\nfloat computeGradientOpacityFactor(\n  vec4 normal, float goscale, float goshift, float gomin, float gomax)\n{\n#if defined(vtkGradientOpacityOn)\n  return clamp(normal.a*goscale + goshift, gomin, gomax);\n#else\n  return 1.0;\n#endif\n}\n\n#if vtkLightComplexity > 0\nvoid applyLighting(inout vec3 tColor, vec4 normal)\n{\n  vec3 diffuse = vec3(0.0, 0.0, 0.0);\n  vec3 specular = vec3(0.0, 0.0, 0.0);\n  //VTK::Light::Impl\n  tColor.rgb = tColor.rgb*(diffuse*vDiffuse + vAmbient) + specular*vSpecular;\n}\n#endif\n\n//=======================================================================\n// Given a texture value compute the color and opacity\n//\nvec4 getColorForValue(vec4 tValue, vec3 posIS, vec3 tstep)\n{\n#ifdef vtkImageLabelOutlineOn\n  vec3 centerPosIS = fragCoordToIndexSpace(gl_FragCoord); // pos in texture space\n  vec4 centerValue = getTextureValue(centerPosIS);\n  bool pixelOnBorder = false;\n  vec4 tColor = texture2D(ctexture, vec2(centerValue.r * cscale0 + cshift0, 0.5));\n\n  // Get alpha of segment from opacity function.\n  tColor.a = texture2D(otexture, vec2(centerValue.r * oscale0 + oshift0, 0.5)).r;\n\n  // Only perform outline check on fragments rendering voxels that aren't invisible.\n  // Saves a bunch of needless checks on the background.\n  // TODO define epsilon when building shader?\n  if (float(tColor.a) > 0.01) {\n    for (int i = -outlineThickness; i <= outlineThickness; i++) {\n      for (int j = -outlineThickness; j <= outlineThickness; j++) {\n        if (i == 0 || j == 0) {\n          continue;\n        }\n\n        vec4 neighborPixelCoord = vec4(gl_FragCoord.x + float(i),\n          gl_FragCoord.y + float(j),\n          gl_FragCoord.z, gl_FragCoord.w);\n\n        vec3 neighborPosIS = fragCoordToIndexSpace(neighborPixelCoord);\n        vec4 value = getTextureValue(neighborPosIS);\n\n        // If any of my neighbours are not the same value as I\n        // am, this means I am on the border of the segment.\n        // We can break the loops\n        if (any(notEqual(value, centerValue))) {\n          pixelOnBorder = true;\n          break;\n        }\n      }\n\n      if (pixelOnBorder == true) {\n        break;\n      }\n    }\n\n    // If I am on the border, I am displayed at full opacity\n    if (pixelOnBorder == true) {\n      tColor.a = 1.0;\n    }\n  }\n\n#else\n  // compute the normal and gradient magnitude if needed\n  // We compute it as a vec4 if possible otherwise a mat4\n  //\n  vec4 goFactor = vec4(1.0,1.0,1.0,1.0);\n\n  // compute the normal vectors as needed\n  #if (vtkLightComplexity > 0) || defined(vtkGradientOpacityOn)\n    #if defined(vtkIndependentComponentsOn) && (vtkNumComponents > 1)\n      mat4 normalMat = computeMat4Normal(posIS, tValue, tstep);\n      #if !defined(vtkComponent0Proportional)\n        vec4 normal0 = normalMat[0];\n      #endif\n      #if !defined(vtkComponent1Proportional)\n        vec4 normal1 = normalMat[1];\n      #endif\n      #if vtkNumComponents > 2\n        #if !defined(vtkComponent2Proportional)\n          vec4 normal2 = normalMat[2];\n        #endif\n        #if vtkNumComponents > 3\n          #if !defined(vtkComponent3Proportional)\n            vec4 normal3 = normalMat[3];\n          #endif\n        #endif\n      #endif\n    #else\n      vec4 normal0 = computeNormal(posIS, tValue.a, tstep);\n    #endif\n  #endif\n\n  // compute gradient opacity factors as needed\n  #if defined(vtkGradientOpacityOn)\n    #if !defined(vtkComponent0Proportional)\n      goFactor.x =\n        computeGradientOpacityFactor(normal0, goscale0, goshift0, gomin0, gomax0);\n    #endif\n    #if defined(vtkIndependentComponentsOn) && (vtkNumComponents > 1)\n      #if !defined(vtkComponent1Proportional)\n        goFactor.y =\n          computeGradientOpacityFactor(normal1, goscale1, goshift1, gomin1, gomax1);\n      #endif\n      #if vtkNumComponents > 2\n        #if !defined(vtkComponent2Proportional)\n          goFactor.z =\n            computeGradientOpacityFactor(normal2, goscale2, goshift2, gomin2, gomax2);\n        #endif\n        #if vtkNumComponents > 3\n          #if !defined(vtkComponent3Proportional)\n            goFactor.w =\n              computeGradientOpacityFactor(normal3, goscale3, goshift3, gomin3, gomax3);\n          #endif\n        #endif\n      #endif\n    #endif\n  #endif\n\n  // single component is always independent\n  #if vtkNumComponents == 1\n    vec4 tColor = texture2D(ctexture, vec2(tValue.r * cscale0 + cshift0, 0.5));\n    tColor.a = goFactor.x*texture2D(otexture, vec2(tValue.r * oscale0 + oshift0, 0.5)).r;\n  #endif\n\n  #if defined(vtkIndependentComponentsOn) && vtkNumComponents >= 2\n    vec4 tColor = mix0*texture2D(ctexture, vec2(tValue.r * cscale0 + cshift0, height0));\n    #if !defined(vtkComponent0Proportional)\n      tColor.a = goFactor.x*mix0*texture2D(otexture, vec2(tValue.r * oscale0 + oshift0, height0)).r;\n    #else\n      float pwfValue = texture2D(otexture, vec2(tValue.r * oscale0 + oshift0, height0)).r;\n      tColor *= pwfValue;\n      tColor.a *= mix(pwfValue, 1.0, (1.0 - mix0));\n    #endif\n\n    vec3 tColor1 = mix1*texture2D(ctexture, vec2(tValue.g * cscale1 + cshift1, height1)).rgb;\n    #if !defined(vtkComponent1Proportional)\n      tColor.a += goFactor.y*mix1*texture2D(otexture, vec2(tValue.g * oscale1 + oshift1, height1)).r;\n    #else\n      float pwfValue = texture2D(otexture, vec2(tValue.g * oscale1 + oshift1, height1)).r;\n      tColor1 *= pwfValue;\n      tColor.a *= mix(pwfValue, 1.0, (1.0 - mix1));\n    #endif\n\n    #if vtkNumComponents >= 3\n      vec3 tColor2 = mix2*texture2D(ctexture, vec2(tValue.b * cscale2 + cshift2, height2)).rgb;\n      #if !defined(vtkComponent2Proportional)\n        tColor.a += goFactor.z*mix2*texture2D(otexture, vec2(tValue.b * oscale2 + oshift2, height2)).r;\n      #else\n        float pwfValue = texture2D(otexture, vec2(tValue.b * oscale2 + oshift2, height2)).r;\n        tColor2 *= pwfValue;\n        tColor.a *= mix(pwfValue, 1.0, (1.0 - mix2));\n      #endif\n\n      #if vtkNumComponents >= 4\n        vec3 tColor3 = mix3*texture2D(ctexture, vec2(tValue.a * cscale3 + cshift3, height3)).rgb;\n        #if !defined(vtkComponent3Proportional)\n          tColor.a += goFactor.w*mix3*texture2D(otexture, vec2(tValue.a * oscale3 + oshift3, height3)).r;\n        #else\n          float pwfValue = texture2D(otexture, vec2(tValue.a * oscale3 + oshift3, height3)).r;\n          tColor3 *= pwfValue;\n          tColor.a *= mix(pwfValue, 1.0, (1.0 - mix3));\n        #endif\n      #endif\n    #endif\n  #else // then not independent\n\n  #if vtkNumComponents == 2\n    float lum = tValue.r * cscale0 + cshift0;\n    float alpha = goFactor.x*texture2D(otexture, vec2(tValue.a * oscale1 + oshift1, 0.5)).r;\n    vec4 tColor = vec4(lum, lum, lum, alpha);\n  #endif\n  #if vtkNumComponents == 3\n    vec4 tColor;\n    tColor.r = tValue.r * cscale0 + cshift0;\n    tColor.g = tValue.g * cscale1 + cshift1;\n    tColor.b = tValue.b * cscale2 + cshift2;\n    tColor.a = goFactor.x*texture2D(otexture, vec2(tValue.a * oscale0 + oshift0, 0.5)).r;\n  #endif\n  #if vtkNumComponents == 4\n    vec4 tColor;\n    tColor.r = tValue.r * cscale0 + cshift0;\n    tColor.g = tValue.g * cscale1 + cshift1;\n    tColor.b = tValue.b * cscale2 + cshift2;\n    tColor.a = goFactor.x*texture2D(otexture, vec2(tValue.a * oscale3 + oshift3, 0.5)).r;\n  #endif\n  #endif // dependent\n\n  // apply lighting if requested as appropriate\n  #if vtkLightComplexity > 0\n    #if !defined(vtkComponent0Proportional)\n      applyLighting(tColor.rgb, normal0);\n    #endif\n  #if defined(vtkIndependentComponentsOn) && vtkNumComponents >= 2\n    #if !defined(vtkComponent1Proportional)\n      applyLighting(tColor1, normal1);\n    #endif\n  #if vtkNumComponents >= 3\n    #if !defined(vtkComponent2Proportional)\n      applyLighting(tColor2, normal2);\n    #endif\n  #if vtkNumComponents >= 4\n    #if !defined(vtkComponent3Proportional)\n      applyLighting(tColor3, normal3);\n    #endif\n  #endif\n  #endif\n  #endif\n#endif\n\n// perform final independent blend as needed\n#if defined(vtkIndependentComponentsOn) && vtkNumComponents >= 2\n  tColor.rgb += tColor1;\n#if vtkNumComponents >= 3\n  tColor.rgb += tColor2;\n#if vtkNumComponents >= 4\n  tColor.rgb += tColor3;\n#endif\n#endif\n#endif\n\n#endif\n\n\n\n\n\n\n\nreturn tColor;\n}\n\nbool valueWithinScalarRange(vec4 val, vec4 min, vec4 max) {\n  bool withinRange = false;\n  #if vtkNumComponents == 1\n    if (val.r >= min.r && val.r <= max.r) {\n      withinRange = true;\n    }\n  #endif\n  #if defined(vtkIndependentComponentsOn) && vtkNumComponents == 2\n     if (val.r >= min.r && val.r <= max.r &&\n        val.g >= min.g && val.g <= max.g) {\n      withinRange = true;\n    }\n  #endif\n  #if defined(vtkIndependentComponentsOn) && vtkNumComponents >= 3\n    if (all(greaterThanEqual(val, ipScalarRangeMin)) &&\n        all(lessThanEqual(val, ipScalarRangeMax))) {\n      withinRange = true;\n    }\n  #endif\n  return withinRange;\n}\n\n//=======================================================================\n// Apply the specified blend mode operation along the ray's path.\n//\nvoid applyBlend(vec3 posIS, vec3 endIS, float sampleDistanceIS, vec3 tdims)\n{\n  vec3 tstep = 1.0/tdims;\n\n  // start slightly inside and apply some jitter\n  vec3 delta = endIS - posIS;\n  vec3 stepIS = normalize(delta)*sampleDistanceIS;\n  float raySteps = length(delta)/sampleDistanceIS;\n\n  // avoid 0.0 jitter\n  float jitter = 0.01 + 0.99*texture2D(jtexture, gl_FragCoord.xy/32.0).r;\n  float stepsTraveled = jitter;\n\n  // local vars for the loop\n  vec4 color = vec4(0.0, 0.0, 0.0, 0.0);\n  vec4 tValue;\n  vec4 tColor;\n\n  // if we have less than one step then pick the middle point\n  // as our value\n  // if (raySteps <= 1.0)\n  // {\n  //   posIS = (posIS + endIS)*0.5;\n  // }\n\n  // Perform initial step at the volume boundary\n  // compute the scalar\n  tValue = getTextureValue(posIS);\n\n  #if vtkBlendMode == 0 // COMPOSITE_BLEND\n    // now map through opacity and color\n    tColor = getColorForValue(tValue, posIS, tstep);\n\n    // handle very thin volumes\n    if (raySteps <= 1.0)\n    {\n      tColor.a = 1.0 - pow(1.0 - tColor.a, raySteps);\n      gl_FragData[0] = tColor;\n      return;\n    }\n\n    tColor.a = 1.0 - pow(1.0 - tColor.a, jitter);\n    color = vec4(tColor.rgb*tColor.a, tColor.a);\n    posIS += (jitter*stepIS);\n\n    for (int i = 0; i < //VTK::MaximumSamplesValue ; ++i)\n    {\n      if (stepsTraveled + 1.0 >= raySteps) { break; }\n\n      // compute the scalar\n      tValue = getTextureValue(posIS);\n\n      // now map through opacity and color\n      tColor = getColorForValue(tValue, posIS, tstep);\n\n      float mix = (1.0 - color.a);\n\n      // this line should not be needed but nvidia seems to not handle\n      // the break correctly on windows/chrome 58 angle\n      //mix = mix * sign(max(raySteps - stepsTraveled - 1.0, 0.0));\n\n      color = color + vec4(tColor.rgb*tColor.a, tColor.a)*mix;\n      stepsTraveled++;\n      posIS += stepIS;\n      if (color.a > 0.99) { color.a = 1.0; break; }\n    }\n\n    if (color.a < 0.99 && (raySteps - stepsTraveled) > 0.0)\n    {\n      posIS = endIS;\n\n      // compute the scalar\n      tValue = getTextureValue(posIS);\n\n      // now map through opacity and color\n      tColor = getColorForValue(tValue, posIS, tstep);\n      tColor.a = 1.0 - pow(1.0 - tColor.a, raySteps - stepsTraveled);\n\n      float mix = (1.0 - color.a);\n      color = color + vec4(tColor.rgb*tColor.a, tColor.a)*mix;\n    }\n\n    gl_FragData[0] = vec4(color.rgb/color.a, color.a);\n  #endif\n  #if vtkBlendMode == 1 || vtkBlendMode == 2\n    // MAXIMUM_INTENSITY_BLEND || MINIMUM_INTENSITY_BLEND\n    // Find maximum/minimum intensity along the ray.\n\n    // Define the operation we will use (min or max)\n    #if vtkBlendMode == 1\n    #define OP max\n    #else\n    #define OP min\n    #endif\n\n    // If the clipping range is shorter than the sample distance\n    // we can skip the sampling loop along the ray.\n    if (raySteps <= 1.0)\n    {\n      gl_FragData[0] = getColorForValue(tValue, posIS, tstep);\n      return;\n    }\n\n    vec4 value = tValue;\n    posIS += (jitter*stepIS);\n\n    // Sample along the ray until MaximumSamplesValue,\n    // ending slightly inside the total distance\n    for (int i = 0; i < //VTK::MaximumSamplesValue ; ++i)\n    {\n      // If we have reached the last step, break\n      if (stepsTraveled + 1.0 >= raySteps) { break; }\n\n      // compute the scalar\n      tValue = getTextureValue(posIS);\n\n      // Update the maximum value if necessary\n      value = OP(tValue, value);\n\n      // Otherwise, continue along the ray\n      stepsTraveled++;\n      posIS += stepIS;\n    }\n\n    // Perform the last step along the ray using the\n    // residual distance\n    posIS = endIS;\n    tValue = getTextureValue(posIS);\n    value = OP(tValue, value);\n\n    // Now map through opacity and color\n    gl_FragData[0] = getColorForValue(value, posIS, tstep);\n  #endif\n  #if vtkBlendMode == 3 || vtkBlendMode == 4 //AVERAGE_INTENSITY_BLEND || ADDITIVE_BLEND\n    vec4 ipScalarRangeMin = vec4 (\n      //VTK::IPScalarRangeMin,\n      //VTK::IPScalarRangeMin,\n      //VTK::IPScalarRangeMin,\n      //VTK::IPScalarRangeMax);\n    vec4 ipScalarRangeMax = vec4(\n      //VTK::IPScalarRangeMax,\n      //VTK::IPScalarRangeMax,\n      //VTK::IPScalarRangeMax,\n      //VTK::IPScalarRangeMax);\n\n    vec4 sum = vec4(0.);\n\n    if (valueWithinScalarRange(tValue, ipScalarRangeMin, ipScalarRangeMax)) {\n      sum += tValue;\n    }\n\n    if (raySteps <= 1.0) {\n      gl_FragData[0] = getColorForValue(sum, posIS, tstep);\n      return;\n    }\n\n    posIS += (jitter*stepIS);\n\n    // Sample along the ray until MaximumSamplesValue,\n    // ending slightly inside the total distance\n    for (int i = 0; i < //VTK::MaximumSamplesValue ; ++i)\n    {\n      // If we have reached the last step, break\n      if (stepsTraveled + 1.0 >= raySteps) { break; }\n\n      // compute the scalar\n      tValue = getTextureValue(posIS);\n\n      // One can control the scalar range by setting the AverageIPScalarRange to disregard scalar values, not in the range of interest, from the average computation.\n      // Notes:\n      // - We are comparing all values in the texture to see if any of them\n      //   are outside of the scalar range. In the future we might want to allow\n      //   scalar ranges for each component.\n      if (valueWithinScalarRange(tValue, ipScalarRangeMin, ipScalarRangeMax)) {\n        // Sum the values across each step in the path\n        sum += tValue;\n      }\n      stepsTraveled++;\n      posIS += stepIS;\n    }\n\n    // Perform the last step along the ray using the\n    // residual distance\n    posIS = endIS;\n\n    // compute the scalar\n    tValue = getTextureValue(posIS);\n\n    // One can control the scalar range by setting the IPScalarRange to disregard scalar values, not in the range of interest, from the average computation\n    if (valueWithinScalarRange(tValue, ipScalarRangeMin, ipScalarRangeMax)) {\n      sum += tValue;\n\n      stepsTraveled++;\n    }\n\n    #if vtkBlendMode == 3 // Average\n      sum /= vec4(stepsTraveled, stepsTraveled, stepsTraveled, 1.0);\n    #endif\n\n    gl_FragData[0] = getColorForValue(sum, posIS, tstep);\n  #endif\n}\n\n//=======================================================================\n// Compute a new start and end point for a given ray based\n// on the provided bounded clipping plane (aka a rectangle)\nvoid getRayPointIntersectionBounds(\n  vec3 rayPos, vec3 rayDir,\n  vec3 planeDir, float planeDist,\n  inout vec2 tbounds, vec3 vPlaneX, vec3 vPlaneY,\n  float vSize1, float vSize2)\n{\n  float result = dot(rayDir, planeDir);\n  if (abs(result) < 1e-6)\n  {\n    return;\n  }\n  result = -1.0 * (dot(rayPos, planeDir) + planeDist) / result;\n  vec3 xposVC = rayPos + rayDir*result;\n  vec3 vxpos = xposVC - vOriginVC;\n  vec2 vpos = vec2(\n    dot(vxpos, vPlaneX),\n    dot(vxpos, vPlaneY));\n\n  // on some apple nvidia systems this does not work\n  // if (vpos.x < 0.0 || vpos.x > vSize1 ||\n  //     vpos.y < 0.0 || vpos.y > vSize2)\n  // even just\n  // if (vpos.x < 0.0 || vpos.y < 0.0)\n  // fails\n  // so instead we compute a value that represents in and out\n  //and then compute the return using this value\n  float xcheck = max(0.0, vpos.x * (vpos.x - vSize1)); //  0 means in bounds\n  float check = sign(max(xcheck, vpos.y * (vpos.y - vSize2))); //  0 means in bounds, 1 = out\n\n  tbounds = mix(\n   vec2(min(tbounds.x, result), max(tbounds.y, result)), // in value\n   tbounds, // out value\n   check);  // 0 in 1 out\n}\n\n//=======================================================================\n// given a\n// - ray direction (rayDir)\n// - starting point (vertexVCVSOutput)\n// - bounding planes of the volume\n// - optionally depth buffer values\n// - far clipping plane\n// compute the start/end distances of the ray we need to cast\nvec2 computeRayDistances(vec3 rayDir, vec3 tdims)\n{\n  vec2 dists = vec2(100.0*camFar, -1.0);\n\n  vec3 vSize = vSpacing*(tdims - 1.0);\n\n  // all this is in View Coordinates\n  getRayPointIntersectionBounds(vertexVCVSOutput, rayDir,\n    vPlaneNormal0, vPlaneDistance0, dists, vPlaneNormal2, vPlaneNormal4,\n    vSize.y, vSize.z);\n  getRayPointIntersectionBounds(vertexVCVSOutput, rayDir,\n    vPlaneNormal1, vPlaneDistance1, dists, vPlaneNormal2, vPlaneNormal4,\n    vSize.y, vSize.z);\n  getRayPointIntersectionBounds(vertexVCVSOutput, rayDir,\n    vPlaneNormal2, vPlaneDistance2, dists, vPlaneNormal0, vPlaneNormal4,\n    vSize.x, vSize.z);\n  getRayPointIntersectionBounds(vertexVCVSOutput, rayDir,\n    vPlaneNormal3, vPlaneDistance3, dists, vPlaneNormal0, vPlaneNormal4,\n    vSize.x, vSize.z);\n  getRayPointIntersectionBounds(vertexVCVSOutput, rayDir,\n    vPlaneNormal4, vPlaneDistance4, dists, vPlaneNormal0, vPlaneNormal2,\n    vSize.x, vSize.y);\n  getRayPointIntersectionBounds(vertexVCVSOutput, rayDir,\n    vPlaneNormal5, vPlaneDistance5, dists, vPlaneNormal0, vPlaneNormal2,\n    vSize.x, vSize.y);\n\n  //VTK::ClipPlane::Impl\n\n  // do not go behind front clipping plane\n  dists.x = max(0.0,dists.x);\n\n  // do not go PAST far clipping plane\n  float farDist = -camThick/rayDir.z;\n  dists.y = min(farDist,dists.y);\n\n  // Do not go past the zbuffer value if set\n  // This is used for intermixing opaque geometry\n  //VTK::ZBuffer::Impl\n\n  return dists;\n}\n\n//=======================================================================\n// Compute the index space starting position (pos) and end\n// position\n//\nvoid computeIndexSpaceValues(out vec3 pos, out vec3 endPos, out float sampleDistanceIS, vec3 rayDir, vec2 dists)\n{\n  // compute starting and ending values in volume space\n  pos = vertexVCVSOutput + dists.x*rayDir;\n  pos = pos - vOriginVC;\n  // convert to volume basis and origin\n  pos = vec3(\n    dot(pos, vPlaneNormal0),\n    dot(pos, vPlaneNormal2),\n    dot(pos, vPlaneNormal4));\n\n  endPos = vertexVCVSOutput + dists.y*rayDir;\n  endPos = endPos - vOriginVC;\n  endPos = vec3(\n    dot(endPos, vPlaneNormal0),\n    dot(endPos, vPlaneNormal2),\n    dot(endPos, vPlaneNormal4));\n\n  float delta = length(endPos - pos);\n\n  pos *= vVCToIJK;\n  endPos *= vVCToIJK;\n\n  float delta2 = length(endPos - pos);\n  sampleDistanceIS = sampleDistance*delta2/delta;\n}\n\nvoid main()\n{\n\n  vec3 rayDirVC;\n\n  if (cameraParallel == 1)\n  {\n    // Camera is parallel, so the rayDir is just the direction of the camera.\n    rayDirVC = vec3(0.0, 0.0, -1.0);\n  } else {\n    // camera is at 0,0,0 so rayDir for perspective is just the vc coord\n    rayDirVC = normalize(vertexVCVSOutput);\n  }\n\n  vec3 tdims = vec3(volumeDimensions);\n\n  // compute the start and end points for the ray\n  vec2 rayStartEndDistancesVC = computeRayDistances(rayDirVC, tdims);\n\n  // do we need to composite? aka does the ray have any length\n  // If not, bail out early\n  if (rayStartEndDistancesVC.y <= rayStartEndDistancesVC.x)\n  {\n    discard;\n  }\n\n  // IS = Index Space\n  vec3 posIS;\n  vec3 endIS;\n  float sampleDistanceIS;\n  computeIndexSpaceValues(posIS, endIS, sampleDistanceIS, rayDirVC, rayStartEndDistancesVC);\n\n  // Perform the blending operation along the ray\n  applyBlend(posIS, endIS, sampleDistanceIS, tdims);\n}\n";




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/glsl/vtkVolumeVS.glsl.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/OpenGL/glsl/vtkVolumeVS.glsl.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "v": () => (/* binding */ vtkVolumeVS)
/* harmony export */ });
var vtkVolumeVS = "//VTK::System::Dec\n\n/*=========================================================================\n\n  Program:   Visualization Toolkit\n  Module:    vtkPolyDataVS.glsl\n\n  Copyright (c) Ken Martin, Will Schroeder, Bill Lorensen\n  All rights reserved.\n  See Copyright.txt or http://www.kitware.com/Copyright.htm for details.\n\n     This software is distributed WITHOUT ANY WARRANTY; without even\n     the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n     PURPOSE.  See the above copyright notice for more information.\n\n=========================================================================*/\n\nattribute vec4 vertexDC;\n\nvarying vec3 vertexVCVSOutput;\nuniform mat4 PCVCMatrix;\n\nuniform float dcxmin;\nuniform float dcxmax;\nuniform float dcymin;\nuniform float dcymax;\n\nvoid main()\n{\n  // dcsmall is the device coords reduced to the\n  // x y area covered by the volume\n  vec4 dcsmall = vec4(\n    dcxmin + 0.5 * (vertexDC.x + 1.0) * (dcxmax - dcxmin),\n    dcymin + 0.5 * (vertexDC.y + 1.0) * (dcymax - dcymin),\n    vertexDC.z,\n    vertexDC.w);\n  vec4 vcpos = PCVCMatrix * dcsmall;\n  vertexVCVSOutput = vcpos.xyz/vcpos.w;\n  gl_Position = dcsmall;\n}\n";




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Profiles/Geometry.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Profiles/Geometry.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _OpenGL_Camera_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../OpenGL/Camera.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Camera.js");
/* harmony import */ var _OpenGL_Renderer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../OpenGL/Renderer.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Renderer.js");
/* harmony import */ var _OpenGL_Actor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../OpenGL/Actor.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Actor.js");
/* harmony import */ var _OpenGL_Actor2D_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../OpenGL/Actor2D.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Actor2D.js");
/* harmony import */ var _OpenGL_PolyDataMapper_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../OpenGL/PolyDataMapper.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/PolyDataMapper.js");
/* harmony import */ var _OpenGL_Skybox_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../OpenGL/Skybox.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Skybox.js");
/* harmony import */ var _OpenGL_Texture_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../OpenGL/Texture.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Texture.js");
/* harmony import */ var _OpenGL_PixelSpaceCallbackMapper_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../OpenGL/PixelSpaceCallbackMapper.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/PixelSpaceCallbackMapper.js");
/* harmony import */ var _WebGPU_Camera_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../WebGPU/Camera.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/Camera.js");
/* harmony import */ var _WebGPU_Renderer_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../WebGPU/Renderer.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/Renderer.js");
/* harmony import */ var _WebGPU_Actor_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../WebGPU/Actor.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/Actor.js");
/* harmony import */ var _WebGPU_PolyDataMapper_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../WebGPU/PolyDataMapper.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/PolyDataMapper.js");
/* harmony import */ var _WebGPU_Texture_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../WebGPU/Texture.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/Texture.js");
/* harmony import */ var _WebGPU_PixelSpaceCallbackMapper_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../WebGPU/PixelSpaceCallbackMapper.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/PixelSpaceCallbackMapper.js");
















/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/Profiles/Volume.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/Profiles/Volume.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _OpenGL_Camera_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../OpenGL/Camera.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Camera.js");
/* harmony import */ var _OpenGL_Renderer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../OpenGL/Renderer.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Renderer.js");
/* harmony import */ var _OpenGL_ImageMapper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../OpenGL/ImageMapper.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ImageMapper.js");
/* harmony import */ var _OpenGL_ImageSlice_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../OpenGL/ImageSlice.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/ImageSlice.js");
/* harmony import */ var _OpenGL_Volume_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../OpenGL/Volume.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/Volume.js");
/* harmony import */ var _OpenGL_VolumeMapper_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../OpenGL/VolumeMapper.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/VolumeMapper.js");
/* harmony import */ var _OpenGL_PixelSpaceCallbackMapper_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../OpenGL/PixelSpaceCallbackMapper.js */ "./node_modules/@kitware/vtk.js/Rendering/OpenGL/PixelSpaceCallbackMapper.js");
/* harmony import */ var _WebGPU_Camera_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../WebGPU/Camera.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/Camera.js");
/* harmony import */ var _WebGPU_Renderer_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../WebGPU/Renderer.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/Renderer.js");
/* harmony import */ var _WebGPU_Volume_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../WebGPU/Volume.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/Volume.js");
/* harmony import */ var _WebGPU_PixelSpaceCallbackMapper_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../WebGPU/PixelSpaceCallbackMapper.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/PixelSpaceCallbackMapper.js");













/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/RenderPass.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/SceneGraph/RenderPass.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkRenderPass$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");


function vtkRenderPass(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkRenderPass');

  publicAPI.getOperation = function () {
    return model.currentOperation;
  };

  publicAPI.setCurrentOperation = function (val) {
    model.currentOperation = val;
    model.currentTraverseOperation = "traverse".concat(_macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].capitalize(model.currentOperation));
  };

  publicAPI.getTraverseOperation = function () {
    return model.currentTraverseOperation;
  }; // by default this class will traverse all of its
  // preDelegateOperations, then call its delegate render passes
  // the traverse all of its postDelegateOperations
  // any of those three arrays can be empty


  publicAPI.traverse = function (viewNode) {
    var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    if (model.deleted) {
      return;
    } // we just render our delegates in order


    model.currentParent = parent;
    model.preDelegateOperations.forEach(function (val) {
      publicAPI.setCurrentOperation(val);
      viewNode.traverse(publicAPI);
    });
    model.delegates.forEach(function (val) {
      val.traverse(viewNode, publicAPI);
    });
    model.postDelegateOperations.forEach(function (val) {
      publicAPI.setCurrentOperation(val);
      viewNode.traverse(publicAPI);
    });
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  delegates: [],
  currentOperation: null,
  preDelegateOperations: [],
  postDelegateOperations: [],
  currentParent: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].get(publicAPI, model, ['currentOperation']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['delegates', 'currentParent', 'preDelegateOperations', 'postDelegateOperations']); // Object methods

  vtkRenderPass(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkRenderPass'); // ----------------------------------------------------------------------------

var vtkRenderPass$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/RenderWindowViewNode.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/SceneGraph/RenderWindowViewNode.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkRenderWindowViewNode$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _ViewNode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ViewNode.js */ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/ViewNode.js");



// vtkRenderWindowViewNode is intended to be a superclass for all api specific
// RenderWindows. It is intended to define a common API that can be invoked
// upon an api specific render window and provide some common method
// implementations. If your application requires communicating with an api specific
// view try to limit such interactions to methods defined in this class.
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// vtkRenderWindowViewNode methods
// ----------------------------------------------------------------------------

function vtkRenderWindowViewNode(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkRenderWindowViewNode');

  publicAPI.getViewNodeFactory = function () {
    return null;
  };

  publicAPI.getAspectRatio = function () {
    return model.size[0] / model.size[1];
  };

  publicAPI.getAspectRatioForRenderer = function (renderer) {
    var viewport = renderer.getViewportByReference();
    return model.size[0] * (viewport[2] - viewport[0]) / ((viewport[3] - viewport[1]) * model.size[1]);
  };

  publicAPI.isInViewport = function (x, y, viewport) {
    var vCoords = viewport.getViewportByReference();
    var size = publicAPI.getFramebufferSize();

    if (vCoords[0] * size[0] <= x && vCoords[2] * size[0] >= x && vCoords[1] * size[1] <= y && vCoords[3] * size[1] >= y) {
      return true;
    }

    return false;
  };

  publicAPI.getViewportSize = function (viewport) {
    var vCoords = viewport.getViewportByReference();
    var size = publicAPI.getFramebufferSize();
    return [(vCoords[2] - vCoords[0]) * size[0], (vCoords[3] - vCoords[1]) * size[1]];
  };

  publicAPI.getViewportCenter = function (viewport) {
    var size = publicAPI.getViewportSize(viewport);
    return [size[0] * 0.5, size[1] * 0.5];
  };

  publicAPI.displayToNormalizedDisplay = function (x, y, z) {
    var size = publicAPI.getFramebufferSize();
    return [x / size[0], y / size[1], z];
  };

  publicAPI.normalizedDisplayToDisplay = function (x, y, z) {
    var size = publicAPI.getFramebufferSize();
    return [x * size[0], y * size[1], z];
  };

  publicAPI.worldToView = function (x, y, z, renderer) {
    return renderer.worldToView(x, y, z);
  };

  publicAPI.viewToWorld = function (x, y, z, renderer) {
    return renderer.viewToWorld(x, y, z);
  };

  publicAPI.worldToDisplay = function (x, y, z, renderer) {
    var val = renderer.worldToView(x, y, z);
    var dims = publicAPI.getViewportSize(renderer);
    var val2 = renderer.viewToProjection(val[0], val[1], val[2], dims[0] / dims[1]);
    var val3 = renderer.projectionToNormalizedDisplay(val2[0], val2[1], val2[2]);
    return publicAPI.normalizedDisplayToDisplay(val3[0], val3[1], val3[2]);
  };

  publicAPI.displayToWorld = function (x, y, z, renderer) {
    var val = publicAPI.displayToNormalizedDisplay(x, y, z);
    var val2 = renderer.normalizedDisplayToProjection(val[0], val[1], val[2]);
    var dims = publicAPI.getViewportSize(renderer);
    var val3 = renderer.projectionToView(val2[0], val2[1], val2[2], dims[0] / dims[1]);
    return renderer.viewToWorld(val3[0], val3[1], val3[2]);
  };

  publicAPI.normalizedDisplayToViewport = function (x, y, z, renderer) {
    var vCoords = renderer.getViewportByReference();
    vCoords = publicAPI.normalizedDisplayToDisplay(vCoords[0], vCoords[1], 0.0);
    var coords = publicAPI.normalizedDisplayToDisplay(x, y, z);
    return [coords[0] - vCoords[0] - 0.5, coords[1] - vCoords[1] - 0.5, z];
  };

  publicAPI.viewportToNormalizedViewport = function (x, y, z, renderer) {
    var size = publicAPI.getViewportSize(renderer);

    if (size && size[0] !== 0 && size[1] !== 0) {
      return [x / (size[0] - 1.0), y / (size[1] - 1.0), z];
    }

    return [x, y, z];
  };

  publicAPI.normalizedViewportToViewport = function (x, y, z, renderer) {
    var size = publicAPI.getViewportSize(renderer);
    return [x * (size[0] - 1.0), y * (size[1] - 1.0), z];
  };

  publicAPI.displayToLocalDisplay = function (x, y, z) {
    var size = publicAPI.getFramebufferSize();
    return [x, size[1] - y - 1, z];
  };

  publicAPI.viewportToNormalizedDisplay = function (x, y, z, renderer) {
    var vCoords = renderer.getViewportByReference();
    vCoords = publicAPI.normalizedDisplayToDisplay(vCoords[0], vCoords[1], 0.0);
    var x2 = x + vCoords[0] + 0.5;
    var y2 = y + vCoords[1] + 0.5;
    return publicAPI.displayToNormalizedDisplay(x2, y2, z);
  };

  publicAPI.getPixelData = function (x1, y1, x2, y2) {
    _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].vtkErrorMacro('not implemented');
    return undefined;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  size: undefined,
  selector: undefined
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues);

  if (!model.size) {
    model.size = [300, 300];
  }

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].getArray(publicAPI, model, ['size'], 2);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].get(publicAPI, model, ['selector']); // Inheritance

  _ViewNode_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues); // Object methods

  vtkRenderWindowViewNode(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkRenderWindowViewNode'); // ----------------------------------------------------------------------------

var vtkRenderWindowViewNode$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/ViewNode.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/SceneGraph/ViewNode.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkViewNode$1)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");


var vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].vtkErrorMacro;
var PASS_TYPES = ['Build', 'Render']; // ----------------------------------------------------------------------------
// vtkViewNode methods
// ----------------------------------------------------------------------------

function vtkViewNode(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkViewNode'); // Builds myself.

  publicAPI.build = function (prepass) {}; // Renders myself


  publicAPI.render = function (prepass) {};

  publicAPI.traverse = function (renderPass) {
    // we can choose to do special
    // traversal here based on pass
    var passTraversal = renderPass.getTraverseOperation();
    var fn = publicAPI[passTraversal];

    if (fn) {
      fn(renderPass);
      return;
    } // default traversal


    publicAPI.apply(renderPass, true);

    for (var index = 0; index < model.children.length; index++) {
      model.children[index].traverse(renderPass);
    }

    publicAPI.apply(renderPass, false);
  };

  publicAPI.apply = function (renderPass, prepass) {
    var customRenderPass = publicAPI[renderPass.getOperation()];

    if (customRenderPass) {
      customRenderPass(prepass, renderPass);
    }
  };

  publicAPI.getViewNodeFor = function (dataObject) {
    if (model.renderable === dataObject) {
      return publicAPI;
    }

    for (var index = 0; index < model.children.length; ++index) {
      var child = model.children[index];
      var vn = child.getViewNodeFor(dataObject);

      if (vn) {
        return vn;
      }
    }

    return undefined;
  };

  publicAPI.getFirstAncestorOfType = function (type) {
    if (!model.parent) {
      return null;
    }

    if (model.parent.isA(type)) {
      return model.parent;
    }

    return model.parent.getFirstAncestorOfType(type);
  };

  publicAPI.addMissingNode = function (dobj) {
    if (!dobj) {
      return;
    }

    var result = model._renderableChildMap.get(dobj); // if found just mark as visited


    if (result !== undefined) {
      result.setVisited(true);
    } else {
      // otherwise create a node
      var newNode = publicAPI.createViewNode(dobj);

      if (newNode) {
        newNode.setParent(publicAPI);
        newNode.setVisited(true);

        model._renderableChildMap.set(dobj, newNode);

        model.children.push(newNode);
      }
    }
  };

  publicAPI.addMissingNodes = function (dataObjs) {
    if (!dataObjs || !dataObjs.length) {
      return;
    }

    for (var index = 0; index < dataObjs.length; ++index) {
      var dobj = dataObjs[index];

      var result = model._renderableChildMap.get(dobj); // if found just mark as visited


      if (result !== undefined) {
        result.setVisited(true);
      } else {
        // otherwise create a node
        var newNode = publicAPI.createViewNode(dobj);

        if (newNode) {
          newNode.setParent(publicAPI);
          newNode.setVisited(true);

          model._renderableChildMap.set(dobj, newNode);

          model.children.push(newNode);
        }
      }
    }
  };

  publicAPI.prepareNodes = function () {
    for (var index = 0; index < model.children.length; ++index) {
      model.children[index].setVisited(false);
    }
  };

  publicAPI.setVisited = function (val) {
    model.visited = val;
  };

  publicAPI.removeUnusedNodes = function () {
    var deleted = null;

    for (var index = 0; index < model.children.length; ++index) {
      var child = model.children[index];
      var visited = child.getVisited();

      if (!visited) {
        var renderable = child.getRenderable();

        if (renderable) {
          model._renderableChildMap.delete(renderable);
        }

        if (!deleted) {
          deleted = [];
        }

        deleted.push(child);
      } else {
        child.setVisited(false);
      }
    }

    if (deleted) {
      // slow does alloc but not as common
      model.children = model.children.filter(function (el) {
        return !deleted.includes(el);
      });
    }
  };

  publicAPI.createViewNode = function (dataObj) {
    if (!model.myFactory) {
      vtkErrorMacro('Cannot create view nodes without my own factory');
      return null;
    }

    var ret = model.myFactory.createNode(dataObj);

    if (ret) {
      ret.setRenderable(dataObj);
    }

    return ret;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  parent: null,
  renderable: null,
  myFactory: null,
  children: [],
  visited: false
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].event(publicAPI, model, 'event');
  model._renderableChildMap = new Map();
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].get(publicAPI, model, ['visited']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['parent', 'renderable', 'myFactory']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].getArray(publicAPI, model, ['children']); // Object methods

  vtkViewNode(publicAPI, model);
} // ----------------------------------------------------------------------------


var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkViewNode'); // ----------------------------------------------------------------------------

var vtkViewNode$1 = {
  newInstance: newInstance,
  extend: extend,
  PASS_TYPES: PASS_TYPES
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/ViewNodeFactory.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/SceneGraph/ViewNodeFactory.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkViewNodeFactory$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");


// vtkViewNodeFactory methods
// ----------------------------------------------------------------------------

function vtkViewNodeFactory(publicAPI, model) {
  // Make sure our overrides is just for our instance not shared with everyone...
  if (!model.overrides) {
    model.overrides = {};
  } // Set our className


  model.classHierarchy.push('vtkViewNodeFactory');

  publicAPI.createNode = function (dataObject) {
    if (dataObject.isDeleted()) {
      return null;
    }

    var cpt = 0;
    var className = dataObject.getClassName(cpt++);
    var isObject = false;
    var keys = Object.keys(model.overrides);

    while (className && !isObject) {
      if (keys.indexOf(className) !== -1) {
        isObject = true;
      } else {
        className = dataObject.getClassName(cpt++);
      }
    }

    if (!isObject) {
      return null;
    }

    var vn = model.overrides[className]();
    vn.setMyFactory(publicAPI);
    return vn;
  };

  publicAPI.registerOverride = function (className, func) {
    model.overrides[className] = func;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {// overrides: {},
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model); // Object methods

  vtkViewNodeFactory(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkViewNodeFactory'); // ----------------------------------------------------------------------------

var vtkViewNodeFactory$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/Actor.js":
/*!****************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/WebGPU/Actor.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ index),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../SceneGraph/ViewNode.js */ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/ViewNode.js");
/* harmony import */ var _ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ViewNodeFactory.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/ViewNodeFactory.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js");





// vtkWebGPUActor methods
// ----------------------------------------------------------------------------

function vtkWebGPUActor(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkWebGPUActor'); // Builds myself.

  publicAPI.buildPass = function (prepass) {
    if (prepass) {
      model.WebGPURenderer = publicAPI.getFirstAncestorOfType('vtkWebGPURenderer');
      model.WebGPURenderWindow = model.WebGPURenderer.getFirstAncestorOfType('vtkWebGPURenderWindow');

      if (model.propID === undefined) {
        model.propID = model.WebGPURenderWindow.getUniquePropID();
      }

      publicAPI.prepareNodes();
      publicAPI.addMissingNode(model.renderable.getMapper());
      publicAPI.removeUnusedNodes();
    }
  }; // we draw textures, then mapper, then post pass textures


  publicAPI.traverseOpaquePass = function (renderPass) {
    if (!model.renderable || !model.renderable.getNestedVisibility() || !model.renderable.getIsOpaque() || model.WebGPURenderer.getSelector() && !model.renderable.getNestedPickable()) {
      return;
    }

    publicAPI.apply(renderPass, true);

    if (model.children[0]) {
      model.children[0].traverse(renderPass);
    }

    publicAPI.apply(renderPass, false);
  }; // we draw textures, then mapper, then post pass textures


  publicAPI.traverseTranslucentPass = function (renderPass) {
    if (!model.renderable || !model.renderable.getNestedVisibility() || model.renderable.getIsOpaque() || model.WebGPURenderer.getSelector() && !model.renderable.getNestedPickable()) {
      return;
    }

    publicAPI.apply(renderPass, true);

    if (model.children[0]) {
      model.children[0].traverse(renderPass);
    }

    publicAPI.apply(renderPass, false);
  };

  publicAPI.queryPass = function (prepass, renderPass) {
    if (prepass) {
      if (!model.renderable || !model.renderable.getVisibility()) {
        return;
      }

      if (model.renderable.getIsOpaque()) {
        renderPass.incrementOpaqueActorCount();
      } else {
        renderPass.incrementTranslucentActorCount();
      }
    }
  };

  publicAPI.getBufferShift = function (wgpuRen) {
    publicAPI.getKeyMatrices(wgpuRen);
    return model.bufferShift;
  };

  publicAPI.getKeyMatrices = function (wgpuRen) {
    // has the actor or stabilization center changed?
    if (Math.max(model.renderable.getMTime(), wgpuRen.getStabilizedTime()) > model.keyMatricesTime.getMTime()) {
      model.renderable.computeMatrix();
      var mcwc = model.renderable.getMatrix(); // compute the net shift

      var center = wgpuRen.getStabilizedCenterByReference();
      model.bufferShift[0] = mcwc[3] - center[0];
      model.bufferShift[1] = mcwc[7] - center[1];
      model.bufferShift[2] = mcwc[11] - center[2];
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.j)(model.keyMatrices.bcwc, mcwc);

      if (model.renderable.getIsIdentity()) {
        (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.i)(model.keyMatrices.normalMatrix);
      } else {
        // we use bcwc BEFORE the translate below (just to get transposed mcvc)
        (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.d)(model.keyMatrices.normalMatrix, model.keyMatrices.bcwc); // zero out translation

        model.keyMatrices.normalMatrix[3] = 0.0;
        model.keyMatrices.normalMatrix[7] = 0.0;
        model.keyMatrices.normalMatrix[11] = 0.0;
        (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.g)(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);
        (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.j)(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);
      } // only meed the buffer shift to get to world


      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.t)(model.keyMatrices.bcwc, model.keyMatrices.bcwc, [-model.bufferShift[0], -model.bufferShift[1], -model.bufferShift[2]]); // to get to stabilized we also need the center

      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.t)(model.keyMatrices.bcsc, model.keyMatrices.bcwc, [-center[0], -center[1], -center[2]]);
      model.keyMatricesTime.modified();
    }

    return model.keyMatrices;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  keyMatricesTime: null,
  keyMatrices: null,
  propID: undefined,
  bufferShift: undefined
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues);
  model.keyMatricesTime = {};
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(model.keyMatricesTime, {
    mtime: 0
  });
  model.keyMatrices = {
    normalMatrix: new Float64Array(16),
    bcwc: new Float64Array(16),
    bcsc: new Float64Array(16)
  };
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].get(publicAPI, model, ['propID', 'keyMatricesTime']);
  model.bufferShift = [0, 0, 0, 0]; // Object methods

  vtkWebGPUActor(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend); // ----------------------------------------------------------------------------

var index = {
  newInstance: newInstance,
  extend: extend
}; // Register ourself to WebGPU backend if imported

(0,_ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_2__.registerOverride)('vtkActor', newInstance);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/BindGroup.js":
/*!********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/WebGPU/BindGroup.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkWebGPUBindGroup$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");


// vtkWebGPUBindGroup methods
// ----------------------------------------------------------------------------

function vtkWebGPUBindGroup(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkWebGPUBindGroup');

  publicAPI.setBindables = function (bindables) {
    // is there a difference between the old and new list?
    if (model.bindables.length === bindables.length) {
      var allMatch = true;

      for (var i = 0; i < model.bindables.length; i++) {
        if (model.bindables[i] !== bindables[i]) {
          allMatch = false;
        }
      }

      if (allMatch) {
        return;
      }
    } // there is a difference


    model.bindables = bindables;
    publicAPI.modified();
  };

  publicAPI.getBindGroupLayout = function (device) {
    var entries = [];

    for (var i = 0; i < model.bindables.length; i++) {
      var entry = model.bindables[i].getBindGroupLayoutEntry();
      entry.binding = i;
      entries.push(entry);
    }

    return device.getBindGroupLayout({
      entries: entries
    });
  };

  publicAPI.getBindGroup = function (device) {
    // check mtime
    var mtime = publicAPI.getMTime();

    for (var i = 0; i < model.bindables.length; i++) {
      var tm = model.bindables[i].getBindGroupTime().getMTime();
      mtime = tm > mtime ? tm : mtime;
    }

    if (mtime < model.bindGroupTime.getMTime()) {
      return model.bindGroup;
    }

    var entries = [];

    for (var _i = 0; _i < model.bindables.length; _i++) {
      var entry = model.bindables[_i].getBindGroupEntry();

      entry.binding = _i;
      entries.push(entry);
    }

    model.bindGroup = device.getHandle().createBindGroup({
      layout: publicAPI.getBindGroupLayout(device),
      entries: entries
    });
    model.bindGroupTime.modified();
    return model.bindGroup;
  };

  publicAPI.getShaderCode = function (pipeline) {
    var lines = [];
    var bgroup = pipeline.getBindGroupLayoutCount(model.name);

    for (var i = 0; i < model.bindables.length; i++) {
      lines.push(model.bindables[i].getShaderCode(i, bgroup));
    }

    return lines.join('\n');
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  device: null,
  handle: null,
  name: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  model.bindables = [];
  model.bindGroupTime = {};
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(model.bindGroupTime, {
    mtime: 0
  });
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].get(publicAPI, model, ['bindGroupTime', 'handle', 'sizeInBytes', 'usage']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['name', 'device', 'arrayInformation', 'sourceTime']);
  vtkWebGPUBindGroup(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend); // ----------------------------------------------------------------------------

var vtkWebGPUBindGroup$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/Buffer.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/WebGPU/Buffer.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkWebGPUBuffer$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _BufferManager_Constants_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BufferManager/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/BufferManager/Constants.js");




function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var forwarded = ['getMappedRange', 'mapAsync', 'unmap'];

function bufferSubData(device, destBuffer, destOffset, srcArrayBuffer) {
  var byteCount = srcArrayBuffer.byteLength;
  var srcBuffer = device.createBuffer({
    size: byteCount,

    /* eslint-disable no-undef */
    usage: GPUBufferUsage.COPY_SRC,

    /* eslint-enable no-undef */
    mappedAtCreation: true
  });
  var arrayBuffer = srcBuffer.getMappedRange(0, byteCount);
  new Uint8Array(arrayBuffer).set(new Uint8Array(srcArrayBuffer)); // memcpy

  srcBuffer.unmap();
  var encoder = device.createCommandEncoder();
  encoder.copyBufferToBuffer(srcBuffer, 0, destBuffer, destOffset, byteCount);
  var commandBuffer = encoder.finish();
  var queue = device.queue;
  queue.submit([commandBuffer]);
  srcBuffer.destroy();
} // ----------------------------------------------------------------------------
// vtkWebGPUBufferManager methods
// ----------------------------------------------------------------------------


function vtkWebGPUBuffer(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkWebGPUBuffer');

  publicAPI.create = function (sizeInBytes, usage) {
    model.handle = model.device.getHandle().createBuffer({
      size: sizeInBytes,
      usage: usage
    });
    model.sizeInBytes = sizeInBytes;
    model.usage = usage;
  };

  publicAPI.write = function (data) {
    bufferSubData(model.device.getHandle(), model.handle, 0, data.buffer);
  };

  publicAPI.createAndWrite = function (data, usage) {
    model.handle = model.device.getHandle().createBuffer({
      size: data.byteLength,
      usage: usage,
      mappedAtCreation: true
    });
    model.sizeInBytes = data.byteLength;
    model.usage = usage;
    new Uint8Array(model.handle.getMappedRange()).set(new Uint8Array(data.buffer)); // memcpy

    model.handle.unmap();
  }; // simple forwarders


  var _loop = function _loop(i) {
    publicAPI[forwarded[i]] = function () {
      var _model$handle;

      return (_model$handle = model.handle)[forwarded[i]].apply(_model$handle, arguments);
    };
  };

  for (var i = 0; i < forwarded.length; i++) {
    _loop(i);
  }
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  device: null,
  handle: null,
  sizeInBytes: 0,
  strideInBytes: 0,
  arrayInformation: null,
  usage: null,
  sourceTime: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods

  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].get(publicAPI, model, ['handle', 'sizeInBytes', 'usage']);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGet(publicAPI, model, ['strideInBytes', 'device', 'arrayInformation', 'sourceTime']);
  vtkWebGPUBuffer(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend); // ----------------------------------------------------------------------------

var vtkWebGPUBuffer$1 = _objectSpread({
  newInstance: newInstance,
  extend: extend
}, _BufferManager_Constants_js__WEBPACK_IMPORTED_MODULE_2__["default"]);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/BufferManager.js":
/*!************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/WebGPU/BufferManager.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "STATIC": () => (/* binding */ STATIC),
/* harmony export */   "default": () => (/* binding */ vtkWebGPUBufferManager$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../Common/Core/Math/index.js */ "./node_modules/@kitware/vtk.js/Common/Core/Math/index.js");
/* harmony import */ var _Buffer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Buffer.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/Buffer.js");
/* harmony import */ var _Types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Types.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/Types.js");
/* harmony import */ var _Core_Property_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Core/Property.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Property.js");
/* harmony import */ var _BufferManager_Constants_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./BufferManager/Constants.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/BufferManager/Constants.js");








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var BufferUsage = _BufferManager_Constants_js__WEBPACK_IMPORTED_MODULE_6__["default"].BufferUsage,
    PrimitiveTypes = _BufferManager_Constants_js__WEBPACK_IMPORTED_MODULE_6__["default"].PrimitiveTypes;
var Representation = _Core_Property_js__WEBPACK_IMPORTED_MODULE_5__["default"].Representation;
var vtkDebugMacro = _macros_js__WEBPACK_IMPORTED_MODULE_1__.vtkDebugMacro; // the webgpu constants all show up as undefined

/* eslint-disable no-undef */
// ----------------------------------------------------------------------------
// Static API
// ----------------------------------------------------------------------------

var STATIC = {};

function requestMatches(req1, req2) {
  if (req1.time !== req2.time) return false;
  if (req1.format !== req2.format) return false;
  if (req1.usage !== req2.usage) return false;
  if (req1.hash !== req2.hash) return false;
  return true;
}

var cellCounters = {
  // easy, every input point becomes an output point
  anythingToPoints: function anythingToPoints(numPoints, cellPts) {
    return numPoints;
  },
  linesToWireframe: function linesToWireframe(numPoints, cellPts) {
    if (numPoints > 1) {
      return (numPoints - 1) * 2;
    }

    return 0;
  },
  polysToWireframe: function polysToWireframe(numPoints, cellPts) {
    if (numPoints > 2) {
      return numPoints * 2;
    }

    return 0;
  },
  stripsToWireframe: function stripsToWireframe(numPoints, cellPts) {
    if (numPoints > 2) {
      return numPoints * 4 - 6;
    }

    return 0;
  },
  polysToSurface: function polysToSurface(npts, cellPts) {
    if (npts > 2) {
      return (npts - 2) * 3;
    }

    return 0;
  },
  stripsToSurface: function stripsToSurface(npts, cellPts, offset) {
    if (numPoints > 2) {
      return (npts - 2) * 3;
    }

    return 0;
  }
};

function getPrimitiveName(primType) {
  switch (primType) {
    case PrimitiveTypes.Points:
      return 'points';

    case PrimitiveTypes.Lines:
      return 'lines';

    case PrimitiveTypes.Triangles:
      return 'polys';

    case PrimitiveTypes.TriangleStrips:
      return 'strips';

    default:
      return '';
  }
}

function getOutputSize(cellArray, representation, inRepName) {
  var countFunc = null;

  if (representation === Representation.POINTS || inRepName === 'points') {
    countFunc = cellCounters.anythingToPoints;
  } else if (representation === Representation.WIREFRAME || inRepName === 'lines') {
    countFunc = cellCounters["".concat(inRepName, "ToWireframe")];
  } else {
    countFunc = cellCounters["".concat(inRepName, "ToSurface")];
  }

  var array = cellArray.getData();
  var size = array.length;
  var caboCount = 0;

  for (var index = 0; index < size;) {
    caboCount += countFunc(array[index], array);
    index += array[index] + 1;
  }

  return caboCount;
}

function packArray(cellArray, primType, representation, inArray, outputType, options) {
  var result = {
    elementCount: 0,
    blockSize: 0,
    stride: 0
  };

  if (!cellArray.getData() || !cellArray.getData().length) {
    return result;
  } // setup shift and scale


  var shift = [0.0, 0.0, 0.0, 0.0];

  if (options.shift) {
    if (options.shift.length) {
      shift = options.shift;
    } else {
      shift.fill(options.shift);
    }
  }

  var scale = [1.0, 1.0, 1.0, 1.0];

  if (options.scale) {
    if (options.scale.length) {
      scale = options.scale;
    } else {
      scale.fill(options.scale);
    }
  }

  var packExtra = Object.prototype.hasOwnProperty.call(options, 'packExtra') ? options.packExtra : false;
  var pointData = inArray.getData();
  var addAPoint;
  var cellBuilders = {
    // easy, every input point becomes an output point
    anythingToPoints: function anythingToPoints(numPoints, cellPts, offset, cellId) {
      for (var i = 0; i < numPoints; ++i) {
        addAPoint(cellPts[offset + i], cellId);
      }
    },
    linesToWireframe: function linesToWireframe(numPoints, cellPts, offset, cellId) {
      // for lines we add a bunch of segments
      for (var i = 0; i < numPoints - 1; ++i) {
        addAPoint(cellPts[offset + i], cellId);
        addAPoint(cellPts[offset + i + 1], cellId);
      }
    },
    polysToWireframe: function polysToWireframe(numPoints, cellPts, offset, cellId) {
      // for polys we add a bunch of segments and close it
      if (numPoints > 2) {
        for (var i = 0; i < numPoints; ++i) {
          addAPoint(cellPts[offset + i], cellId);
          addAPoint(cellPts[offset + (i + 1) % numPoints], cellId);
        }
      }
    },
    stripsToWireframe: function stripsToWireframe(numPoints, cellPts, offset, cellId) {
      if (numPoints > 2) {
        // for strips we add a bunch of segments and close it
        for (var i = 0; i < numPoints - 1; ++i) {
          addAPoint(cellPts[offset + i], cellId);
          addAPoint(cellPts[offset + i + 1], cellId);
        }

        for (var _i = 0; _i < numPoints - 2; _i++) {
          addAPoint(cellPts[offset + _i], cellId);
          addAPoint(cellPts[offset + _i + 2], cellId);
        }
      }
    },
    polysToSurface: function polysToSurface(npts, cellPts, offset, cellId) {
      for (var i = 0; i < npts - 2; i++) {
        addAPoint(cellPts[offset + 0], cellId);
        addAPoint(cellPts[offset + i + 1], cellId);
        addAPoint(cellPts[offset + i + 2], cellId);
      }
    },
    stripsToSurface: function stripsToSurface(npts, cellPts, offset, cellId) {
      for (var i = 0; i < npts - 2; i++) {
        addAPoint(cellPts[offset + i], cellId);
        addAPoint(cellPts[offset + i + 1 + i % 2], cellId);
        addAPoint(cellPts[offset + i + 1 + (i + 1) % 2], cellId);
      }
    }
  };
  var inRepName = getPrimitiveName(primType);
  var func = null;

  if (representation === Representation.POINTS || primType === PrimitiveTypes.Points) {
    func = cellBuilders.anythingToPoints;
  } else if (representation === Representation.WIREFRAME || primType === PrimitiveTypes.Lines) {
    func = cellBuilders["".concat(inRepName, "ToWireframe")];
  } else {
    func = cellBuilders["".concat(inRepName, "ToSurface")];
  }

  var array = cellArray.getData();
  var size = array.length;
  var caboCount = getOutputSize(cellArray, representation, inRepName);
  var vboidx = 0;
  var numComp = inArray.getNumberOfComponents();
  var packedVBO = (0,_macros_js__WEBPACK_IMPORTED_MODULE_1__.newTypedArray)(outputType, caboCount * (numComp + (packExtra ? 1 : 0))); // pick the right function based on point versus cell data

  var getData = function getData(ptId, cellId) {
    return pointData[ptId];
  };

  if (options.cellData) {
    getData = function getData(ptId, cellId) {
      return pointData[cellId];
    };
  } // add data based on number of components


  if (numComp === 1) {
    addAPoint = function addAPointFunc(i, cellid) {
      packedVBO[vboidx++] = scale[0] * getData(i, cellid) + shift[0];
    };
  } else if (numComp === 2) {
    addAPoint = function addAPointFunc(i, cellid) {
      packedVBO[vboidx++] = scale[0] * getData(i * 2, cellid * 2) + shift[0];
      packedVBO[vboidx++] = scale[1] * getData(i * 2 + 1, cellid * 2 + 1) + shift[1];
    };
  } else if (numComp === 3 && !packExtra) {
    addAPoint = function addAPointFunc(i, cellid) {
      packedVBO[vboidx++] = scale[0] * getData(i * 3, cellid * 3) + shift[0];
      packedVBO[vboidx++] = scale[1] * getData(i * 3 + 1, cellid * 3 + 1) + shift[1];
      packedVBO[vboidx++] = scale[2] * getData(i * 3 + 2, cellid * 3 + 2) + shift[2];
    };
  } else if (numComp === 3 && packExtra) {
    addAPoint = function addAPointFunc(i, cellid) {
      packedVBO[vboidx++] = scale[0] * getData(i * 3, cellid * 3) + shift[0];
      packedVBO[vboidx++] = scale[1] * getData(i * 3 + 1, cellid * 3 + 1) + shift[1];
      packedVBO[vboidx++] = scale[2] * getData(i * 3 + 2, cellid * 3 + 2) + shift[2];
      packedVBO[vboidx++] = scale[3] * 1.0 + shift[3];
    };
  } else if (numComp === 4) {
    addAPoint = function addAPointFunc(i, cellid) {
      packedVBO[vboidx++] = scale[0] * getData(i * 4, cellid * 4) + shift[0];
      packedVBO[vboidx++] = scale[1] * getData(i * 4 + 1, cellid * 4 + 1) + shift[1];
      packedVBO[vboidx++] = scale[2] * getData(i * 4 + 2, cellid * 4 + 2) + shift[2];
      packedVBO[vboidx++] = scale[3] * getData(i * 4 + 3, cellid * 4 + 3) + shift[3];
    };
  }

  var cellId = options.cellOffset;

  for (var index = 0; index < size;) {
    func(array[index], array, index + 1, cellId);
    index += array[index] + 1;
    cellId++;
  }

  result.nativeArray = packedVBO;
  result.elementCount = caboCount;
  return result;
}

function getNormal(pointData, i0, i1, i2) {
  var v1 = [pointData[i2 * 3] - pointData[i1 * 3], pointData[i2 * 3 + 1] - pointData[i1 * 3 + 1], pointData[i2 * 3 + 2] - pointData[i1 * 3 + 2]];
  var v2 = [pointData[i0 * 3] - pointData[i1 * 3], pointData[i0 * 3 + 1] - pointData[i1 * 3 + 1], pointData[i0 * 3 + 2] - pointData[i1 * 3 + 2]];
  var result = [];
  (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.j)(v1, v2, result);
  (0,_Common_Core_Math_index_js__WEBPACK_IMPORTED_MODULE_2__.l)(result);
  return result;
}

function generateNormals(cellArray, primType, representation, inArray) {
  if (!cellArray.getData() || !cellArray.getData().length) {
    return null;
  }

  var pointData = inArray.getData();
  var addAPoint;
  var cellBuilders = {
    polysToPoints: function polysToPoints(numPoints, cellPts, offset) {
      var normal = getNormal(pointData, cellPts[offset], cellPts[offset + 1], cellPts[offset + 2]);

      for (var i = 0; i < numPoints; ++i) {
        addAPoint(normal);
      }
    },
    polysToWireframe: function polysToWireframe(numPoints, cellPts, offset) {
      // for polys we add a bunch of segments and close it
      // compute the normal
      var normal = getNormal(pointData, cellPts[offset], cellPts[offset + 1], cellPts[offset + 2]);

      for (var i = 0; i < numPoints; ++i) {
        addAPoint(normal);
        addAPoint(normal);
      }
    },
    polysToSurface: function polysToSurface(npts, cellPts, offset) {
      if (npts < 3) {
        // ignore degenerate triangles
        vtkDebugMacro('skipping degenerate triangle');
      } else {
        // compute the normal
        var normal = getNormal(pointData, cellPts[offset], cellPts[offset + 1], cellPts[offset + 2]);

        for (var i = 0; i < npts - 2; i++) {
          addAPoint(normal);
          addAPoint(normal);
          addAPoint(normal);
        }
      }
    }
  };
  var primName = getPrimitiveName(primType);
  var func = null;

  if (representation === Representation.POINTS) {
    func = cellBuilders["".concat(primName, "ToPoints")];
  } else if (representation === Representation.WIREFRAME) {
    func = cellBuilders["".concat(primName, "ToWireframe")];
  } else {
    func = cellBuilders["".concat(primName, "ToSurface")];
  }

  var caboCount = getOutputSize(cellArray, representation, primName);
  var vboidx = 0;
  var packedVBO = new Int8Array(caboCount * 4);

  addAPoint = function addAPointFunc(normal) {
    packedVBO[vboidx++] = 127 * normal[0];
    packedVBO[vboidx++] = 127 * normal[1];
    packedVBO[vboidx++] = 127 * normal[2];
    packedVBO[vboidx++] = 127;
  };

  var array = cellArray.getData();
  var size = array.length;

  for (var index = 0; index < size;) {
    func(array[index], array, index + 1);
    index += array[index] + 1;
  }

  return packedVBO;
} // ----------------------------------------------------------------------------
// vtkWebGPUBufferManager methods
// ----------------------------------------------------------------------------


function vtkWebGPUBufferManager(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkWebGPUBufferManager'); // is the buffer already present?

  publicAPI.hasBuffer = function (req) {
    if (req.source) {
      // if a matching buffer already exists then return true
      if (model.buffers.has(req.source)) {
        var dabuffers = model.buffers.get(req.source);

        for (var i = 0; i < dabuffers.length; i++) {
          if (requestMatches(dabuffers[i].request, req)) {
            return true;
          }
        }
      }
    }

    return false;
  }; // we cache based on the passed in source, when the source is
  // garbage collected then the cache entry is removed. If a source
  // is not provided then the buffer is NOT cached and you are on your own
  // if you want to share it etc


  publicAPI.getBuffer = function (req) {
    if (req.source) {
      // if a matching buffer already exists then return it
      if (model.buffers.has(req.source)) {
        var dabuffers = model.buffers.get(req.source);

        for (var i = 0; i < dabuffers.length; i++) {
          if (requestMatches(dabuffers[i].request, req)) {
            return dabuffers[i].buffer;
          }
        }
      }
    } // if a dataArray is provided set the nativeArray


    if (req.dataArray && !req.nativeArray) {
      req.nativeArray = req.dataArray.getData();
    } // create one


    var buffer = _Buffer_js__WEBPACK_IMPORTED_MODULE_3__["default"].newInstance();
    buffer.setDevice(model.device);
    var gpuUsage = null; // handle uniform buffers

    if (req.usage === BufferUsage.UniformArray) {
      /* eslint-disable no-bitwise */
      gpuUsage = GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST;
      /* eslint-enable no-bitwise */

      buffer.createAndWrite(req.nativeArray, gpuUsage);
    } // handle storage buffers


    if (req.usage === BufferUsage.Storage) {
      /* eslint-disable no-bitwise */
      gpuUsage = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST;
      /* eslint-enable no-bitwise */

      buffer.createAndWrite(req.nativeArray, gpuUsage);
    } // handle textures


    if (req.usage === BufferUsage.Texture) {
      /* eslint-disable no-bitwise */
      gpuUsage = GPUBufferUsage.COPY_SRC;
      /* eslint-enable no-bitwise */

      buffer.createAndWrite(req.nativeArray, gpuUsage);
    } // all of the below types that have gpuUsage = VERTEX require format
    // to be provided.
    // handle point data


    if (req.usage === BufferUsage.PointArray) {
      gpuUsage = GPUBufferUsage.VERTEX;
      var arrayType = _Types_js__WEBPACK_IMPORTED_MODULE_4__["default"].getNativeTypeFromBufferFormat(req.format);
      var result = packArray(req.cells, req.primitiveType, req.representation, req.dataArray, arrayType, {
        packExtra: req.packExtra,
        shift: req.shift,
        scale: req.scale,
        cellData: req.cellData,
        cellOffset: req.cellOffset
      }); // console.log(result);

      buffer.createAndWrite(result.nativeArray, gpuUsage);
      buffer.setStrideInBytes(_Types_js__WEBPACK_IMPORTED_MODULE_4__["default"].getByteStrideFromBufferFormat(req.format));
      buffer.setArrayInformation([{
        offset: 0,
        format: req.format
      }]);
    } // handle normals from points, snorm8x4


    if (req.usage === BufferUsage.NormalsFromPoints) {
      gpuUsage = GPUBufferUsage.VERTEX;
      var normals = generateNormals(req.cells, req.primitiveType, req.representation, req.dataArray);
      buffer.createAndWrite(normals, gpuUsage);
      buffer.setStrideInBytes(_Types_js__WEBPACK_IMPORTED_MODULE_4__["default"].getByteStrideFromBufferFormat(req.format));
      buffer.setArrayInformation([{
        offset: 0,
        format: req.format
      }]);
    }

    if (req.usage === BufferUsage.RawVertex) {
      gpuUsage = GPUBufferUsage.VERTEX;
      buffer.createAndWrite(req.nativeArray, gpuUsage);
      buffer.setStrideInBytes(_Types_js__WEBPACK_IMPORTED_MODULE_4__["default"].getByteStrideFromBufferFormat(req.format));
      buffer.setArrayInformation([{
        offset: 0,
        format: req.format
      }]);
    }

    buffer.setSourceTime(req.time); // cache the buffer if we have a dataArray.
    // We create a new req that only has the 4 fields required for
    // a comparison to avoid GC cycles

    if (req.source) {
      if (!model.buffers.has(req.source)) {
        model.buffers.set(req.source, []);
      }

      var _dabuffers = model.buffers.get(req.source);

      _dabuffers.push({
        request: {
          time: req.time,
          format: req.format,
          usage: req.usage,
          hash: req.hash
        },
        buffer: buffer
      });
    }

    return buffer;
  };

  publicAPI.getFullScreenQuadBuffer = function () {
    if (model.fullScreenQuadBuffer) {
      return model.fullScreenQuadBuffer;
    }

    model.fullScreenQuadBuffer = _Buffer_js__WEBPACK_IMPORTED_MODULE_3__["default"].newInstance();
    model.fullScreenQuadBuffer.setDevice(model.device); // prettier-ignore

    var array = new Float32Array([-1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0]);
    model.fullScreenQuadBuffer.createAndWrite(array, GPUBufferUsage.VERTEX);
    model.fullScreenQuadBuffer.setStrideInBytes(12);
    model.fullScreenQuadBuffer.setArrayInformation([{
      offset: 0,
      format: 'float32x3'
    }]);
    return model.fullScreenQuadBuffer;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  device: null,
  fullScreenQuadBuffer: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods

  (0,_macros_js__WEBPACK_IMPORTED_MODULE_1__.obj)(publicAPI, model); // this is a cache, and a cache with GC pretty much means WeakMap

  model.buffers = new WeakMap();
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_1__.setGet)(publicAPI, model, ['device']);
  vtkWebGPUBufferManager(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = (0,_macros_js__WEBPACK_IMPORTED_MODULE_1__.newInstance)(extend); // ----------------------------------------------------------------------------

var vtkWebGPUBufferManager$1 = _objectSpread(_objectSpread({
  newInstance: newInstance,
  extend: extend
}, STATIC), _BufferManager_Constants_js__WEBPACK_IMPORTED_MODULE_6__["default"]);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/BufferManager/Constants.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/WebGPU/BufferManager/Constants.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BufferUsage": () => (/* binding */ BufferUsage),
/* harmony export */   "PrimitiveTypes": () => (/* binding */ PrimitiveTypes),
/* harmony export */   "default": () => (/* binding */ Constants)
/* harmony export */ });
var BufferUsage = {
  Verts: 0,
  Lines: 1,
  Triangles: 2,
  Strips: 3,
  LinesFromStrips: 4,
  LinesFromTriangles: 5,
  Points: 6,
  UniformArray: 7,
  PointArray: 8,
  NormalsFromPoints: 9,
  Texture: 10,
  RawVertex: 11,
  Storage: 12
};
var PrimitiveTypes = {
  Start: 0,
  Points: 0,
  Lines: 1,
  Triangles: 2,
  TriangleStrips: 3,
  TriangleEdges: 4,
  TriangleStripEdges: 5,
  End: 6
};
var Constants = {
  BufferUsage: BufferUsage,
  PrimitiveTypes: PrimitiveTypes
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/Camera.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/WebGPU/Camera.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ index),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../SceneGraph/ViewNode.js */ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/ViewNode.js");
/* harmony import */ var _ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ViewNodeFactory.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/ViewNodeFactory.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js");





// vtkWebGPUCamera methods
// ----------------------------------------------------------------------------

function vtkWebGPUCamera(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkWebGPUCamera');

  publicAPI.getKeyMatrices = function (webGPURenderer) {
    // has the camera changed?
    var ren = webGPURenderer.getRenderable();
    var webGPURenderWindow = webGPURenderer.getParent();

    if (Math.max(webGPURenderWindow.getMTime(), publicAPI.getMTime(), ren.getMTime(), model.renderable.getMTime(), webGPURenderer.getStabilizedTime()) > model.keyMatrixTime.getMTime()) {
      var wcvc = model.renderable.getViewMatrix();
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.d)(model.keyMatrices.normalMatrix, wcvc); // zero out translation

      model.keyMatrices.normalMatrix[3] = 0.0;
      model.keyMatrices.normalMatrix[7] = 0.0;
      model.keyMatrices.normalMatrix[11] = 0.0;
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.g)(model.keyMatrices.normalMatrix, model.keyMatrices.normalMatrix);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.j)(model.keyMatrices.wcvc, wcvc);
      var center = webGPURenderer.getStabilizedCenterByReference();
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.t)(model.keyMatrices.scvc, model.keyMatrices.wcvc, center);
      var aspectRatio = webGPURenderer.getAspectRatio();
      var vcpc = model.renderable.getProjectionMatrix(aspectRatio, -1, 1);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.j)(model.keyMatrices.vcpc, vcpc); // adjust due to WebGPU using a different coordinate system in Z

      model.keyMatrices.vcpc[2] = 0.5 * vcpc[8] + 0.5 * vcpc[12];
      model.keyMatrices.vcpc[6] = 0.5 * vcpc[9] + 0.5 * vcpc[13];
      model.keyMatrices.vcpc[10] = 0.5 * vcpc[10] + 0.5 * vcpc[14];
      model.keyMatrices.vcpc[14] = 0.5 * vcpc[11] + 0.5 * vcpc[15];
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.m)(model.keyMatrices.scpc, model.keyMatrices.vcpc, model.keyMatrices.scvc);
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.g)(model.keyMatrices.pcsc, model.keyMatrices.scpc);
      model.keyMatrixTime.modified();
    }

    return model.keyMatrices;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  keyMatrixTime: null,
  keyMatrices: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues);
  model.keyMatrixTime = {};
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(model.keyMatrixTime); // values always get set by the get method

  model.keyMatrices = {
    normalMatrix: new Float64Array(16),
    vcpc: new Float64Array(16),
    pcsc: new Float64Array(16),
    wcvc: new Float64Array(16),
    scpc: new Float64Array(16),
    scvc: new Float64Array(16)
  }; // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['keyMatrixTime']); // Object methods

  vtkWebGPUCamera(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend); // ----------------------------------------------------------------------------

var index = {
  newInstance: newInstance,
  extend: extend
}; // Register ourself to WebGPU backend if imported

(0,_ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_2__.registerOverride)('vtkCamera', newInstance);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/FullScreenQuad.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/WebGPU/FullScreenQuad.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkWebGPUFullScreenQuad$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _ShaderCache_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ShaderCache.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/ShaderCache.js");
/* harmony import */ var _MapperHelper_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./MapperHelper.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/MapperHelper.js");




// vtkWebGPUFullScreenQuad methods
// ----------------------------------------------------------------------------

function vtkWebGPUFullScreenQuad(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkWebGPUFullScreenQuad');

  publicAPI.replaceShaderPosition = function (hash, pipeline, vertexInput) {
    var vDesc = pipeline.getShaderDescription('vertex');
    vDesc.addBuiltinOutput('vec4<f32>', '[[builtin(position)]] Position');
    var code = vDesc.getCode();
    code = _ShaderCache_js__WEBPACK_IMPORTED_MODULE_1__["default"].substitute(code, '//VTK::Position::Impl', ['output.tcoordVS = vec2<f32>(vertexBC.x * 0.5 + 0.5, 1.0 - vertexBC.y * 0.5 - 0.5);', 'output.Position = vec4<f32>(vertexBC, 1.0);']).result;
    vDesc.setCode(code);
  };

  model.shaderReplacements.set('replaceShaderPosition', publicAPI.replaceShaderPosition);
  var superclassBuild = publicAPI.build;

  publicAPI.build = function (renderEncoder, device) {
    var buff = device.getBufferManager().getFullScreenQuadBuffer();
    model.vertexInput.addBuffer(buff, ['vertexBC']);
    model.numberOfVertices = 6;
    superclassBuild(renderEncoder, device);
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _MapperHelper_js__WEBPACK_IMPORTED_MODULE_2__["default"].extend(publicAPI, model, initialValues); // Object methods

  vtkWebGPUFullScreenQuad(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkWebGPUFullScreenQuad'); // ----------------------------------------------------------------------------

var vtkWebGPUFullScreenQuad$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/MapperHelper.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/WebGPU/MapperHelper.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkWebGPUMapperHelper$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _BindGroup_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./BindGroup.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/BindGroup.js");
/* harmony import */ var _Pipeline_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Pipeline.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/Pipeline.js");
/* harmony import */ var _ShaderCache_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ShaderCache.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/ShaderCache.js");
/* harmony import */ var _ShaderDescription_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./ShaderDescription.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/ShaderDescription.js");
/* harmony import */ var _VertexInput_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./VertexInput.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/VertexInput.js");







var vtkWebGPUMapperHelperVS = "\n//VTK::Renderer::Dec\n\n//VTK::Color::Dec\n\n//VTK::Normal::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::Select::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::IOStructs::Dec\n\n[[stage(vertex)]]\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output : vertexOutput;\n\n  // var vertex: vec4<f32> = vertexBC;\n\n  //VTK::Color::Impl\n\n  //VTK::Normal::Impl\n\n  //VTK::TCoord::Impl\n\n  //VTK::Select::Impl\n\n  //VTK::Position::Impl\n\n  return output;\n}\n";
var vtkWebGPUMapperHelperFS = "\n//VTK::Renderer::Dec\n\n//VTK::Color::Dec\n\n//VTK::Normal::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::Select::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::IOStructs::Dec\n\n[[stage(fragment)]]\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output : fragmentOutput;\n\n  //VTK::Color::Impl\n\n  //VTK::Normal::Impl\n\n  //VTK::Light::Impl\n\n  //VTK::TCoord::Impl\n\n  //VTK::Select::Impl\n\n  // var computedColor:vec4<f32> = vec4<f32>(1.0,0.5,0.5,1.0);\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n"; // ----------------------------------------------------------------------------
// vtkWebGPUMapperHelper methods
// ----------------------------------------------------------------------------

function vtkWebGPUMapperHelper(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkWebGPUMapperHelper');

  publicAPI.generateShaderDescriptions = function (hash, pipeline, vertexInput) {
    // create the shader descriptions
    var vDesc = _ShaderDescription_js__WEBPACK_IMPORTED_MODULE_4__["default"].newInstance({
      type: 'vertex',
      hash: hash,
      code: model.vertexShaderTemplate
    });
    var fDesc = _ShaderDescription_js__WEBPACK_IMPORTED_MODULE_4__["default"].newInstance({
      type: 'fragment',
      hash: hash,
      code: model.fragmentShaderTemplate
    }); // add them to the pipeline

    var sdrs = pipeline.getShaderDescriptions();
    sdrs.push(vDesc);
    sdrs.push(fDesc); // look for replacements to invoke

    var scode = model.vertexShaderTemplate + model.fragmentShaderTemplate;
    var re = new RegExp('//VTK::[^:]*::', 'g');
    var unique = scode.match(re).filter(function (v, i, a) {
      return a.indexOf(v) === i;
    });
    var fnames = unique.map(function (v) {
      return "replaceShader".concat(v.substring(7, v.length - 2));
    }); // now invoke shader replacement functions

    for (var i = 0; i < fnames.length; i++) {
      var fname = fnames[i];

      if (fname !== 'replaceShaderIOStructs' && model.shaderReplacements.has(fname)) {
        model.shaderReplacements.get(fname)(hash, pipeline, vertexInput);
      }
    } // always replace the IOStructs last as other replacement funcs may
    // add inputs or outputs


    publicAPI.replaceShaderIOStructs(hash, pipeline, vertexInput); // console.log(vDesc.getCode());
    // console.log(fDesc.getCode());
  };

  publicAPI.replaceShaderIOStructs = function (hash, pipeline, vertexInput) {
    var vDesc = pipeline.getShaderDescription('vertex');
    vDesc.replaceShaderCode(null, vertexInput);
    var fDesc = pipeline.getShaderDescription('fragment');
    fDesc.replaceShaderCode(vDesc);
  };

  publicAPI.replaceShaderRenderEncoder = function (hash, pipeline, vertexInput) {
    model.renderEncoder.replaceShaderCode(pipeline);
  };

  model.shaderReplacements.set('replaceShaderRenderEncoder', publicAPI.replaceShaderRenderEncoder);

  publicAPI.replaceShaderRenderer = function (hash, pipeline, vertexInput) {
    if (!model.WebGPURenderer) {
      return;
    }

    var ubocode = model.WebGPURenderer.getBindGroup().getShaderCode(pipeline);
    var vDesc = pipeline.getShaderDescription('vertex');
    var code = vDesc.getCode();
    code = _ShaderCache_js__WEBPACK_IMPORTED_MODULE_3__["default"].substitute(code, '//VTK::Renderer::Dec', [ubocode]).result;
    vDesc.setCode(code);
    var fDesc = pipeline.getShaderDescription('fragment');
    code = fDesc.getCode();
    code = _ShaderCache_js__WEBPACK_IMPORTED_MODULE_3__["default"].substitute(code, '//VTK::Renderer::Dec', [ubocode]).result;
    fDesc.setCode(code);
  };

  model.shaderReplacements.set('replaceShaderRenderer', publicAPI.replaceShaderRenderer);

  publicAPI.replaceShaderMapper = function (hash, pipeline, vertexInput) {
    var ubocode = model.bindGroup.getShaderCode(pipeline);
    var vDesc = pipeline.getShaderDescription('vertex');
    var code = vDesc.getCode();
    code = _ShaderCache_js__WEBPACK_IMPORTED_MODULE_3__["default"].substitute(code, '//VTK::Mapper::Dec', [ubocode]).result;
    vDesc.setCode(code);
    var fDesc = pipeline.getShaderDescription('fragment');
    fDesc.addBuiltinInput('bool', '[[builtin(front_facing)]] frontFacing');
    code = fDesc.getCode();
    code = _ShaderCache_js__WEBPACK_IMPORTED_MODULE_3__["default"].substitute(code, '//VTK::Mapper::Dec', [ubocode]).result;
    fDesc.setCode(code);
  };

  model.shaderReplacements.set('replaceShaderMapper', publicAPI.replaceShaderMapper);

  publicAPI.replaceShaderPosition = function (hash, pipeline, vertexInput) {
    var vDesc = pipeline.getShaderDescription('vertex');
    vDesc.addBuiltinOutput('vec4<f32>', '[[builtin(position)]] Position');
    var code = vDesc.getCode();
    code = _ShaderCache_js__WEBPACK_IMPORTED_MODULE_3__["default"].substitute(code, '//VTK::Position::Impl', ['    output.Position = rendererUBO.SCPCMatrix*vertexBC;']).result;
    vDesc.setCode(code);
  };

  model.shaderReplacements.set('replaceShaderPosition', publicAPI.replaceShaderPosition);

  publicAPI.replaceShaderTCoord = function (hash, pipeline, vertexInput) {
    var vDesc = pipeline.getShaderDescription('vertex');
    vDesc.addOutput('vec2<f32>', 'tcoordVS');
  };

  model.shaderReplacements.set('replaceShaderTCoord', publicAPI.replaceShaderTCoord);

  publicAPI.addTextureView = function (view) {
    // is it already there?
    if (model.textureViews.includes(view)) {
      return;
    }

    model.textureViews.push(view);
  };

  publicAPI.renderForPipeline = function (renderEncoder) {
    var pipeline = renderEncoder.getBoundPipeline(); // bind the mapper bind group

    renderEncoder.activateBindGroup(model.bindGroup); // bind the vertex input

    pipeline.bindVertexInput(renderEncoder, model.vertexInput);
    renderEncoder.draw(model.numberOfVertices, model.numberOfInstances, 0, 0);
  };

  publicAPI.registerToDraw = function () {
    if (model.pipeline) {
      model.WebGPURenderer.registerPipelineCallback(model.pipeline, publicAPI.renderForPipeline);
    }
  };

  publicAPI.render = function (renderEncoder, device) {
    publicAPI.build(renderEncoder, device);
    renderEncoder.setPipeline(model.pipeline);

    if (model.WebGPURenderer) {
      model.WebGPURenderer.bindUBO(renderEncoder);
    }

    publicAPI.renderForPipeline(renderEncoder);
  };

  publicAPI.getBindables = function () {
    var bindables = [];

    if (model.UBO) {
      bindables.push(model.UBO);
    }

    if (model.SSBO) {
      bindables.push(model.SSBO);
    } // add texture BindGroupLayouts


    for (var t = 0; t < model.textureViews.length; t++) {
      bindables.push(model.textureViews[t]);
      var samp = model.textureViews[t].getSampler();

      if (samp) {
        bindables.push(samp);
      }
    }

    return bindables;
  };

  publicAPI.build = function (renderEncoder, device) {
    // handle per primitive type
    model.renderEncoder = renderEncoder;
    model.pipeline = device.getPipeline(model.pipelineHash);
    model.bindGroup.setBindables(publicAPI.getBindables()); // build VBO for this primitive
    // build the pipeline if needed

    if (!model.pipeline) {
      model.pipeline = _Pipeline_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance();
      model.pipeline.setDevice(device);

      if (model.WebGPURenderer) {
        model.pipeline.addBindGroupLayout(model.WebGPURenderer.getBindGroup());
      }

      model.pipeline.addBindGroupLayout(model.bindGroup);
      publicAPI.generateShaderDescriptions(model.pipelineHash, model.pipeline, model.vertexInput);
      model.pipeline.setTopology(model.topology);
      model.pipeline.setRenderEncoder(renderEncoder);
      model.pipeline.setVertexState(model.vertexInput.getVertexInputInformation());
      device.createPipeline(model.pipelineHash, model.pipeline);
    }
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  bindGroup: null,
  device: null,
  fragmentShaderTemplate: null,
  numberOfInstances: 1,
  numberOfVertices: 0,
  pipelineHash: null,
  shaderReplacements: null,
  SSBO: null,
  textureViews: null,
  topology: 'triangle-list',
  UBO: null,
  vertexShaderTemplate: null,
  WebGPURenderer: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  model.textureViews = [];
  model.vertexInput = _VertexInput_js__WEBPACK_IMPORTED_MODULE_5__["default"].newInstance();
  model.bindGroup = _BindGroup_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance();
  model.bindGroup.setName('mapperBG');
  model.fragmentShaderTemplate = model.fragmentShaderTemplate || vtkWebGPUMapperHelperFS;
  model.vertexShaderTemplate = model.vertexShaderTemplate || vtkWebGPUMapperHelperVS;
  model.shaderReplacements = new Map(); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].get(publicAPI, model, ['vertexInput']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['device', 'fragmentShaderTemplate', 'interpolate', 'numberOfInstances', 'numberOfVertices', 'pipelineHash', 'shaderReplacements', 'SSBO', 'textureViews', 'topology', 'UBO', 'vertexShaderTemplate', 'WebGPURenderer']); // Object methods

  vtkWebGPUMapperHelper(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkWebGPUMapperHelper'); // ----------------------------------------------------------------------------

var vtkWebGPUMapperHelper$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/Pipeline.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/WebGPU/Pipeline.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkWebGPUPipeline$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");


// vtkWebGPUPipeline methods
// ----------------------------------------------------------------------------

function vtkWebGPUPipeline(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkWebGPUPipeline');

  publicAPI.getShaderDescriptions = function () {
    return model.shaderDescriptions;
  };

  publicAPI.initialize = function (device) {
    // start with the renderencoder settings
    model.pipelineDescription = model.renderEncoder.getPipelineSettings();
    model.pipelineDescription.primitive.topology = model.topology;
    model.pipelineDescription.vertex = model.vertexState; // add in bind group layouts

    var bindGroupLayouts = [];

    for (var i = 0; i < model.layouts.length; i++) {
      bindGroupLayouts.push(model.layouts[i].layout);
    }

    model.pipelineLayout = device.getHandle().createPipelineLayout({
      bindGroupLayouts: bindGroupLayouts
    });
    model.pipelineDescription.layout = model.pipelineLayout;

    for (var _i = 0; _i < model.shaderDescriptions.length; _i++) {
      var sd = model.shaderDescriptions[_i];
      var sm = device.getShaderModule(sd);

      if (sd.getType() === 'vertex') {
        model.pipelineDescription.vertex.module = sm.getHandle();
        model.pipelineDescription.vertex.entryPoint = 'main';
      }

      if (sd.getType() === 'fragment') {
        model.pipelineDescription.fragment.module = sm.getHandle();
        model.pipelineDescription.fragment.entryPoint = 'main';
      }
    }

    model.handle = device.getHandle().createRenderPipeline(model.pipelineDescription);
  };

  publicAPI.getShaderDescription = function (stype) {
    for (var i = 0; i < model.shaderDescriptions.length; i++) {
      if (model.shaderDescriptions[i].getType() === stype) return model.shaderDescriptions[i];
    }

    return null;
  };

  publicAPI.addBindGroupLayout = function (bindGroup) {
    if (!bindGroup) {
      return;
    }

    model.layouts.push({
      layout: bindGroup.getBindGroupLayout(model.device),
      name: bindGroup.getName()
    });
  };

  publicAPI.getBindGroupLayout = function (idx) {
    return model.layouts[idx].layout;
  };

  publicAPI.getBindGroupLayoutCount = function (lname) {
    for (var i = 0; i < model.layouts.length; i++) {
      if (model.layouts[i].name === lname) {
        return i;
      }
    }

    return 0;
  };

  publicAPI.bindVertexInput = function (renderEncoder, vInput) {
    vInput.bindBuffers(renderEncoder);
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  handle: null,
  layouts: null,
  renderEncoder: null,
  shaderDescriptions: null,
  vertexState: null,
  topology: null,
  pipelineDescription: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.obj)(publicAPI, model);
  model.layouts = [];
  model.shaderDescriptions = [];
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.get)(publicAPI, model, ['handle', 'pipelineDescription']);
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.setGet)(publicAPI, model, ['device', 'renderEncoder', 'topology', 'vertexState']); // For more macro methods, see "Sources/macros.js"
  // Object specific methods

  vtkWebGPUPipeline(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.newInstance)(extend, 'vtkWebGPUPipeline'); // ----------------------------------------------------------------------------

var vtkWebGPUPipeline$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/PixelSpaceCallbackMapper.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/WebGPU/PixelSpaceCallbackMapper.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ index),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../SceneGraph/ViewNode.js */ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/ViewNode.js");
/* harmony import */ var _ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ViewNodeFactory.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/ViewNodeFactory.js");




// vtkWebGPUPixelSpaceCallbackMapper methods
// ----------------------------------------------------------------------------

function vtkWebGPUPixelSpaceCallbackMapper(publicAPI, model) {
  model.classHierarchy.push('vtkWebGPUPixelSpaceCallbackMapper');

  publicAPI.opaquePass = function (prepass, renderPass) {
    model.WebGPURenderer = publicAPI.getFirstAncestorOfType('vtkWebGPURenderer');
    model.WebGPURenderWindow = model.WebGPURenderer.getParent();
    var aspectRatio = model.WebGPURenderer.getAspectRatio();
    var camera = model.WebGPURenderer ? model.WebGPURenderer.getRenderable().getActiveCamera() : null;
    var tsize = model.WebGPURenderer.getTiledSizeAndOrigin();
    var texels = null;

    if (model.renderable.getUseZValues()) ;

    model.renderable.invokeCallback(model.renderable.getInputData(), camera, aspectRatio, tsize, texels);
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues); // Object methods

  vtkWebGPUPixelSpaceCallbackMapper(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkWebGPUPixelSpaceCallbackMapper'); // ----------------------------------------------------------------------------

var index = {
  newInstance: newInstance,
  extend: extend
}; // Register ourself to WebGPU backend if imported

(0,_ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_2__.registerOverride)('vtkPixelSpaceCallbackMapper', newInstance);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/PolyDataMapper.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/WebGPU/PolyDataMapper.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkWebGPUPolyDataMapper$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Core_Mapper_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Core/Mapper.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Mapper.js");
/* harmony import */ var _Core_Property_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Core/Property.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Property.js");
/* harmony import */ var _Core_Texture_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Core/Texture.js */ "./node_modules/@kitware/vtk.js/Rendering/Core/Texture.js");
/* harmony import */ var _BufferManager_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./BufferManager.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/BufferManager.js");
/* harmony import */ var _ShaderCache_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ShaderCache.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/ShaderCache.js");
/* harmony import */ var _UniformBuffer_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./UniformBuffer.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/UniformBuffer.js");
/* harmony import */ var _MapperHelper_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./MapperHelper.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/MapperHelper.js");
/* harmony import */ var _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../SceneGraph/ViewNode.js */ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/ViewNode.js");
/* harmony import */ var _ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ViewNodeFactory.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/ViewNodeFactory.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat3_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat3.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat3.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js");













var BufferUsage = _BufferManager_js__WEBPACK_IMPORTED_MODULE_4__["default"].BufferUsage,
    PrimitiveTypes = _BufferManager_js__WEBPACK_IMPORTED_MODULE_4__["default"].PrimitiveTypes;
var Representation = _Core_Property_js__WEBPACK_IMPORTED_MODULE_2__["default"].Representation;
var ScalarMode = _Core_Mapper_js__WEBPACK_IMPORTED_MODULE_1__["default"].ScalarMode;
var StartEvent = {
  type: 'StartEvent'
};
var EndEvent = {
  type: 'EndEvent'
};
var vtkWebGPUPolyDataVS = "\n//VTK::Renderer::Dec\n\n//VTK::Color::Dec\n\n//VTK::Normal::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::Select::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::IOStructs::Dec\n\n[[stage(vertex)]]\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output : vertexOutput;\n\n  var vertex: vec4<f32> = vertexBC;\n\n  //VTK::Color::Impl\n\n  //VTK::Normal::Impl\n\n  //VTK::TCoord::Impl\n\n  //VTK::Select::Impl\n\n  //VTK::Position::Impl\n\n  return output;\n}\n";
var vtkWebGPUPolyDataFS = "\n//VTK::Renderer::Dec\n\n//VTK::Color::Dec\n\n// optional surface normal declaration\n//VTK::Normal::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::Select::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::IOStructs::Dec\n\n[[stage(fragment)]]\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output : fragmentOutput;\n\n  var ambientColor: vec4<f32> = mapperUBO.AmbientColor;\n  var diffuseColor: vec4<f32> = mapperUBO.DiffuseColor;\n  var opacity: f32 = mapperUBO.Opacity;\n\n  //VTK::Color::Impl\n\n  //VTK::Normal::Impl\n\n  //VTK::Light::Impl\n\n  var computedColor: vec4<f32> = vec4<f32>(ambientColor.rgb * mapperUBO.AmbientIntensity\n     + diffuse * mapperUBO.DiffuseIntensity\n     + specular * mapperUBO.SpecularIntensity,\n     opacity);\n\n  //VTK::TCoord::Impl\n\n  //VTK::Select::Impl\n\n  if (computedColor.a == 0.0) { discard; };\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n"; // ----------------------------------------------------------------------------
// vtkWebGPUPolyDataMapper methods
// ----------------------------------------------------------------------------

function vtkWebGPUPolyDataMapper(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkWebGPUPolyDataMapper');

  publicAPI.buildPass = function (prepass) {
    if (prepass) {
      model.WebGPUActor = publicAPI.getFirstAncestorOfType('vtkWebGPUActor');
      model.WebGPURenderer = model.WebGPUActor.getFirstAncestorOfType('vtkWebGPURenderer');
      model.WebGPURenderWindow = model.WebGPURenderer.getParent();
      model.device = model.WebGPURenderWindow.getDevice();
    }
  }; // Renders myself


  publicAPI.translucentPass = function (prepass) {
    if (prepass) {
      publicAPI.render();
    }
  };

  publicAPI.opaquePass = function (prepass) {
    if (prepass) {
      publicAPI.render();
    }
  };

  publicAPI.updateUBO = function () {
    // make sure the data is up to date
    var actor = model.WebGPUActor.getRenderable();
    var ppty = actor.getProperty();
    var utime = model.UBO.getSendTime();

    if (publicAPI.getMTime() > utime || ppty.getMTime() > utime || model.renderable.getMTime() > utime) {
      var keyMats = model.WebGPUActor.getKeyMatrices(model.WebGPURenderer);
      model.UBO.setArray('BCWCMatrix', keyMats.bcwc);
      model.UBO.setArray('BCSCMatrix', keyMats.bcsc);
      model.UBO.setArray('MCWCNormals', keyMats.normalMatrix);
      var aColor = ppty.getAmbientColorByReference();
      model.UBO.setValue('AmbientIntensity', ppty.getAmbient());
      model.UBO.setArray('AmbientColor', [aColor[0], aColor[1], aColor[2], 1.0]);
      model.UBO.setValue('DiffuseIntensity', ppty.getDiffuse());
      aColor = ppty.getDiffuseColorByReference();
      model.UBO.setArray('DiffuseColor', [aColor[0], aColor[1], aColor[2], 1.0]);
      model.UBO.setValue('SpecularIntensity', ppty.getSpecular());
      model.UBO.setValue('SpecularPower', ppty.getSpecularPower());
      aColor = ppty.getSpecularColorByReference();
      model.UBO.setArray('SpecularColor', [aColor[0], aColor[1], aColor[2], 1.0]);
      model.UBO.setValue('Opacity', ppty.getOpacity());
      model.UBO.setValue('PropID', model.WebGPUActor.getPropID());
      var device = model.WebGPURenderWindow.getDevice();
      model.UBO.sendIfNeeded(device);
    }
  };

  publicAPI.render = function () {
    publicAPI.invokeEvent(StartEvent);

    if (!model.renderable.getStatic()) {
      model.renderable.update();
    }

    model.currentInput = model.renderable.getInputData();
    publicAPI.invokeEvent(EndEvent);
    model.renderEncoder = model.WebGPURenderer.getRenderEncoder();
    publicAPI.buildPrimitives(); // update descriptor sets

    publicAPI.updateUBO();
  };

  publicAPI.replaceShaderPosition = function (hash, pipeline, vertexInput) {
    var vDesc = pipeline.getShaderDescription('vertex');
    vDesc.addBuiltinOutput('vec4<f32>', '[[builtin(position)]] Position');
    var code = vDesc.getCode();
    code = _ShaderCache_js__WEBPACK_IMPORTED_MODULE_5__["default"].substitute(code, '//VTK::Position::Impl', ['    output.Position = rendererUBO.SCPCMatrix*mapperUBO.BCSCMatrix*vertexBC;']).result;
    vDesc.setCode(code);
  };

  publicAPI.replaceShaderNormal = function (hash, pipeline, vertexInput) {
    if (vertexInput.hasAttribute('normalMC')) {
      var vDesc = pipeline.getShaderDescription('vertex');
      vDesc.addOutput('vec3<f32>', 'normalVC');
      var code = vDesc.getCode();
      code = _ShaderCache_js__WEBPACK_IMPORTED_MODULE_5__["default"].substitute(code, '//VTK::Normal::Impl', ['  output.normalVC = normalize((rendererUBO.WCVCNormals * mapperUBO.MCWCNormals * normalMC).xyz);']).result;
      vDesc.setCode(code);
      var fDesc = pipeline.getShaderDescription('fragment');
      code = fDesc.getCode();
      code = _ShaderCache_js__WEBPACK_IMPORTED_MODULE_5__["default"].substitute(code, '//VTK::Normal::Impl', ['  var normal: vec3<f32> = input.normalVC;', '  if (!input.frontFacing) { normal = -normal; }']).result;
      fDesc.setCode(code);
    }
  }; // we only apply lighting when there is a "var normal" declaration in the
  // fragment shader code. That is the lighting trigger.


  publicAPI.replaceShaderLight = function (hash, pipeline, vertexInput) {
    var fDesc = pipeline.getShaderDescription('fragment');
    var code = fDesc.getCode();

    if (code.includes('var normal')) {
      code = _ShaderCache_js__WEBPACK_IMPORTED_MODULE_5__["default"].substitute(code, '//VTK::Light::Impl', ['  var df: f32  = max(0.0, normal.z);', '  var sf: f32 = pow(df, mapperUBO.SpecularPower);', '  var diffuse: vec3<f32> = df * diffuseColor.rgb;', '  var specular: vec3<f32> = sf * mapperUBO.SpecularColor.rgb * mapperUBO.SpecularColor.a;']).result;
      fDesc.setCode(code);
    } else {
      code = _ShaderCache_js__WEBPACK_IMPORTED_MODULE_5__["default"].substitute(code, '//VTK::Light::Impl', ['  var diffuse: vec3<f32> = diffuseColor.rgb;', '  var specular: vec3<f32> = mapperUBO.SpecularColor.rgb * mapperUBO.SpecularColor.a;']).result;
      fDesc.setCode(code);
    }
  };

  publicAPI.replaceShaderColor = function (hash, pipeline, vertexInput) {
    if (!vertexInput.hasAttribute('colorVI')) return;
    var vDesc = pipeline.getShaderDescription('vertex');
    vDesc.addOutput('vec4<f32>', 'color');
    var code = vDesc.getCode();
    code = _ShaderCache_js__WEBPACK_IMPORTED_MODULE_5__["default"].substitute(code, '//VTK::Color::Impl', ['  output.color = colorVI;']).result;
    vDesc.setCode(code);
    var fDesc = pipeline.getShaderDescription('fragment');
    code = fDesc.getCode();
    code = _ShaderCache_js__WEBPACK_IMPORTED_MODULE_5__["default"].substitute(code, '//VTK::Color::Impl', ['ambientColor = input.color;', 'diffuseColor = input.color;', 'opacity = mapperUBO.Opacity * input.color.a;']).result;
    fDesc.setCode(code);
  };

  publicAPI.replaceShaderTCoord = function (hash, pipeline, vertexInput) {
    if (!vertexInput.hasAttribute('tcoord')) return;
    var vDesc = pipeline.getShaderDescription('vertex');
    vDesc.addOutput('vec2<f32>', 'tcoordVS');
    var code = vDesc.getCode();
    code = _ShaderCache_js__WEBPACK_IMPORTED_MODULE_5__["default"].substitute(code, '//VTK::TCoord::Impl', ['  output.tcoordVS = tcoord;']).result;
    vDesc.setCode(code);
    var fDesc = pipeline.getShaderDescription('fragment');
    code = fDesc.getCode(); // todo handle multiple textures? Blend multiply ?

    if (model.textures.length) {
      code = _ShaderCache_js__WEBPACK_IMPORTED_MODULE_5__["default"].substitute(code, '//VTK::TCoord::Impl', ['var tcolor: vec4<f32> = textureSample(Texture0, Texture0Sampler, input.tcoordVS);', 'computedColor = computedColor*tcolor;']).result;
    }

    fDesc.setCode(code);
  };

  publicAPI.replaceShaderSelect = function (hash, pipeline, vertexInput) {
    if (hash.includes('sel')) {
      var fDesc = pipeline.getShaderDescription('fragment');
      var code = fDesc.getCode(); // by default there are no composites, so just 0

      code = _ShaderCache_js__WEBPACK_IMPORTED_MODULE_5__["default"].substitute(code, '//VTK::Select::Impl', ['  var compositeID: u32 = 0u;']).result;
      fDesc.setCode(code);
    }
  };

  publicAPI.getUsage = function (rep, i) {
    if (rep === Representation.POINTS || i === 0) {
      return BufferUsage.Verts;
    }

    if (i === 1) {
      return BufferUsage.Lines;
    }

    if (rep === Representation.WIREFRAME) {
      if (i === 2) {
        return BufferUsage.LinesFromTriangles;
      }

      return BufferUsage.LinesFromStrips;
    }

    if (i === 2) {
      return BufferUsage.Triangles;
    }

    return BufferUsage.Strips;
  };

  publicAPI.getHashFromUsage = function (usage) {
    return "pt".concat(usage);
  };

  publicAPI.getTopologyFromUsage = function (usage) {
    switch (usage) {
      case BufferUsage.Triangles:
        return 'triangle-list';

      case BufferUsage.Verts:
        return 'point-list';

      default:
      case BufferUsage.Lines:
        return 'line-list';
    }
  };

  publicAPI.buildVertexInput = function (pd, cells, primType) {
    var actor = model.WebGPUActor.getRenderable();
    var representation = actor.getProperty().getRepresentation();
    var device = model.WebGPURenderWindow.getDevice();
    var vertexInput = model.primitives[primType].getVertexInput(); // hash = all things that can change the values on the buffer
    // since mtimes are unique we can use
    // - cells mtime - because cells drive how we pack
    // - rep (point/wireframe/surface) - again because of packing
    // - relevant dataArray mtime - the source data
    // - shift - not currently captured
    // - scale - not currently captured
    // - format
    // - usage
    // - packExtra - covered by format
    // - prim type (vert/lines/polys/strips) - covered by cells mtime

    var hash = cells.getMTime() + representation; // points

    var points = pd.getPoints();

    if (points) {
      var shift = model.WebGPUActor.getBufferShift(model.WebGPURenderer);
      var buffRequest = {
        hash: hash + points.getMTime(),
        dataArray: points,
        source: points,
        cells: cells,
        primitiveType: primType,
        representation: representation,
        time: Math.max(points.getMTime(), cells.getMTime(), model.WebGPUActor.getKeyMatricesTime().getMTime()),
        shift: shift,
        usage: BufferUsage.PointArray,
        format: 'float32x4',
        packExtra: true
      };
      var buff = device.getBufferManager().getBuffer(buffRequest);
      vertexInput.addBuffer(buff, ['vertexBC']);
    } else {
      vertexInput.removeBufferIfPresent('vertexBC');
    } // normals, only used for surface rendering


    var usage = publicAPI.getUsage(representation, primType);

    if (usage === BufferUsage.Triangles || usage === BufferUsage.Strips) {
      var normals = pd.getPointData().getNormals();
      var _buffRequest = {
        cells: cells,
        representation: representation,
        primitiveType: primType,
        format: 'snorm8x4',
        packExtra: true,
        shift: 0,
        scale: 127
      };

      if (normals) {
        _buffRequest.hash = hash + normals.getMTime();
        _buffRequest.dataArray = normals;
        _buffRequest.source = normals;
        _buffRequest.time = Math.max(normals.getMTime(), cells.getMTime());
        _buffRequest.usage = BufferUsage.PointArray;

        var _buff = device.getBufferManager().getBuffer(_buffRequest);

        vertexInput.addBuffer(_buff, ['normalMC']);
      } else if (primType === PrimitiveTypes.Triangles) {
        _buffRequest.hash = hash + points.getMTime();
        _buffRequest.dataArray = points;
        _buffRequest.source = points;
        _buffRequest.time = Math.max(points.getMTime(), cells.getMTime());
        _buffRequest.usage = BufferUsage.NormalsFromPoints;

        var _buff2 = device.getBufferManager().getBuffer(_buffRequest);

        vertexInput.addBuffer(_buff2, ['normalMC']);
      } else {
        vertexInput.removeBufferIfPresent('normalMC');
      }
    } else {
      vertexInput.removeBufferIfPresent('normalMC');
    } // deal with colors but only if modified


    var haveColors = false;

    if (model.renderable.getScalarVisibility()) {
      var c = model.renderable.getColorMapColors();

      if (c) {
        var scalarMode = model.renderable.getScalarMode();
        var haveCellScalars = false; // We must figure out how the scalars should be mapped to the polydata.

        if ((scalarMode === ScalarMode.USE_CELL_DATA || scalarMode === ScalarMode.USE_CELL_FIELD_DATA || scalarMode === ScalarMode.USE_FIELD_DATA || !pd.getPointData().getScalars()) && scalarMode !== ScalarMode.USE_POINT_FIELD_DATA && c) {
          haveCellScalars = true;
        }

        var _buffRequest2 = {
          hash: hash + points.getMTime(),
          dataArray: c,
          source: c,
          cells: cells,
          primitiveType: primType,
          representation: representation,
          time: Math.max(c.getMTime(), cells.getMTime()),
          usage: BufferUsage.PointArray,
          format: 'unorm8x4',
          cellData: haveCellScalars,
          cellOffset: 0
        };

        var _buff3 = device.getBufferManager().getBuffer(_buffRequest2);

        vertexInput.addBuffer(_buff3, ['colorVI']);
        haveColors = true;
      }
    }

    if (!haveColors) {
      vertexInput.removeBufferIfPresent('colorVI');
    }

    var tcoords = null;

    if (model.renderable.getInterpolateScalarsBeforeMapping() && model.renderable.getColorCoordinates()) {
      tcoords = model.renderable.getColorCoordinates();
    } else {
      tcoords = pd.getPointData().getTCoords();
    }

    if (tcoords) {
      var _buffRequest3 = {
        hash: hash + tcoords.getMTime(),
        dataArray: tcoords,
        source: tcoords,
        cells: cells,
        primitiveType: primType,
        representation: representation,
        time: Math.max(tcoords.getMTime(), cells.getMTime()),
        usage: BufferUsage.PointArray,
        format: 'float32x2'
      };

      var _buff4 = device.getBufferManager().getBuffer(_buffRequest3);

      vertexInput.addBuffer(_buff4, ['tcoord']);
    } else {
      vertexInput.removeBufferIfPresent('tcoord');
    }
  };

  publicAPI.updateTextures = function () {
    // we keep track of new and used textures so
    // that we can clean up any unused textures so we don't hold onto them
    var usedTextures = [];
    var newTextures = []; // do we have a scalar color texture

    var idata = model.renderable.getColorTextureMap(); // returns an imagedata

    if (idata) {
      if (!model.colorTexture) {
        model.colorTexture = _Core_Texture_js__WEBPACK_IMPORTED_MODULE_3__["default"].newInstance();
      }

      model.colorTexture.setInputData(idata);
      newTextures.push(model.colorTexture);
    } // actor textures?


    var actor = model.WebGPUActor.getRenderable();
    var textures = actor.getTextures();

    for (var i = 0; i < textures.length; i++) {
      if (textures[i].getInputData()) {
        newTextures.push(textures[i]);
      }

      if (textures[i].getImage() && textures[i].getImageLoaded()) {
        newTextures.push(textures[i]);
      }
    }

    var usedCount = 0;

    for (var _i = 0; _i < newTextures.length; _i++) {
      var srcTexture = newTextures[_i];
      var treq = {};

      if (srcTexture.getInputData()) {
        treq.imageData = srcTexture.getInputData();
        treq.source = treq.imageData;
      } else if (srcTexture.getImage()) {
        treq.image = srcTexture.getImage();
        treq.source = treq.image;
      }

      var newTex = model.device.getTextureManager().getTexture(treq);

      if (newTex.getReady()) {
        // is this a new texture
        var found = false;

        for (var t = 0; t < model.textures.length; t++) {
          if (model.textures[t] === newTex) {
            usedCount++;
            found = true;
            usedTextures[t] = true;
          }
        }

        if (!found) {
          usedTextures[model.textures.length] = true;
          var tview = newTex.createView();
          tview.setName("Texture".concat(usedCount++));
          model.textures.push(newTex);
          model.textureViews.push(tview);
          var interpolate = srcTexture.getInterpolate() ? 'linear' : 'nearest';
          tview.addSampler(model.device, {
            minFilter: interpolate,
            magFilter: interpolate
          });
        }
      }
    } // remove unused textures


    for (var _i2 = model.textures.length - 1; _i2 >= 0; _i2--) {
      if (!usedTextures[_i2]) {
        model.textures.splice(_i2, 1);
        model.textureViews.splice(_i2, 1);
      }
    }
  }; // compute a unique hash for a pipeline, this needs to be unique enough to
  // capture any pipeline code changes (which includes shader changes)
  // or vertex input changes/ bind groups/ etc


  publicAPI.computePipelineHash = function (vertexInput, usage) {
    var pipelineHash = 'pd';

    if (vertexInput.hasAttribute("normalMC")) {
      pipelineHash += "n";
    }

    if (vertexInput.hasAttribute("colorVI")) {
      pipelineHash += "c";
    }

    if (vertexInput.hasAttribute("tcoord")) {
      pipelineHash += "t";
    }

    if (model.textures.length) {
      pipelineHash += "tx".concat(model.textures.length);
    }

    if (model.SSBO) {
      pipelineHash += "ssbo";
    }

    var uhash = publicAPI.getHashFromUsage(usage);
    pipelineHash += uhash;
    pipelineHash += model.renderEncoder.getPipelineHash();
    return pipelineHash;
  }; // was originally buildIBOs() but not using IBOs right now


  publicAPI.buildPrimitives = function () {
    var poly = model.currentInput;
    var prims = [poly.getVerts(), poly.getLines(), poly.getPolys(), poly.getStrips()];
    var device = model.WebGPURenderWindow.getDevice();
    model.renderable.mapScalars(poly, 1.0); // handle textures

    publicAPI.updateTextures(); // handle per primitive type

    for (var i = PrimitiveTypes.Points; i <= PrimitiveTypes.Triangles; i++) {
      if (prims[i].getNumberOfValues() > 0) {
        var actor = model.WebGPUActor.getRenderable();
        var rep = actor.getProperty().getRepresentation();
        var usage = publicAPI.getUsage(rep, i);
        var primHelper = model.primitives[i];
        publicAPI.buildVertexInput(model.currentInput, prims[i], i);
        primHelper.setPipelineHash(publicAPI.computePipelineHash(primHelper.getVertexInput(), usage));
        primHelper.setTextureViews(model.textureViews);
        primHelper.setWebGPURenderer(model.WebGPURenderer);
        primHelper.setNumberOfInstances(1);
        var vbo = primHelper.getVertexInput().getBuffer('vertexBC');
        primHelper.setNumberOfVertices(vbo.getSizeInBytes() / vbo.getStrideInBytes());
        primHelper.setTopology(publicAPI.getTopologyFromUsage(usage));
        primHelper.build(model.renderEncoder, device);
        primHelper.registerToDraw();
      }
    }
  };

  publicAPI.setShaderReplacement = function (name, func) {
    for (var i = PrimitiveTypes.Start; i < PrimitiveTypes.End; i++) {
      var sr = model.primitives[i].getShaderReplacements();
      sr.set(name, func);
    }
  };

  publicAPI.setFragmentShaderTemplate = function (val) {
    model.fragmentShaderTemplate = val;

    for (var i = PrimitiveTypes.Start; i < PrimitiveTypes.End; i++) {
      model.primitives[i].setFragmentShaderTemplate(val);
    }
  };

  publicAPI.setVertexShaderTemplate = function (val) {
    model.fragmentShaderTemplate = val;

    for (var i = PrimitiveTypes.Start; i < PrimitiveTypes.End; i++) {
      model.primitives[i].setVertexShaderTemplate(val);
    }
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  colorTexture: null,
  renderEncoder: null,
  textures: null,
  textureViews: null,
  primitives: null,
  tmpMat4: null,
  fragmentShaderTemplate: null,
  vertexShaderTemplate: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_8__["default"].extend(publicAPI, model, initialValues);
  model.tmpMat3 = (0,_vendor_gl_matrix_esm_mat3_js__WEBPACK_IMPORTED_MODULE_10__.i)(new Float64Array(9));
  model.tmpMat4 = (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_11__.i)(new Float64Array(16));
  model.fragmentShaderTemplate = model.fragmentShaderTemplate || vtkWebGPUPolyDataFS;
  model.vertexShaderTemplate = model.vertexShaderTemplate || vtkWebGPUPolyDataVS;
  model.UBO = _UniformBuffer_js__WEBPACK_IMPORTED_MODULE_6__["default"].newInstance();
  model.UBO.setName('mapperUBO');
  model.UBO.addEntry('BCWCMatrix', 'mat4x4<f32>');
  model.UBO.addEntry('BCSCMatrix', 'mat4x4<f32>');
  model.UBO.addEntry('MCWCNormals', 'mat4x4<f32>');
  model.UBO.addEntry('AmbientColor', 'vec4<f32>');
  model.UBO.addEntry('DiffuseColor', 'vec4<f32>');
  model.UBO.addEntry('AmbientIntensity', 'f32');
  model.UBO.addEntry('DiffuseIntensity', 'f32');
  model.UBO.addEntry('SpecularColor', 'vec4<f32>');
  model.UBO.addEntry('SpecularIntensity', 'f32');
  model.UBO.addEntry('Opacity', 'f32');
  model.UBO.addEntry('SpecularPower', 'f32');
  model.UBO.addEntry('PropID', 'u32'); // Build VTK API

  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.get)(publicAPI, model, ['fragmentShaderTemplate', 'vertexShaderTemplate', 'UBO']);
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.setGet)(publicAPI, model, ['renderEncoder']);
  model.textures = [];
  model.textureViews = [];
  model.primitives = []; // Object methods

  vtkWebGPUPolyDataMapper(publicAPI, model);

  for (var i = PrimitiveTypes.Start; i < PrimitiveTypes.End; i++) {
    model.primitives[i] = _MapperHelper_js__WEBPACK_IMPORTED_MODULE_7__["default"].newInstance();
    model.primitives[i].setUBO(model.UBO);
    model.primitives[i].setVertexShaderTemplate(publicAPI.getVertexShaderTemplate());
    model.primitives[i].setFragmentShaderTemplate(publicAPI.getFragmentShaderTemplate());
  }

  publicAPI.setShaderReplacement('replaceShaderPosition', publicAPI.replaceShaderPosition);
  publicAPI.setShaderReplacement('replaceShaderLight', publicAPI.replaceShaderLight);
  publicAPI.setShaderReplacement('replaceShaderTCoord', publicAPI.replaceShaderTCoord);
  publicAPI.setShaderReplacement('replaceShaderNormal', publicAPI.replaceShaderNormal);
  publicAPI.setShaderReplacement('replaceShaderSelect', publicAPI.replaceShaderSelect);
  publicAPI.setShaderReplacement('replaceShaderColor', publicAPI.replaceShaderColor);
} // ----------------------------------------------------------------------------

var newInstance = (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.newInstance)(extend, 'vtkWebGPUPolyDataMapper'); // ----------------------------------------------------------------------------

var vtkWebGPUPolyDataMapper$1 = {
  newInstance: newInstance,
  extend: extend
}; // Register ourself to WebGPU backend if imported

(0,_ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_9__.registerOverride)('vtkMapper', newInstance);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/Renderer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/WebGPU/Renderer.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ index),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../SceneGraph/ViewNode.js */ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/ViewNode.js");
/* harmony import */ var _BindGroup_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BindGroup.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/BindGroup.js");
/* harmony import */ var _FullScreenQuad_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./FullScreenQuad.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/FullScreenQuad.js");
/* harmony import */ var _UniformBuffer_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./UniformBuffer.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/UniformBuffer.js");
/* harmony import */ var _ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ViewNodeFactory.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/ViewNodeFactory.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js");
/* harmony import */ var _vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/vec3.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/vec3.js");









var vtkDebugMacro = _macros_js__WEBPACK_IMPORTED_MODULE_0__.vtkDebugMacro;
var clearFragTemplate = "\n//VTK::Renderer::Dec\n\n//VTK::Mapper::Dec\n\n//VTK::TCoord::Dec\n\n//VTK::RenderEncoder::Dec\n\n//VTK::IOStructs::Dec\n\n[[stage(fragment)]]\nfn main(\n//VTK::IOStructs::Input\n)\n//VTK::IOStructs::Output\n{\n  var output: fragmentOutput;\n\n  var computedColor: vec4<f32> = mapperUBO.BackgroundColor;\n\n  //VTK::RenderEncoder::Impl\n  return output;\n}\n"; // ----------------------------------------------------------------------------
// vtkWebGPURenderer methods
// ----------------------------------------------------------------------------

/* eslint-disable no-bitwise */

function vtkWebGPURenderer(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkWebGPURenderer'); // Builds myself.

  publicAPI.buildPass = function (prepass) {
    if (prepass) {
      if (!model.renderable) {
        return;
      } // make sure we have a camera


      if (!model.renderable.isActiveCameraCreated()) {
        model.renderable.resetCamera();
      }

      publicAPI.updateLights();
      publicAPI.prepareNodes();
      publicAPI.addMissingNode(model.renderable.getActiveCamera());
      publicAPI.addMissingNodes(model.renderable.getViewPropsWithNestedProps());
      publicAPI.removeUnusedNodes();
      publicAPI.updateStabilizedMatrix();
    }
  };

  publicAPI.updateStabilizedMatrix = function () {
    // This method is designed to help with floating point
    // issues when rendering datasets that push the limits of
    // resolutions on float.
    //
    // One of the most common cases is when the dataset is located far
    // away from the origin relative to the clipping range we are looking
    // at. For that case we want to perform the floating point sensitive
    // multiplications on the CPU in double. To this end we want the
    // vertex rendering ops to look something like
    //
    // Compute shifted points and load those into the VBO
    // pointCoordsSC = WorldToStabilizedMatrix * pointCoords;
    //
    // In the vertex shader do the following
    // positionVC = StabilizedToDeviceMatrix * ModelToStabilizedMatrix*vertexIn;
    //
    // We use two matrices because it is expensive to change the
    // WorldToStabilized matrix as we have to reupload all pointCoords
    // So that matrix (MCSCMatrix) is fairly static, the Stabilized to
    // Device matrix is the one that gets updated every time the camera
    // changes.
    //
    // The basic idea is that we should translate the data so that
    // when the center of the view frustum moves a lot
    // we recenter it. The center of the view frustum is roughly
    // camPos + dirOfProj*(far + near)*0.5
    var cam = model.renderable.getActiveCamera();
    var clipRange = cam.getClippingRange();
    var pos = cam.getPositionByReference();
    var dop = cam.getDirectionOfProjectionByReference();
    var center = [];
    var offset = [];
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.b)(offset, dop, 0.5 * (clipRange[0] + clipRange[1]));
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.j)(center, pos, offset);
    (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.q)(offset, center, model.stabilizedCenter);
    var length = (0,_vendor_gl_matrix_esm_vec3_js__WEBPACK_IMPORTED_MODULE_7__.r)(offset);

    if (length / (clipRange[1] - clipRange[0]) > model.recenterThreshold) {
      model.stabilizedCenter = center;
      model.stabilizedTime.modified();
    }
  };

  publicAPI.updateLights = function () {
    var count = 0;
    var lights = model.renderable.getLightsByReference();

    for (var index = 0; index < lights.length; ++index) {
      if (lights[index].getSwitch() > 0.0) {
        count++;
      }
    }

    if (!count) {
      vtkDebugMacro('No lights are on, creating one.');
      model.renderable.createLight();
    }

    return count;
  }; // register pipeline callbacks from a mapper


  publicAPI.registerPipelineCallback = function (pipeline, cb) {
    // if there is a matching pipeline just add the cb
    for (var i = 0; i < model.pipelineCallbacks.length; i++) {
      if (model.pipelineCallbacks[i].pipeline === pipeline) {
        model.pipelineCallbacks[i].callbacks.push(cb);
        return;
      }
    }

    model.pipelineCallbacks.push({
      pipeline: pipeline,
      callbacks: [cb]
    });
  };

  publicAPI.updateUBO = function () {
    // make sure the data is up to date
    // has the camera changed?
    var cam = model.renderable.getActiveCamera();
    var webgpuCamera = publicAPI.getViewNodeFor(cam);
    var utime = model.UBO.getSendTime();

    if (model.parent.getMTime() > utime || publicAPI.getMTime() > utime || cam.getMTime() > utime || model.renderable.getMTime() > utime) {
      var keyMats = webgpuCamera.getKeyMatrices(publicAPI);
      model.UBO.setArray('WCVCMatrix', keyMats.wcvc);
      model.UBO.setArray('SCPCMatrix', keyMats.scpc);
      model.UBO.setArray('PCSCMatrix', keyMats.pcsc);
      model.UBO.setArray('SCVCMatrix', keyMats.scvc);
      model.UBO.setArray('VCPCMatrix', keyMats.vcpc);
      model.UBO.setArray('WCVCNormals', keyMats.normalMatrix);
      model.UBO.setValue('cameraParallel', cam.getParallelProjection());
      var device = model.parent.getDevice();
      model.UBO.sendIfNeeded(device);
    }
  };

  publicAPI.scissorAndViewport = function (encoder) {
    var tsize = publicAPI.getYInvertedTiledSizeAndOrigin();
    encoder.getHandle().setViewport(tsize.lowerLeftU, tsize.lowerLeftV, tsize.usize, tsize.vsize, 0.0, 1.0); // set scissor

    encoder.getHandle().setScissorRect(tsize.lowerLeftU, tsize.lowerLeftV, tsize.usize, tsize.vsize);
  };

  publicAPI.bindUBO = function (renderEncoder) {
    renderEncoder.activateBindGroup(model.bindGroup);
  }; // Renders myself


  publicAPI.opaquePass = function (prepass) {
    if (prepass) {
      // clear last pipelines
      model.pipelineCallbacks = [];
      model.renderEncoder.begin(model.parent.getCommandEncoder());
      publicAPI.updateUBO();
    } else {
      publicAPI.scissorAndViewport(model.renderEncoder);
      publicAPI.clear(); // loop over registered pipelines

      for (var i = 0; i < model.pipelineCallbacks.length; i++) {
        var pStruct = model.pipelineCallbacks[i];
        var pl = pStruct.pipeline;
        model.renderEncoder.setPipeline(pl);
        publicAPI.bindUBO(model.renderEncoder);

        for (var cb = 0; cb < pStruct.callbacks.length; cb++) {
          pStruct.callbacks[cb](model.renderEncoder);
        }
      }

      model.renderEncoder.end();
    }
  };

  publicAPI.clear = function () {
    if (model.renderable.getTransparent() || model.suppressClear) {
      return;
    }

    var device = model.parent.getDevice();

    if (!model.clearFSQ) {
      model.clearFSQ = _FullScreenQuad_js__WEBPACK_IMPORTED_MODULE_3__["default"].newInstance();
      model.clearFSQ.setDevice(device);
      model.clearFSQ.setPipelineHash('clearfsq');
      model.clearFSQ.setFragmentShaderTemplate(clearFragTemplate);
      var ubo = _UniformBuffer_js__WEBPACK_IMPORTED_MODULE_4__["default"].newInstance();
      ubo.setName('mapperUBO');
      ubo.addEntry('BackgroundColor', 'vec4<f32>');
      model.clearFSQ.setUBO(ubo);
    }

    var background = model.renderable.getBackgroundByReference();
    model.clearFSQ.getUBO().setArray('BackgroundColor', background);
    model.clearFSQ.getUBO().sendIfNeeded(device);
    model.clearFSQ.render(model.renderEncoder, device);
  };

  publicAPI.translucentPass = function (prepass) {
    if (prepass) {
      // clear last pipelines
      model.pipelineCallbacks = [];
      model.renderEncoder.begin(model.parent.getCommandEncoder());
    } else {
      publicAPI.scissorAndViewport(model.renderEncoder); // loop over registered pipelines

      for (var i = 0; i < model.pipelineCallbacks.length; i++) {
        var pStruct = model.pipelineCallbacks[i];
        var pl = pStruct.pipeline;
        model.renderEncoder.setPipeline(pl);
        publicAPI.bindUBO(model.renderEncoder);

        for (var cb = 0; cb < pStruct.callbacks.length; cb++) {
          pStruct.callbacks[cb](model.renderEncoder);
        }
      }

      model.renderEncoder.end();
    }
  };

  publicAPI.volumeDepthRangePass = function (prepass) {
    if (prepass) {
      // clear last pipelines
      model.pipelineCallbacks = [];
      model.renderEncoder.begin(model.parent.getCommandEncoder());
    } else {
      publicAPI.scissorAndViewport(model.renderEncoder); // loop over registered pipelines

      for (var i = 0; i < model.pipelineCallbacks.length; i++) {
        var pStruct = model.pipelineCallbacks[i];
        var pl = pStruct.pipeline;
        model.renderEncoder.setPipeline(pl);
        publicAPI.bindUBO(model.renderEncoder);

        for (var cb = 0; cb < pStruct.callbacks.length; cb++) {
          pStruct.callbacks[cb](model.renderEncoder);
        }
      }

      model.renderEncoder.end();
    }
  };

  publicAPI.getAspectRatio = function () {
    var size = model.parent.getSizeByReference();
    var viewport = model.renderable.getViewportByReference();
    return size[0] * (viewport[2] - viewport[0]) / ((viewport[3] - viewport[1]) * size[1]);
  };

  publicAPI.getYInvertedTiledSizeAndOrigin = function () {
    var res = publicAPI.getTiledSizeAndOrigin();
    var size = model.parent.getSizeByReference();
    res.lowerLeftV = size[1] - res.vsize - res.lowerLeftV;
    return res;
  };

  publicAPI.getTiledSizeAndOrigin = function () {
    var vport = model.renderable.getViewportByReference(); // if there is no window assume 0 1

    var tileViewPort = [0.0, 0.0, 1.0, 1.0]; // find the lower left corner of the viewport, taking into account the
    // lower left boundary of this tile

    var vpu = vport[0] - tileViewPort[0];
    var vpv = vport[1] - tileViewPort[1]; // store the result as a pixel value

    var ndvp = model.parent.normalizedDisplayToDisplay(vpu, vpv);
    var lowerLeftU = Math.round(ndvp[0]);
    var lowerLeftV = Math.round(ndvp[1]); // find the upper right corner of the viewport, taking into account the
    // lower left boundary of this tile

    var vpu2 = vport[2] - tileViewPort[0];
    var vpv2 = vport[3] - tileViewPort[1];
    var ndvp2 = model.parent.normalizedDisplayToDisplay(vpu2, vpv2); // now compute the size of the intersection of the viewport with the
    // current tile

    var usize = Math.round(ndvp2[0]) - lowerLeftU;
    var vsize = Math.round(ndvp2[1]) - lowerLeftV;

    if (usize < 0) {
      usize = 0;
    }

    if (vsize < 0) {
      vsize = 0;
    }

    return {
      usize: usize,
      vsize: vsize,
      lowerLeftU: lowerLeftU,
      lowerLeftV: lowerLeftV
    };
  };

  publicAPI.getPropFromID = function (id) {
    for (var i = 0; i < model.children.length; i++) {
      var res = model.children[i].getPropID ? model.children[i].getPropID() : -1;

      if (res === id) {
        return model.children[i];
      }
    }

    return null;
  };

  publicAPI.getStabilizedTime = function () {
    return model.stabilizedTime.getMTime();
  };

  publicAPI.releaseGraphicsResources = function () {
    if (model.selector !== null) {
      model.selector.releaseGraphicsResources();
    }
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  bindGroup: null,
  selector: null,
  renderEncoder: null,
  recenterThreshold: 20.0,
  suppressClear: false,
  stabilizedCenter: [0.0, 0.0, 0.0]
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues);
  model.UBO = _UniformBuffer_js__WEBPACK_IMPORTED_MODULE_4__["default"].newInstance();
  model.UBO.setName('rendererUBO');
  model.UBO.addEntry('WCVCMatrix', 'mat4x4<f32>');
  model.UBO.addEntry('SCPCMatrix', 'mat4x4<f32>');
  model.UBO.addEntry('PCSCMatrix', 'mat4x4<f32>');
  model.UBO.addEntry('SCVCMatrix', 'mat4x4<f32>');
  model.UBO.addEntry('VCPCMatrix', 'mat4x4<f32>');
  model.UBO.addEntry('WCVCNormals', 'mat4x4<f32>');
  model.UBO.addEntry('cameraParallel', 'u32');
  model.bindGroup = _BindGroup_js__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance();
  model.bindGroup.setName('rendererBG');
  model.bindGroup.setBindables([model.UBO]);
  model.tmpMat4 = (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_6__.i)(new Float64Array(16));
  model.stabilizedTime = {};
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.obj)(model.stabilizedTime, {
    mtime: 0
  }); // Build VTK API

  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.get)(publicAPI, model, ['bindGroup', 'stabilizedTime']);
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.getArray)(publicAPI, model, ['stabilizedCenter']);
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.setGet)(publicAPI, model, ['renderEncoder', 'selector', 'suppressClear', 'UBO']); // Object methods

  vtkWebGPURenderer(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.newInstance)(extend, 'vtkWebGPURenderer'); // ----------------------------------------------------------------------------

var index = {
  newInstance: newInstance,
  extend: extend
}; // Register ourself to WebGPU backend if imported

(0,_ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_5__.registerOverride)('vtkRenderer', newInstance);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/Sampler.js":
/*!******************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/WebGPU/Sampler.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkWebGPUSampler$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");


/* eslint-disable no-bitwise */
// ----------------------------------------------------------------------------
// vtkWebGPUSampler methods
// ----------------------------------------------------------------------------

function vtkWebGPUSampler(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkWebGPUSampler');

  publicAPI.create = function (device) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    model.device = device;
    model.handle = model.device.getHandle().createSampler({
      magFilter: options.magFilter ? options.magFilter : 'nearest',
      minFilter: options.minFilter ? options.minFilter : 'nearest'
    });
    model.bindGroupTime.modified();
  };

  publicAPI.getShaderCode = function (binding, group) {
    var result = "[[binding(".concat(binding, "), group(").concat(group, ")]] var ").concat(model.name, ": sampler;");
    return result;
  };

  publicAPI.getBindGroupEntry = function () {
    var foo = {
      resource: model.handle
    };
    return foo;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  device: null,
  handle: null,
  name: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  model.bindGroupLayoutEntry = {
    /* eslint-disable no-undef */
    visibility: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,

    /* eslint-enable no-undef */
    sampler: {// type: 'filtering',
    }
  };
  model.bindGroupTime = {};
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(model.bindGroupTime, {
    mtime: 0
  });
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].get(publicAPI, model, ['bindGroupTime', 'handle']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['bindGroupLayoutEntry', 'device', 'name']);
  vtkWebGPUSampler(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend); // ----------------------------------------------------------------------------

var vtkWebGPUSampler$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/ShaderCache.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/WebGPU/ShaderCache.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkWebGPUShaderCache$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _ShaderModule_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ShaderModule.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/ShaderModule.js");



// this is useful for building up shader strings which typically involve
// lots of string substitutions. Return true if a substitution was done.

function substitute(source, search, replace) {
  var all = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  var replaceStr = Array.isArray(replace) ? replace.join('\n') : replace;
  var replaced = false;

  if (source.search(search) !== -1) {
    replaced = true;
  }

  var gflag = '';

  if (all) {
    gflag = 'g';
  }

  var regex = new RegExp(search, gflag);
  var resultstr = source.replace(regex, replaceStr);
  return {
    replace: replaced,
    result: resultstr
  };
} // ----------------------------------------------------------------------------
// vtkWebGPUShaderCache methods
// ----------------------------------------------------------------------------


function vtkWebGPUShaderCache(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkWebGPUShaderCache');

  publicAPI.getShaderModule = function (shaderDesc) {
    // has it already been created?
    var sType = shaderDesc.getType();
    var sHash = shaderDesc.getHash();

    var keys = model._shaderModules.keys();

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (key.getHash() === sHash && key.getType() === sType) {
        return model._shaderModules.get(key);
      }
    } // console.log(JSON.stringify(shaderDesc));


    var sm = _ShaderModule_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance();
    sm.initialize(model.device, shaderDesc);

    model._shaderModules.set(shaderDesc, sm);

    return sm;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  shaderModules: null,
  device: null,
  window: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Internal objects

  model._shaderModules = new Map(); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['device', 'window']); // Object methods

  vtkWebGPUShaderCache(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkWebGPUShaderCache'); // ----------------------------------------------------------------------------

var vtkWebGPUShaderCache$1 = {
  newInstance: newInstance,
  extend: extend,
  substitute: substitute
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/ShaderDescription.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/WebGPU/ShaderDescription.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkWebGPUShaderDescription$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _ShaderCache_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./ShaderCache.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/ShaderCache.js");



// vtkWebGPUShaderDescription methods
// ----------------------------------------------------------------------------
// shader description

function vtkWebGPUShaderDescription(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkWebGPUShaderDescription');

  publicAPI.hasOutput = function (name) {
    return model.outputNames.includes(name);
  };

  publicAPI.addOutput = function (type, name) {
    model.outputTypes.push(type);
    model.outputNames.push(name);
  };

  publicAPI.addBuiltinOutput = function (type, name) {
    model.builtinOutputTypes.push(type);
    model.builtinOutputNames.push(name);
  };

  publicAPI.addBuiltinInput = function (type, name) {
    model.builtinInputTypes.push(type);
    model.builtinInputNames.push(name);
  }; // perform shader replacements for the input and outputs
  // of this shader. That includes vertex inputs if specified


  publicAPI.replaceShaderCode = function (priorStage, vertexInput) {
    var inputImpl = [];
    var iodec = [];

    if (vertexInput) {
      inputImpl.push(vertexInput.getShaderCode());
    }

    if (priorStage || model.builtinInputNames.length) {
      var inputStruct = [];
      inputStruct.push("struct ".concat(model.type, "Input\n{"));

      if (priorStage) {
        var inputNames = priorStage.getOutputNamesByReference();
        var inputTypes = priorStage.getOutputTypesByReference();

        for (var i = 0; i < inputNames.length; i++) {
          inputStruct.push("  [[location(".concat(i, ")]] ").concat(inputNames[i], " : ").concat(inputTypes[i], ";"));
        }
      }

      for (var _i = 0; _i < model.builtinInputNames.length; _i++) {
        inputStruct.push("  ".concat(model.builtinInputNames[_i], " : ").concat(model.builtinInputTypes[_i], ";"));
      }

      if (inputStruct.length > 1) {
        inputStruct.push('};');
        iodec = inputStruct;
        inputImpl[inputImpl.length - 1] += ',';
        inputImpl.push("input: ".concat(model.type, "Input"));
      }
    }

    if (inputImpl.length) {
      model.code = _ShaderCache_js__WEBPACK_IMPORTED_MODULE_1__["default"].substitute(model.code, '//VTK::IOStructs::Input', inputImpl).result;
    }

    if (model.outputNames.length + model.builtinOutputNames.length) {
      var outputStruct = ["struct ".concat(model.type, "Output\n{")];

      for (var _i2 = 0; _i2 < model.outputNames.length; _i2++) {
        outputStruct.push("  [[location(".concat(_i2, ")]] ").concat(model.outputNames[_i2], " : ").concat(model.outputTypes[_i2], ";"));
      }

      for (var _i3 = 0; _i3 < model.builtinOutputNames.length; _i3++) {
        outputStruct.push("  ".concat(model.builtinOutputNames[_i3], " : ").concat(model.builtinOutputTypes[_i3], ";"));
      }

      outputStruct.push('};');
      iodec = iodec.concat(outputStruct);
      model.code = _ShaderCache_js__WEBPACK_IMPORTED_MODULE_1__["default"].substitute(model.code, '//VTK::IOStructs::Output', ["-> ".concat(model.type, "Output")]).result;
    }

    model.code = _ShaderCache_js__WEBPACK_IMPORTED_MODULE_1__["default"].substitute(model.code, '//VTK::IOStructs::Dec', iodec).result;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  type: null,
  // 'vertex' or 'fragment'
  hash: null,
  code: null,
  outputNames: null,
  outputTypes: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues);
  model.outputNames = [];
  model.outputTypes = [];
  model.builtinOutputNames = [];
  model.builtinOutputTypes = [];
  model.builtinInputNames = [];
  model.builtinInputTypes = []; // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['type', 'hash', 'code']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].getArray(publicAPI, model, ['outputTypes', 'outputNames']); // Object methods

  vtkWebGPUShaderDescription(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkWebGPUShaderDescription'); // ----------------------------------------------------------------------------

var vtkWebGPUShaderDescription$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/ShaderModule.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/WebGPU/ShaderModule.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkWebGPUShaderModule$1)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");


// vtkWebGPUShaderModule methods
// ----------------------------------------------------------------------------

function vtkWebGPUShaderModule(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkWebGPUShaderModule');

  publicAPI.initialize = function (device, shaderDesc) {
    model.device = device; // console.log(shaderDesc.getCode());

    model.handle = model.device.getHandle().createShaderModule({
      code: shaderDesc.getCode()
    });
  }; // publicAPI.setLastCameraMTime = (mtime) => {
  //   model.lastCameraMTime = mtime;
  // };

} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  device: null,
  handle: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].get(publicAPI, model, ['lastCameraMTime']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['device', 'handle']); // Object methods

  vtkWebGPUShaderModule(publicAPI, model);
} // ----------------------------------------------------------------------------


var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkWebGPUShaderModule'); // ----------------------------------------------------------------------------

var vtkWebGPUShaderModule$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/Texture.js":
/*!******************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/WebGPU/Texture.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkWebGPUTexture$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Common_Core_HalfFloat_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Common/Core/HalfFloat.js */ "./node_modules/@kitware/vtk.js/Common/Core/HalfFloat.js");
/* harmony import */ var _BufferManager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BufferManager.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/BufferManager.js");
/* harmony import */ var _TextureView_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./TextureView.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/TextureView.js");
/* harmony import */ var _Types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Types.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/Types.js");






var BufferUsage = _BufferManager_js__WEBPACK_IMPORTED_MODULE_2__["default"].BufferUsage; // ----------------------------------------------------------------------------
// Global methods
// ----------------------------------------------------------------------------
// ----------------------------------------------------------------------------
// vtkWebGPUTexture methods
// ----------------------------------------------------------------------------

function vtkWebGPUTexture(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkWebGPUTexture');

  publicAPI.create = function (device, options) {
    model.device = device;
    model.width = options.width;
    model.height = options.height;
    model.depth = options.depth ? options.depth : 1;
    var dimension = model.depth === 1 ? '2d' : '3d';
    model.format = options.format ? options.format : 'rgbaunorm';
    /* eslint-disable no-undef */

    /* eslint-disable no-bitwise */

    model.usage = options.usage ? options.usage : GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;
    /* eslint-enable no-undef */

    /* eslint-enable no-bitwise */

    model.handle = model.device.getHandle().createTexture({
      size: [model.width, model.height, model.depth],
      format: model.format,
      // 'rgba8unorm',
      usage: model.usage,
      dimension: dimension
    });
  };

  publicAPI.assignFromHandle = function (device, handle, options) {
    model.device = device;
    model.handle = handle;
    model.width = options.width;
    model.height = options.height;
    model.depth = options.depth ? options.depth : 1;
    model.format = options.format ? options.format : 'rgbaunorm';
    /* eslint-disable no-undef */

    /* eslint-disable no-bitwise */

    model.usage = options.usage ? options.usage : GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;
    /* eslint-enable no-undef */

    /* eslint-enable no-bitwise */
  }; // set the data


  publicAPI.writeImageData = function (req) {
    var tDetails = _Types_js__WEBPACK_IMPORTED_MODULE_4__["default"].getDetailsFromTextureFormat(model.format);
    var bufferBytesPerRow = model.width * tDetails.stride;

    if (req.nativeArray) {
      // create and write the buffer
      var buffRequest = {
        /* eslint-disable no-undef */
        usage: BufferUsage.Texture
        /* eslint-enable no-undef */

      };

      if (req.dataArray) {
        buffRequest.dataArray = req.dataArray;
        buffRequest.time = req.dataArray.getMTime();
      }

      buffRequest.nativeArray = req.nativeArray; // bytesPerRow must be a multiple of 256 so we might need to rebuild
      // the data here before passing to the buffer. e.g. if it is unorm8x4 then
      // we need to have width be a multiple of 64

      var currWidthInBytes = model.width * req.nativeArray.BYTES_PER_ELEMENT; // is this a half float texture?

      var halfFloat = tDetails.elementSize === 2 && tDetails.sampleType === 'float'; // if we need to copy the data

      if (halfFloat || currWidthInBytes % 256) {
        var inArray = req.nativeArray;
        var bufferWidthInBytes = 256 * Math.floor((currWidthInBytes + 255) / 256);
        var bufferWidth = bufferWidthInBytes / tDetails.elementSize;
        var inWidth = currWidthInBytes / inArray.BYTES_PER_ELEMENT;
        var outArray = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newTypedArray(halfFloat ? 'Uint16Array' : inArray.name, bufferWidth * model.height * model.depth);

        for (var v = 0; v < model.height * model.depth; v++) {
          if (halfFloat) {
            for (var i = 0; i < inWidth; i++) {
              outArray[v * bufferWidth + i] = _Common_Core_HalfFloat_js__WEBPACK_IMPORTED_MODULE_1__["default"].toHalf(inArray[v * inWidth + i]);
            }
          } else {
            outArray.set(inArray.subarray(v * inWidth, (v + 1) * inWidth), v * bufferWidth);
          }
        }

        buffRequest.nativeArray = outArray;
        bufferBytesPerRow = bufferWidthInBytes;
      }

      var buff = model.device.getBufferManager().getBuffer(buffRequest);
      model.buffer = buff;
    }

    if (req.image) {
      var canvas = document.createElement('canvas');
      canvas.width = req.image.width;
      canvas.height = req.image.height;
      var ctx = canvas.getContext('2d');
      ctx.translate(0, canvas.height);
      ctx.scale(1, -1);
      ctx.drawImage(req.image, 0, 0, req.image.width, req.image.height, 0, 0, canvas.width, canvas.height);
      var imageData = ctx.getImageData(0, 0, req.image.width, req.image.height); // create and write the buffer

      var _buffRequest = {
        nativeArray: imageData.data,
        time: 0,

        /* eslint-disable no-undef */
        usage: BufferUsage.Texture,

        /* eslint-enable no-undef */
        format: 'unorm8x4'
      };

      var _buff = model.device.getBufferManager().getBuffer(_buffRequest);

      model.buffer = _buff;
    } // get a buffer for the image


    var cmdEnc = model.device.createCommandEncoder();
    cmdEnc.copyBufferToTexture({
      buffer: model.buffer.getHandle(),
      offset: 0,
      bytesPerRow: bufferBytesPerRow,
      rowsPerImage: model.height
    }, {
      texture: model.handle
    }, [model.width, model.height, model.depth]);
    model.device.submitCommandEncoder(cmdEnc);
    model.ready = true;
  };

  publicAPI.resizeToMatch = function (tex) {
    if (tex.getWidth() !== model.width || tex.getHeight() !== model.height || tex.getDepth() !== model.depth) {
      model.width = tex.getWidth();
      model.height = tex.getHeight();
      model.depth = tex.getDepth();
      model.handle = model.device.getHandle().createTexture({
        size: [model.width, model.height, model.depth],
        format: model.format,
        usage: model.usage
      });
    }
  };

  publicAPI.resize = function (width, height) {
    var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

    if (width !== model.width || height !== model.height || depth !== model.depth) {
      model.width = width;
      model.height = height;
      model.depth = depth;
      model.handle = model.device.getHandle().createTexture({
        size: [model.width, model.height, model.depth],
        format: model.format,
        usage: model.usage
      });
    }
  };

  publicAPI.createView = function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    // if options is missing values try to add them in
    if (!options.dimension) {
      options.dimension = model.depth === 1 ? '2d' : '3d';
    }

    var view = _TextureView_js__WEBPACK_IMPORTED_MODULE_3__["default"].newInstance();
    view.create(publicAPI, options);
    return view;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  device: null,
  handle: null,
  buffer: null,
  ready: false
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].get(publicAPI, model, ['handle', 'ready', 'width', 'height', 'depth', 'format', 'usage']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['device']);
  vtkWebGPUTexture(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend); // ----------------------------------------------------------------------------

var vtkWebGPUTexture$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/TextureView.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/WebGPU/TextureView.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkWebGPUTextureView$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Sampler_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Sampler.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/Sampler.js");
/* harmony import */ var _Types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Types.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/Types.js");




// vtkWebGPUTextureView methods
// ----------------------------------------------------------------------------

/* eslint-disable no-bitwise */

function vtkWebGPUTextureView(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkWebGPUTextureView');

  publicAPI.create = function (texture, options) {
    model.texture = texture;
    model.options = options;
    model.options.dimension = model.options.dimension || '2d';
    model.textureHandle = texture.getHandle();
    model.handle = model.textureHandle.createView(model.options);
    model.bindGroupLayoutEntry.texture.viewDimension = model.options.dimension;
    var tDetails = _Types_js__WEBPACK_IMPORTED_MODULE_2__["default"].getDetailsFromTextureFormat(model.texture.getFormat());
    model.bindGroupLayoutEntry.texture.sampleType = tDetails.sampleType;
  };

  publicAPI.getBindGroupEntry = function () {
    var foo = {
      resource: publicAPI.getHandle()
    };
    return foo;
  };

  publicAPI.getShaderCode = function (binding, group) {
    var ttype = 'f32';

    if (model.bindGroupLayoutEntry.texture.sampleType === 'sint') {
      ttype = 'i32';
    } else if (model.bindGroupLayoutEntry.texture.sampleType === 'uint') {
      ttype = 'u32';
    }

    var result = "[[binding(".concat(binding, "), group(").concat(group, ")]] var ").concat(model.name, ": texture_").concat(model.options.dimension, "<").concat(ttype, ">;");

    if (model.bindGroupLayoutEntry.texture.sampleType === 'depth') {
      result = "[[binding(".concat(binding, "), group(").concat(group, ")]] var ").concat(model.name, ": texture_depth_").concat(model.options.dimension, ";");
    }

    return result;
  };

  publicAPI.addSampler = function (device, options) {
    var newSamp = _Sampler_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance();
    newSamp.create(device, options);
    publicAPI.setSampler(newSamp);
    model.sampler.setName("".concat(model.name, "Sampler"));
  };

  publicAPI.setName = function (val) {
    if (model.sampler) {
      model.sampler.setName("".concat(val, "Sampler"));
    }

    if (model.name === val) {
      return;
    }

    model.name = val;
    publicAPI.modified();
  };

  publicAPI.getBindGroupTime = function () {
    // check if the handle changed
    if (model.texture.getHandle() !== model.textureHandle) {
      model.textureHandle = model.texture.getHandle();
      model.handle = model.textureHandle.createView(model.options);
      model.bindGroupTime.modified();
    }

    return model.bindGroupTime;
  }; // if the texture has changed then get a new view


  publicAPI.getHandle = function () {
    if (model.texture.getHandle() !== model.textureHandle) {
      model.textureHandle = model.texture.getHandle();
      model.handle = model.textureHandle.createView(model.options);
      model.bindGroupTime.modified();
    }

    return model.handle;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  texture: null,
  handle: null,
  name: null,
  sampler: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Object methods

  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(publicAPI, model);
  model.bindGroupLayoutEntry = {
    /* eslint-disable no-undef */
    visibility: GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT,

    /* eslint-enable no-undef */
    texture: {
      sampleType: 'float',
      viewDimension: '2d' // multisampled: false,

    }
  };
  model.bindGroupTime = {};
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(model.bindGroupTime, {
    mtime: 0
  });
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].get(publicAPI, model, ['bindGroupTime', 'name', 'texture']);
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].setGet(publicAPI, model, ['bindGroupLayoutEntry', 'sampler']);
  vtkWebGPUTextureView(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend); // ----------------------------------------------------------------------------

var vtkWebGPUTextureView$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/Types.js":
/*!****************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/WebGPU/Types.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkWebGPUTypes)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");


// vtkWebGPUDevice static functions
//
// WebGPU uses types in a many places and calls, and often those types
// need to be associated with byte sizes, alignments, native arrays etc.
// The folowing methods are designed to help vtk.js introspect those types.
// WebGPU currently tends to use multiple type formats:
//  - buffer types such as float32x4
//  - shader types suchs as vec4<f32>
//  - texture types such as rgba32float
// ----------------------------------------------------------------------------
// see https://gpuweb.github.io/gpuweb/#texture-formats
// for possible formats, there are a lot of them

var textureDetails = {
  // 8-bit formats
  r8unorm: {
    numComponents: 1,
    nativeType: Uint8Array,
    stride: 1,
    elementSize: 1,
    sampleType: 'float'
  },
  r8snorm: {
    numComponents: 1,
    nativeType: Int8Array,
    stride: 1,
    elementSize: 1,
    sampleType: 'float'
  },
  r8uint: {
    numComponents: 1,
    nativeType: Uint8Array,
    stride: 1,
    elementSize: 1,
    sampleType: 'uint'
  },
  r8sint: {
    numComponents: 1,
    nativeType: Int8Array,
    stride: 1,
    elementSize: 1,
    sampleType: 'sint'
  },
  // 16-bit formats
  r16uint: {
    numComponents: 1,
    nativeType: Uint16Array,
    stride: 2,
    elementSize: 2,
    sampleType: 'uint'
  },
  r16sint: {
    numComponents: 1,
    nativeType: Int16Array,
    stride: 2,
    elementSize: 2,
    sampleType: 'sint'
  },
  r16float: {
    numComponents: 1,
    nativeType: Float32Array,
    stride: 2,
    elementSize: 2,
    sampleType: 'float'
  },
  rg8unorm: {
    numComponents: 2,
    nativeType: Uint8Array,
    stride: 2,
    elementSize: 1,
    sampleType: 'float'
  },
  rg8snorm: {
    numComponents: 2,
    nativeType: Int8Array,
    stride: 2,
    elementSize: 1,
    sampleType: 'float'
  },
  rg8uint: {
    numComponents: 2,
    nativeType: Uint8Array,
    stride: 2,
    elementSize: 1,
    sampleType: 'uint'
  },
  rg8sint: {
    numComponents: 2,
    nativeType: Int8Array,
    stride: 2,
    elementSize: 1,
    sampleType: 'sint'
  },
  // 32-bit formats
  r32uint: {
    numComponents: 1,
    nativeType: Uint32Array,
    stride: 4,
    elementSize: 4,
    sampleType: 'uint'
  },
  r32sint: {
    numComponents: 1,
    nativeType: Int32Array,
    stride: 4,
    elementSize: 4,
    sampleType: 'sint'
  },
  r32float: {
    numComponents: 1,
    nativeType: Float32Array,
    stride: 4,
    elementSize: 4,
    sampleType: 'unfilterable-float'
  },
  rg16uint: {
    numComponents: 2,
    nativeType: Uint16Array,
    stride: 4,
    elementSize: 2,
    sampleType: 'uint'
  },
  rg16sint: {
    numComponents: 2,
    nativeType: Int16Array,
    stride: 4,
    elementSize: 2,
    sampleType: 'sint'
  },
  rg16float: {
    numComponents: 2,
    nativeType: Float32Array,
    stride: 4,
    elementSize: 2,
    sampleType: 'float'
  },
  rgba8unorm: {
    numComponents: 4,
    nativeType: Uint8Array,
    stride: 4,
    elementSize: 1,
    sampleType: 'float'
  },
  'rgba8unorm-srgb': {
    numComponents: 4,
    nativeType: Uint8Array,
    stride: 4,
    elementSize: 1,
    sampleType: 'float'
  },
  rgba8snorm: {
    numComponents: 4,
    nativeType: Int8Array,
    stride: 4,
    elementSize: 1,
    sampleType: 'float'
  },
  rgba8uint: {
    numComponents: 4,
    nativeType: Uint8Array,
    stride: 4,
    elementSize: 1,
    sampleType: 'uint'
  },
  rgba8sint: {
    numComponents: 4,
    nativeType: Int8Array,
    stride: 4,
    elementSize: 1,
    sampleType: 'sint'
  },
  bgra8unorm: {
    numComponents: 4,
    nativeType: Uint8Array,
    stride: 4,
    elementSize: 1,
    sampleType: 'float'
  },
  'bgra8unorm-srgb': {
    numComponents: 4,
    nativeType: Uint8Array,
    stride: 4,
    elementSize: 1,
    sampleType: 'float'
  },
  // Packed 32-bit formats
  rgb9e5ufloat: {
    numComponents: 4,
    nativeType: Uint32Array,
    stride: 4,
    sampleType: 'float'
  },
  rgb10a2unorm: {
    numComponents: 4,
    nativeType: Uint32Array,
    stride: 4,
    sampleType: 'float'
  },
  rg11b10ufloat: {
    numComponents: 4,
    nativeType: Float32Array,
    stride: 4,
    sampleType: 'float'
  },
  // 64-bit formats
  rg32uint: {
    numComponents: 2,
    nativeType: Uint32Array,
    stride: 8,
    elementSize: 4,
    sampleType: 'uint'
  },
  rg32sint: {
    numComponents: 2,
    nativeType: Int32Array,
    stride: 8,
    elementSize: 4,
    sampleType: 'sint'
  },
  rg32float: {
    numComponents: 2,
    nativeType: Float32Array,
    stride: 8,
    elementSize: 4,
    sampleType: 'unfilterable-float'
  },
  rgba16uint: {
    numComponents: 4,
    nativeType: Uint16Array,
    stride: 8,
    elementSize: 2,
    sampleType: 'uint'
  },
  rgba16sint: {
    numComponents: 4,
    nativeType: Int16Array,
    stride: 8,
    elementSize: 2,
    sampleType: 'sint'
  },
  rgba16float: {
    numComponents: 4,
    nativeType: Float32Array,
    stride: 8,
    elementSize: 2,
    sampleType: 'float'
  },
  // 128-bit formats
  rgba32uint: {
    numComponents: 4,
    nativeType: Uint32Array,
    stride: 16,
    elementSize: 4,
    sampleType: 'uint'
  },
  rgba32sint: {
    numComponents: 4,
    nativeType: Int32Array,
    stride: 16,
    elementSize: 4,
    sampleType: 'sint'
  },
  rgba32float: {
    numComponents: 4,
    nativeType: Float32Array,
    stride: 16,
    elementSize: 4,
    sampleType: 'unfilterable-float'
  },
  // Depth and stencil formats
  stencil8: {
    numComponents: 1,
    nativeType: Uint8Array,
    stride: 1,
    elementSize: 1,
    sampleType: 'uint'
  },
  depth16unorm: {
    numComponents: 1,
    nativeType: Uint16Array,
    stride: 2,
    elementSize: 2,
    sampleType: 'depth'
  },
  depth24plus: {
    numComponents: 1,
    nativeType: Uint32Array,
    stride: 4,
    elementSize: 3,
    sampleType: 'depth'
  },
  'depth24plus-stencil8': {
    numComponents: 2,
    nativeType: Uint32Array,
    stride: 4,
    sampleType: 'mixed'
  },
  depth32float: {
    numComponents: 1,
    nativeType: Float32Array,
    stride: 4,
    elementSize: 4,
    sampleType: 'depth'
  }
};

function getDetailsFromTextureFormat(format) {
  if (!format || format.length < 6) return 0;

  if (format in textureDetails === true) {
    return textureDetails[format];
  }

  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.vtkErrorMacro)("unknown format ".concat(format));
  return null;
} // see https://gpuweb.github.io/gpuweb/#enumdef-gpuvertexformat
// for possible formats


function getByteStrideFromBufferFormat(format) {
  if (!format || format.length < 5) return 0; // options are x2, x3, x4 or nothing

  var numComp = 1;

  if (format[format.length - 2] === 'x') {
    numComp = format[format.length - 1];
  }

  var sizeStart = numComp === 1 ? format.length - 1 : format.length - 3; // options are 8, 16, 32 resulting in 8, 6, 2 as the last char
  // plugged into the formula below gives 1, 2, 4 respectively

  var num = Number(format[sizeStart]);

  if (Number.isNaN(num)) {
    (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.vtkErrorMacro)("unknown format ".concat(format));
    return 0;
  }

  var typeSize = 5 - num / 2;
  return numComp * typeSize;
} // see https://gpuweb.github.io/gpuweb/#enumdef-gpuvertexformat
// for possible formats


function getNumberOfComponentsFromBufferFormat(format) {
  if (!format || format.length < 5) return 0; // options are x2, x3, x4 or nothing

  var numComp = 1;

  if (format[format.length - 2] === 'x') {
    numComp = format[format.length - 1];
  }

  return numComp;
} // see https://gpuweb.github.io/gpuweb/#enumdef-gpuvertexformat
// for possible formats


function getNativeTypeFromBufferFormat(format) {
  if (!format || format.length < 5) return 0; // raw types are Uint Int or Float as follows

  var result;

  if (format[0] === 'f') {
    result = 'Float';
  } else if (format[0] === 's') {
    result = 'Int';
  } else if (format[0] === 'u') {
    result = 'Uint';
  } else {
    (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.vtkErrorMacro)("unknown format ".concat(format));
    return undefined;
  } // options are 8, 16, 32 resulting in 8, 6, 2 as the last char
  // plugged into the formula below gives 1, 2, 4 respectively


  var base = format.split('x')[0];
  var num = Number(base[base.length - 1]);

  if (Number.isNaN(num)) {
    (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.vtkErrorMacro)("unknown format ".concat(format));
    return undefined;
  }

  result += 8 * (5 - num / 2);
  result += 'Array';
  return result;
}

function getShaderTypeFromBufferFormat(format) {
  var dataType;

  if (format[0] === 'f' || format[1] === 'n') {
    dataType = 'f32';
  } else if (format[0] === 's' && format[1] === 'i') {
    dataType = 'i32';
  } else if (format[0] === 'u' && format[1] === 'i') {
    dataType = 'u32';
  } else {
    (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.vtkErrorMacro)("unknown format ".concat(format));
    return undefined;
  } // options are x2, x3, x4 or nothing


  var numComp = 1;

  if (format[format.length - 2] === 'x') {
    numComp = Number(format[format.length - 1]);
  }

  if (numComp === 4) return "vec4<".concat(dataType, ">");
  if (numComp === 3) return "vec3<".concat(dataType, ">");
  if (numComp === 2) return "vec2<".concat(dataType, ">");
  return dataType;
}

function getByteStrideFromShaderFormat(format) {
  if (!format) return 0;
  var numComp = 1;

  if (format.substring(0, 3) === 'vec') {
    numComp = format[3];
  } else if (format.substring(0, 3) === 'mat') {
    numComp = format[3] * format[5];
  }

  var typeSize = 4;
  return numComp * typeSize;
}

function getNativeTypeFromShaderFormat(format) {
  if (!format) return undefined;
  if (format.includes('f32')) return 'Float32Array';
  if (format.includes('i32')) return 'Int32Array';
  if (format.includes('u32')) return 'Uint32Array';
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.vtkErrorMacro)("unknown format ".concat(format));
  return undefined;
}

var vtkWebGPUTypes = {
  getDetailsFromTextureFormat: getDetailsFromTextureFormat,
  getByteStrideFromBufferFormat: getByteStrideFromBufferFormat,
  getNumberOfComponentsFromBufferFormat: getNumberOfComponentsFromBufferFormat,
  getNativeTypeFromBufferFormat: getNativeTypeFromBufferFormat,
  getShaderTypeFromBufferFormat: getShaderTypeFromBufferFormat,
  getByteStrideFromShaderFormat: getByteStrideFromShaderFormat,
  getNativeTypeFromShaderFormat: getNativeTypeFromShaderFormat
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/UniformBuffer.js":
/*!************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/WebGPU/UniformBuffer.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkWebGPUUniformBuffer$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _BufferManager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./BufferManager.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/BufferManager.js");
/* harmony import */ var _Types_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Types.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/Types.js");





var BufferUsage = _BufferManager_js__WEBPACK_IMPORTED_MODULE_2__["default"].BufferUsage;
var vtkErrorMacro = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].vtkErrorMacro; // ----------------------------------------------------------------------------
// vtkWebGPUUniformBuffer methods
// ----------------------------------------------------------------------------

function vtkWebGPUUniformBuffer(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkWebGPUUniformBuffer');

  publicAPI.addEntry = function (name, type) {
    if (model._bufferEntryNames.has(name)) {
      vtkErrorMacro("entry named ".concat(name, " already exists"));
      return;
    }

    model.sortDirty = true;

    model._bufferEntryNames.set(name, model.bufferEntries.length);

    model.bufferEntries.push({
      name: name,
      type: type,
      sizeInBytes: _Types_js__WEBPACK_IMPORTED_MODULE_3__["default"].getByteStrideFromShaderFormat(type),
      offset: -1,
      nativeType: _Types_js__WEBPACK_IMPORTED_MODULE_3__["default"].getNativeTypeFromShaderFormat(type),
      packed: false
    });
  }; // UBOs have layout rules in terms of how memory is aligned so we
  // have to be careful how we order the entries. For example a vec4<f32>
  // must be aligned on a 16 byte offset, etc. See
  // https://gpuweb.github.io/gpuweb/wgsl/#memory-layouts
  // for more details. Right now you can create a situation that would fail
  // in the future we could add dummy spacer entries where needed to
  // handle alignment issues


  publicAPI.sortBufferEntries = function () {
    if (!model.sortDirty) {
      return;
    }

    var currOffset = 0;
    var newEntries = []; // pack anything whose size is a multiple of 16 bytes first
    // this includes a couple types that don't require 16 byte alignment
    // such as mat2x2<f32> but that is OK

    for (var i = 0; i < model.bufferEntries.length; i++) {
      var entry = model.bufferEntries[i];

      if (entry.packed === false && entry.sizeInBytes % 16 === 0) {
        entry.packed = true;
        entry.offset = currOffset;
        newEntries.push(entry);
        currOffset += entry.sizeInBytes;
      }
    } // now it gets tough, we have the following common types (f32, i32, u32)
    // - vec2<f32> 8 byte size, 8 byte alignment
    // - vec3<f32> 12 byte size, 16 byte alignment
    // - f32 4 byte size, 4 byte alignment
    // try adding 12 byte, 4 byte pairs


    for (var _i = 0; _i < model.bufferEntries.length; _i++) {
      var _entry = model.bufferEntries[_i];

      if (_entry.packed === false && _entry.sizeInBytes === 12) {
        for (var i2 = 0; i2 < model.bufferEntries.length; i2++) {
          var entry2 = model.bufferEntries[i2];

          if (entry2.packed === false && entry2.sizeInBytes === 4) {
            _entry.packed = true;
            _entry.offset = currOffset;
            newEntries.push(_entry);
            currOffset += _entry.sizeInBytes;
            entry2.packed = true;
            entry2.offset = currOffset;
            newEntries.push(entry2);
            currOffset += entry2.sizeInBytes;
            break;
          }
        }
      }
    } // try adding 8 byte, 8 byte pairs


    for (var _i2 = 0; _i2 < model.bufferEntries.length; _i2++) {
      var _entry2 = model.bufferEntries[_i2];

      if (!_entry2.packed && _entry2.sizeInBytes % 8 === 0) {
        for (var _i3 = _i2 + 1; _i3 < model.bufferEntries.length; _i3++) {
          var _entry3 = model.bufferEntries[_i3];

          if (!_entry3.packed && _entry3.sizeInBytes % 8 === 0) {
            _entry2.packed = true;
            _entry2.offset = currOffset;
            newEntries.push(_entry2);
            currOffset += _entry2.sizeInBytes;
            _entry3.packed = true;
            _entry3.offset = currOffset;
            newEntries.push(_entry3);
            currOffset += _entry3.sizeInBytes;
            break;
          }
        }
      }
    } // try adding 8 byte, 4 byte 4 byte triplets


    for (var _i4 = 0; _i4 < model.bufferEntries.length; _i4++) {
      var _entry4 = model.bufferEntries[_i4];

      if (!_entry4.packed && _entry4.sizeInBytes % 8 === 0) {
        var found = false;

        for (var _i5 = 0; !found && _i5 < model.bufferEntries.length; _i5++) {
          var _entry5 = model.bufferEntries[_i5];

          if (!_entry5.packed && _entry5.sizeInBytes === 4) {
            for (var i3 = _i5 + 1; i3 < model.bufferEntries.length; i3++) {
              var entry3 = model.bufferEntries[i3];

              if (!entry3.packed && entry3.sizeInBytes === 4) {
                _entry4.packed = true;
                _entry4.offset = currOffset;
                newEntries.push(_entry4);
                currOffset += _entry4.sizeInBytes;
                _entry5.packed = true;
                _entry5.offset = currOffset;
                newEntries.push(_entry5);
                currOffset += _entry5.sizeInBytes;
                entry3.packed = true;
                entry3.offset = currOffset;
                newEntries.push(entry3);
                currOffset += entry3.sizeInBytes;
                found = true;
                break;
              }
            }
          }
        }
      }
    } // Add anything remaining that is larger than 4 bytes and hope we get lucky.
    // Likely if there is more than one item added here it will result
    // in a failed UBO


    for (var _i6 = 0; _i6 < model.bufferEntries.length; _i6++) {
      var _entry6 = model.bufferEntries[_i6];

      if (!_entry6.packed && _entry6.sizeInBytes > 4) {
        _entry6.packed = true;
        _entry6.offset = currOffset;
        newEntries.push(_entry6);
        currOffset += _entry6.sizeInBytes;
      }
    } // finally add remaining 4 byte items


    for (var _i7 = 0; _i7 < model.bufferEntries.length; _i7++) {
      var _entry7 = model.bufferEntries[_i7];

      if (!_entry7.packed) {
        _entry7.packed = true;
        _entry7.offset = currOffset;
        newEntries.push(_entry7);
        currOffset += _entry7.sizeInBytes;
      }
    } // update entries and entryNames


    model.bufferEntries = newEntries;

    model._bufferEntryNames.clear();

    for (var _i8 = 0; _i8 < model.bufferEntries.length; _i8++) {
      model._bufferEntryNames.set(model.bufferEntries[_i8].name, _i8);
    }

    model.sizeInBytes = currOffset;
    model.sortDirty = false;
  };

  publicAPI.sendIfNeeded = function (device) {
    if (!model.UBO) {
      var req = {
        nativeArray: model.Float32Array,
        time: 0,
        usage: BufferUsage.UniformArray
      };
      model.UBO = device.getBufferManager().getBuffer(req);
      model.bindGroupTime.modified();
      model.sendDirty = false;
    } // send data down if needed


    if (model.sendDirty) {
      device.getHandle().queue.writeBuffer(model.UBO.getHandle(), 0, model.arrayBuffer, 0, model.sizeInBytes);
      model.sendDirty = false;
    } // always updated as mappers depend on this time
    // it is more of a sentIfNeededTime


    model.sendTime.modified();
  };

  publicAPI.createView = function (type) {
    if (type in model === false) {
      if (!model.arrayBuffer) {
        model.arrayBuffer = new ArrayBuffer(model.sizeInBytes);
      }

      model[type] = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newTypedArray(type, model.arrayBuffer);
    }
  };

  publicAPI.setValue = function (name, val) {
    publicAPI.sortBufferEntries();

    var idx = model._bufferEntryNames.get(name);

    if (idx === undefined) {
      vtkErrorMacro("entry named ".concat(name, " not found in UBO"));
      return;
    }

    var entry = model.bufferEntries[idx];
    publicAPI.createView(entry.nativeType);
    var view = model[entry.nativeType];

    if (entry.lastValue !== val) {
      view[entry.offset / view.BYTES_PER_ELEMENT] = val;
      model.sendDirty = true;
    }

    entry.lastValue = val;
  };

  publicAPI.setArray = function (name, arr) {
    publicAPI.sortBufferEntries();

    var idx = model._bufferEntryNames.get(name);

    if (idx === undefined) {
      vtkErrorMacro("entry named ".concat(name, " not found in UBO"));
      return;
    }

    var entry = model.bufferEntries[idx];
    publicAPI.createView(entry.nativeType);
    var view = model[entry.nativeType];
    var changed = false;

    for (var i = 0; i < arr.length; i++) {
      if (!entry.lastValue || entry.lastValue[i] !== arr[i]) {
        view[entry.offset / view.BYTES_PER_ELEMENT + i] = arr[i];
        changed = true;
      }
    }

    if (changed) {
      model.sendDirty = true;
      entry.lastValue = (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__["default"])(arr);
    }
  };

  publicAPI.getBindGroupEntry = function () {
    var foo = {
      resource: {
        buffer: model.UBO.getHandle()
      }
    };
    return foo;
  };

  publicAPI.getSendTime = function () {
    return model.sendTime.getMTime();
  };

  publicAPI.getShaderCode = function (binding, group) {
    // sort the entries
    publicAPI.sortBufferEntries();
    var lines = ["[[block]] struct ".concat(model.name, "Struct\n{")];

    for (var i = 0; i < model.bufferEntries.length; i++) {
      var entry = model.bufferEntries[i];
      lines.push("  ".concat(entry.name, ": ").concat(entry.type, ";"));
    }

    lines.push("};\n[[binding(".concat(binding, "), group(").concat(group, ")]] var<uniform> ").concat(model.name, ": ").concat(model.name, "Struct;"));
    return lines.join('\n');
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  bufferEntries: null,
  bufferEntryNames: null,
  sizeInBytes: 0,
  name: null,
  bindGroupLayoutEntry: null,
  bindGroupEntry: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].obj(publicAPI, model); // Internal objects

  model._bufferEntryNames = new Map();
  model.bufferEntries = []; // default UBO desc

  model.bindGroupLayoutEntry = model.bindGroupLayoutEntry || {
    buffer: {
      type: 'uniform'
    }
  };
  model.sendTime = {};
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].obj(model.sendTime, {
    mtime: 0
  });
  model.bindGroupTime = {};
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].obj(model.bindGroupTime, {
    mtime: 0
  });
  model.sendDirty = true;
  model.sortDirty = true;
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].get(publicAPI, model, ['binding', 'bindGroupTime']);
  _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].setGet(publicAPI, model, ['bindGroupLayoutEntry', 'device', 'name', 'sizeInBytes']); // Object methods

  vtkWebGPUUniformBuffer(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_1__["default"].newInstance(extend, 'vtkWebGPUUniformBuffer'); // ----------------------------------------------------------------------------

var vtkWebGPUUniformBuffer$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/VertexInput.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/WebGPU/VertexInput.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkWebGPUVertexInput$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _Types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Types.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/Types.js");



function arraysEqual(a, b) {
  if (a === b) return true;
  if (a == null || b == null) return false;
  if (a.length !== b.length) return false;

  for (var i = 0; i < a.length; ++i) {
    if (!b.includes(a[i])) return false;
  }

  return true;
} // ----------------------------------------------------------------------------
// vtkWebGPUVertexInput methods
// ----------------------------------------------------------------------------


function vtkWebGPUVertexInput(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkWebGPUVertexInput');

  publicAPI.addBuffer = function (buffer, inames) {
    var stepMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'vertex';
    var names = inames;

    if (!Array.isArray(names)) {
      names = [names];
    } // only add if it is a new setting


    for (var i = 0; i < model.inputs.length; i++) {
      if (arraysEqual(model.inputs[i].names, names)) {
        if (model.inputs[i].buffer === buffer) {
          return;
        }

        model.inputs[i].buffer = buffer;
        return;
      }
    } // when adding a new entry, make sure we sort the array
    // as the order is important to the shader and must always
    // be the same, so alphabetical is an easy option


    model.inputs.push({
      buffer: buffer,
      stepMode: stepMode,
      names: names
    });
    model.inputs = model.inputs.sort(function (v1, v2) {
      if (v1.names[0] < v2.names[0]) {
        return -1;
      }

      if (v1.names[0] > v2.names[0]) {
        return 1;
      }

      return 0;
    });
  };

  publicAPI.removeBufferIfPresent = function (name) {
    for (var i = 0; i < model.inputs.length; i++) {
      if (model.inputs[i].names.includes(name)) {
        model.inputs.splice(i, 1);
      }
    }
  };

  publicAPI.getBuffer = function (name) {
    for (var i = 0; i < model.inputs.length; i++) {
      if (model.inputs[i].names.includes(name)) {
        return model.inputs[i].buffer;
      }
    }

    return null;
  };

  publicAPI.hasAttribute = function (name) {
    for (var i = 0; i < model.inputs.length; i++) {
      if (model.inputs[i].names.includes(name)) {
        return true;
      }
    }

    return false;
  };

  publicAPI.getAttributeTime = function (name) {
    for (var i = 0; i < model.inputs.length; i++) {
      if (model.inputs[i].names.includes(name)) {
        return model.inputs[i].buffer.getSourceTime();
      }
    }

    return 0;
  };

  publicAPI.getShaderCode = function () {
    var result = '';
    var nameCount = 0;

    for (var i = 0; i < model.inputs.length; i++) {
      for (var nm = 0; nm < model.inputs[i].names.length; nm++) {
        var arrayInfo = model.inputs[i].buffer.getArrayInformation()[nm];
        var type = _Types_js__WEBPACK_IMPORTED_MODULE_1__["default"].getShaderTypeFromBufferFormat(arrayInfo.format);

        if (nameCount > 0) {
          result += ',\n';
        }

        result = "".concat(result, "  [[location(").concat(nameCount, ")]] ").concat(model.inputs[i].names[nm], " : ").concat(type);
        nameCount++;
      }
    }

    return result;
  };

  publicAPI.getVertexInputInformation = function () {
    var info = {};

    if (model.inputs.length) {
      var vertexBuffers = [];
      var nameCount = 0;

      for (var i = 0; i < model.inputs.length; i++) {
        var buf = model.inputs[i].buffer;
        var buffer = {
          arrayStride: buf.getStrideInBytes(),
          stepMode: model.inputs[i].stepMode,
          attributes: []
        };
        var arrayInfo = buf.getArrayInformation();

        for (var nm = 0; nm < model.inputs[i].names.length; nm++) {
          buffer.attributes.push({
            shaderLocation: nameCount,
            offset: arrayInfo[nm].offset,
            format: arrayInfo[nm].format
          });
          nameCount++;
        }

        vertexBuffers.push(buffer);
      }

      info.buffers = vertexBuffers;
    }

    return info;
  };

  publicAPI.bindBuffers = function (renderEncoder) {
    for (var i = 0; i < model.inputs.length; i++) {
      renderEncoder.setVertexBuffer(i, model.inputs[i].buffer.getHandle());
    }
  };

  publicAPI.getReady = function () {};

  publicAPI.releaseGraphicsResources = function () {
    if (model.created) {
      model.inputs = [];
      model.bindingDescriptions = [];
      model.attributeDescriptions = [];
    }
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  inputs: null,
  bindingDescriptions: false,
  attributeDescriptions: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Build VTK API

  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.obj)(publicAPI, model);
  model.bindingDescriptions = [];
  model.attributeDescriptions = [];
  model.inputs = [];
  (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.setGet)(publicAPI, model, ['created', 'device', 'handle']); // For more macro methods, see "Sources/macros.js"
  // Object specific methods

  vtkWebGPUVertexInput(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = (0,_macros_js__WEBPACK_IMPORTED_MODULE_0__.newInstance)(extend, 'vtkWebGPUVertexInput'); // ----------------------------------------------------------------------------

var vtkWebGPUVertexInput$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/ViewNodeFactory.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/WebGPU/ViewNodeFactory.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtkWebGPUViewNodeFactory$1),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance),
/* harmony export */   "registerOverride": () => (/* binding */ registerOverride)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _SceneGraph_ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../SceneGraph/ViewNodeFactory.js */ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/ViewNodeFactory.js");



var CLASS_MAPPING = Object.create(null);
function registerOverride(className, fn) {
  CLASS_MAPPING[className] = fn;
} // ----------------------------------------------------------------------------
// vtkWebGPUViewNodeFactory methods
// ----------------------------------------------------------------------------

function vtkWebGPUViewNodeFactory(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkWebGPUViewNodeFactory');
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Static class mapping shared across instances

  model.overrides = CLASS_MAPPING; // Inheritance

  _SceneGraph_ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues); // Object methods

  vtkWebGPUViewNodeFactory(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkWebGPUViewNodeFactory'); // ----------------------------------------------------------------------------

var vtkWebGPUViewNodeFactory$1 = {
  newInstance: newInstance,
  extend: extend
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/Volume.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/Rendering/WebGPU/Volume.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ index),
/* harmony export */   "extend": () => (/* binding */ extend),
/* harmony export */   "newInstance": () => (/* binding */ newInstance)
/* harmony export */ });
/* harmony import */ var _macros_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../macros.js */ "./node_modules/@kitware/vtk.js/macros.js");
/* harmony import */ var _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../SceneGraph/ViewNode.js */ "./node_modules/@kitware/vtk.js/Rendering/SceneGraph/ViewNode.js");
/* harmony import */ var _ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ViewNodeFactory.js */ "./node_modules/@kitware/vtk.js/Rendering/WebGPU/ViewNodeFactory.js");
/* harmony import */ var _vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../vendor/gl-matrix/esm/mat4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js");





// vtkWebGPUVolume methods
// ----------------------------------------------------------------------------

function vtkWebGPUVolume(publicAPI, model) {
  // Set our className
  model.classHierarchy.push('vtkWebGPUVolume'); // Builds myself.

  publicAPI.buildPass = function (prepass) {
    if (!model.renderable || !model.renderable.getVisibility()) {
      return;
    }

    if (prepass) {
      model.WebGPURenderer = publicAPI.getFirstAncestorOfType('vtkWebGPURenderer');
      model.WebGPURenderWindow = model.WebGPURenderer.getFirstAncestorOfType('vtkWebGPURenderWindow'); // for the future if we support hardware selection of volumes

      if (model.propID === undefined) {
        model.propID = model.WebGPURenderWindow.getUniquePropID();
      }

      publicAPI.prepareNodes();
      model.renderable.getMapper().update(); // publicAPI.addMissingNode(model.renderable.getMapper());

      publicAPI.removeUnusedNodes();
    }
  };

  publicAPI.queryPass = function (prepass, renderPass) {
    if (prepass) {
      if (!model.renderable || !model.renderable.getVisibility()) {
        return;
      } // Check for the special case when the mapper's bounds are unknown


      var bds = model.renderable.getMapper().getBounds();

      if (!bds || bds.length !== 6 || bds[0] > bds[1]) {
        return;
      }

      renderPass.addVolume(publicAPI);
    }
  }; // used in the method below


  var idx = new Float64Array(3);
  var vout = new Float64Array(3);

  publicAPI.getBoundingCubePoints = function (result, offset) {
    var input = model.renderable.getMapper().getInputData();

    if (!input) {
      return;
    }

    var extent = input.getExtent();
    var m = model.renderable.getMatrix();
    var count = 0;

    for (var iz = 4; iz < 6; iz++) {
      idx[2] = extent[iz];

      for (var iy = 2; iy < 4; iy++) {
        idx[1] = extent[iy];

        for (var ix = 0; ix < 2; ix++) {
          idx[0] = extent[ix];
          input.indexToWorld(idx, vout);
          var poffset = offset + count * 3;
          result[poffset++] = m[0] * vout[0] + m[1] * vout[1] + m[2] * vout[2] + m[3];
          result[poffset++] = m[4] * vout[0] + m[5] * vout[1] + m[6] * vout[2] + m[7];
          result[poffset++] = m[8] * vout[0] + m[9] * vout[1] + m[10] * vout[2] + m[11];
          count++;
        }
      }
    }
  };

  publicAPI.traverseVolumePass = function (renderPass) {
    if (!model.renderable || !model.renderable.getNestedVisibility() || model.WebGPURenderer.getSelector() && !model.renderable.getNestedPickable()) {
      return;
    }

    publicAPI.apply(renderPass, true);
    model.children[0].traverse(renderPass);
    publicAPI.apply(renderPass, false);
  };

  publicAPI.getKeyMatrices = function (wgpuRen) {
    // has the actor or stabilization center changed?
    if (Math.max(model.renderable.getMTime(), wgpuRen.getStabilizedTime()) > model.keyMatricesTime.getMTime()) {
      model.renderable.computeMatrix();
      var mcwc = model.renderable.getMatrix(); // compute the net shift

      var center = wgpuRen.getStabilizedCenterByReference();
      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.j)(model.keyMatrices.bcwc, mcwc); // to get to stabilized we also need the center

      (0,_vendor_gl_matrix_esm_mat4_js__WEBPACK_IMPORTED_MODULE_3__.t)(model.keyMatrices.bcsc, model.keyMatrices.bcwc, [-center[0], -center[1], -center[2]]);
      model.keyMatricesTime.modified();
    }

    return model.keyMatrices;
  };
} // ----------------------------------------------------------------------------
// Object factory
// ----------------------------------------------------------------------------


var DEFAULT_VALUES = {
  propID: undefined,
  keyMatricesTime: null
}; // ----------------------------------------------------------------------------

function extend(publicAPI, model) {
  var initialValues = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  Object.assign(model, DEFAULT_VALUES, initialValues); // Inheritance

  _SceneGraph_ViewNode_js__WEBPACK_IMPORTED_MODULE_1__["default"].extend(publicAPI, model, initialValues);
  model.keyMatricesTime = {};
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].obj(model.keyMatricesTime, {
    mtime: 0
  });
  model.keyMatrices = {
    bcwc: new Float64Array(16),
    bcsc: new Float64Array(16)
  };
  _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].get(publicAPI, model, ['propID', 'keyMatricesTime']); // Object methods

  vtkWebGPUVolume(publicAPI, model);
} // ----------------------------------------------------------------------------

var newInstance = _macros_js__WEBPACK_IMPORTED_MODULE_0__["default"].newInstance(extend, 'vtkWebGPUVolume'); // ----------------------------------------------------------------------------

var index = {
  newInstance: newInstance,
  extend: extend
}; // Register ourself to WebGPU backend if imported

(0,_ViewNodeFactory_js__WEBPACK_IMPORTED_MODULE_2__.registerOverride)('vtkVolume', newInstance);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/_vendor/blueimp-md5/js/md5.js_commonjs-module.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/_vendor/blueimp-md5/js/md5.js_commonjs-module.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "m": () => (/* binding */ md5)
/* harmony export */ });
var md5 = {exports: {}};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/_vendor/globalthis/implementation.browser.js_commonjs-module.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/_vendor/globalthis/implementation.browser.js_commonjs-module.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "i": () => (/* binding */ implementation_browser)
/* harmony export */ });
var implementation_browser = {exports: {}};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/_vendor/seedrandom/lib/alea.js_commonjs-module.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/_vendor/seedrandom/lib/alea.js_commonjs-module.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "a": () => (/* binding */ alea)
/* harmony export */ });
var alea = {exports: {}};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/_vendor/seedrandom/lib/tychei.js_commonjs-module.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/_vendor/seedrandom/lib/tychei.js_commonjs-module.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "t": () => (/* binding */ tychei)
/* harmony export */ });
var tychei = {exports: {}};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/_vendor/seedrandom/lib/xor128.js_commonjs-module.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/_vendor/seedrandom/lib/xor128.js_commonjs-module.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "x": () => (/* binding */ xor128)
/* harmony export */ });
var xor128 = {exports: {}};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/_vendor/seedrandom/lib/xor4096.js_commonjs-module.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/_vendor/seedrandom/lib/xor4096.js_commonjs-module.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "x": () => (/* binding */ xor4096)
/* harmony export */ });
var xor4096 = {exports: {}};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/_vendor/seedrandom/lib/xorshift7.js_commonjs-module.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/_vendor/seedrandom/lib/xorshift7.js_commonjs-module.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "x": () => (/* binding */ xorshift7)
/* harmony export */ });
var xorshift7 = {exports: {}};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/_vendor/seedrandom/lib/xorwow.js_commonjs-module.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/_vendor/seedrandom/lib/xorwow.js_commonjs-module.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "x": () => (/* binding */ xorwow)
/* harmony export */ });
var xorwow = {exports: {}};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/_vendor/seedrandom/seedrandom.js_commonjs-module.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/_vendor/seedrandom/seedrandom.js_commonjs-module.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "s": () => (/* binding */ seedrandom)
/* harmony export */ });
var seedrandom = {exports: {}};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/_virtual/_rollup_plugin_ignore_empty_module_placeholder_commonjs-proxy.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/_virtual/_rollup_plugin_ignore_empty_module_placeholder_commonjs-proxy.js ***!
  \****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "r": () => (/* binding */ require$$0)
/* harmony export */ });
/* harmony import */ var _rollup_plugin_ignore_empty_module_placeholder_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./rollup_plugin_ignore_empty_module_placeholder.js */ "./node_modules/@kitware/vtk.js/_virtual/rollup_plugin_ignore_empty_module_placeholder.js");
/* harmony import */ var _commonjsHelpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./commonjsHelpers.js */ "./node_modules/@kitware/vtk.js/_virtual/commonjsHelpers.js");



var require$$0 = /*@__PURE__*/(0,_commonjsHelpers_js__WEBPACK_IMPORTED_MODULE_1__.g)(_rollup_plugin_ignore_empty_module_placeholder_js__WEBPACK_IMPORTED_MODULE_0__._);




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/_virtual/commonjsHelpers.js":
/*!******************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/_virtual/commonjsHelpers.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "a": () => (/* binding */ commonjsRequire),
/* harmony export */   "c": () => (/* binding */ commonjsGlobal),
/* harmony export */   "g": () => (/* binding */ getAugmentedNamespace)
/* harmony export */ });
var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof __webpack_require__.g !== 'undefined' ? __webpack_require__.g : typeof self !== 'undefined' ? self : {};

function getAugmentedNamespace(n) {
	if (n.__esModule) return n;
	var a = Object.defineProperty({}, '__esModule', {value: true});
	Object.keys(n).forEach(function (k) {
		var d = Object.getOwnPropertyDescriptor(n, k);
		Object.defineProperty(a, k, d.get ? d : {
			enumerable: true,
			get: function () {
				return n[k];
			}
		});
	});
	return a;
}

function commonjsRequire (path) {
	throw new Error('Could not dynamically require "' + path + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/_virtual/rollup_plugin_ignore_empty_module_placeholder.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/_virtual/rollup_plugin_ignore_empty_module_placeholder.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "_": () => (/* binding */ _rollup_plugin_ignore_empty_module_placeholder$1)
/* harmony export */ });
var _rollup_plugin_ignore_empty_module_placeholder = {};

var _rollup_plugin_ignore_empty_module_placeholder$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': _rollup_plugin_ignore_empty_module_placeholder
});




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/macros.js":
/*!************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/macros.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EVENT_ABORT": () => (/* binding */ EVENT_ABORT),
/* harmony export */   "TYPED_ARRAYS": () => (/* binding */ TYPED_ARRAYS),
/* harmony export */   "VOID": () => (/* binding */ VOID),
/* harmony export */   "algo": () => (/* binding */ algo),
/* harmony export */   "capitalize": () => (/* binding */ capitalize),
/* harmony export */   "chain": () => (/* binding */ chain),
/* harmony export */   "debounce": () => (/* binding */ debounce),
/* harmony export */   "default": () => (/* binding */ macro),
/* harmony export */   "event": () => (/* binding */ event),
/* harmony export */   "formatBytesToProperUnit": () => (/* binding */ formatBytesToProperUnit),
/* harmony export */   "formatNumbersWithThousandSeparator": () => (/* binding */ formatNumbersWithThousandSeparator),
/* harmony export */   "get": () => (/* binding */ get),
/* harmony export */   "getArray": () => (/* binding */ getArray),
/* harmony export */   "isVtkObject": () => (/* binding */ isVtkObject),
/* harmony export */   "keystore": () => (/* binding */ keystore),
/* harmony export */   "newInstance": () => (/* binding */ newInstance),
/* harmony export */   "newTypedArray": () => (/* binding */ newTypedArray),
/* harmony export */   "newTypedArrayFrom": () => (/* binding */ newTypedArrayFrom),
/* harmony export */   "normalizeWheel": () => (/* binding */ normalizeWheel),
/* harmony export */   "obj": () => (/* binding */ obj),
/* harmony export */   "proxy": () => (/* binding */ proxy),
/* harmony export */   "proxyPropertyMapping": () => (/* binding */ proxyPropertyMapping),
/* harmony export */   "proxyPropertyState": () => (/* binding */ proxyPropertyState),
/* harmony export */   "set": () => (/* binding */ set),
/* harmony export */   "setArray": () => (/* binding */ setArray),
/* harmony export */   "setGet": () => (/* binding */ setGet),
/* harmony export */   "setGetArray": () => (/* binding */ setGetArray),
/* harmony export */   "setImmediateVTK": () => (/* binding */ setImmediateVTK),
/* harmony export */   "setLoggerFunction": () => (/* binding */ setLoggerFunction),
/* harmony export */   "throttle": () => (/* binding */ throttle),
/* harmony export */   "traverseInstanceTree": () => (/* binding */ traverseInstanceTree),
/* harmony export */   "uncapitalize": () => (/* binding */ uncapitalize),
/* harmony export */   "vtkDebugMacro": () => (/* binding */ vtkDebugMacro),
/* harmony export */   "vtkErrorMacro": () => (/* binding */ vtkErrorMacro),
/* harmony export */   "vtkInfoMacro": () => (/* binding */ vtkInfoMacro),
/* harmony export */   "vtkLogMacro": () => (/* binding */ vtkLogMacro),
/* harmony export */   "vtkOnceErrorMacro": () => (/* binding */ vtkOnceErrorMacro),
/* harmony export */   "vtkWarningMacro": () => (/* binding */ vtkWarningMacro)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js");
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_construct__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/construct */ "./node_modules/@babel/runtime/helpers/esm/construct.js");
/* harmony import */ var _vtk_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./vtk.js */ "./node_modules/@kitware/vtk.js/vtk.js");
/* harmony import */ var _Common_Core_ClassHierarchy_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./Common/Core/ClassHierarchy.js */ "./node_modules/@kitware/vtk.js/Common/Core/ClassHierarchy.js");








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var globalMTime = 0;
var VOID = Symbol('void');

function getCurrentGlobalMTime() {
  return globalMTime;
} // ----------------------------------------------------------------------------
// Logging function calls
// ----------------------------------------------------------------------------

/* eslint-disable no-prototype-builtins                                      */


var fakeConsole = {};

function noOp() {}

var consoleMethods = ['log', 'debug', 'info', 'warn', 'error', 'time', 'timeEnd', 'group', 'groupEnd'];
consoleMethods.forEach(function (methodName) {
  fakeConsole[methodName] = noOp;
});
_vtk_js__WEBPACK_IMPORTED_MODULE_5__.vtkGlobal.console = console.hasOwnProperty('log') ? console : fakeConsole;
var loggerFunctions = {
  debug: noOp,
  // Don't print debug by default
  error: _vtk_js__WEBPACK_IMPORTED_MODULE_5__.vtkGlobal.console.error || noOp,
  info: _vtk_js__WEBPACK_IMPORTED_MODULE_5__.vtkGlobal.console.info || noOp,
  log: _vtk_js__WEBPACK_IMPORTED_MODULE_5__.vtkGlobal.console.log || noOp,
  warn: _vtk_js__WEBPACK_IMPORTED_MODULE_5__.vtkGlobal.console.warn || noOp
};
function setLoggerFunction(name, fn) {
  if (loggerFunctions[name]) {
    loggerFunctions[name] = fn || noOp;
  }
}
function vtkLogMacro() {
  loggerFunctions.log.apply(loggerFunctions, arguments);
}
function vtkInfoMacro() {
  loggerFunctions.info.apply(loggerFunctions, arguments);
}
function vtkDebugMacro() {
  loggerFunctions.debug.apply(loggerFunctions, arguments);
}
function vtkErrorMacro() {
  loggerFunctions.error.apply(loggerFunctions, arguments);
}
function vtkWarningMacro() {
  loggerFunctions.warn.apply(loggerFunctions, arguments);
}
var ERROR_ONCE_MAP = {};
function vtkOnceErrorMacro(str) {
  if (!ERROR_ONCE_MAP[str]) {
    loggerFunctions.error(str);
    ERROR_ONCE_MAP[str] = true;
  }
} // ----------------------------------------------------------------------------
// TypedArray
// ----------------------------------------------------------------------------

var TYPED_ARRAYS = Object.create(null);
TYPED_ARRAYS.Float32Array = Float32Array;
TYPED_ARRAYS.Float64Array = Float64Array;
TYPED_ARRAYS.Uint8Array = Uint8Array;
TYPED_ARRAYS.Int8Array = Int8Array;
TYPED_ARRAYS.Uint16Array = Uint16Array;
TYPED_ARRAYS.Int16Array = Int16Array;
TYPED_ARRAYS.Uint32Array = Uint32Array;
TYPED_ARRAYS.Int32Array = Int32Array;
TYPED_ARRAYS.Uint8ClampedArray = Uint8ClampedArray; // TYPED_ARRAYS.BigInt64Array = BigInt64Array;
// TYPED_ARRAYS.BigUint64Array = BigUint64Array;

function newTypedArray(type) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  return (0,_babel_runtime_helpers_construct__WEBPACK_IMPORTED_MODULE_4__["default"])(TYPED_ARRAYS[type] || Float64Array, args);
}
function newTypedArrayFrom(type) {
  var _ref;

  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  return (_ref = TYPED_ARRAYS[type] || Float64Array).from.apply(_ref, args);
} // ----------------------------------------------------------------------------
// capitilze provided string
// ----------------------------------------------------------------------------

function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}
function uncapitalize(str) {
  return str.charAt(0).toLowerCase() + str.slice(1);
} // ----------------------------------------------------------------------------
// Convert byte size into a well formatted string
// ----------------------------------------------------------------------------

function formatBytesToProperUnit(size) {
  var precision = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;
  var chunkSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000;
  var units = ['TB', 'GB', 'MB', 'KB'];
  var value = Number(size);
  var currentUnit = 'B';

  while (value > chunkSize) {
    value /= chunkSize;
    currentUnit = units.pop();
  }

  return "".concat(value.toFixed(precision), " ").concat(currentUnit);
} // ----------------------------------------------------------------------------
// Convert thousand number with proper separator
// ----------------------------------------------------------------------------

function formatNumbersWithThousandSeparator(n) {
  var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ' ';
  var sections = [];
  var size = n;

  while (size > 1000) {
    sections.push("000".concat(size % 1000).slice(-3));
    size = Math.floor(size / 1000);
  }

  if (size > 0) {
    sections.push(size);
  }

  sections.reverse();
  return sections.join(separator);
} // ----------------------------------------------------------------------------
// Array helper
// ----------------------------------------------------------------------------

function safeArrays(model) {
  Object.keys(model).forEach(function (key) {
    if (Array.isArray(model[key])) {
      model[key] = [].concat(model[key]);
    }
  });
} // ----------------------------------------------------------------------------
// shallow equals
// ----------------------------------------------------------------------------


function shallowEquals(a, b) {
  if (a === b) {
    return true;
  }

  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length) {
      return false;
    }

    for (var i = 0; i < a.length; i++) {
      if (a[i] !== b[i]) {
        return false;
      }
    }

    return true;
  }

  return false;
} // ----------------------------------------------------------------------------


function enumToString(e, value) {
  return Object.keys(e).find(function (key) {
    return e[key] === value;
  });
}

function getStateArrayMapFunc(item) {
  if (item.isA) {
    return item.getState();
  }

  return item;
} // ----------------------------------------------------------------------------
// setImmediate
// ----------------------------------------------------------------------------


function setImmediateVTK(fn) {
  setTimeout(fn, 0);
} // ----------------------------------------------------------------------------
// vtkObject: modified(), onModified(callback), delete()
// ----------------------------------------------------------------------------

function obj() {
  var publicAPI = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var model = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  // Ensure each instance as a unique ref of array
  safeArrays(model);
  var callbacks = [];

  if (!Number.isInteger(model.mtime)) {
    model.mtime = ++globalMTime;
  }

  if (!('classHierarchy' in model)) {
    model.classHierarchy = new _Common_Core_ClassHierarchy_js__WEBPACK_IMPORTED_MODULE_6__["default"]('vtkObject');
  } else if (!(model.classHierarchy instanceof _Common_Core_ClassHierarchy_js__WEBPACK_IMPORTED_MODULE_6__["default"])) {
    model.classHierarchy = _Common_Core_ClassHierarchy_js__WEBPACK_IMPORTED_MODULE_6__["default"].from(model.classHierarchy);
  }

  function off(index) {
    callbacks[index] = null;
  }

  function on(index) {
    function unsubscribe() {
      off(index);
    }

    return Object.freeze({
      unsubscribe: unsubscribe
    });
  }

  publicAPI.isDeleted = function () {
    return !!model.deleted;
  };

  publicAPI.modified = function (otherMTime) {
    if (model.deleted) {
      vtkErrorMacro('instance deleted - cannot call any method');
      return;
    }

    if (otherMTime && otherMTime < publicAPI.getMTime()) {
      return;
    }

    model.mtime = ++globalMTime;
    callbacks.forEach(function (callback) {
      return callback && callback(publicAPI);
    });
  };

  publicAPI.onModified = function (callback) {
    if (model.deleted) {
      vtkErrorMacro('instance deleted - cannot call any method');
      return null;
    }

    var index = callbacks.length;
    callbacks.push(callback);
    return on(index);
  };

  publicAPI.getMTime = function () {
    return model.mtime;
  };

  publicAPI.isA = function (className) {
    var count = model.classHierarchy.length; // we go backwards as that is more likely for
    // early termination

    while (count--) {
      if (model.classHierarchy[count] === className) {
        return true;
      }
    }

    return false;
  };

  publicAPI.getClassName = function () {
    var depth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    return model.classHierarchy[model.classHierarchy.length - 1 - depth];
  };

  publicAPI.set = function () {
    var map = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var noWarning = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    var noFunction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var ret = false;
    Object.keys(map).forEach(function (name) {
      var fn = noFunction ? null : publicAPI["set".concat(capitalize(name))];

      if (fn && Array.isArray(map[name]) && fn.length > 1) {
        ret = fn.apply(void 0, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__["default"])(map[name])) || ret;
      } else if (fn) {
        ret = fn(map[name]) || ret;
      } else {
        // Set data on model directly
        if (['mtime'].indexOf(name) === -1 && !noWarning) {
          vtkWarningMacro("Warning: Set value to model directly ".concat(name, ", ").concat(map[name]));
        }

        model[name] = map[name];
        ret = true;
      }
    });
    return ret;
  };

  publicAPI.get = function () {
    for (var _len3 = arguments.length, list = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      list[_key3] = arguments[_key3];
    }

    if (!list.length) {
      return model;
    }

    var subset = {};
    list.forEach(function (name) {
      subset[name] = model[name];
    });
    return subset;
  };

  publicAPI.getReferenceByName = function (val) {
    return model[val];
  };

  publicAPI.delete = function () {
    Object.keys(model).forEach(function (field) {
      return delete model[field];
    });
    callbacks.forEach(function (el, index) {
      return off(index);
    }); // Flag the instance being deleted

    model.deleted = true;
  }; // Add serialization support


  publicAPI.getState = function () {
    var jsonArchive = _objectSpread(_objectSpread({}, model), {}, {
      vtkClass: publicAPI.getClassName()
    }); // Convert every vtkObject to its serializable form


    Object.keys(jsonArchive).forEach(function (keyName) {
      if (jsonArchive[keyName] === null || jsonArchive[keyName] === undefined || keyName[0] === '_' // protected members start with _
      ) {
        delete jsonArchive[keyName];
      } else if (jsonArchive[keyName].isA) {
        jsonArchive[keyName] = jsonArchive[keyName].getState();
      } else if (Array.isArray(jsonArchive[keyName])) {
        jsonArchive[keyName] = jsonArchive[keyName].map(getStateArrayMapFunc);
      }
    }); // Sort resulting object by key name

    var sortedObj = {};
    Object.keys(jsonArchive).sort().forEach(function (name) {
      sortedObj[name] = jsonArchive[name];
    }); // Remove mtime

    if (sortedObj.mtime) {
      delete sortedObj.mtime;
    }

    return sortedObj;
  }; // Add shallowCopy(otherInstance) support


  publicAPI.shallowCopy = function (other) {
    var debug = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (other.getClassName() !== publicAPI.getClassName()) {
      throw new Error("Cannot ShallowCopy ".concat(other.getClassName(), " into ").concat(publicAPI.getClassName()));
    }

    var otherModel = other.get();
    var keyList = Object.keys(model).sort();
    var otherKeyList = Object.keys(otherModel).sort();
    otherKeyList.forEach(function (key) {
      var keyIdx = keyList.indexOf(key);

      if (keyIdx === -1) {
        if (debug) {
          vtkDebugMacro("add ".concat(key, " in shallowCopy"));
        }
      } else {
        keyList.splice(keyIdx, 1);
      }

      model[key] = otherModel[key];
    });

    if (keyList.length && debug) {
      vtkDebugMacro("Untouched keys: ".concat(keyList.join(', ')));
    }

    publicAPI.modified();
  }; // Allow usage as decorator


  return publicAPI;
} // ----------------------------------------------------------------------------
// getXXX: add getters
// ----------------------------------------------------------------------------

function get(publicAPI, model, fieldNames) {
  fieldNames.forEach(function (field) {
    if ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_1__["default"])(field) === 'object') {
      publicAPI["get".concat(capitalize(field.name))] = function () {
        return model[field.name];
      };
    } else {
      publicAPI["get".concat(capitalize(field))] = function () {
        return model[field];
      };
    }
  });
} // ----------------------------------------------------------------------------
// setXXX: add setters
// ----------------------------------------------------------------------------

var objectSetterMap = {
  enum: function _enum(publicAPI, model, field) {
    return function (value) {
      if (typeof value === 'string') {
        if (field.enum[value] !== undefined) {
          if (model[field.name] !== field.enum[value]) {
            model[field.name] = field.enum[value];
            publicAPI.modified();
            return true;
          }

          return false;
        }

        vtkErrorMacro("Set Enum with invalid argument ".concat(field, ", ").concat(value));
        throw new RangeError('Set Enum with invalid string argument');
      }

      if (typeof value === 'number') {
        if (model[field.name] !== value) {
          if (Object.keys(field.enum).map(function (key) {
            return field.enum[key];
          }).indexOf(value) !== -1) {
            model[field.name] = value;
            publicAPI.modified();
            return true;
          }

          vtkErrorMacro("Set Enum outside numeric range ".concat(field, ", ").concat(value));
          throw new RangeError('Set Enum outside numeric range');
        }

        return false;
      }

      vtkErrorMacro("Set Enum with invalid argument (String/Number) ".concat(field, ", ").concat(value));
      throw new TypeError('Set Enum with invalid argument (String/Number)');
    };
  }
};

function findSetter(field) {
  if ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_1__["default"])(field) === 'object') {
    var fn = objectSetterMap[field.type];

    if (fn) {
      return function (publicAPI, model) {
        return fn(publicAPI, model, field);
      };
    }

    vtkErrorMacro("No setter for field ".concat(field));
    throw new TypeError('No setter for field');
  }

  return function getSetter(publicAPI, model) {
    return function setter(value) {
      if (model.deleted) {
        vtkErrorMacro('instance deleted - cannot call any method');
        return false;
      }

      if (model[field] !== value) {
        model[field] = value;
        publicAPI.modified();
        return true;
      }

      return false;
    };
  };
}

function set(publicAPI, model, fields) {
  fields.forEach(function (field) {
    if ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_1__["default"])(field) === 'object') {
      publicAPI["set".concat(capitalize(field.name))] = findSetter(field)(publicAPI, model);
    } else {
      publicAPI["set".concat(capitalize(field))] = findSetter(field)(publicAPI, model);
    }
  });
} // ----------------------------------------------------------------------------
// set/get XXX: add both setters and getters
// ----------------------------------------------------------------------------

function setGet(publicAPI, model, fieldNames) {
  get(publicAPI, model, fieldNames);
  set(publicAPI, model, fieldNames);
} // ----------------------------------------------------------------------------
// getXXX: add getters for object of type array with copy to be safe
// getXXXByReference: add getters for object of type array without copy
// ----------------------------------------------------------------------------

function getArray(publicAPI, model, fieldNames) {
  fieldNames.forEach(function (field) {
    publicAPI["get".concat(capitalize(field))] = function () {
      return [].concat(model[field]);
    };

    publicAPI["get".concat(capitalize(field), "ByReference")] = function () {
      return model[field];
    };
  });
} // ----------------------------------------------------------------------------
// setXXX: add setter for object of type array
// if 'defaultVal' is supplied, shorter arrays will be padded to 'size' with 'defaultVal'
// set...From: fast path to copy the content of an array to the current one without call to modified.
// ----------------------------------------------------------------------------

function setArray(publicAPI, model, fieldNames, size) {
  var defaultVal = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
  fieldNames.forEach(function (field) {
    publicAPI["set".concat(capitalize(field))] = function () {
      if (model.deleted) {
        vtkErrorMacro('instance deleted - cannot call any method');
        return false;
      }

      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      var array = args; // allow an array passed as a single arg.

      if (array.length === 1 && array[0].length) {
        /* eslint-disable prefer-destructuring */
        array = array[0];
        /* eslint-enable prefer-destructuring */
      }

      if (array.length !== size) {
        if (array.length < size && defaultVal !== undefined) {
          array = Array.from(array);

          while (array.length < size) {
            array.push(defaultVal);
          }
        } else {
          throw new RangeError("Invalid number of values for array setter (".concat(field, ")"));
        }
      }

      var changeDetected = model[field].some(function (item, index) {
        return item !== array[index];
      });

      if (changeDetected || model[field].length !== array.length) {
        model[field] = Array.from(array);
        publicAPI.modified();
        return true;
      }

      return false;
    };

    publicAPI["set".concat(capitalize(field), "From")] = function (otherArray) {
      var target = model[field];
      otherArray.forEach(function (v, i) {
        target[i] = v;
      });
    };
  });
} // ----------------------------------------------------------------------------
// set/get XXX: add setter and getter for object of type array
// ----------------------------------------------------------------------------

function setGetArray(publicAPI, model, fieldNames, size) {
  var defaultVal = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
  getArray(publicAPI, model, fieldNames);
  setArray(publicAPI, model, fieldNames, size, defaultVal);
} // ----------------------------------------------------------------------------
// vtkAlgorithm: setInputData(), setInputConnection(), getOutputData(), getOutputPort()
// ----------------------------------------------------------------------------

function algo(publicAPI, model, numberOfInputs, numberOfOutputs) {
  if (model.inputData) {
    model.inputData = model.inputData.map(_vtk_js__WEBPACK_IMPORTED_MODULE_5__["default"]);
  } else {
    model.inputData = [];
  }

  if (model.inputConnection) {
    model.inputConnection = model.inputConnection.map(_vtk_js__WEBPACK_IMPORTED_MODULE_5__["default"]);
  } else {
    model.inputConnection = [];
  }

  if (model.output) {
    model.output = model.output.map(_vtk_js__WEBPACK_IMPORTED_MODULE_5__["default"]);
  } else {
    model.output = [];
  }

  if (model.inputArrayToProcess) {
    model.inputArrayToProcess = model.inputArrayToProcess.map(_vtk_js__WEBPACK_IMPORTED_MODULE_5__["default"]);
  } else {
    model.inputArrayToProcess = [];
  } // Cache the argument for later manipulation


  model.numberOfInputs = numberOfInputs; // Methods

  function setInputData(dataset) {
    var port = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    if (model.deleted) {
      vtkErrorMacro('instance deleted - cannot call any method');
      return;
    }

    if (port >= model.numberOfInputs) {
      vtkErrorMacro("algorithm ".concat(publicAPI.getClassName(), " only has ").concat(model.numberOfInputs, " input ports. To add more input ports, use addInputData()"));
      return;
    }

    if (model.inputData[port] !== dataset || model.inputConnection[port]) {
      model.inputData[port] = dataset;
      model.inputConnection[port] = null;

      if (publicAPI.modified) {
        publicAPI.modified();
      }
    }
  }

  function getInputData() {
    var port = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    if (model.inputConnection[port]) {
      model.inputData[port] = model.inputConnection[port]();
    }

    return model.inputData[port];
  }

  function setInputConnection(outputPort) {
    var port = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    if (model.deleted) {
      vtkErrorMacro('instance deleted - cannot call any method');
      return;
    }

    if (port >= model.numberOfInputs) {
      var msg = "algorithm ".concat(publicAPI.getClassName(), " only has ");
      msg += "".concat(model.numberOfInputs);
      msg += ' input ports. To add more input ports, use addInputConnection()';
      vtkErrorMacro(msg);
      return;
    }

    model.inputData[port] = null;
    model.inputConnection[port] = outputPort;
  }

  function getInputConnection() {
    var port = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    return model.inputConnection[port];
  }

  function addInputConnection(outputPort) {
    if (model.deleted) {
      vtkErrorMacro('instance deleted - cannot call any method');
      return;
    }

    model.numberOfInputs++;
    setInputConnection(outputPort, model.numberOfInputs - 1);
  }

  function addInputData(dataset) {
    if (model.deleted) {
      vtkErrorMacro('instance deleted - cannot call any method');
      return;
    }

    model.numberOfInputs++;
    setInputData(dataset, model.numberOfInputs - 1);
  }

  function getOutputData() {
    var port = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    if (model.deleted) {
      vtkErrorMacro('instance deleted - cannot call any method');
      return null;
    }

    if (publicAPI.shouldUpdate()) {
      publicAPI.update();
    }

    return model.output[port];
  }

  publicAPI.shouldUpdate = function () {
    var localMTime = publicAPI.getMTime();
    var count = numberOfOutputs;
    var minOutputMTime = Infinity;

    while (count--) {
      if (!model.output[count]) {
        return true;
      }

      if (model.output[count].isDeleted()) {
        return true;
      }

      var mt = model.output[count].getMTime();

      if (mt < localMTime) {
        return true;
      }

      if (mt < minOutputMTime) {
        minOutputMTime = mt;
      }
    }

    count = model.numberOfInputs;

    while (count--) {
      if (model.inputConnection[count] && model.inputConnection[count].filter.shouldUpdate()) {
        return true;
      }
    }

    count = model.numberOfInputs;

    while (count--) {
      if (publicAPI.getInputData(count) && publicAPI.getInputData(count).getMTime() > minOutputMTime) {
        return true;
      }
    }

    return false;
  };

  function getOutputPort() {
    var port = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    var outputPortAccess = function outputPortAccess() {
      return getOutputData(port);
    }; // Add reference to filter


    outputPortAccess.filter = publicAPI;
    return outputPortAccess;
  } // Handle input if needed


  if (model.numberOfInputs) {
    // Reserve inputs
    var count = model.numberOfInputs;

    while (count--) {
      model.inputData.push(null);
      model.inputConnection.push(null);
    } // Expose public methods


    publicAPI.setInputData = setInputData;
    publicAPI.setInputConnection = setInputConnection;
    publicAPI.addInputData = addInputData;
    publicAPI.addInputConnection = addInputConnection;
    publicAPI.getInputData = getInputData;
    publicAPI.getInputConnection = getInputConnection;
  }

  if (numberOfOutputs) {
    publicAPI.getOutputData = getOutputData;
    publicAPI.getOutputPort = getOutputPort;
  }

  publicAPI.update = function () {
    var ins = [];

    if (model.numberOfInputs) {
      var _count = 0;

      while (_count < model.numberOfInputs) {
        ins[_count] = publicAPI.getInputData(_count);
        _count++;
      }
    }

    if (publicAPI.shouldUpdate() && publicAPI.requestData) {
      publicAPI.requestData(ins, model.output);
    }
  };

  publicAPI.getNumberOfInputPorts = function () {
    return model.numberOfInputs;
  };

  publicAPI.getNumberOfOutputPorts = function () {
    return numberOfOutputs || model.output.length;
  };

  publicAPI.getInputArrayToProcess = function (inputPort) {
    var arrayDesc = model.inputArrayToProcess[inputPort];
    var ds = model.inputData[inputPort];

    if (arrayDesc && ds) {
      return ds["get".concat(arrayDesc.fieldAssociation)]().getArray(arrayDesc.arrayName);
    }

    return null;
  };

  publicAPI.setInputArrayToProcess = function (inputPort, arrayName, fieldAssociation) {
    var attributeType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'Scalars';

    while (model.inputArrayToProcess.length < inputPort) {
      model.inputArrayToProcess.push(null);
    }

    model.inputArrayToProcess[inputPort] = {
      arrayName: arrayName,
      fieldAssociation: fieldAssociation,
      attributeType: attributeType
    };
  };
} // ----------------------------------------------------------------------------
// Event handling: onXXX(callback), invokeXXX(args...)
// ----------------------------------------------------------------------------

var EVENT_ABORT = Symbol('Event abort');
function event(publicAPI, model, eventName) {
  var callbacks = [];
  var previousDelete = publicAPI.delete;
  var curCallbackID = 1;

  function off(callbackID) {
    for (var i = 0; i < callbacks.length; ++i) {
      var _callbacks$i = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__["default"])(callbacks[i], 1),
          cbID = _callbacks$i[0];

      if (cbID === callbackID) {
        callbacks.splice(i, 1);
        return;
      }
    }
  }

  function on(callbackID) {
    function unsubscribe() {
      off(callbackID);
    }

    return Object.freeze({
      unsubscribe: unsubscribe
    });
  }

  function invoke() {
    var _arguments = arguments;

    if (model.deleted) {
      vtkErrorMacro('instance deleted - cannot call any method');
      return;
    }
    /* eslint-disable prefer-rest-params */
    // Go through a copy of the callbacks array in case new callbacks
    // get prepended within previous callbacks


    var currentCallbacks = callbacks.slice();

    var _loop = function _loop(index) {
      var _currentCallbacks$ind = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__["default"])(currentCallbacks[index], 3),
          cb = _currentCallbacks$ind[1],
          priority = _currentCallbacks$ind[2];

      if (!cb) {
        return "continue"; // eslint-disable-line
      }

      if (priority < 0) {
        setTimeout(function () {
          return cb.apply(publicAPI, _arguments);
        }, 1 - priority);
      } else {
        // Abort only if the callback explicitly returns false
        var continueNext = cb.apply(publicAPI, _arguments);

        if (continueNext === EVENT_ABORT) {
          return "break";
        }
      }
    };

    for (var index = 0; index < currentCallbacks.length; ++index) {
      var _ret = _loop(index);

      if (_ret === "continue") continue;
      if (_ret === "break") break;
    }
    /* eslint-enable prefer-rest-params */

  }

  publicAPI["invoke".concat(capitalize(eventName))] = invoke;

  publicAPI["on".concat(capitalize(eventName))] = function (callback) {
    var priority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.0;

    if (!callback.apply) {
      console.error("Invalid callback for event ".concat(eventName));
      return null;
    }

    if (model.deleted) {
      vtkErrorMacro('instance deleted - cannot call any method');
      return null;
    }

    var callbackID = curCallbackID++;
    callbacks.push([callbackID, callback, priority]);
    callbacks.sort(function (cb1, cb2) {
      return cb2[2] - cb1[2];
    });
    return on(callbackID);
  };

  publicAPI.delete = function () {
    previousDelete();
    callbacks.forEach(function (_ref2) {
      var _ref3 = (0,_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__["default"])(_ref2, 1),
          cbID = _ref3[0];

      return off(cbID);
    });
  };
} // ----------------------------------------------------------------------------
// newInstance
// ----------------------------------------------------------------------------

function newInstance(extend, className) {
  var constructor = function constructor() {
    var initialValues = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var model = {};
    var publicAPI = {};
    extend(publicAPI, model, initialValues);
    return Object.freeze(publicAPI);
  }; // Register constructor to factory


  if (className) {
    _vtk_js__WEBPACK_IMPORTED_MODULE_5__["default"].register(className, constructor);
  }

  return constructor;
} // ----------------------------------------------------------------------------
// Chain function calls
// ----------------------------------------------------------------------------

function chain() {
  for (var _len5 = arguments.length, fn = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    fn[_key5] = arguments[_key5];
  }

  return function () {
    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
      args[_key6] = arguments[_key6];
    }

    return fn.filter(function (i) {
      return !!i;
    }).map(function (i) {
      return i.apply(void 0, args);
    });
  };
} // ----------------------------------------------------------------------------
// Some utility methods for vtk objects
// ----------------------------------------------------------------------------

function isVtkObject(instance) {
  return instance && instance.isA && instance.isA('vtkObject');
}
function traverseInstanceTree(instance, extractFunction) {
  var accumulator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var visitedInstances = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

  if (isVtkObject(instance)) {
    if (visitedInstances.indexOf(instance) >= 0) {
      // avoid cycles
      return accumulator;
    }

    visitedInstances.push(instance);
    var result = extractFunction(instance);

    if (result !== undefined) {
      accumulator.push(result);
    } // Now go through this instance's model


    var model = instance.get();
    Object.keys(model).forEach(function (key) {
      var modelObj = model[key];

      if (Array.isArray(modelObj)) {
        modelObj.forEach(function (subObj) {
          traverseInstanceTree(subObj, extractFunction, accumulator, visitedInstances);
        });
      } else {
        traverseInstanceTree(modelObj, extractFunction, accumulator, visitedInstances);
      }
    });
  }

  return accumulator;
} // ----------------------------------------------------------------------------
// Returns a function, that, as long as it continues to be invoked, will not
// be triggered. The function will be called after it stops being called for
// N milliseconds. If `immediate` is passed, trigger the function on the
// leading edge, instead of the trailing.

function debounce(func, wait, immediate) {
  var _this = this;

  var timeout;

  var debounced = function debounced() {
    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
      args[_key7] = arguments[_key7];
    }

    var context = _this;

    var later = function later() {
      timeout = null;

      if (!immediate) {
        func.apply(context, args);
      }
    };

    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);

    if (callNow) {
      func.apply(context, args);
    }
  };

  debounced.cancel = function () {
    return clearTimeout(timeout);
  };

  return debounced;
} // ----------------------------------------------------------------------------
// Creates a throttled function that only invokes `func` at most once per
// every `wait` milliseconds.

function throttle(callback, delay) {
  var isThrottled = false;
  var argsToUse = null;

  function next() {
    isThrottled = false;

    if (argsToUse !== null) {
      wrapper.apply(void 0, (0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__["default"])(argsToUse)); // eslint-disable-line

      argsToUse = null;
    }
  }

  function wrapper() {
    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
      args[_key8] = arguments[_key8];
    }

    if (isThrottled) {
      argsToUse = args;
      return;
    }

    isThrottled = true;
    callback.apply(void 0, args);
    setTimeout(next, delay);
  }

  return wrapper;
} // ----------------------------------------------------------------------------
// keystore(publicAPI, model, initialKeystore)
//
//    - initialKeystore: Initial keystore. This can be either a Map or an
//      object.
//
// Generated API
//  setKey(key, value) : mixed (returns value)
//  getKey(key) : mixed
//  getAllKeys() : [mixed]
//  deleteKey(key) : Boolean
// ----------------------------------------------------------------------------

function keystore(publicAPI, model) {
  var initialKeystore = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  model.keystore = Object.assign(model.keystore || {}, initialKeystore);

  publicAPI.setKey = function (key, value) {
    model.keystore[key] = value;
  };

  publicAPI.getKey = function (key) {
    return model.keystore[key];
  };

  publicAPI.getAllKeys = function () {
    return Object.keys(model.keystore);
  };

  publicAPI.deleteKey = function (key) {
    return delete model.keystore[key];
  };

  publicAPI.clearKeystore = function () {
    return publicAPI.getAllKeys().forEach(function (key) {
      return delete model.keystore[key];
    });
  };
} // ----------------------------------------------------------------------------
// proxy(publicAPI, model, sectionName, propertyUI)
//
//    - sectionName: Name of the section for UI
//    - propertyUI: List of props with their UI description
//
// Generated API
//  getProxyId() : String
//  listProxyProperties() : [string]
//  updateProxyProperty(name, prop)
//  getProxySection() => List of properties for UI generation
// ----------------------------------------------------------------------------

var nextProxyId = 1;
var ROOT_GROUP_NAME = '__root__';
function proxy(publicAPI, model) {
  // Proxies are keystores
  keystore(publicAPI, model);
  var parentDelete = publicAPI.delete; // getProxyId

  model.proxyId = "".concat(nextProxyId++); // ui handling

  model.ui = JSON.parse(JSON.stringify(model.ui || [])); // deep copy

  get(publicAPI, model, ['proxyId', 'proxyGroup', 'proxyName']);
  setGet(publicAPI, model, ['proxyManager']); // group properties

  var propertyMap = {};
  var groupChildrenNames = {};

  function registerProperties(descriptionList, currentGroupName) {
    if (!groupChildrenNames[currentGroupName]) {
      groupChildrenNames[currentGroupName] = [];
    }

    var childrenNames = groupChildrenNames[currentGroupName];

    for (var i = 0; i < descriptionList.length; i++) {
      childrenNames.push(descriptionList[i].name);
      propertyMap[descriptionList[i].name] = descriptionList[i];

      if (descriptionList[i].children && descriptionList[i].children.length) {
        registerProperties(descriptionList[i].children, descriptionList[i].name);
      }
    }
  }

  registerProperties(model.ui, ROOT_GROUP_NAME);

  publicAPI.updateUI = function (ui) {
    model.ui = JSON.parse(JSON.stringify(ui || [])); // deep copy

    Object.keys(propertyMap).forEach(function (k) {
      return delete propertyMap[k];
    });
    Object.keys(groupChildrenNames).forEach(function (k) {
      return delete groupChildrenNames[k];
    });
    registerProperties(model.ui, ROOT_GROUP_NAME);
    publicAPI.modified();
  };

  function listProxyProperties() {
    var gName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ROOT_GROUP_NAME;
    return groupChildrenNames[gName];
  }

  publicAPI.updateProxyProperty = function (propertyName, propUI) {
    var prop = propertyMap[propertyName];

    if (prop) {
      Object.assign(prop, propUI);
    } else {
      propertyMap[propertyName] = _objectSpread({}, propUI);
    }
  };

  publicAPI.activate = function () {
    if (model.proxyManager) {
      var setActiveMethod = "setActive".concat(capitalize(publicAPI.getProxyGroup().slice(0, -1)));

      if (model.proxyManager[setActiveMethod]) {
        model.proxyManager[setActiveMethod](publicAPI);
      }
    }
  }; // property link


  model.propertyLinkSubscribers = {};

  publicAPI.registerPropertyLinkForGC = function (otherLink, type) {
    if (!(type in model.propertyLinkSubscribers)) {
      model.propertyLinkSubscribers[type] = [];
    }

    model.propertyLinkSubscribers[type].push(otherLink);
  };

  publicAPI.gcPropertyLinks = function (type) {
    var subscribers = model.propertyLinkSubscribers[type] || [];

    while (subscribers.length) {
      subscribers.pop().unbind(publicAPI);
    }
  };

  model.propertyLinkMap = {};

  publicAPI.getPropertyLink = function (id) {
    var persistent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (model.propertyLinkMap[id]) {
      return model.propertyLinkMap[id];
    }

    var value = null;
    var links = [];
    var count = 0;
    var updateInProgress = false;

    function update(source) {
      var force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (updateInProgress) {
        return null;
      }

      var needUpdate = [];
      var sourceLink = null;
      count = links.length;

      while (count--) {
        var link = links[count];

        if (link.instance === source) {
          sourceLink = link;
        } else {
          needUpdate.push(link);
        }
      }

      if (!sourceLink) {
        return null;
      }

      var newValue = sourceLink.instance["get".concat(capitalize(sourceLink.propertyName))]();

      if (!shallowEquals(newValue, value) || force) {
        value = newValue;
        updateInProgress = true;

        while (needUpdate.length) {
          var linkToUpdate = needUpdate.pop();
          linkToUpdate.instance.set((0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])({}, linkToUpdate.propertyName, value));
        }

        updateInProgress = false;
      }

      if (model.propertyLinkMap[id].persistent) {
        model.propertyLinkMap[id].value = newValue;
      }

      return newValue;
    }

    function unbind(instance, propertyName) {
      var indexToDelete = [];
      count = links.length;

      while (count--) {
        var link = links[count];

        if (link.instance === instance && (link.propertyName === propertyName || propertyName === undefined)) {
          link.subscription.unsubscribe();
          indexToDelete.push(count);
        }
      }

      while (indexToDelete.length) {
        links.splice(indexToDelete.pop(), 1);
      }
    }

    function bind(instance, propertyName) {
      var updateMe = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var subscription = instance.onModified(update);
      var other = links[0];
      links.push({
        instance: instance,
        propertyName: propertyName,
        subscription: subscription
      });

      if (updateMe) {
        if (model.propertyLinkMap[id].persistent && model.propertyLinkMap[id].value !== undefined) {
          instance.set((0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])({}, propertyName, model.propertyLinkMap[id].value));
        } else if (other) {
          update(other.instance, true);
        }
      }

      return {
        unsubscribe: function unsubscribe() {
          return unbind(instance, propertyName);
        }
      };
    }

    function unsubscribe() {
      while (links.length) {
        links.pop().subscription.unsubscribe();
      }
    }

    var linkHandler = {
      bind: bind,
      unbind: unbind,
      unsubscribe: unsubscribe,
      persistent: persistent
    };
    model.propertyLinkMap[id] = linkHandler;
    return linkHandler;
  }; // extract values


  function getProperties() {
    var groupName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ROOT_GROUP_NAME;
    var values = [];
    var id = model.proxyId;
    var propertyNames = listProxyProperties(groupName) || [];

    for (var i = 0; i < propertyNames.length; i++) {
      var name = propertyNames[i];
      var method = publicAPI["get".concat(capitalize(name))];
      var value = method ? method() : undefined;
      var prop = {
        id: id,
        name: name,
        value: value
      };
      var children = getProperties(name);

      if (children.length) {
        prop.children = children;
      }

      values.push(prop);
    }

    return values;
  }

  publicAPI.listPropertyNames = function () {
    return getProperties().map(function (p) {
      return p.name;
    });
  };

  publicAPI.getPropertyByName = function (name) {
    return getProperties().find(function (p) {
      return p.name === name;
    });
  };

  publicAPI.getPropertyDomainByName = function (name) {
    return (propertyMap[name] || {}).domain;
  }; // ui section


  publicAPI.getProxySection = function () {
    return {
      id: model.proxyId,
      name: model.proxyGroup,
      ui: model.ui,
      properties: getProperties()
    };
  }; // free resources


  publicAPI.delete = function () {
    var list = Object.keys(model.propertyLinkMap);
    var count = list.length;

    while (count--) {
      model.propertyLinkMap[list[count]].unsubscribe();
    }

    Object.keys(model.propertyLinkSubscribers).forEach(publicAPI.gcPropertyLinks);
    parentDelete();
  };

  function registerLinks() {
    // Allow dynamic registration of links at the application level
    if (model.links) {
      for (var i = 0; i < model.links.length; i++) {
        var _model$links$i = model.links[i],
            link = _model$links$i.link,
            property = _model$links$i.property,
            persistent = _model$links$i.persistent,
            updateOnBind = _model$links$i.updateOnBind,
            type = _model$links$i.type;

        if (type === 'application') {
          var sLink = model.proxyManager.getPropertyLink(link, persistent);
          publicAPI.registerPropertyLinkForGC(sLink, 'application');
          sLink.bind(publicAPI, property, updateOnBind);
        }
      }
    }
  }

  setImmediateVTK(registerLinks);
} // ----------------------------------------------------------------------------
// proxyPropertyMapping(publicAPI, model, map)
//
//   map = {
//      opacity: { modelKey: 'property', property: 'opacity' },
//   }
//
// Generated API:
//  Elevate set/get methods from internal object stored in the model to current one
// ----------------------------------------------------------------------------

function proxyPropertyMapping(publicAPI, model, map) {
  var parentDelete = publicAPI.delete;
  var subscriptions = [];
  var propertyNames = Object.keys(map);
  var count = propertyNames.length;

  while (count--) {
    var propertyName = propertyNames[count];
    var _map$propertyName = map[propertyName],
        modelKey = _map$propertyName.modelKey,
        property = _map$propertyName.property,
        _map$propertyName$mod = _map$propertyName.modified,
        modified = _map$propertyName$mod === void 0 ? true : _map$propertyName$mod;
    var methodSrc = capitalize(property);
    var methodDst = capitalize(propertyName);
    publicAPI["get".concat(methodDst)] = model[modelKey]["get".concat(methodSrc)];
    publicAPI["set".concat(methodDst)] = model[modelKey]["set".concat(methodSrc)];

    if (modified) {
      subscriptions.push(model[modelKey].onModified(publicAPI.modified));
    }
  }

  publicAPI.delete = function () {
    while (subscriptions.length) {
      subscriptions.pop().unsubscribe();
    }

    parentDelete();
  };
} // ----------------------------------------------------------------------------
// proxyPropertyState(publicAPI, model, state, defaults)
//
//   state = {
//     representation: {
//       'Surface with edges': { property: { edgeVisibility: true, representation: 2 } },
//       Surface: { property: { edgeVisibility: false, representation: 2 } },
//       Wireframe: { property: { edgeVisibility: false, representation: 1 } },
//       Points: { property: { edgeVisibility: false, representation: 0 } },
//     },
//   }
//
//   defaults = {
//      representation: 'Surface',
//   }
//
// Generated API
//   get / set Representation ( string ) => push state to various internal objects
// ----------------------------------------------------------------------------

function proxyPropertyState(publicAPI, model) {
  var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var defaults = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  model.this = publicAPI;

  function applyState(map) {
    var modelKeys = Object.keys(map);
    var count = modelKeys.length;

    while (count--) {
      var modelKey = modelKeys[count];
      model[modelKey].set(map[modelKey]);
    }
  }

  var modelKeys = Object.keys(defaults);
  var count = modelKeys.length;

  var _loop2 = function _loop2() {
    // Add default
    var key = modelKeys[count];
    model[key] = defaults[key]; // Add set method

    var mapping = state[key];

    publicAPI["set".concat(capitalize(key))] = function (value) {
      if (value !== model[key]) {
        model[key] = value;
        var propValues = mapping[value];
        applyState(propValues);
        publicAPI.modified();
      }
    };
  };

  while (count--) {
    _loop2();
  } // Add getter


  if (modelKeys.length) {
    get(publicAPI, model, modelKeys);
  }
} // ----------------------------------------------------------------------------
// From : https://github.com/facebookarchive/fixed-data-table/blob/master/src/vendor_upstream/dom/normalizeWheel.js
//
//
// Copyright (c) 2015, Facebook, Inc.
// All rights reserved.
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree. An additional grant
// of patent rights can be found in the PATENTS file in the same directory.
//
//
// Mouse wheel (and 2-finger trackpad) support on the web sucks.  It is
// complicated, thus this doc is long and (hopefully) detailed enough to answer
// your questions.
//
// If you need to react to the mouse wheel in a predictable way, this code is
// like your bestest friend.// hugs//
//
// As of today, there are 4 DOM event types you can listen to:
//
//   'wheel'                -- Chrome(31+), FF(17+), IE(9+)
//   'mousewheel'           -- Chrome, IE(6+), Opera, Safari
//   'MozMousePixelScroll'  -- FF(3.5 only!) (2010-2013) -- don't bother!
//   'DOMMouseScroll'       -- FF(0.9.7+) since 2003
//
// So what to do?  The is the best:
//
//   normalizeWheel.getEventType();
//
// In your event callback, use this code to get sane interpretation of the
// deltas.  This code will return an object with properties:
//
//   spinX   -- normalized spin speed (use for zoom) - x plane
//   spinY   -- " - y plane
//   pixelX  -- normalized distance (to pixels) - x plane
//   pixelY  -- " - y plane
//
// Wheel values are provided by the browser assuming you are using the wheel to
// scroll a web page by a number of lines or pixels (or pages).  Values can vary
// significantly on different platforms and browsers, forgetting that you can
// scroll at different speeds.  Some devices (like trackpads) emit more events
// at smaller increments with fine granularity, and some emit massive jumps with
// linear speed or acceleration.
//
// This code does its best to normalize the deltas for you:
//
//   - spin is trying to normalize how far the wheel was spun (or trackpad
//     dragged).  This is super useful for zoom support where you want to
//     throw away the chunky scroll steps on the PC and make those equal to
//     the slow and smooth tiny steps on the Mac. Key data: This code tries to
//     resolve a single slow step on a wheel to 1.
//
//   - pixel is normalizing the desired scroll delta in pixel units.  You'll
//     get the crazy differences between browsers, but at least it'll be in
//     pixels!
//
//   - positive value indicates scrolling DOWN/RIGHT, negative UP/LEFT.  This
//     should translate to positive value zooming IN, negative zooming OUT.
//     This matches the newer 'wheel' event.
//
// Why are there spinX, spinY (or pixels)?
//
//   - spinX is a 2-finger side drag on the trackpad, and a shift + wheel turn
//     with a mouse.  It results in side-scrolling in the browser by default.
//
//   - spinY is what you expect -- it's the classic axis of a mouse wheel.
//
//   - I dropped spinZ/pixelZ.  It is supported by the DOM 3 'wheel' event and
//     probably is by browsers in conjunction with fancy 3D controllers .. but
//     you know.
//
// Implementation info:
//
// Examples of 'wheel' event if you scroll slowly (down) by one step with an
// average mouse:
//
//   OS X + Chrome  (mouse)     -    4   pixel delta  (wheelDelta -120)
//   OS X + Safari  (mouse)     -  N/A   pixel delta  (wheelDelta  -12)
//   OS X + Firefox (mouse)     -    0.1 line  delta  (wheelDelta  N/A)
//   Win8 + Chrome  (mouse)     -  100   pixel delta  (wheelDelta -120)
//   Win8 + Firefox (mouse)     -    3   line  delta  (wheelDelta -120)
//
// On the trackpad:
//
//   OS X + Chrome  (trackpad)  -    2   pixel delta  (wheelDelta   -6)
//   OS X + Firefox (trackpad)  -    1   pixel delta  (wheelDelta  N/A)
//
// On other/older browsers.. it's more complicated as there can be multiple and
// also missing delta values.
//
// The 'wheel' event is more standard:
//
// http://www.w3.org/TR/DOM-Level-3-Events/#events-wheelevents
//
// The basics is that it includes a unit, deltaMode (pixels, lines, pages), and
// deltaX, deltaY and deltaZ.  Some browsers provide other values to maintain
// backward compatibility with older events.  Those other values help us
// better normalize spin speed.  Example of what the browsers provide:
//
//                          | event.wheelDelta | event.detail
//        ------------------+------------------+--------------
//          Safari v5/OS X  |       -120       |       0
//          Safari v5/Win7  |       -120       |       0
//         Chrome v17/OS X  |       -120       |       0
//         Chrome v17/Win7  |       -120       |       0
//                IE9/Win7  |       -120       |   undefined
//         Firefox v4/OS X  |     undefined    |       1
//         Firefox v4/Win7  |     undefined    |       3
//
// ----------------------------------------------------------------------------
// Reasonable defaults

var PIXEL_STEP = 10;
var LINE_HEIGHT = 40;
var PAGE_HEIGHT = 800;
function normalizeWheel(wheelEvent) {
  var sX = 0; // spinX

  var sY = 0; // spinY

  var pX = 0; // pixelX

  var pY = 0; // pixelY
  // Legacy

  if ('detail' in wheelEvent) {
    sY = wheelEvent.detail;
  }

  if ('wheelDelta' in wheelEvent) {
    sY = -wheelEvent.wheelDelta / 120;
  }

  if ('wheelDeltaY' in wheelEvent) {
    sY = -wheelEvent.wheelDeltaY / 120;
  }

  if ('wheelDeltaX' in wheelEvent) {
    sX = -wheelEvent.wheelDeltaX / 120;
  } // side scrolling on FF with DOMMouseScroll


  if ('axis' in wheelEvent && wheelEvent.axis === wheelEvent.HORIZONTAL_AXIS) {
    sX = sY;
    sY = 0;
  }

  pX = sX * PIXEL_STEP;
  pY = sY * PIXEL_STEP;

  if ('deltaY' in wheelEvent) {
    pY = wheelEvent.deltaY;
  }

  if ('deltaX' in wheelEvent) {
    pX = wheelEvent.deltaX;
  }

  if ((pX || pY) && wheelEvent.deltaMode) {
    if (wheelEvent.deltaMode === 1) {
      // delta in LINE units
      pX *= LINE_HEIGHT;
      pY *= LINE_HEIGHT;
    } else {
      // delta in PAGE units
      pX *= PAGE_HEIGHT;
      pY *= PAGE_HEIGHT;
    }
  } // Fall-back if spin cannot be determined


  if (pX && !sX) {
    sX = pX < 1 ? -1 : 1;
  }

  if (pY && !sY) {
    sY = pY < 1 ? -1 : 1;
  }

  return {
    spinX: sX,
    spinY: sY,
    pixelX: pX,
    pixelY: pY
  };
} // ----------------------------------------------------------------------------
// Default export
// ----------------------------------------------------------------------------

var macro = {
  algo: algo,
  capitalize: capitalize,
  chain: chain,
  debounce: debounce,
  enumToString: enumToString,
  event: event,
  EVENT_ABORT: EVENT_ABORT,
  formatBytesToProperUnit: formatBytesToProperUnit,
  formatNumbersWithThousandSeparator: formatNumbersWithThousandSeparator,
  get: get,
  getArray: getArray,
  getCurrentGlobalMTime: getCurrentGlobalMTime,
  getStateArrayMapFunc: getStateArrayMapFunc,
  isVtkObject: isVtkObject,
  keystore: keystore,
  newInstance: newInstance,
  newTypedArray: newTypedArray,
  newTypedArrayFrom: newTypedArrayFrom,
  normalizeWheel: normalizeWheel,
  obj: obj,
  proxy: proxy,
  proxyPropertyMapping: proxyPropertyMapping,
  proxyPropertyState: proxyPropertyState,
  safeArrays: safeArrays,
  set: set,
  setArray: setArray,
  setGet: setGet,
  setGetArray: setGetArray,
  setImmediate: setImmediateVTK,
  setLoggerFunction: setLoggerFunction,
  throttle: throttle,
  traverseInstanceTree: traverseInstanceTree,
  TYPED_ARRAYS: TYPED_ARRAYS,
  // deprecated todo remove on breaking API revision
  uncapitalize: uncapitalize,
  VOID: VOID,
  vtkDebugMacro: vtkDebugMacro,
  vtkErrorMacro: vtkErrorMacro,
  vtkInfoMacro: vtkInfoMacro,
  vtkLogMacro: vtkLogMacro,
  vtkOnceErrorMacro: vtkOnceErrorMacro,
  vtkWarningMacro: vtkWarningMacro
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/vendor/blueimp-md5/js/md5.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/vendor/blueimp-md5/js/md5.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "m": () => (/* binding */ md5)
/* harmony export */ });
/* harmony import */ var _virtual_commonjsHelpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../_virtual/commonjsHelpers.js */ "./node_modules/@kitware/vtk.js/_virtual/commonjsHelpers.js");
/* harmony import */ var _vendor_blueimp_md5_js_md5_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../_vendor/blueimp-md5/js/md5.js_commonjs-module.js */ "./node_modules/@kitware/vtk.js/_vendor/blueimp-md5/js/md5.js_commonjs-module.js");



/*
 * JavaScript MD5
 * https://github.com/blueimp/JavaScript-MD5
 *
 * Copyright 2011, Sebastian Tschan
 * https://blueimp.net
 *
 * Licensed under the MIT license:
 * https://opensource.org/licenses/MIT
 *
 * Based on
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.2 Copyright (C) Paul Johnston 1999 - 2009
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

(function (module) {
(function ($) {

  /**
   * Add integers, wrapping at 2^32.
   * This uses 16-bit operations internally to work around bugs in interpreters.
   *
   * @param {number} x First integer
   * @param {number} y Second integer
   * @returns {number} Sum
   */
  function safeAdd(x, y) {
    var lsw = (x & 0xffff) + (y & 0xffff);
    var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
    return (msw << 16) | (lsw & 0xffff)
  }

  /**
   * Bitwise rotate a 32-bit number to the left.
   *
   * @param {number} num 32-bit number
   * @param {number} cnt Rotation count
   * @returns {number} Rotated number
   */
  function bitRotateLeft(num, cnt) {
    return (num << cnt) | (num >>> (32 - cnt))
  }

  /**
   * Basic operation the algorithm uses.
   *
   * @param {number} q q
   * @param {number} a a
   * @param {number} b b
   * @param {number} x x
   * @param {number} s s
   * @param {number} t t
   * @returns {number} Result
   */
  function md5cmn(q, a, b, x, s, t) {
    return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b)
  }
  /**
   * Basic operation the algorithm uses.
   *
   * @param {number} a a
   * @param {number} b b
   * @param {number} c c
   * @param {number} d d
   * @param {number} x x
   * @param {number} s s
   * @param {number} t t
   * @returns {number} Result
   */
  function md5ff(a, b, c, d, x, s, t) {
    return md5cmn((b & c) | (~b & d), a, b, x, s, t)
  }
  /**
   * Basic operation the algorithm uses.
   *
   * @param {number} a a
   * @param {number} b b
   * @param {number} c c
   * @param {number} d d
   * @param {number} x x
   * @param {number} s s
   * @param {number} t t
   * @returns {number} Result
   */
  function md5gg(a, b, c, d, x, s, t) {
    return md5cmn((b & d) | (c & ~d), a, b, x, s, t)
  }
  /**
   * Basic operation the algorithm uses.
   *
   * @param {number} a a
   * @param {number} b b
   * @param {number} c c
   * @param {number} d d
   * @param {number} x x
   * @param {number} s s
   * @param {number} t t
   * @returns {number} Result
   */
  function md5hh(a, b, c, d, x, s, t) {
    return md5cmn(b ^ c ^ d, a, b, x, s, t)
  }
  /**
   * Basic operation the algorithm uses.
   *
   * @param {number} a a
   * @param {number} b b
   * @param {number} c c
   * @param {number} d d
   * @param {number} x x
   * @param {number} s s
   * @param {number} t t
   * @returns {number} Result
   */
  function md5ii(a, b, c, d, x, s, t) {
    return md5cmn(c ^ (b | ~d), a, b, x, s, t)
  }

  /**
   * Calculate the MD5 of an array of little-endian words, and a bit length.
   *
   * @param {Array} x Array of little-endian words
   * @param {number} len Bit length
   * @returns {Array<number>} MD5 Array
   */
  function binlMD5(x, len) {
    /* append padding */
    x[len >> 5] |= 0x80 << len % 32;
    x[(((len + 64) >>> 9) << 4) + 14] = len;

    var i;
    var olda;
    var oldb;
    var oldc;
    var oldd;
    var a = 1732584193;
    var b = -271733879;
    var c = -1732584194;
    var d = 271733878;

    for (i = 0; i < x.length; i += 16) {
      olda = a;
      oldb = b;
      oldc = c;
      oldd = d;

      a = md5ff(a, b, c, d, x[i], 7, -680876936);
      d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
      c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
      b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
      a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
      d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
      c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
      b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
      a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
      d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
      c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
      b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
      a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
      d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
      c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
      b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);

      a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
      d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
      c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
      b = md5gg(b, c, d, a, x[i], 20, -373897302);
      a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
      d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
      c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
      b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
      a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
      d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
      c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
      b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
      a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
      d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
      c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
      b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);

      a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
      d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
      c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
      b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
      a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
      d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
      c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
      b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
      a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
      d = md5hh(d, a, b, c, x[i], 11, -358537222);
      c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
      b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
      a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
      d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
      c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
      b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);

      a = md5ii(a, b, c, d, x[i], 6, -198630844);
      d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
      c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
      b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
      a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
      d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
      c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
      b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
      a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
      d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
      c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
      b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
      a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
      d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
      c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
      b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);

      a = safeAdd(a, olda);
      b = safeAdd(b, oldb);
      c = safeAdd(c, oldc);
      d = safeAdd(d, oldd);
    }
    return [a, b, c, d]
  }

  /**
   * Convert an array of little-endian words to a string
   *
   * @param {Array<number>} input MD5 Array
   * @returns {string} MD5 string
   */
  function binl2rstr(input) {
    var i;
    var output = '';
    var length32 = input.length * 32;
    for (i = 0; i < length32; i += 8) {
      output += String.fromCharCode((input[i >> 5] >>> i % 32) & 0xff);
    }
    return output
  }

  /**
   * Convert a raw string to an array of little-endian words
   * Characters >255 have their high-byte silently ignored.
   *
   * @param {string} input Raw input string
   * @returns {Array<number>} Array of little-endian words
   */
  function rstr2binl(input) {
    var i;
    var output = [];
    output[(input.length >> 2) - 1] = undefined;
    for (i = 0; i < output.length; i += 1) {
      output[i] = 0;
    }
    var length8 = input.length * 8;
    for (i = 0; i < length8; i += 8) {
      output[i >> 5] |= (input.charCodeAt(i / 8) & 0xff) << i % 32;
    }
    return output
  }

  /**
   * Calculate the MD5 of a raw string
   *
   * @param {string} s Input string
   * @returns {string} Raw MD5 string
   */
  function rstrMD5(s) {
    return binl2rstr(binlMD5(rstr2binl(s), s.length * 8))
  }

  /**
   * Calculates the HMAC-MD5 of a key and some data (raw strings)
   *
   * @param {string} key HMAC key
   * @param {string} data Raw input string
   * @returns {string} Raw MD5 string
   */
  function rstrHMACMD5(key, data) {
    var i;
    var bkey = rstr2binl(key);
    var ipad = [];
    var opad = [];
    var hash;
    ipad[15] = opad[15] = undefined;
    if (bkey.length > 16) {
      bkey = binlMD5(bkey, key.length * 8);
    }
    for (i = 0; i < 16; i += 1) {
      ipad[i] = bkey[i] ^ 0x36363636;
      opad[i] = bkey[i] ^ 0x5c5c5c5c;
    }
    hash = binlMD5(ipad.concat(rstr2binl(data)), 512 + data.length * 8);
    return binl2rstr(binlMD5(opad.concat(hash), 512 + 128))
  }

  /**
   * Convert a raw string to a hex string
   *
   * @param {string} input Raw input string
   * @returns {string} Hex encoded string
   */
  function rstr2hex(input) {
    var hexTab = '0123456789abcdef';
    var output = '';
    var x;
    var i;
    for (i = 0; i < input.length; i += 1) {
      x = input.charCodeAt(i);
      output += hexTab.charAt((x >>> 4) & 0x0f) + hexTab.charAt(x & 0x0f);
    }
    return output
  }

  /**
   * Encode a string as UTF-8
   *
   * @param {string} input Input string
   * @returns {string} UTF8 string
   */
  function str2rstrUTF8(input) {
    return unescape(encodeURIComponent(input))
  }

  /**
   * Encodes input string as raw MD5 string
   *
   * @param {string} s Input string
   * @returns {string} Raw MD5 string
   */
  function rawMD5(s) {
    return rstrMD5(str2rstrUTF8(s))
  }
  /**
   * Encodes input string as Hex encoded string
   *
   * @param {string} s Input string
   * @returns {string} Hex encoded string
   */
  function hexMD5(s) {
    return rstr2hex(rawMD5(s))
  }
  /**
   * Calculates the raw HMAC-MD5 for the given key and data
   *
   * @param {string} k HMAC key
   * @param {string} d Input string
   * @returns {string} Raw MD5 string
   */
  function rawHMACMD5(k, d) {
    return rstrHMACMD5(str2rstrUTF8(k), str2rstrUTF8(d))
  }
  /**
   * Calculates the Hex encoded HMAC-MD5 for the given key and data
   *
   * @param {string} k HMAC key
   * @param {string} d Input string
   * @returns {string} Raw MD5 string
   */
  function hexHMACMD5(k, d) {
    return rstr2hex(rawHMACMD5(k, d))
  }

  /**
   * Calculates MD5 value for a given string.
   * If a key is provided, calculates the HMAC-MD5 value.
   * Returns a Hex encoded string unless the raw argument is given.
   *
   * @param {string} string Input string
   * @param {string} [key] HMAC key
   * @param {boolean} [raw] Raw output switch
   * @returns {string} MD5 output
   */
  function md5(string, key, raw) {
    if (!key) {
      if (!raw) {
        return hexMD5(string)
      }
      return rawMD5(string)
    }
    if (!raw) {
      return hexHMACMD5(key, string)
    }
    return rawHMACMD5(key, string)
  }

  if (module.exports) {
    module.exports = md5;
  } else {
    $.md5 = md5;
  }
})(_virtual_commonjsHelpers_js__WEBPACK_IMPORTED_MODULE_0__.c);
}(_vendor_blueimp_md5_js_md5_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_1__.m));

var md5 = _vendor_blueimp_md5_js_md5_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_1__.m.exports;




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/vendor/define-properties/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/vendor/define-properties/index.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "d": () => (/* binding */ defineProperties_1)
/* harmony export */ });
/* harmony import */ var _object_keys_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../object-keys/index.js */ "./node_modules/@kitware/vtk.js/vendor/object-keys/index.js");


var keys = _object_keys_index_js__WEBPACK_IMPORTED_MODULE_0__.o;
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
	var obj = {};
	try {
		origDefineProperty(obj, 'x', { enumerable: false, value: obj });
		// eslint-disable-next-line no-unused-vars, no-restricted-syntax
		for (var _ in obj) { // jscs:ignore disallowUnusedVariables
			return false;
		}
		return obj.x === obj;
	} catch (e) { /* this is IE 8. */
		return false;
	}
};
var supportsDescriptors = origDefineProperty && arePropertyDescriptorsSupported();

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		origDefineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value;
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

var defineProperties_1 = defineProperties;




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/common.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/common.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "A": () => (/* binding */ ARRAY_TYPE),
/* harmony export */   "E": () => (/* binding */ EPSILON),
/* harmony export */   "R": () => (/* binding */ RANDOM),
/* harmony export */   "t": () => (/* binding */ toRadian)
/* harmony export */ });
/**
 * Common utilities
 * @module glMatrix
 */
// Configuration Constants
var EPSILON = 0.000001;
var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
var RANDOM = Math.random;
var degree = Math.PI / 180;
/**
 * Convert Degree To Radian
 *
 * @param {Number} a Angle in Degrees
 */

function toRadian(a) {
  return a * degree;
}
if (!Math.hypot) Math.hypot = function () {
  var y = 0,
      i = arguments.length;

  while (i--) {
    y += arguments[i] * arguments[i];
  }

  return Math.sqrt(y);
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat3.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat3.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "a": () => (/* binding */ invert),
/* harmony export */   "b": () => (/* binding */ mat3),
/* harmony export */   "c": () => (/* binding */ create),
/* harmony export */   "f": () => (/* binding */ fromMat4),
/* harmony export */   "i": () => (/* binding */ identity),
/* harmony export */   "m": () => (/* binding */ multiply),
/* harmony export */   "t": () => (/* binding */ transpose)
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/common.js");


/**
 * 3x3 Matrix
 * @module mat3
 */

/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.A(9);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.A != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
  }

  out[0] = 1;
  out[4] = 1;
  out[8] = 1;
  return out;
}
/**
 * Copies the upper-left 3x3 values into the given mat3.
 *
 * @param {mat3} out the receiving 3x3 matrix
 * @param {ReadonlyMat4} a   the source 4x4 matrix
 * @returns {mat3} out
 */

function fromMat4(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[4];
  out[4] = a[5];
  out[5] = a[6];
  out[6] = a[8];
  out[7] = a[9];
  out[8] = a[10];
  return out;
}
/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {ReadonlyMat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.A(9);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Create a new mat3 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} A new mat3
 */

function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.A(9);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}
/**
 * Set the components of a mat3 to the given values
 *
 * @param {mat3} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} out
 */

function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}
/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */

function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    var a01 = a[1],
        a02 = a[2],
        a12 = a[5];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a01;
    out[5] = a[7];
    out[6] = a02;
    out[7] = a12;
  } else {
    out[0] = a[0];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a[1];
    out[4] = a[4];
    out[5] = a[7];
    out[6] = a[2];
    out[7] = a[5];
    out[8] = a[8];
  }

  return out;
}
/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function invert(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  var b01 = a22 * a11 - a12 * a21;
  var b11 = -a22 * a10 + a12 * a20;
  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant

  var det = a00 * b01 + a01 * b11 + a02 * b21;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = b01 * det;
  out[1] = (-a22 * a01 + a02 * a21) * det;
  out[2] = (a12 * a01 - a02 * a11) * det;
  out[3] = b11 * det;
  out[4] = (a22 * a00 - a02 * a20) * det;
  out[5] = (-a12 * a00 + a02 * a10) * det;
  out[6] = b21 * det;
  out[7] = (-a21 * a00 + a01 * a20) * det;
  out[8] = (a11 * a00 - a01 * a10) * det;
  return out;
}
/**
 * Calculates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function adjoint(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  out[0] = a11 * a22 - a12 * a21;
  out[1] = a02 * a21 - a01 * a22;
  out[2] = a01 * a12 - a02 * a11;
  out[3] = a12 * a20 - a10 * a22;
  out[4] = a00 * a22 - a02 * a20;
  out[5] = a02 * a10 - a00 * a12;
  out[6] = a10 * a21 - a11 * a20;
  out[7] = a01 * a20 - a00 * a21;
  out[8] = a00 * a11 - a01 * a10;
  return out;
}
/**
 * Calculates the determinant of a mat3
 *
 * @param {ReadonlyMat3} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant(a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
}
/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */

function multiply(out, a, b) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  var b00 = b[0],
      b01 = b[1],
      b02 = b[2];
  var b10 = b[3],
      b11 = b[4],
      b12 = b[5];
  var b20 = b[6],
      b21 = b[7],
      b22 = b[8];
  out[0] = b00 * a00 + b01 * a10 + b02 * a20;
  out[1] = b00 * a01 + b01 * a11 + b02 * a21;
  out[2] = b00 * a02 + b01 * a12 + b02 * a22;
  out[3] = b10 * a00 + b11 * a10 + b12 * a20;
  out[4] = b10 * a01 + b11 * a11 + b12 * a21;
  out[5] = b10 * a02 + b11 * a12 + b12 * a22;
  out[6] = b20 * a00 + b21 * a10 + b22 * a20;
  out[7] = b20 * a01 + b21 * a11 + b22 * a21;
  out[8] = b20 * a02 + b21 * a12 + b22 * a22;
  return out;
}
/**
 * Translate a mat3 by the given vector
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to translate
 * @param {ReadonlyVec2} v vector to translate by
 * @returns {mat3} out
 */

function translate(out, a, v) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a10 = a[3],
      a11 = a[4],
      a12 = a[5],
      a20 = a[6],
      a21 = a[7],
      a22 = a[8],
      x = v[0],
      y = v[1];
  out[0] = a00;
  out[1] = a01;
  out[2] = a02;
  out[3] = a10;
  out[4] = a11;
  out[5] = a12;
  out[6] = x * a00 + y * a10 + a20;
  out[7] = x * a01 + y * a11 + a21;
  out[8] = x * a02 + y * a12 + a22;
  return out;
}
/**
 * Rotates a mat3 by the given angle
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */

function rotate(out, a, rad) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a10 = a[3],
      a11 = a[4],
      a12 = a[5],
      a20 = a[6],
      a21 = a[7],
      a22 = a[8],
      s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c * a00 + s * a10;
  out[1] = c * a01 + s * a11;
  out[2] = c * a02 + s * a12;
  out[3] = c * a10 - s * a00;
  out[4] = c * a11 - s * a01;
  out[5] = c * a12 - s * a02;
  out[6] = a20;
  out[7] = a21;
  out[8] = a22;
  return out;
}
/**
 * Scales the mat3 by the dimensions in the given vec2
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to rotate
 * @param {ReadonlyVec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/

function scale(out, a, v) {
  var x = v[0],
      y = v[1];
  out[0] = x * a[0];
  out[1] = x * a[1];
  out[2] = x * a[2];
  out[3] = y * a[3];
  out[4] = y * a[4];
  out[5] = y * a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.translate(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyVec2} v Translation vector
 * @returns {mat3} out
 */

function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = v[0];
  out[7] = v[1];
  out[8] = 1;
  return out;
}
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.rotate(dest, dest, rad);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */

function fromRotation(out, rad) {
  var s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = -s;
  out[4] = c;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.scale(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyVec2} v Scaling vector
 * @returns {mat3} out
 */

function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = v[1];
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Copies the values from a mat2d into a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to copy
 * @returns {mat3} out
 **/

function fromMat2d(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = 0;
  out[3] = a[2];
  out[4] = a[3];
  out[5] = 0;
  out[6] = a[4];
  out[7] = a[5];
  out[8] = 1;
  return out;
}
/**
 * Calculates a 3x3 matrix from the given quaternion
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyQuat} q Quaternion to create matrix from
 *
 * @returns {mat3} out
 */

function fromQuat(out, q) {
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - yy - zz;
  out[3] = yx - wz;
  out[6] = zx + wy;
  out[1] = yx + wz;
  out[4] = 1 - xx - zz;
  out[7] = zy - wx;
  out[2] = zx - wy;
  out[5] = zy + wx;
  out[8] = 1 - xx - yy;
  return out;
}
/**
 * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from
 *
 * @returns {mat3} out
 */

function normalFromMat4(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  return out;
}
/**
 * Generates a 2D projection matrix with the given bounds
 *
 * @param {mat3} out mat3 frustum matrix will be written into
 * @param {number} width Width of your gl context
 * @param {number} height Height of gl context
 * @returns {mat3} out
 */

function projection(out, width, height) {
  out[0] = 2 / width;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = -2 / height;
  out[5] = 0;
  out[6] = -1;
  out[7] = 1;
  out[8] = 1;
  return out;
}
/**
 * Returns a string representation of a mat3
 *
 * @param {ReadonlyMat3} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str(a) {
  return "mat3(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ")";
}
/**
 * Returns Frobenius norm of a mat3
 *
 * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);
}
/**
 * Adds two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat3} out
 */

function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  return out;
}
/**
 * Adds two mat3's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat3} out the receiving vector
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat3} out
 */

function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  out[6] = a[6] + b[6] * scale;
  out[7] = a[7] + b[7] * scale;
  out[8] = a[8] + b[8] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat3} a The first matrix.
 * @param {ReadonlyMat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat3} a The first matrix.
 * @param {ReadonlyMat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7],
      a8 = a[8];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7],
      b8 = b[8];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a8), Math.abs(b8));
}
/**
 * Alias for {@link mat3.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link mat3.subtract}
 * @function
 */

var sub = subtract;

var mat3 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  create: create,
  fromMat4: fromMat4,
  clone: clone,
  copy: copy,
  fromValues: fromValues,
  set: set,
  identity: identity,
  transpose: transpose,
  invert: invert,
  adjoint: adjoint,
  determinant: determinant,
  multiply: multiply,
  translate: translate,
  rotate: rotate,
  scale: scale,
  fromTranslation: fromTranslation,
  fromRotation: fromRotation,
  fromScaling: fromScaling,
  fromMat2d: fromMat2d,
  fromQuat: fromQuat,
  normalFromMat4: normalFromMat4,
  projection: projection,
  str: str,
  frob: frob,
  add: add,
  subtract: subtract,
  multiplyScalar: multiplyScalar,
  multiplyScalarAndAdd: multiplyScalarAndAdd,
  exactEquals: exactEquals,
  equals: equals,
  mul: mul,
  sub: sub
});




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat4.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "a": () => (/* binding */ rotateX),
/* harmony export */   "b": () => (/* binding */ rotateY),
/* harmony export */   "c": () => (/* binding */ rotateZ),
/* harmony export */   "d": () => (/* binding */ copy),
/* harmony export */   "e": () => (/* binding */ fromTranslation),
/* harmony export */   "f": () => (/* binding */ fromRotation),
/* harmony export */   "g": () => (/* binding */ invert),
/* harmony export */   "h": () => (/* binding */ exactEquals),
/* harmony export */   "i": () => (/* binding */ identity),
/* harmony export */   "j": () => (/* binding */ transpose),
/* harmony export */   "k": () => (/* binding */ fromQuat),
/* harmony export */   "l": () => (/* binding */ lookAt),
/* harmony export */   "m": () => (/* binding */ multiply),
/* harmony export */   "n": () => (/* binding */ getRotation),
/* harmony export */   "o": () => (/* binding */ ortho),
/* harmony export */   "p": () => (/* binding */ fromRotationTranslationScale),
/* harmony export */   "q": () => (/* binding */ mat4),
/* harmony export */   "r": () => (/* binding */ rotate),
/* harmony export */   "s": () => (/* binding */ scale),
/* harmony export */   "t": () => (/* binding */ translate)
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/common.js");


/**
 * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.
 * @module mat4
 */

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.A(16);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.A != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
  }

  out[0] = 1;
  out[5] = 1;
  out[10] = 1;
  out[15] = 1;
  return out;
}
/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {ReadonlyMat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.A(16);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Create a new mat4 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} A new mat4
 */

function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.A(16);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
/**
 * Set the components of a mat4 to the given values
 *
 * @param {mat4} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} out
 */

function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */

function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    var a01 = a[1],
        a02 = a[2],
        a03 = a[3];
    var a12 = a[6],
        a13 = a[7];
    var a23 = a[11];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a01;
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a02;
    out[9] = a12;
    out[11] = a[14];
    out[12] = a03;
    out[13] = a13;
    out[14] = a23;
  } else {
    out[0] = a[0];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a[1];
    out[5] = a[5];
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a[2];
    out[9] = a[6];
    out[10] = a[10];
    out[11] = a[14];
    out[12] = a[3];
    out[13] = a[7];
    out[14] = a[11];
    out[15] = a[15];
  }

  return out;
}
/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function invert(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
  return out;
}
/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function adjoint(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
  return out;
}
/**
 * Calculates the determinant of a mat4
 *
 * @param {ReadonlyMat4} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant(a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
}
/**
 * Multiplies two mat4s
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */

function multiply(out, a, b) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15]; // Cache only the current line of the second matrix

  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[4];
  b1 = b[5];
  b2 = b[6];
  b3 = b[7];
  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[8];
  b1 = b[9];
  b2 = b[10];
  b3 = b[11];
  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[12];
  b1 = b[13];
  b2 = b[14];
  b3 = b[15];
  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  return out;
}
/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to translate
 * @param {ReadonlyVec3} v vector to translate by
 * @returns {mat4} out
 */

function translate(out, a, v) {
  var x = v[0],
      y = v[1],
      z = v[2];
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;

  if (a === out) {
    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
  } else {
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a03;
    out[4] = a10;
    out[5] = a11;
    out[6] = a12;
    out[7] = a13;
    out[8] = a20;
    out[9] = a21;
    out[10] = a22;
    out[11] = a23;
    out[12] = a00 * x + a10 * y + a20 * z + a[12];
    out[13] = a01 * x + a11 * y + a21 * z + a[13];
    out[14] = a02 * x + a12 * y + a22 * z + a[14];
    out[15] = a03 * x + a13 * y + a23 * z + a[15];
  }

  return out;
}
/**
 * Scales the mat4 by the dimensions in the given vec3 not using vectorization
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to scale
 * @param {ReadonlyVec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/

function scale(out, a, v) {
  var x = v[0],
      y = v[1],
      z = v[2];
  out[0] = a[0] * x;
  out[1] = a[1] * x;
  out[2] = a[2] * x;
  out[3] = a[3] * x;
  out[4] = a[4] * y;
  out[5] = a[5] * y;
  out[6] = a[6] * y;
  out[7] = a[7] * y;
  out[8] = a[8] * z;
  out[9] = a[9] * z;
  out[10] = a[10] * z;
  out[11] = a[11] * z;
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Rotates a mat4 by the given angle around the given axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @returns {mat4} out
 */

function rotate(out, a, rad, axis) {
  var x = axis[0],
      y = axis[1],
      z = axis[2];
  var len = Math.hypot(x, y, z);
  var s, c, t;
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;
  var b00, b01, b02;
  var b10, b11, b12;
  var b20, b21, b22;

  if (len < _common_js__WEBPACK_IMPORTED_MODULE_0__.E) {
    return null;
  }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;
  a00 = a[0];
  a01 = a[1];
  a02 = a[2];
  a03 = a[3];
  a10 = a[4];
  a11 = a[5];
  a12 = a[6];
  a13 = a[7];
  a20 = a[8];
  a21 = a[9];
  a22 = a[10];
  a23 = a[11]; // Construct the elements of the rotation matrix

  b00 = x * x * t + c;
  b01 = y * x * t + z * s;
  b02 = z * x * t - y * s;
  b10 = x * y * t - z * s;
  b11 = y * y * t + c;
  b12 = z * y * t + x * s;
  b20 = x * z * t + y * s;
  b21 = y * z * t - x * s;
  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication

  out[0] = a00 * b00 + a10 * b01 + a20 * b02;
  out[1] = a01 * b00 + a11 * b01 + a21 * b02;
  out[2] = a02 * b00 + a12 * b01 + a22 * b02;
  out[3] = a03 * b00 + a13 * b01 + a23 * b02;
  out[4] = a00 * b10 + a10 * b11 + a20 * b12;
  out[5] = a01 * b10 + a11 * b11 + a21 * b12;
  out[6] = a02 * b10 + a12 * b11 + a22 * b12;
  out[7] = a03 * b10 + a13 * b11 + a23 * b12;
  out[8] = a00 * b20 + a10 * b21 + a20 * b22;
  out[9] = a01 * b20 + a11 * b21 + a21 * b22;
  out[10] = a02 * b20 + a12 * b21 + a22 * b22;
  out[11] = a03 * b20 + a13 * b21 + a23 * b22;

  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }

  return out;
}
/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateX(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[4] = a10 * c + a20 * s;
  out[5] = a11 * c + a21 * s;
  out[6] = a12 * c + a22 * s;
  out[7] = a13 * c + a23 * s;
  out[8] = a20 * c - a10 * s;
  out[9] = a21 * c - a11 * s;
  out[10] = a22 * c - a12 * s;
  out[11] = a23 * c - a13 * s;
  return out;
}
/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateY(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[0] = a00 * c - a20 * s;
  out[1] = a01 * c - a21 * s;
  out[2] = a02 * c - a22 * s;
  out[3] = a03 * c - a23 * s;
  out[8] = a00 * s + a20 * c;
  out[9] = a01 * s + a21 * c;
  out[10] = a02 * s + a22 * c;
  out[11] = a03 * s + a23 * c;
  return out;
}
/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateZ(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[0] = a00 * c + a10 * s;
  out[1] = a01 * c + a11 * s;
  out[2] = a02 * c + a12 * s;
  out[3] = a03 * c + a13 * s;
  out[4] = a10 * c - a00 * s;
  out[5] = a11 * c - a01 * s;
  out[6] = a12 * c - a02 * s;
  out[7] = a13 * c - a03 * s;
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyVec3} v Translation vector
 * @returns {mat4} out
 */

function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.scale(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyVec3} v Scaling vector
 * @returns {mat4} out
 */

function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = v[1];
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = v[2];
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotate(dest, dest, rad, axis);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @returns {mat4} out
 */

function fromRotation(out, rad, axis) {
  var x = axis[0],
      y = axis[1],
      z = axis[2];
  var len = Math.hypot(x, y, z);
  var s, c, t;

  if (len < _common_js__WEBPACK_IMPORTED_MODULE_0__.E) {
    return null;
  }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c; // Perform rotation-specific matrix multiplication

  out[0] = x * x * t + c;
  out[1] = y * x * t + z * s;
  out[2] = z * x * t - y * s;
  out[3] = 0;
  out[4] = x * y * t - z * s;
  out[5] = y * y * t + c;
  out[6] = z * y * t + x * s;
  out[7] = 0;
  out[8] = x * z * t + y * s;
  out[9] = y * z * t - x * s;
  out[10] = z * z * t + c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the X axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateX(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromXRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = c;
  out[6] = s;
  out[7] = 0;
  out[8] = 0;
  out[9] = -s;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the Y axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateY(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromYRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = c;
  out[1] = 0;
  out[2] = -s;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = s;
  out[9] = 0;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the Z axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateZ(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromZRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = 0;
  out[4] = -s;
  out[5] = c;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @returns {mat4} out
 */

function fromRotationTranslation(out, q, v) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - (yy + zz);
  out[1] = xy + wz;
  out[2] = xz - wy;
  out[3] = 0;
  out[4] = xy - wz;
  out[5] = 1 - (xx + zz);
  out[6] = yz + wx;
  out[7] = 0;
  out[8] = xz + wy;
  out[9] = yz - wx;
  out[10] = 1 - (xx + yy);
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a new mat4 from a dual quat.
 *
 * @param {mat4} out Matrix
 * @param {ReadonlyQuat2} a Dual Quaternion
 * @returns {mat4} mat4 receiving operation result
 */

function fromQuat2(out, a) {
  var translation = new _common_js__WEBPACK_IMPORTED_MODULE_0__.A(3);
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7];
  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense

  if (magnitude > 0) {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
  } else {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
  }

  fromRotationTranslation(out, a, translation);
  return out;
}
/**
 * Returns the translation vector component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslation,
 *  the returned vector will be the same as the translation vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive translation component
 * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */

function getTranslation(out, mat) {
  out[0] = mat[12];
  out[1] = mat[13];
  out[2] = mat[14];
  return out;
}
/**
 * Returns the scaling factor component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslationScale
 *  with a normalized Quaternion paramter, the returned vector will be
 *  the same as the scaling vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive scaling factor component
 * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */

function getScaling(out, mat) {
  var m11 = mat[0];
  var m12 = mat[1];
  var m13 = mat[2];
  var m21 = mat[4];
  var m22 = mat[5];
  var m23 = mat[6];
  var m31 = mat[8];
  var m32 = mat[9];
  var m33 = mat[10];
  out[0] = Math.hypot(m11, m12, m13);
  out[1] = Math.hypot(m21, m22, m23);
  out[2] = Math.hypot(m31, m32, m33);
  return out;
}
/**
 * Returns a quaternion representing the rotational component
 *  of a transformation matrix. If a matrix is built with
 *  fromRotationTranslation, the returned quaternion will be the
 *  same as the quaternion originally supplied.
 * @param {quat} out Quaternion to receive the rotation component
 * @param {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {quat} out
 */

function getRotation(out, mat) {
  var scaling = new _common_js__WEBPACK_IMPORTED_MODULE_0__.A(3);
  getScaling(scaling, mat);
  var is1 = 1 / scaling[0];
  var is2 = 1 / scaling[1];
  var is3 = 1 / scaling[2];
  var sm11 = mat[0] * is1;
  var sm12 = mat[1] * is2;
  var sm13 = mat[2] * is3;
  var sm21 = mat[4] * is1;
  var sm22 = mat[5] * is2;
  var sm23 = mat[6] * is3;
  var sm31 = mat[8] * is1;
  var sm32 = mat[9] * is2;
  var sm33 = mat[10] * is3;
  var trace = sm11 + sm22 + sm33;
  var S = 0;

  if (trace > 0) {
    S = Math.sqrt(trace + 1.0) * 2;
    out[3] = 0.25 * S;
    out[0] = (sm23 - sm32) / S;
    out[1] = (sm31 - sm13) / S;
    out[2] = (sm12 - sm21) / S;
  } else if (sm11 > sm22 && sm11 > sm33) {
    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;
    out[3] = (sm23 - sm32) / S;
    out[0] = 0.25 * S;
    out[1] = (sm12 + sm21) / S;
    out[2] = (sm31 + sm13) / S;
  } else if (sm22 > sm33) {
    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;
    out[3] = (sm31 - sm13) / S;
    out[0] = (sm12 + sm21) / S;
    out[1] = 0.25 * S;
    out[2] = (sm23 + sm32) / S;
  } else {
    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;
    out[3] = (sm12 - sm21) / S;
    out[0] = (sm31 + sm13) / S;
    out[1] = (sm23 + sm32) / S;
    out[2] = 0.25 * S;
  }

  return out;
}
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @param {ReadonlyVec3} s Scaling vector
 * @returns {mat4} out
 */

function fromRotationTranslationScale(out, q, v, s) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     mat4.translate(dest, origin);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *     mat4.translate(dest, negativeOrigin);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @param {ReadonlyVec3} s Scaling vector
 * @param {ReadonlyVec3} o The origin vector around which to scale and rotate
 * @returns {mat4} out
 */

function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  var ox = o[0];
  var oy = o[1];
  var oz = o[2];
  var out0 = (1 - (yy + zz)) * sx;
  var out1 = (xy + wz) * sx;
  var out2 = (xz - wy) * sx;
  var out4 = (xy - wz) * sy;
  var out5 = (1 - (xx + zz)) * sy;
  var out6 = (yz + wx) * sy;
  var out8 = (xz + wy) * sz;
  var out9 = (yz - wx) * sz;
  var out10 = (1 - (xx + yy)) * sz;
  out[0] = out0;
  out[1] = out1;
  out[2] = out2;
  out[3] = 0;
  out[4] = out4;
  out[5] = out5;
  out[6] = out6;
  out[7] = 0;
  out[8] = out8;
  out[9] = out9;
  out[10] = out10;
  out[11] = 0;
  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
  out[15] = 1;
  return out;
}
/**
 * Calculates a 4x4 matrix from the given quaternion
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyQuat} q Quaternion to create matrix from
 *
 * @returns {mat4} out
 */

function fromQuat(out, q) {
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - yy - zz;
  out[1] = yx + wz;
  out[2] = zx - wy;
  out[3] = 0;
  out[4] = yx - wz;
  out[5] = 1 - xx - zz;
  out[6] = zy + wx;
  out[7] = 0;
  out[8] = zx + wy;
  out[9] = zy - wx;
  out[10] = 1 - xx - yy;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */

function frustum(out, left, right, bottom, top, near, far) {
  var rl = 1 / (right - left);
  var tb = 1 / (top - bottom);
  var nf = 1 / (near - far);
  out[0] = near * 2 * rl;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = near * 2 * tb;
  out[6] = 0;
  out[7] = 0;
  out[8] = (right + left) * rl;
  out[9] = (top + bottom) * tb;
  out[10] = (far + near) * nf;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = far * near * 2 * nf;
  out[15] = 0;
  return out;
}
/**
 * Generates a perspective projection matrix with the given bounds.
 * Passing null/undefined/no value for far will generate infinite projection matrix.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum, can be null or Infinity
 * @returns {mat4} out
 */

function perspective(out, fovy, aspect, near, far) {
  var f = 1.0 / Math.tan(fovy / 2),
      nf;
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[15] = 0;

  if (far != null && far !== Infinity) {
    nf = 1 / (near - far);
    out[10] = (far + near) * nf;
    out[14] = 2 * far * near * nf;
  } else {
    out[10] = -1;
    out[14] = -2 * near;
  }

  return out;
}
/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function perspectiveFromFieldOfView(out, fov, near, far) {
  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);
  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);
  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);
  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);
  var xScale = 2.0 / (leftTan + rightTan);
  var yScale = 2.0 / (upTan + downTan);
  out[0] = xScale;
  out[1] = 0.0;
  out[2] = 0.0;
  out[3] = 0.0;
  out[4] = 0.0;
  out[5] = yScale;
  out[6] = 0.0;
  out[7] = 0.0;
  out[8] = -((leftTan - rightTan) * xScale * 0.5);
  out[9] = (upTan - downTan) * yScale * 0.5;
  out[10] = far / (near - far);
  out[11] = -1.0;
  out[12] = 0.0;
  out[13] = 0.0;
  out[14] = far * near / (near - far);
  out[15] = 0.0;
  return out;
}
/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function ortho(out, left, right, bottom, top, near, far) {
  var lr = 1 / (left - right);
  var bt = 1 / (bottom - top);
  var nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 2 * nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = (far + near) * nf;
  out[15] = 1;
  return out;
}
/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis.
 * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {ReadonlyVec3} eye Position of the viewer
 * @param {ReadonlyVec3} center Point the viewer is looking at
 * @param {ReadonlyVec3} up vec3 pointing up
 * @returns {mat4} out
 */

function lookAt(out, eye, center, up) {
  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
  var eyex = eye[0];
  var eyey = eye[1];
  var eyez = eye[2];
  var upx = up[0];
  var upy = up[1];
  var upz = up[2];
  var centerx = center[0];
  var centery = center[1];
  var centerz = center[2];

  if (Math.abs(eyex - centerx) < _common_js__WEBPACK_IMPORTED_MODULE_0__.E && Math.abs(eyey - centery) < _common_js__WEBPACK_IMPORTED_MODULE_0__.E && Math.abs(eyez - centerz) < _common_js__WEBPACK_IMPORTED_MODULE_0__.E) {
    return identity(out);
  }

  z0 = eyex - centerx;
  z1 = eyey - centery;
  z2 = eyez - centerz;
  len = 1 / Math.hypot(z0, z1, z2);
  z0 *= len;
  z1 *= len;
  z2 *= len;
  x0 = upy * z2 - upz * z1;
  x1 = upz * z0 - upx * z2;
  x2 = upx * z1 - upy * z0;
  len = Math.hypot(x0, x1, x2);

  if (!len) {
    x0 = 0;
    x1 = 0;
    x2 = 0;
  } else {
    len = 1 / len;
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }

  y0 = z1 * x2 - z2 * x1;
  y1 = z2 * x0 - z0 * x2;
  y2 = z0 * x1 - z1 * x0;
  len = Math.hypot(y0, y1, y2);

  if (!len) {
    y0 = 0;
    y1 = 0;
    y2 = 0;
  } else {
    len = 1 / len;
    y0 *= len;
    y1 *= len;
    y2 *= len;
  }

  out[0] = x0;
  out[1] = y0;
  out[2] = z0;
  out[3] = 0;
  out[4] = x1;
  out[5] = y1;
  out[6] = z1;
  out[7] = 0;
  out[8] = x2;
  out[9] = y2;
  out[10] = z2;
  out[11] = 0;
  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
  out[15] = 1;
  return out;
}
/**
 * Generates a matrix that makes something look at something else.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {ReadonlyVec3} eye Position of the viewer
 * @param {ReadonlyVec3} center Point the viewer is looking at
 * @param {ReadonlyVec3} up vec3 pointing up
 * @returns {mat4} out
 */

function targetTo(out, eye, target, up) {
  var eyex = eye[0],
      eyey = eye[1],
      eyez = eye[2],
      upx = up[0],
      upy = up[1],
      upz = up[2];
  var z0 = eyex - target[0],
      z1 = eyey - target[1],
      z2 = eyez - target[2];
  var len = z0 * z0 + z1 * z1 + z2 * z2;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
    z0 *= len;
    z1 *= len;
    z2 *= len;
  }

  var x0 = upy * z2 - upz * z1,
      x1 = upz * z0 - upx * z2,
      x2 = upx * z1 - upy * z0;
  len = x0 * x0 + x1 * x1 + x2 * x2;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }

  out[0] = x0;
  out[1] = x1;
  out[2] = x2;
  out[3] = 0;
  out[4] = z1 * x2 - z2 * x1;
  out[5] = z2 * x0 - z0 * x2;
  out[6] = z0 * x1 - z1 * x0;
  out[7] = 0;
  out[8] = z0;
  out[9] = z1;
  out[10] = z2;
  out[11] = 0;
  out[12] = eyex;
  out[13] = eyey;
  out[14] = eyez;
  out[15] = 1;
  return out;
}
/**
 * Returns a string representation of a mat4
 *
 * @param {ReadonlyMat4} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str(a) {
  return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";
}
/**
 * Returns Frobenius norm of a mat4
 *
 * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
}
/**
 * Adds two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  out[9] = a[9] + b[9];
  out[10] = a[10] + b[10];
  out[11] = a[11] + b[11];
  out[12] = a[12] + b[12];
  out[13] = a[13] + b[13];
  out[14] = a[14] + b[14];
  out[15] = a[15] + b[15];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  out[9] = a[9] - b[9];
  out[10] = a[10] - b[10];
  out[11] = a[11] - b[11];
  out[12] = a[12] - b[12];
  out[13] = a[13] - b[13];
  out[14] = a[14] - b[14];
  out[15] = a[15] - b[15];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat4} out
 */

function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  out[9] = a[9] * b;
  out[10] = a[10] * b;
  out[11] = a[11] * b;
  out[12] = a[12] * b;
  out[13] = a[13] * b;
  out[14] = a[14] * b;
  out[15] = a[15] * b;
  return out;
}
/**
 * Adds two mat4's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat4} out the receiving vector
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat4} out
 */

function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  out[6] = a[6] + b[6] * scale;
  out[7] = a[7] + b[7] * scale;
  out[8] = a[8] + b[8] * scale;
  out[9] = a[9] + b[9] * scale;
  out[10] = a[10] + b[10] * scale;
  out[11] = a[11] + b[11] * scale;
  out[12] = a[12] + b[12] * scale;
  out[13] = a[13] + b[13] * scale;
  out[14] = a[14] + b[14] * scale;
  out[15] = a[15] + b[15] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat4} a The first matrix.
 * @param {ReadonlyMat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat4} a The first matrix.
 * @param {ReadonlyMat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7];
  var a8 = a[8],
      a9 = a[9],
      a10 = a[10],
      a11 = a[11];
  var a12 = a[12],
      a13 = a[13],
      a14 = a[14],
      a15 = a[15];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  var b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7];
  var b8 = b[8],
      b9 = b[9],
      b10 = b[10],
      b11 = b[11];
  var b12 = b[12],
      b13 = b[13],
      b14 = b[14],
      b15 = b[15];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a15), Math.abs(b15));
}
/**
 * Alias for {@link mat4.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link mat4.subtract}
 * @function
 */

var sub = subtract;

var mat4 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  create: create,
  clone: clone,
  copy: copy,
  fromValues: fromValues,
  set: set,
  identity: identity,
  transpose: transpose,
  invert: invert,
  adjoint: adjoint,
  determinant: determinant,
  multiply: multiply,
  translate: translate,
  scale: scale,
  rotate: rotate,
  rotateX: rotateX,
  rotateY: rotateY,
  rotateZ: rotateZ,
  fromTranslation: fromTranslation,
  fromScaling: fromScaling,
  fromRotation: fromRotation,
  fromXRotation: fromXRotation,
  fromYRotation: fromYRotation,
  fromZRotation: fromZRotation,
  fromRotationTranslation: fromRotationTranslation,
  fromQuat2: fromQuat2,
  getTranslation: getTranslation,
  getScaling: getScaling,
  getRotation: getRotation,
  fromRotationTranslationScale: fromRotationTranslationScale,
  fromRotationTranslationScaleOrigin: fromRotationTranslationScaleOrigin,
  fromQuat: fromQuat,
  frustum: frustum,
  perspective: perspective,
  perspectiveFromFieldOfView: perspectiveFromFieldOfView,
  ortho: ortho,
  lookAt: lookAt,
  targetTo: targetTo,
  str: str,
  frob: frob,
  add: add,
  subtract: subtract,
  multiplyScalar: multiplyScalar,
  multiplyScalarAndAdd: multiplyScalarAndAdd,
  exactEquals: exactEquals,
  equals: equals,
  mul: mul,
  sub: sub
});




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/quat.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/quat.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "a": () => (/* binding */ conjugate),
/* harmony export */   "c": () => (/* binding */ create),
/* harmony export */   "f": () => (/* binding */ fromValues),
/* harmony export */   "g": () => (/* binding */ getAxisAngle),
/* harmony export */   "m": () => (/* binding */ multiply),
/* harmony export */   "s": () => (/* binding */ setAxisAngle)
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/common.js");
/* harmony import */ var _mat3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mat3.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/mat3.js");
/* harmony import */ var _vec3_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vec3.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/vec3.js");
/* harmony import */ var _vec4_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./vec4.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/vec4.js");





/**
 * Quaternion
 * @module quat
 */

/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.A(4);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.A != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }

  out[3] = 1;
  return out;
}
/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyVec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/

function setAxisAngle(out, axis, rad) {
  rad = rad * 0.5;
  var s = Math.sin(rad);
  out[0] = s * axis[0];
  out[1] = s * axis[1];
  out[2] = s * axis[2];
  out[3] = Math.cos(rad);
  return out;
}
/**
 * Gets the rotation axis and angle for a given
 *  quaternion. If a quaternion is created with
 *  setAxisAngle, this method will return the same
 *  values as providied in the original parameter list
 *  OR functionally equivalent values.
 * Example: The quaternion formed by axis [0, 0, 1] and
 *  angle -90 is the same as the quaternion formed by
 *  [0, 0, 1] and 270. This method favors the latter.
 * @param  {vec3} out_axis  Vector receiving the axis of rotation
 * @param  {ReadonlyQuat} q     Quaternion to be decomposed
 * @return {Number}     Angle, in radians, of the rotation
 */

function getAxisAngle(out_axis, q) {
  var rad = Math.acos(q[3]) * 2.0;
  var s = Math.sin(rad / 2.0);

  if (s > _common_js__WEBPACK_IMPORTED_MODULE_0__.E) {
    out_axis[0] = q[0] / s;
    out_axis[1] = q[1] / s;
    out_axis[2] = q[2] / s;
  } else {
    // If s is zero, return any axis (no rotation - axis does not matter)
    out_axis[0] = 1;
    out_axis[1] = 0;
    out_axis[2] = 0;
  }

  return rad;
}
/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @returns {quat} out
 */

function multiply(out, a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = b[0],
      by = b[1],
      bz = b[2],
      bw = b[3];
  out[0] = ax * bw + aw * bx + ay * bz - az * by;
  out[1] = ay * bw + aw * by + az * bx - ax * bz;
  out[2] = az * bw + aw * bz + ax * by - ay * bx;
  out[3] = aw * bw - ax * bx - ay * by - az * bz;
  return out;
}
/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */

function slerp(out, a, b, t) {
  // benchmarks:
  //    http://jsperf.com/quaternion-slerp-implementations
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = b[0],
      by = b[1],
      bz = b[2],
      bw = b[3];
  var omega, cosom, sinom, scale0, scale1; // calc cosine

  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)

  if (cosom < 0.0) {
    cosom = -cosom;
    bx = -bx;
    by = -by;
    bz = -bz;
    bw = -bw;
  } // calculate coefficients


  if (1.0 - cosom > _common_js__WEBPACK_IMPORTED_MODULE_0__.E) {
    // standard case (slerp)
    omega = Math.acos(cosom);
    sinom = Math.sin(omega);
    scale0 = Math.sin((1.0 - t) * omega) / sinom;
    scale1 = Math.sin(t * omega) / sinom;
  } else {
    // "from" and "to" quaternions are very close
    //  ... so we can do a linear interpolation
    scale0 = 1.0 - t;
    scale1 = t;
  } // calculate final values


  out[0] = scale0 * ax + scale1 * bx;
  out[1] = scale0 * ay + scale1 * by;
  out[2] = scale0 * az + scale1 * bz;
  out[3] = scale0 * aw + scale1 * bw;
  return out;
}
/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate conjugate of
 * @returns {quat} out
 */

function conjugate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a[3];
  return out;
}
/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyMat3} m rotation matrix
 * @returns {quat} out
 * @function
 */

function fromMat3(out, m) {
  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
  // article "Quaternion Calculus and Fast Animation".
  var fTrace = m[0] + m[4] + m[8];
  var fRoot;

  if (fTrace > 0.0) {
    // |w| > 1/2, may as well choose w > 1/2
    fRoot = Math.sqrt(fTrace + 1.0); // 2w

    out[3] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot; // 1/(4w)

    out[0] = (m[5] - m[7]) * fRoot;
    out[1] = (m[6] - m[2]) * fRoot;
    out[2] = (m[1] - m[3]) * fRoot;
  } else {
    // |w| <= 1/2
    var i = 0;
    if (m[4] > m[0]) i = 1;
    if (m[8] > m[i * 3 + i]) i = 2;
    var j = (i + 1) % 3;
    var k = (i + 2) % 3;
    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
    out[i] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
  }

  return out;
}
/**
 * Creates a new quat initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} a new quaternion
 * @function
 */

var fromValues = _vec4_js__WEBPACK_IMPORTED_MODULE_3__.f;
/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */

var normalize = _vec4_js__WEBPACK_IMPORTED_MODULE_3__.n;
/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {ReadonlyVec3} a the initial vector
 * @param {ReadonlyVec3} b the destination vector
 * @returns {quat} out
 */

(function () {
  var tmpvec3 = (0,_vec3_js__WEBPACK_IMPORTED_MODULE_2__.u)();
  var xUnitVec3 = (0,_vec3_js__WEBPACK_IMPORTED_MODULE_2__.y)(1, 0, 0);
  var yUnitVec3 = (0,_vec3_js__WEBPACK_IMPORTED_MODULE_2__.y)(0, 1, 0);
  return function (out, a, b) {
    var dot$1 = (0,_vec3_js__WEBPACK_IMPORTED_MODULE_2__.d)(a, b);

    if (dot$1 < -0.999999) {
      (0,_vec3_js__WEBPACK_IMPORTED_MODULE_2__.c)(tmpvec3, xUnitVec3, a);
      if ((0,_vec3_js__WEBPACK_IMPORTED_MODULE_2__.r)(tmpvec3) < 0.000001) (0,_vec3_js__WEBPACK_IMPORTED_MODULE_2__.c)(tmpvec3, yUnitVec3, a);
      (0,_vec3_js__WEBPACK_IMPORTED_MODULE_2__.n)(tmpvec3, tmpvec3);
      setAxisAngle(out, tmpvec3, Math.PI);
      return out;
    } else if (dot$1 > 0.999999) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
    } else {
      (0,_vec3_js__WEBPACK_IMPORTED_MODULE_2__.c)(tmpvec3, a, b);
      out[0] = tmpvec3[0];
      out[1] = tmpvec3[1];
      out[2] = tmpvec3[2];
      out[3] = 1 + dot$1;
      return normalize(out, out);
    }
  };
})();
/**
 * Performs a spherical linear interpolation with two control points
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {ReadonlyQuat} c the third operand
 * @param {ReadonlyQuat} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */

(function () {
  var temp1 = create();
  var temp2 = create();
  return function (out, a, b, c, d, t) {
    slerp(temp1, a, d, t);
    slerp(temp2, b, c, t);
    slerp(out, temp1, temp2, 2 * t * (1 - t));
    return out;
  };
})();
/**
 * Sets the specified quaternion with values corresponding to the given
 * axes. Each axis is a vec3 and is expected to be unit length and
 * perpendicular to all other specified axes.
 *
 * @param {ReadonlyVec3} view  the vector representing the viewing direction
 * @param {ReadonlyVec3} right the vector representing the local "right" direction
 * @param {ReadonlyVec3} up    the vector representing the local "up" direction
 * @returns {quat} out
 */

(function () {
  var matr = (0,_mat3_js__WEBPACK_IMPORTED_MODULE_1__.c)();
  return function (out, view, right, up) {
    matr[0] = right[0];
    matr[3] = right[1];
    matr[6] = right[2];
    matr[1] = up[0];
    matr[4] = up[1];
    matr[7] = up[2];
    matr[2] = -view[0];
    matr[5] = -view[1];
    matr[8] = -view[2];
    return normalize(out, fromMat3(out, matr));
  };
})();




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/vec3.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/vec3.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "a": () => (/* binding */ subtract),
/* harmony export */   "b": () => (/* binding */ scale),
/* harmony export */   "c": () => (/* binding */ cross),
/* harmony export */   "d": () => (/* binding */ dot),
/* harmony export */   "e": () => (/* binding */ scaleAndAdd),
/* harmony export */   "f": () => (/* binding */ negate),
/* harmony export */   "g": () => (/* binding */ exactEquals),
/* harmony export */   "h": () => (/* binding */ distance),
/* harmony export */   "i": () => (/* binding */ copy),
/* harmony export */   "j": () => (/* binding */ add),
/* harmony export */   "k": () => (/* binding */ equals),
/* harmony export */   "l": () => (/* binding */ length),
/* harmony export */   "m": () => (/* binding */ inverse),
/* harmony export */   "n": () => (/* binding */ normalize),
/* harmony export */   "o": () => (/* binding */ divide),
/* harmony export */   "p": () => (/* binding */ transformMat3),
/* harmony export */   "q": () => (/* binding */ sub),
/* harmony export */   "r": () => (/* binding */ len),
/* harmony export */   "s": () => (/* binding */ set),
/* harmony export */   "t": () => (/* binding */ transformMat4),
/* harmony export */   "u": () => (/* binding */ create),
/* harmony export */   "v": () => (/* binding */ vec3),
/* harmony export */   "w": () => (/* binding */ transformQuat),
/* harmony export */   "x": () => (/* binding */ squaredDistance),
/* harmony export */   "y": () => (/* binding */ fromValues)
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/common.js");


/**
 * 3 Dimensional Vector
 * @module vec3
 */

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.A(3);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.A != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }

  return out;
}
/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {ReadonlyVec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */

function clone(a) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.A(3);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
/**
 * Calculates the length of a vec3
 *
 * @param {ReadonlyVec3} a vector to calculate length of
 * @returns {Number} length of a
 */

function length(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return Math.hypot(x, y, z);
}
/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */

function fromValues(x, y, z) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.A(3);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the source vector
 * @returns {vec3} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */

function set(out, x, y, z) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  return out;
}
/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  return out;
}
/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  return out;
}
/**
 * Math.ceil the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to ceil
 * @returns {vec3} out
 */

function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  return out;
}
/**
 * Math.floor the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to floor
 * @returns {vec3} out
 */

function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  return out;
}
/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  return out;
}
/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  return out;
}
/**
 * Math.round the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to round
 * @returns {vec3} out
 */

function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  return out;
}
/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */

function scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  return out;
}
/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */

function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} distance between a and b
 */

function distance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return Math.hypot(x, y, z);
}
/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} squared distance between a and b
 */

function squaredDistance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return x * x + y * y + z * z;
}
/**
 * Calculates the squared length of a vec3
 *
 * @param {ReadonlyVec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function squaredLength(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return x * x + y * y + z * z;
}
/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to negate
 * @returns {vec3} out
 */

function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  return out;
}
/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to invert
 * @returns {vec3} out
 */

function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  return out;
}
/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to normalize
 * @returns {vec3} out
 */

function normalize(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var len = x * x + y * y + z * z;

  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
  }

  out[0] = a[0] * len;
  out[1] = a[1] * len;
  out[2] = a[2] * len;
  return out;
}
/**
 * Calculates the dot product of two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} dot product of a and b
 */

function dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function cross(out, a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2];
  var bx = b[0],
      by = b[1],
      bz = b[2];
  out[0] = ay * bz - az * by;
  out[1] = az * bx - ax * bz;
  out[2] = ax * by - ay * bx;
  return out;
}
/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function lerp(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  return out;
}
/**
 * Performs a hermite interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {ReadonlyVec3} c the third operand
 * @param {ReadonlyVec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function hermite(out, a, b, c, d, t) {
  var factorTimes2 = t * t;
  var factor1 = factorTimes2 * (2 * t - 3) + 1;
  var factor2 = factorTimes2 * (t - 2) + t;
  var factor3 = factorTimes2 * (t - 1);
  var factor4 = factorTimes2 * (3 - 2 * t);
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
/**
 * Performs a bezier interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {ReadonlyVec3} c the third operand
 * @param {ReadonlyVec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function bezier(out, a, b, c, d, t) {
  var inverseFactor = 1 - t;
  var inverseFactorTimesTwo = inverseFactor * inverseFactor;
  var factorTimes2 = t * t;
  var factor1 = inverseFactorTimesTwo * inverseFactor;
  var factor2 = 3 * t * inverseFactorTimesTwo;
  var factor3 = 3 * factorTimes2 * inverseFactor;
  var factor4 = factorTimes2 * t;
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec3} out
 */

function random(out, scale) {
  scale = scale || 1.0;
  var r = (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.R)() * 2.0 * Math.PI;
  var z = (0,_common_js__WEBPACK_IMPORTED_MODULE_0__.R)() * 2.0 - 1.0;
  var zScale = Math.sqrt(1.0 - z * z) * scale;
  out[0] = Math.cos(r) * zScale;
  out[1] = Math.sin(r) * zScale;
  out[2] = z * scale;
  return out;
}
/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec3} out
 */

function transformMat4(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2];
  var w = m[3] * x + m[7] * y + m[11] * z + m[15];
  w = w || 1.0;
  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
  return out;
}
/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyMat3} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */

function transformMat3(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2];
  out[0] = x * m[0] + y * m[3] + z * m[6];
  out[1] = x * m[1] + y * m[4] + z * m[7];
  out[2] = x * m[2] + y * m[5] + z * m[8];
  return out;
}
/**
 * Transforms the vec3 with a quat
 * Can also be used for dual quaternions. (Multiply it with the real part)
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyQuat} q quaternion to transform with
 * @returns {vec3} out
 */

function transformQuat(out, a, q) {
  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3];
  var x = a[0],
      y = a[1],
      z = a[2]; // var qvec = [qx, qy, qz];
  // var uv = vec3.cross([], qvec, a);

  var uvx = qy * z - qz * y,
      uvy = qz * x - qx * z,
      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);

  var uuvx = qy * uvz - qz * uvy,
      uuvy = qz * uvx - qx * uvz,
      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);

  var w2 = qw * 2;
  uvx *= w2;
  uvy *= w2;
  uvz *= w2; // vec3.scale(uuv, uuv, 2);

  uuvx *= 2;
  uuvy *= 2;
  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));

  out[0] = x + uvx + uuvx;
  out[1] = y + uvy + uuvy;
  out[2] = z + uvz + uuvz;
  return out;
}
/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */

function rotateX(out, a, b, rad) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[0];
  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);
  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */

function rotateY(out, a, b, rad) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);
  r[1] = p[1];
  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */

function rotateZ(out, a, b, rad) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);
  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);
  r[2] = p[2]; //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Get the angle between two 3D vectors
 * @param {ReadonlyVec3} a The first operand
 * @param {ReadonlyVec3} b The second operand
 * @returns {Number} The angle in radians
 */

function angle(a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2],
      bx = b[0],
      by = b[1],
      bz = b[2],
      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),
      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),
      mag = mag1 * mag2,
      cosine = mag && dot(a, b) / mag;
  return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
/**
 * Set the components of a vec3 to zero
 *
 * @param {vec3} out the receiving vector
 * @returns {vec3} out
 */

function zero(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  out[2] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {ReadonlyVec3} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function str(a) {
  return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")";
}
/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec3} a The first vector.
 * @param {ReadonlyVec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec3} a The first vector.
 * @param {ReadonlyVec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2];
  return Math.abs(a0 - b0) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _common_js__WEBPACK_IMPORTED_MODULE_0__.E * Math.max(1.0, Math.abs(a2), Math.abs(b2));
}
/**
 * Alias for {@link vec3.subtract}
 * @function
 */

var sub = subtract;
/**
 * Alias for {@link vec3.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link vec3.divide}
 * @function
 */

var div = divide;
/**
 * Alias for {@link vec3.distance}
 * @function
 */

var dist = distance;
/**
 * Alias for {@link vec3.squaredDistance}
 * @function
 */

var sqrDist = squaredDistance;
/**
 * Alias for {@link vec3.length}
 * @function
 */

var len = length;
/**
 * Alias for {@link vec3.squaredLength}
 * @function
 */

var sqrLen = squaredLength;
/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var forEach = function () {
  var vec = create();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 3;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
    }

    return a;
  };
}();

var vec3 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  create: create,
  clone: clone,
  length: length,
  fromValues: fromValues,
  copy: copy,
  set: set,
  add: add,
  subtract: subtract,
  multiply: multiply,
  divide: divide,
  ceil: ceil,
  floor: floor,
  min: min,
  max: max,
  round: round,
  scale: scale,
  scaleAndAdd: scaleAndAdd,
  distance: distance,
  squaredDistance: squaredDistance,
  squaredLength: squaredLength,
  negate: negate,
  inverse: inverse,
  normalize: normalize,
  dot: dot,
  cross: cross,
  lerp: lerp,
  hermite: hermite,
  bezier: bezier,
  random: random,
  transformMat4: transformMat4,
  transformMat3: transformMat3,
  transformQuat: transformQuat,
  rotateX: rotateX,
  rotateY: rotateY,
  rotateZ: rotateZ,
  angle: angle,
  zero: zero,
  str: str,
  exactEquals: exactEquals,
  equals: equals,
  sub: sub,
  mul: mul,
  div: div,
  dist: dist,
  sqrDist: sqrDist,
  len: len,
  sqrLen: sqrLen,
  forEach: forEach
});




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/vec4.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/vec4.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "f": () => (/* binding */ fromValues),
/* harmony export */   "n": () => (/* binding */ normalize),
/* harmony export */   "t": () => (/* binding */ transformMat4)
/* harmony export */ });
/* harmony import */ var _common_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./common.js */ "./node_modules/@kitware/vtk.js/vendor/gl-matrix/esm/common.js");


/**
 * 4 Dimensional Vector
 * @module vec4
 */

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */

function create() {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.A(4);

  if (_common_js__WEBPACK_IMPORTED_MODULE_0__.A != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
  }

  return out;
}
/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */

function fromValues(x, y, z, w) {
  var out = new _common_js__WEBPACK_IMPORTED_MODULE_0__.A(4);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}
/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to normalize
 * @returns {vec4} out
 */

function normalize(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  var len = x * x + y * y + z * z + w * w;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
  }

  out[0] = x * len;
  out[1] = y * len;
  out[2] = z * len;
  out[3] = w * len;
  return out;
}
/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec4} out
 */

function transformMat4(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2],
      w = a[3];
  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
  return out;
}
/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

(function () {
  var vec = create();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 4;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      vec[3] = a[i + 3];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
      a[i + 3] = vec[3];
    }

    return a;
  };
})();




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/vendor/globalthis/implementation.browser.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/vendor/globalthis/implementation.browser.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _vendor_globalthis_implementation_browser_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../_vendor/globalthis/implementation.browser.js_commonjs-module.js */ "./node_modules/@kitware/vtk.js/_vendor/globalthis/implementation.browser.js_commonjs-module.js");


/* eslint no-negated-condition: 0, no-new-func: 0 */

if (typeof self !== 'undefined') {
	_vendor_globalthis_implementation_browser_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_0__.i.exports = self;
} else if (typeof window !== 'undefined') {
	_vendor_globalthis_implementation_browser_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_0__.i.exports = window;
} else {
	_vendor_globalthis_implementation_browser_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_0__.i.exports = Function('return this')();
}


/***/ }),

/***/ "./node_modules/@kitware/vtk.js/vendor/globalthis/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/vendor/globalthis/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "g": () => (/* binding */ globalthis)
/* harmony export */ });
/* harmony import */ var _define_properties_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../define-properties/index.js */ "./node_modules/@kitware/vtk.js/vendor/define-properties/index.js");
/* harmony import */ var _implementation_browser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./implementation.browser.js */ "./node_modules/@kitware/vtk.js/vendor/globalthis/implementation.browser.js");
/* harmony import */ var _polyfill_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./polyfill.js */ "./node_modules/@kitware/vtk.js/vendor/globalthis/polyfill.js");
/* harmony import */ var _shim_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./shim.js */ "./node_modules/@kitware/vtk.js/vendor/globalthis/shim.js");
/* harmony import */ var _vendor_globalthis_implementation_browser_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../_vendor/globalthis/implementation.browser.js_commonjs-module.js */ "./node_modules/@kitware/vtk.js/_vendor/globalthis/implementation.browser.js_commonjs-module.js");






var defineProperties = _define_properties_index_js__WEBPACK_IMPORTED_MODULE_0__.d;

var implementation = _vendor_globalthis_implementation_browser_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_4__.i.exports;
var getPolyfill = _polyfill_js__WEBPACK_IMPORTED_MODULE_2__.p;
var shim = _shim_js__WEBPACK_IMPORTED_MODULE_3__.s;

var polyfill = getPolyfill();

var getGlobal = function () { return polyfill; };

defineProperties(getGlobal, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

var globalthis = getGlobal;




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/vendor/globalthis/polyfill.js":
/*!********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/vendor/globalthis/polyfill.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "p": () => (/* binding */ polyfill)
/* harmony export */ });
/* harmony import */ var _virtual_commonjsHelpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../_virtual/commonjsHelpers.js */ "./node_modules/@kitware/vtk.js/_virtual/commonjsHelpers.js");
/* harmony import */ var _implementation_browser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./implementation.browser.js */ "./node_modules/@kitware/vtk.js/vendor/globalthis/implementation.browser.js");
/* harmony import */ var _vendor_globalthis_implementation_browser_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../_vendor/globalthis/implementation.browser.js_commonjs-module.js */ "./node_modules/@kitware/vtk.js/_vendor/globalthis/implementation.browser.js_commonjs-module.js");




var implementation = _vendor_globalthis_implementation_browser_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_2__.i.exports;

var polyfill = function getPolyfill() {
	if (typeof _virtual_commonjsHelpers_js__WEBPACK_IMPORTED_MODULE_0__.c !== 'object' || !_virtual_commonjsHelpers_js__WEBPACK_IMPORTED_MODULE_0__.c || _virtual_commonjsHelpers_js__WEBPACK_IMPORTED_MODULE_0__.c.Math !== Math || _virtual_commonjsHelpers_js__WEBPACK_IMPORTED_MODULE_0__.c.Array !== Array) {
		return implementation;
	}
	return _virtual_commonjsHelpers_js__WEBPACK_IMPORTED_MODULE_0__.c;
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/vendor/globalthis/shim.js":
/*!****************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/vendor/globalthis/shim.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "s": () => (/* binding */ shim)
/* harmony export */ });
/* harmony import */ var _define_properties_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../define-properties/index.js */ "./node_modules/@kitware/vtk.js/vendor/define-properties/index.js");
/* harmony import */ var _polyfill_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./polyfill.js */ "./node_modules/@kitware/vtk.js/vendor/globalthis/polyfill.js");



var define = _define_properties_index_js__WEBPACK_IMPORTED_MODULE_0__.d;
var getPolyfill = _polyfill_js__WEBPACK_IMPORTED_MODULE_1__.p;

var shim = function shimGlobal() {
	var polyfill = getPolyfill();
	if (define.supportsDescriptors) {
		var descriptor = Object.getOwnPropertyDescriptor(polyfill, 'globalThis');
		if (!descriptor || (descriptor.configurable && (descriptor.enumerable || descriptor.writable || globalThis !== polyfill))) { // eslint-disable-line max-len
			Object.defineProperty(polyfill, 'globalThis', {
				configurable: true,
				enumerable: false,
				value: polyfill,
				writable: false
			});
		}
	} else if (typeof globalThis !== 'object' || globalThis !== polyfill) {
		polyfill.globalThis = polyfill;
	}
	return polyfill;
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/vendor/object-keys/implementation.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/vendor/object-keys/implementation.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "i": () => (/* binding */ implementation)
/* harmony export */ });
/* harmony import */ var _isArguments_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArguments.js */ "./node_modules/@kitware/vtk.js/vendor/object-keys/isArguments.js");


var keysShim;
if (!Object.keys) {
	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var isArgs = _isArguments_js__WEBPACK_IMPORTED_MODULE_0__.i; // eslint-disable-line global-require
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$applicationCache: true,
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$onmozfullscreenchange: true,
		$onmozfullscreenerror: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};
}
var implementation = keysShim;




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/vendor/object-keys/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/vendor/object-keys/index.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "o": () => (/* binding */ objectKeys)
/* harmony export */ });
/* harmony import */ var _isArguments_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArguments.js */ "./node_modules/@kitware/vtk.js/vendor/object-keys/isArguments.js");
/* harmony import */ var _implementation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./implementation.js */ "./node_modules/@kitware/vtk.js/vendor/object-keys/implementation.js");



var slice = Array.prototype.slice;
var isArgs = _isArguments_js__WEBPACK_IMPORTED_MODULE_0__.i;

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) { return origKeys(o); } : _implementation_js__WEBPACK_IMPORTED_MODULE_1__.i;

var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			var args = Object.keys(arguments);
			return args && args.length === arguments.length;
		}(1, 2));
		if (!keysWorksWithArguments) {
			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				}
				return originalKeys(object);
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

var objectKeys = keysShim;




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/vendor/object-keys/isArguments.js":
/*!************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/vendor/object-keys/isArguments.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "i": () => (/* binding */ isArguments)
/* harmony export */ });
var toStr = Object.prototype.toString;

var isArguments = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/vendor/seedrandom/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/vendor/seedrandom/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "s": () => (/* binding */ seedrandom)
/* harmony export */ });
/* harmony import */ var _lib_alea_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/alea.js */ "./node_modules/@kitware/vtk.js/vendor/seedrandom/lib/alea.js");
/* harmony import */ var _lib_xor128_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/xor128.js */ "./node_modules/@kitware/vtk.js/vendor/seedrandom/lib/xor128.js");
/* harmony import */ var _lib_xorwow_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/xorwow.js */ "./node_modules/@kitware/vtk.js/vendor/seedrandom/lib/xorwow.js");
/* harmony import */ var _lib_xorshift7_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/xorshift7.js */ "./node_modules/@kitware/vtk.js/vendor/seedrandom/lib/xorshift7.js");
/* harmony import */ var _lib_xor4096_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/xor4096.js */ "./node_modules/@kitware/vtk.js/vendor/seedrandom/lib/xor4096.js");
/* harmony import */ var _lib_tychei_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib/tychei.js */ "./node_modules/@kitware/vtk.js/vendor/seedrandom/lib/tychei.js");
/* harmony import */ var _seedrandom_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./seedrandom.js */ "./node_modules/@kitware/vtk.js/vendor/seedrandom/seedrandom.js");
/* harmony import */ var _vendor_seedrandom_lib_alea_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../_vendor/seedrandom/lib/alea.js_commonjs-module.js */ "./node_modules/@kitware/vtk.js/_vendor/seedrandom/lib/alea.js_commonjs-module.js");
/* harmony import */ var _vendor_seedrandom_lib_xor128_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../_vendor/seedrandom/lib/xor128.js_commonjs-module.js */ "./node_modules/@kitware/vtk.js/_vendor/seedrandom/lib/xor128.js_commonjs-module.js");
/* harmony import */ var _vendor_seedrandom_lib_xorwow_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../_vendor/seedrandom/lib/xorwow.js_commonjs-module.js */ "./node_modules/@kitware/vtk.js/_vendor/seedrandom/lib/xorwow.js_commonjs-module.js");
/* harmony import */ var _vendor_seedrandom_lib_xorshift7_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../_vendor/seedrandom/lib/xorshift7.js_commonjs-module.js */ "./node_modules/@kitware/vtk.js/_vendor/seedrandom/lib/xorshift7.js_commonjs-module.js");
/* harmony import */ var _vendor_seedrandom_lib_xor4096_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../_vendor/seedrandom/lib/xor4096.js_commonjs-module.js */ "./node_modules/@kitware/vtk.js/_vendor/seedrandom/lib/xor4096.js_commonjs-module.js");
/* harmony import */ var _vendor_seedrandom_lib_tychei_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../_vendor/seedrandom/lib/tychei.js_commonjs-module.js */ "./node_modules/@kitware/vtk.js/_vendor/seedrandom/lib/tychei.js_commonjs-module.js");
/* harmony import */ var _vendor_seedrandom_seedrandom_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../_vendor/seedrandom/seedrandom.js_commonjs-module.js */ "./node_modules/@kitware/vtk.js/_vendor/seedrandom/seedrandom.js_commonjs-module.js");















// A library of seedable RNGs implemented in Javascript.
//
// Usage:
//
// var seedrandom = require('seedrandom');
// var random = seedrandom(1); // or any seed.
// var x = random();       // 0 <= x < 1.  Every bit is random.
// var x = random.quick(); // 0 <= x < 1.  32 bits of randomness.

// alea, a 53-bit multiply-with-carry generator by Johannes Baagøe.
// Period: ~2^116
// Reported to pass all BigCrush tests.
var alea = _vendor_seedrandom_lib_alea_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_7__.a.exports;

// xor128, a pure xor-shift generator by George Marsaglia.
// Period: 2^128-1.
// Reported to fail: MatrixRank and LinearComp.
var xor128 = _vendor_seedrandom_lib_xor128_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_8__.x.exports;

// xorwow, George Marsaglia's 160-bit xor-shift combined plus weyl.
// Period: 2^192-2^32
// Reported to fail: CollisionOver, SimpPoker, and LinearComp.
var xorwow = _vendor_seedrandom_lib_xorwow_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_9__.x.exports;

// xorshift7, by François Panneton and Pierre L'ecuyer, takes
// a different approach: it adds robustness by allowing more shifts
// than Marsaglia's original three.  It is a 7-shift generator
// with 256 bits, that passes BigCrush with no systmatic failures.
// Period 2^256-1.
// No systematic BigCrush failures reported.
var xorshift7 = _vendor_seedrandom_lib_xorshift7_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_10__.x.exports;

// xor4096, by Richard Brent, is a 4096-bit xor-shift with a
// very long period that also adds a Weyl generator. It also passes
// BigCrush with no systematic failures.  Its long period may
// be useful if you have many generators and need to avoid
// collisions.
// Period: 2^4128-2^32.
// No systematic BigCrush failures reported.
var xor4096 = _vendor_seedrandom_lib_xor4096_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_11__.x.exports;

// Tyche-i, by Samuel Neves and Filipe Araujo, is a bit-shifting random
// number generator derived from ChaCha, a modern stream cipher.
// https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf
// Period: ~2^127
// No systematic BigCrush failures reported.
var tychei = _vendor_seedrandom_lib_tychei_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_12__.t.exports;

// The original ARC4-based prng included in this library.
// Period: ~2^1600
var sr = _vendor_seedrandom_seedrandom_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_13__.s.exports;

sr.alea = alea;
sr.xor128 = xor128;
sr.xorwow = xorwow;
sr.xorshift7 = xorshift7;
sr.xor4096 = xor4096;
sr.tychei = tychei;

var seedrandom = sr;




/***/ }),

/***/ "./node_modules/@kitware/vtk.js/vendor/seedrandom/lib/alea.js":
/*!********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/vendor/seedrandom/lib/alea.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _virtual_commonjsHelpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../_virtual/commonjsHelpers.js */ "./node_modules/@kitware/vtk.js/_virtual/commonjsHelpers.js");
/* harmony import */ var _vendor_seedrandom_lib_alea_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../_vendor/seedrandom/lib/alea.js_commonjs-module.js */ "./node_modules/@kitware/vtk.js/_vendor/seedrandom/lib/alea.js_commonjs-module.js");



(function (module) {
// A port of an algorithm by Johannes Baagøe <baagoe@baagoe.com>, 2010
// http://baagoe.com/en/RandomMusings/javascript/
// https://github.com/nquinlan/better-random-numbers-for-javascript-mirror
// Original work is under MIT license -

// Copyright (C) 2010 by Johannes Baagøe <baagoe@baagoe.org>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.



(function(global, module, define) {

function Alea(seed) {
  var me = this, mash = Mash();

  me.next = function() {
    var t = 2091639 * me.s0 + me.c * 2.3283064365386963e-10; // 2^-32
    me.s0 = me.s1;
    me.s1 = me.s2;
    return me.s2 = t - (me.c = t | 0);
  };

  // Apply the seeding algorithm from Baagoe.
  me.c = 1;
  me.s0 = mash(' ');
  me.s1 = mash(' ');
  me.s2 = mash(' ');
  me.s0 -= mash(seed);
  if (me.s0 < 0) { me.s0 += 1; }
  me.s1 -= mash(seed);
  if (me.s1 < 0) { me.s1 += 1; }
  me.s2 -= mash(seed);
  if (me.s2 < 0) { me.s2 += 1; }
  mash = null;
}

function copy(f, t) {
  t.c = f.c;
  t.s0 = f.s0;
  t.s1 = f.s1;
  t.s2 = f.s2;
  return t;
}

function impl(seed, opts) {
  var xg = new Alea(seed),
      state = opts && opts.state,
      prng = xg.next;
  prng.int32 = function() { return (xg.next() * 0x100000000) | 0; };
  prng.double = function() {
    return prng() + (prng() * 0x200000 | 0) * 1.1102230246251565e-16; // 2^-53
  };
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); };
  }
  return prng;
}

function Mash() {
  var n = 0xefc8249d;

  var mash = function(data) {
    data = String(data);
    for (var i = 0; i < data.length; i++) {
      n += data.charCodeAt(i);
      var h = 0.02519603282416938 * n;
      n = h >>> 0;
      h -= n;
      h *= n;
      n = h >>> 0;
      h -= n;
      n += h * 0x100000000; // 2^32
    }
    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32
  };

  return mash;
}


if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.alea = impl;
}

})(
  _virtual_commonjsHelpers_js__WEBPACK_IMPORTED_MODULE_0__.c,
  module,    // present in node.js
  (typeof undefined) == 'function'    // present with an AMD loader
);
}(_vendor_seedrandom_lib_alea_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_1__.a));


/***/ }),

/***/ "./node_modules/@kitware/vtk.js/vendor/seedrandom/lib/tychei.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/vendor/seedrandom/lib/tychei.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _virtual_commonjsHelpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../_virtual/commonjsHelpers.js */ "./node_modules/@kitware/vtk.js/_virtual/commonjsHelpers.js");
/* harmony import */ var _vendor_seedrandom_lib_tychei_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../_vendor/seedrandom/lib/tychei.js_commonjs-module.js */ "./node_modules/@kitware/vtk.js/_vendor/seedrandom/lib/tychei.js_commonjs-module.js");



(function (module) {
// A Javascript implementaion of the "Tyche-i" prng algorithm by
// Samuel Neves and Filipe Araujo.
// See https://eden.dei.uc.pt/~sneves/pubs/2011-snfa2.pdf

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  // Set up generator function.
  me.next = function() {
    var b = me.b, c = me.c, d = me.d, a = me.a;
    b = (b << 25) ^ (b >>> 7) ^ c;
    c = (c - d) | 0;
    d = (d << 24) ^ (d >>> 8) ^ a;
    a = (a - b) | 0;
    me.b = b = (b << 20) ^ (b >>> 12) ^ c;
    me.c = c = (c - d) | 0;
    me.d = (d << 16) ^ (c >>> 16) ^ a;
    return me.a = (a - b) | 0;
  };

  /* The following is non-inverted tyche, which has better internal
   * bit diffusion, but which is about 25% slower than tyche-i in JS.
  me.next = function() {
    var a = me.a, b = me.b, c = me.c, d = me.d;
    a = (me.a + me.b | 0) >>> 0;
    d = me.d ^ a; d = d << 16 ^ d >>> 16;
    c = me.c + d | 0;
    b = me.b ^ c; b = b << 12 ^ d >>> 20;
    me.a = a = a + b | 0;
    d = d ^ a; me.d = d = d << 8 ^ d >>> 24;
    me.c = c = c + d | 0;
    b = b ^ c;
    return me.b = (b << 7 ^ b >>> 25);
  }
  */

  me.a = 0;
  me.b = 0;
  me.c = 2654435769 | 0;
  me.d = 1367130551;

  if (seed === Math.floor(seed)) {
    // Integer seed.
    me.a = (seed / 0x100000000) | 0;
    me.b = seed | 0;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 20; k++) {
    me.b ^= strseed.charCodeAt(k) | 0;
    me.next();
  }
}

function copy(f, t) {
  t.a = f.a;
  t.b = f.b;
  t.c = f.c;
  t.d = f.d;
  return t;
}
function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); };
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.tychei = impl;
}

})(
  _virtual_commonjsHelpers_js__WEBPACK_IMPORTED_MODULE_0__.c,
  module,    // present in node.js
  (typeof undefined) == 'function'    // present with an AMD loader
);
}(_vendor_seedrandom_lib_tychei_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_1__.t));


/***/ }),

/***/ "./node_modules/@kitware/vtk.js/vendor/seedrandom/lib/xor128.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/vendor/seedrandom/lib/xor128.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _virtual_commonjsHelpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../_virtual/commonjsHelpers.js */ "./node_modules/@kitware/vtk.js/_virtual/commonjsHelpers.js");
/* harmony import */ var _vendor_seedrandom_lib_xor128_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../_vendor/seedrandom/lib/xor128.js_commonjs-module.js */ "./node_modules/@kitware/vtk.js/_vendor/seedrandom/lib/xor128.js_commonjs-module.js");



(function (module) {
// A Javascript implementaion of the "xor128" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  me.x = 0;
  me.y = 0;
  me.z = 0;
  me.w = 0;

  // Set up generator function.
  me.next = function() {
    var t = me.x ^ (me.x << 11);
    me.x = me.y;
    me.y = me.z;
    me.z = me.w;
    return me.w ^= (me.w >>> 19) ^ t ^ (t >>> 8);
  };

  if (seed === (seed | 0)) {
    // Integer seed.
    me.x = seed;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 64; k++) {
    me.x ^= strseed.charCodeAt(k) | 0;
    me.next();
  }
}

function copy(f, t) {
  t.x = f.x;
  t.y = f.y;
  t.z = f.z;
  t.w = f.w;
  return t;
}

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); };
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xor128 = impl;
}

})(
  _virtual_commonjsHelpers_js__WEBPACK_IMPORTED_MODULE_0__.c,
  module,    // present in node.js
  (typeof undefined) == 'function'    // present with an AMD loader
);
}(_vendor_seedrandom_lib_xor128_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_1__.x));


/***/ }),

/***/ "./node_modules/@kitware/vtk.js/vendor/seedrandom/lib/xor4096.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/vendor/seedrandom/lib/xor4096.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _virtual_commonjsHelpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../_virtual/commonjsHelpers.js */ "./node_modules/@kitware/vtk.js/_virtual/commonjsHelpers.js");
/* harmony import */ var _vendor_seedrandom_lib_xor4096_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../_vendor/seedrandom/lib/xor4096.js_commonjs-module.js */ "./node_modules/@kitware/vtk.js/_vendor/seedrandom/lib/xor4096.js_commonjs-module.js");



(function (module) {
// A Javascript implementaion of Richard Brent's Xorgens xor4096 algorithm.
//
// This fast non-cryptographic random number generator is designed for
// use in Monte-Carlo algorithms. It combines a long-period xorshift
// generator with a Weyl generator, and it passes all common batteries
// of stasticial tests for randomness while consuming only a few nanoseconds
// for each prng generated.  For background on the generator, see Brent's
// paper: "Some long-period random number generators using shifts and xors."
// http://arxiv.org/pdf/1004.3115v1.pdf
//
// Usage:
//
// var xor4096 = require('xor4096');
// random = xor4096(1);                        // Seed with int32 or string.
// assert.equal(random(), 0.1520436450538547); // (0, 1) range, 53 bits.
// assert.equal(random.int32(), 1806534897);   // signed int32, 32 bits.
//
// For nonzero numeric keys, this impelementation provides a sequence
// identical to that by Brent's xorgens 3 implementaion in C.  This
// implementation also provides for initalizing the generator with
// string seeds, or for saving and restoring the state of the generator.
//
// On Chrome, this prng benchmarks about 2.1 times slower than
// Javascript's built-in Math.random().

(function(global, module, define) {

function XorGen(seed) {
  var me = this;

  // Set up generator function.
  me.next = function() {
    var w = me.w,
        X = me.X, i = me.i, t, v;
    // Update Weyl generator.
    me.w = w = (w + 0x61c88647) | 0;
    // Update xor generator.
    v = X[(i + 34) & 127];
    t = X[i = ((i + 1) & 127)];
    v ^= v << 13;
    t ^= t << 17;
    v ^= v >>> 15;
    t ^= t >>> 12;
    // Update Xor generator array state.
    v = X[i] = v ^ t;
    me.i = i;
    // Result is the combination.
    return (v + (w ^ (w >>> 16))) | 0;
  };

  function init(me, seed) {
    var t, v, i, j, w, X = [], limit = 128;
    if (seed === (seed | 0)) {
      // Numeric seeds initialize v, which is used to generates X.
      v = seed;
      seed = null;
    } else {
      // String seeds are mixed into v and X one character at a time.
      seed = seed + '\0';
      v = 0;
      limit = Math.max(limit, seed.length);
    }
    // Initialize circular array and weyl value.
    for (i = 0, j = -32; j < limit; ++j) {
      // Put the unicode characters into the array, and shuffle them.
      if (seed) v ^= seed.charCodeAt((j + 32) % seed.length);
      // After 32 shuffles, take v as the starting w value.
      if (j === 0) w = v;
      v ^= v << 10;
      v ^= v >>> 15;
      v ^= v << 4;
      v ^= v >>> 13;
      if (j >= 0) {
        w = (w + 0x61c88647) | 0;     // Weyl.
        t = (X[j & 127] ^= (v + w));  // Combine xor and weyl to init array.
        i = (0 == t) ? i + 1 : 0;     // Count zeroes.
      }
    }
    // We have detected all zeroes; make the key nonzero.
    if (i >= 128) {
      X[(seed && seed.length || 0) & 127] = -1;
    }
    // Run the generator 512 times to further mix the state before using it.
    // Factoring this as a function slows the main generator, so it is just
    // unrolled here.  The weyl generator is not advanced while warming up.
    i = 127;
    for (j = 4 * 128; j > 0; --j) {
      v = X[(i + 34) & 127];
      t = X[i = ((i + 1) & 127)];
      v ^= v << 13;
      t ^= t << 17;
      v ^= v >>> 15;
      t ^= t >>> 12;
      X[i] = v ^ t;
    }
    // Storing state as object members is faster than using closure variables.
    me.w = w;
    me.X = X;
    me.i = i;
  }

  init(me, seed);
}

function copy(f, t) {
  t.i = f.i;
  t.w = f.w;
  t.X = f.X.slice();
  return t;
}
function impl(seed, opts) {
  if (seed == null) seed = +(new Date);
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (state.X) copy(state, xg);
    prng.state = function() { return copy(xg, {}); };
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xor4096 = impl;
}

})(
  _virtual_commonjsHelpers_js__WEBPACK_IMPORTED_MODULE_0__.c,                                     // window object or global
  module,    // present in node.js
  (typeof undefined) == 'function'    // present with an AMD loader
);
}(_vendor_seedrandom_lib_xor4096_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_1__.x));


/***/ }),

/***/ "./node_modules/@kitware/vtk.js/vendor/seedrandom/lib/xorshift7.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/vendor/seedrandom/lib/xorshift7.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _virtual_commonjsHelpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../_virtual/commonjsHelpers.js */ "./node_modules/@kitware/vtk.js/_virtual/commonjsHelpers.js");
/* harmony import */ var _vendor_seedrandom_lib_xorshift7_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../_vendor/seedrandom/lib/xorshift7.js_commonjs-module.js */ "./node_modules/@kitware/vtk.js/_vendor/seedrandom/lib/xorshift7.js_commonjs-module.js");



(function (module) {
// A Javascript implementaion of the "xorshift7" algorithm by
// François Panneton and Pierre L'ecuyer:
// "On the Xorgshift Random Number Generators"
// http://saluc.engr.uconn.edu/refs/crypto/rng/panneton05onthexorshift.pdf

(function(global, module, define) {

function XorGen(seed) {
  var me = this;

  // Set up generator function.
  me.next = function() {
    // Update xor generator.
    var X = me.x, i = me.i, t, v;
    t = X[i]; t ^= (t >>> 7); v = t ^ (t << 24);
    t = X[(i + 1) & 7]; v ^= t ^ (t >>> 10);
    t = X[(i + 3) & 7]; v ^= t ^ (t >>> 3);
    t = X[(i + 4) & 7]; v ^= t ^ (t << 7);
    t = X[(i + 7) & 7]; t = t ^ (t << 13); v ^= t ^ (t << 9);
    X[i] = v;
    me.i = (i + 1) & 7;
    return v;
  };

  function init(me, seed) {
    var j, X = [];

    if (seed === (seed | 0)) {
      // Seed state array using a 32-bit integer.
      X[0] = seed;
    } else {
      // Seed state using a string.
      seed = '' + seed;
      for (j = 0; j < seed.length; ++j) {
        X[j & 7] = (X[j & 7] << 15) ^
            (seed.charCodeAt(j) + X[(j + 1) & 7] << 13);
      }
    }
    // Enforce an array length of 8, not all zeroes.
    while (X.length < 8) X.push(0);
    for (j = 0; j < 8 && X[j] === 0; ++j);
    if (j == 8) X[7] = -1;

    me.x = X;
    me.i = 0;

    // Discard an initial 256 values.
    for (j = 256; j > 0; --j) {
      me.next();
    }
  }

  init(me, seed);
}

function copy(f, t) {
  t.x = f.x.slice();
  t.i = f.i;
  return t;
}

function impl(seed, opts) {
  if (seed == null) seed = +(new Date);
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (state.x) copy(state, xg);
    prng.state = function() { return copy(xg, {}); };
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xorshift7 = impl;
}

})(
  _virtual_commonjsHelpers_js__WEBPACK_IMPORTED_MODULE_0__.c,
  module,    // present in node.js
  (typeof undefined) == 'function'    // present with an AMD loader
);
}(_vendor_seedrandom_lib_xorshift7_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_1__.x));


/***/ }),

/***/ "./node_modules/@kitware/vtk.js/vendor/seedrandom/lib/xorwow.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/vendor/seedrandom/lib/xorwow.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _virtual_commonjsHelpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../_virtual/commonjsHelpers.js */ "./node_modules/@kitware/vtk.js/_virtual/commonjsHelpers.js");
/* harmony import */ var _vendor_seedrandom_lib_xorwow_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../_vendor/seedrandom/lib/xorwow.js_commonjs-module.js */ "./node_modules/@kitware/vtk.js/_vendor/seedrandom/lib/xorwow.js_commonjs-module.js");



(function (module) {
// A Javascript implementaion of the "xorwow" prng algorithm by
// George Marsaglia.  See http://www.jstatsoft.org/v08/i14/paper

(function(global, module, define) {

function XorGen(seed) {
  var me = this, strseed = '';

  // Set up generator function.
  me.next = function() {
    var t = (me.x ^ (me.x >>> 2));
    me.x = me.y; me.y = me.z; me.z = me.w; me.w = me.v;
    return (me.d = (me.d + 362437 | 0)) +
       (me.v = (me.v ^ (me.v << 4)) ^ (t ^ (t << 1))) | 0;
  };

  me.x = 0;
  me.y = 0;
  me.z = 0;
  me.w = 0;
  me.v = 0;

  if (seed === (seed | 0)) {
    // Integer seed.
    me.x = seed;
  } else {
    // String seed.
    strseed += seed;
  }

  // Mix in string seed, then discard an initial batch of 64 values.
  for (var k = 0; k < strseed.length + 64; k++) {
    me.x ^= strseed.charCodeAt(k) | 0;
    if (k == strseed.length) {
      me.d = me.x << 10 ^ me.x >>> 4;
    }
    me.next();
  }
}

function copy(f, t) {
  t.x = f.x;
  t.y = f.y;
  t.z = f.z;
  t.w = f.w;
  t.v = f.v;
  t.d = f.d;
  return t;
}

function impl(seed, opts) {
  var xg = new XorGen(seed),
      state = opts && opts.state,
      prng = function() { return (xg.next() >>> 0) / 0x100000000; };
  prng.double = function() {
    do {
      var top = xg.next() >>> 11,
          bot = (xg.next() >>> 0) / 0x100000000,
          result = (top + bot) / (1 << 21);
    } while (result === 0);
    return result;
  };
  prng.int32 = xg.next;
  prng.quick = prng;
  if (state) {
    if (typeof(state) == 'object') copy(state, xg);
    prng.state = function() { return copy(xg, {}); };
  }
  return prng;
}

if (module && module.exports) {
  module.exports = impl;
} else if (define && define.amd) {
  define(function() { return impl; });
} else {
  this.xorwow = impl;
}

})(
  _virtual_commonjsHelpers_js__WEBPACK_IMPORTED_MODULE_0__.c,
  module,    // present in node.js
  (typeof undefined) == 'function'    // present with an AMD loader
);
}(_vendor_seedrandom_lib_xorwow_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_1__.x));


/***/ }),

/***/ "./node_modules/@kitware/vtk.js/vendor/seedrandom/seedrandom.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@kitware/vtk.js/vendor/seedrandom/seedrandom.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _virtual_commonjsHelpers_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../_virtual/commonjsHelpers.js */ "./node_modules/@kitware/vtk.js/_virtual/commonjsHelpers.js");
/* harmony import */ var _vendor_seedrandom_seedrandom_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../_vendor/seedrandom/seedrandom.js_commonjs-module.js */ "./node_modules/@kitware/vtk.js/_vendor/seedrandom/seedrandom.js_commonjs-module.js");
/* harmony import */ var _virtual_rollup_plugin_ignore_empty_module_placeholder_commonjs_proxy_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../_virtual/_rollup_plugin_ignore_empty_module_placeholder_commonjs-proxy.js */ "./node_modules/@kitware/vtk.js/_virtual/_rollup_plugin_ignore_empty_module_placeholder_commonjs-proxy.js");




/*
Copyright 2019 David Bau.

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

*/

(function (module) {
(function (global, pool, math) {
//
// The following constants are related to IEEE 754 limits.
//

var width = 256,        // each RC4 output is 0 <= x < 256
    chunks = 6,         // at least six RC4 outputs for each double
    digits = 52,        // there are 52 significant digits in a double
    rngname = 'random', // rngname: name for Math.random and Math.seedrandom
    startdenom = math.pow(width, chunks),
    significance = math.pow(2, digits),
    overflow = significance * 2,
    mask = width - 1,
    nodecrypto;         // node.js crypto module, initialized at the bottom.

//
// seedrandom()
// This is the seedrandom function described above.
//
function seedrandom(seed, options, callback) {
  var key = [];
  options = (options == true) ? { entropy: true } : (options || {});

  // Flatten the seed string or build one from local entropy if needed.
  var shortseed = mixkey(flatten(
    options.entropy ? [seed, tostring(pool)] :
    (seed == null) ? autoseed() : seed, 3), key);

  // Use the seed to initialize an ARC4 generator.
  var arc4 = new ARC4(key);

  // This function returns a random double in [0, 1) that contains
  // randomness in every bit of the mantissa of the IEEE 754 value.
  var prng = function() {
    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
        d = startdenom,                 //   and denominator d = 2 ^ 48.
        x = 0;                          //   and no 'extra last byte'.
    while (n < significance) {          // Fill up all significant digits by
      n = (n + x) * width;              //   shifting numerator and
      d *= width;                       //   denominator and generating a
      x = arc4.g(1);                    //   new least-significant-byte.
    }
    while (n >= overflow) {             // To avoid rounding up, before adding
      n /= 2;                           //   last byte, shift everything
      d /= 2;                           //   right using integer math until
      x >>>= 1;                         //   we have exactly the desired bits.
    }
    return (n + x) / d;                 // Form the number within [0, 1).
  };

  prng.int32 = function() { return arc4.g(4) | 0; };
  prng.quick = function() { return arc4.g(4) / 0x100000000; };
  prng.double = prng;

  // Mix the randomness into accumulated entropy.
  mixkey(tostring(arc4.S), pool);

  // Calling convention: what to return as a function of prng, seed, is_math.
  return (options.pass || callback ||
      function(prng, seed, is_math_call, state) {
        if (state) {
          // Load the arc4 state from the given state if it has an S array.
          if (state.S) { copy(state, arc4); }
          // Only provide the .state method if requested via options.state.
          prng.state = function() { return copy(arc4, {}); };
        }

        // If called as a method of Math (Math.seedrandom()), mutate
        // Math.random because that is how seedrandom.js has worked since v1.0.
        if (is_math_call) { math[rngname] = prng; return seed; }

        // Otherwise, it is a newer calling convention, so return the
        // prng directly.
        else return prng;
      })(
  prng,
  shortseed,
  'global' in options ? options.global : (this == math),
  options.state);
}

//
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//
function ARC4(key) {
  var t, keylen = key.length,
      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];

  // The empty key [] is treated as [0].
  if (!keylen) { key = [keylen++]; }

  // Set up S using the standard key scheduling algorithm.
  while (i < width) {
    s[i] = i++;
  }
  for (i = 0; i < width; i++) {
    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
    s[j] = t;
  }

  // The "g" method returns the next (count) outputs as one number.
  (me.g = function(count) {
    // Using instance members instead of closure state nearly doubles speed.
    var t, r = 0,
        i = me.i, j = me.j, s = me.S;
    while (count--) {
      t = s[i = mask & (i + 1)];
      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
    }
    me.i = i; me.j = j;
    return r;
    // For robust unpredictability, the function call below automatically
    // discards an initial batch of values.  This is called RC4-drop[256].
    // See http://google.com/search?q=rsa+fluhrer+response&btnI
  })(width);
}

//
// copy()
// Copies internal state of ARC4 to or from a plain object.
//
function copy(f, t) {
  t.i = f.i;
  t.j = f.j;
  t.S = f.S.slice();
  return t;
}
//
// flatten()
// Converts an object tree to nested arrays of strings.
//
function flatten(obj, depth) {
  var result = [], typ = (typeof obj), prop;
  if (depth && typ == 'object') {
    for (prop in obj) {
      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
    }
  }
  return (result.length ? result : typ == 'string' ? obj : obj + '\0');
}

//
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//
function mixkey(seed, key) {
  var stringseed = seed + '', smear, j = 0;
  while (j < stringseed.length) {
    key[mask & j] =
      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
  }
  return tostring(key);
}

//
// autoseed()
// Returns an object for autoseeding, using window.crypto and Node crypto
// module if available.
//
function autoseed() {
  try {
    var out;
    if (nodecrypto && (out = nodecrypto.randomBytes)) {
      // The use of 'out' to remember randomBytes makes tight minified code.
      out = out(width);
    } else {
      out = new Uint8Array(width);
      (global.crypto || global.msCrypto).getRandomValues(out);
    }
    return tostring(out);
  } catch (e) {
    var browser = global.navigator,
        plugins = browser && browser.plugins;
    return [+new Date, global, plugins, global.screen, tostring(pool)];
  }
}

//
// tostring()
// Converts an array of charcodes to a string
//
function tostring(a) {
  return String.fromCharCode.apply(0, a);
}

//
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to interfere with deterministic PRNG state later,
// seedrandom will not call math.random on its own again after
// initialization.
//
mixkey(math.random(), pool);

//
// Nodejs and AMD support: export the implementation as a module using
// either convention.
//
if (module.exports) {
  module.exports = seedrandom;
  // When in node.js, try using crypto package for autoseeding.
  try {
    nodecrypto = _virtual_rollup_plugin_ignore_empty_module_placeholder_commonjs_proxy_js__WEBPACK_IMPORTED_MODULE_2__.r;
  } catch (ex) {}
} else {
  // When included as a plain script, set up Math.seedrandom global.
  math['seed' + rngname] = seedrandom;
}


// End anonymous scope, and pass initial values.
})(
  // global: `self` in browsers (including strict mode and web workers),
  // otherwise `this` in Node and other environments
  (typeof self !== 'undefined') ? self : _virtual_commonjsHelpers_js__WEBPACK_IMPORTED_MODULE_0__.c,
  [],     // pool: entropy pool starts empty
  Math    // math: package containing random, pow, and seedrandom
);
}(_vendor_seedrandom_seedrandom_js_commonjs_module_js__WEBPACK_IMPORTED_MODULE_1__.s));


/***/ }),

/***/ "./node_modules/@kitware/vtk.js/vtk.js":
/*!*********************************************!*\
  !*** ./node_modules/@kitware/vtk.js/vtk.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ vtk),
/* harmony export */   "vtkGlobal": () => (/* binding */ vtkGlobal)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var _vendor_globalthis_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./vendor/globalthis/index.js */ "./node_modules/@kitware/vtk.js/vendor/globalthis/index.js");




function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
var vtkGlobal = (0,_vendor_globalthis_index_js__WEBPACK_IMPORTED_MODULE_2__.g)(); // returns native globalThis if compliant

var factoryMapping = {
  vtkObject: function vtkObject() {
    return null;
  }
};
function vtk(obj) {
  if (obj === null || obj === undefined) {
    return obj;
  }

  if (obj.isA) {
    return obj;
  }

  if (!obj.vtkClass) {
    if (vtkGlobal.console && vtkGlobal.console.error) {
      vtkGlobal.console.error('Invalid VTK object');
    }

    return null;
  }

  var constructor = factoryMapping[obj.vtkClass];

  if (!constructor) {
    if (vtkGlobal.console && vtkGlobal.console.error) {
      vtkGlobal.console.error("No vtk class found for Object of type ".concat(obj.vtkClass));
    }

    return null;
  } // Shallow copy object


  var model = _objectSpread({}, obj); // Convert into vtkObject any nested key


  Object.keys(model).forEach(function (keyName) {
    if (model[keyName] && (0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(model[keyName]) === 'object' && model[keyName].vtkClass) {
      model[keyName] = vtk(model[keyName]);
    }
  }); // Return the root

  var newInst = constructor(model);

  if (newInst && newInst.modified) {
    newInst.modified();
  }

  return newInst;
}

function register(vtkClassName, constructor) {
  factoryMapping[vtkClassName] = constructor;
} // Nest register method under the vtk function


vtk.register = register;




/***/ }),

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var settle = __webpack_require__(/*! ./../core/settle */ "./node_modules/axios/lib/core/settle.js");
var cookies = __webpack_require__(/*! ./../helpers/cookies */ "./node_modules/axios/lib/helpers/cookies.js");
var buildURL = __webpack_require__(/*! ./../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ "./node_modules/axios/lib/core/buildFullPath.js");
var parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ "./node_modules/axios/lib/helpers/parseHeaders.js");
var isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
var createError = __webpack_require__(/*! ../core/createError */ "./node_modules/axios/lib/core/createError.js");

module.exports = function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = config.headers;
    var responseType = config.responseType;

    if (utils.isFormData(requestData)) {
      delete requestHeaders['Content-Type']; // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
    }

    var fullPath = buildFullPath(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;

    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
        request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };

      settle(resolve, reject, response);

      // Clean up request
      request = null;
    }

    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }

      reject(createError('Request aborted', config, 'ECONNABORTED', request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(createError('Network Error', config, null, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = 'timeout of ' + config.timeout + 'ms exceeded';
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(createError(
        timeoutErrorMessage,
        config,
        config.transitional && config.transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
        request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (utils.isStandardBrowserEnv()) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
        cookies.read(config.xsrfCookieName) :
        undefined;

      if (xsrfValue) {
        requestHeaders[config.xsrfHeaderName] = xsrfValue;
      }
    }

    // Add headers to the request
    if ('setRequestHeader' in request) {
      utils.forEach(requestHeaders, function setRequestHeader(val, key) {
        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
          // Remove Content-Type if data is undefined
          delete requestHeaders[key];
        } else {
          // Otherwise add header to the request
          request.setRequestHeader(key, val);
        }
      });
    }

    // Add withCredentials to request if needed
    if (!utils.isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', config.onDownloadProgress);
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', config.onUploadProgress);
    }

    if (config.cancelToken) {
      // Handle cancellation
      config.cancelToken.promise.then(function onCanceled(cancel) {
        if (!request) {
          return;
        }

        request.abort();
        reject(cancel);
        // Clean up request
        request = null;
      });
    }

    if (!requestData) {
      requestData = null;
    }

    // Send the request
    request.send(requestData);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");
var Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");
var mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
var defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new Axios(defaultConfig);
  var instance = bind(Axios.prototype.request, context);

  // Copy axios.prototype to instance
  utils.extend(instance, Axios.prototype, context);

  // Copy context to instance
  utils.extend(instance, context);

  return instance;
}

// Create the default instance to be exported
var axios = createInstance(defaults);

// Expose Axios class to allow class inheritance
axios.Axios = Axios;

// Factory for creating new instances
axios.create = function create(instanceConfig) {
  return createInstance(mergeConfig(axios.defaults, instanceConfig));
};

// Expose Cancel & CancelToken
axios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");
axios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");
axios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");

// Expose isAxiosError
axios.isAxiosError = __webpack_require__(/*! ./helpers/isAxiosError */ "./node_modules/axios/lib/helpers/isAxiosError.js");

module.exports = axios;

// Allow use of default import syntax in TypeScript
module.exports["default"] = axios;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/Cancel.js":
/*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";


/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */
function Cancel(message) {
  this.message = message;
}

Cancel.prototype.toString = function toString() {
  return 'Cancel' + (this.message ? ': ' + this.message : '');
};

Cancel.prototype.__CANCEL__ = true;

module.exports = Cancel;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var Cancel = __webpack_require__(/*! ./Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");

/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */
function CancelToken(executor) {
  if (typeof executor !== 'function') {
    throw new TypeError('executor must be a function.');
  }

  var resolvePromise;
  this.promise = new Promise(function promiseExecutor(resolve) {
    resolvePromise = resolve;
  });

  var token = this;
  executor(function cancel(message) {
    if (token.reason) {
      // Cancellation has already been requested
      return;
    }

    token.reason = new Cancel(message);
    resolvePromise(token.reason);
  });
}

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
CancelToken.prototype.throwIfRequested = function throwIfRequested() {
  if (this.reason) {
    throw this.reason;
  }
};

/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */
CancelToken.source = function source() {
  var cancel;
  var token = new CancelToken(function executor(c) {
    cancel = c;
  });
  return {
    token: token,
    cancel: cancel
  };
};

module.exports = CancelToken;


/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/***/ ((module) => {

"use strict";


module.exports = function isCancel(value) {
  return !!(value && value.__CANCEL__);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var buildURL = __webpack_require__(/*! ../helpers/buildURL */ "./node_modules/axios/lib/helpers/buildURL.js");
var InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ "./node_modules/axios/lib/core/InterceptorManager.js");
var dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ "./node_modules/axios/lib/core/dispatchRequest.js");
var mergeConfig = __webpack_require__(/*! ./mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");
var validator = __webpack_require__(/*! ../helpers/validator */ "./node_modules/axios/lib/helpers/validator.js");

var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */
function Axios(instanceConfig) {
  this.defaults = instanceConfig;
  this.interceptors = {
    request: new InterceptorManager(),
    response: new InterceptorManager()
  };
}

/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */
Axios.prototype.request = function request(config) {
  /*eslint no-param-reassign:0*/
  // Allow for axios('example/url'[, config]) a la fetch API
  if (typeof config === 'string') {
    config = arguments[1] || {};
    config.url = arguments[0];
  } else {
    config = config || {};
  }

  config = mergeConfig(this.defaults, config);

  // Set config.method
  if (config.method) {
    config.method = config.method.toLowerCase();
  } else if (this.defaults.method) {
    config.method = this.defaults.method.toLowerCase();
  } else {
    config.method = 'get';
  }

  var transitional = config.transitional;

  if (transitional !== undefined) {
    validator.assertOptions(transitional, {
      silentJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
      forcedJSONParsing: validators.transitional(validators.boolean, '1.0.0'),
      clarifyTimeoutError: validators.transitional(validators.boolean, '1.0.0')
    }, false);
  }

  // filter out skipped interceptors
  var requestInterceptorChain = [];
  var synchronousRequestInterceptors = true;
  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
      return;
    }

    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
  });

  var responseInterceptorChain = [];
  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
  });

  var promise;

  if (!synchronousRequestInterceptors) {
    var chain = [dispatchRequest, undefined];

    Array.prototype.unshift.apply(chain, requestInterceptorChain);
    chain = chain.concat(responseInterceptorChain);

    promise = Promise.resolve(config);
    while (chain.length) {
      promise = promise.then(chain.shift(), chain.shift());
    }

    return promise;
  }


  var newConfig = config;
  while (requestInterceptorChain.length) {
    var onFulfilled = requestInterceptorChain.shift();
    var onRejected = requestInterceptorChain.shift();
    try {
      newConfig = onFulfilled(newConfig);
    } catch (error) {
      onRejected(error);
      break;
    }
  }

  try {
    promise = dispatchRequest(newConfig);
  } catch (error) {
    return Promise.reject(error);
  }

  while (responseInterceptorChain.length) {
    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
  }

  return promise;
};

Axios.prototype.getUri = function getUri(config) {
  config = mergeConfig(this.defaults, config);
  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
};

// Provide aliases for supported request methods
utils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function(url, data, config) {
    return this.request(mergeConfig(config || {}, {
      method: method,
      url: url,
      data: data
    }));
  };
});

module.exports = Axios;


/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function InterceptorManager() {
  this.handlers = [];
}

/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */
InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
  this.handlers.push({
    fulfilled: fulfilled,
    rejected: rejected,
    synchronous: options ? options.synchronous : false,
    runWhen: options ? options.runWhen : null
  });
  return this.handlers.length - 1;
};

/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */
InterceptorManager.prototype.eject = function eject(id) {
  if (this.handlers[id]) {
    this.handlers[id] = null;
  }
};

/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */
InterceptorManager.prototype.forEach = function forEach(fn) {
  utils.forEach(this.handlers, function forEachHandler(h) {
    if (h !== null) {
      fn(h);
    }
  });
};

module.exports = InterceptorManager;


/***/ }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
var combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");

/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */
module.exports = function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !isAbsoluteURL(requestedURL)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/createError.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var enhanceError = __webpack_require__(/*! ./enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */
module.exports = function createError(message, config, code, request, response) {
  var error = new Error(message);
  return enhanceError(error, config, code, request, response);
};


/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var transformData = __webpack_require__(/*! ./transformData */ "./node_modules/axios/lib/core/transformData.js");
var isCancel = __webpack_require__(/*! ../cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");
var defaults = __webpack_require__(/*! ../defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Throws a `Cancel` if cancellation has been requested.
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */
module.exports = function dispatchRequest(config) {
  throwIfCancellationRequested(config);

  // Ensure headers exist
  config.headers = config.headers || {};

  // Transform request data
  config.data = transformData.call(
    config,
    config.data,
    config.headers,
    config.transformRequest
  );

  // Flatten headers
  config.headers = utils.merge(
    config.headers.common || {},
    config.headers[config.method] || {},
    config.headers
  );

  utils.forEach(
    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
    function cleanHeaderConfig(method) {
      delete config.headers[method];
    }
  );

  var adapter = config.adapter || defaults.adapter;

  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = transformData.call(
      config,
      response.data,
      response.headers,
      config.transformResponse
    );

    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = transformData.call(
          config,
          reason.response.data,
          reason.response.headers,
          config.transformResponse
        );
      }
    }

    return Promise.reject(reason);
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/core/enhanceError.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */
module.exports = function enhanceError(error, config, code, request, response) {
  error.config = config;
  if (code) {
    error.code = code;
  }

  error.request = request;
  error.response = response;
  error.isAxiosError = true;

  error.toJSON = function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code
    };
  };
  return error;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */
module.exports = function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};

  var valueFromConfig2Keys = ['url', 'method', 'data'];
  var mergeDeepPropertiesKeys = ['headers', 'auth', 'proxy', 'params'];
  var defaultToConfig2Keys = [
    'baseURL', 'transformRequest', 'transformResponse', 'paramsSerializer',
    'timeout', 'timeoutMessage', 'withCredentials', 'adapter', 'responseType', 'xsrfCookieName',
    'xsrfHeaderName', 'onUploadProgress', 'onDownloadProgress', 'decompress',
    'maxContentLength', 'maxBodyLength', 'maxRedirects', 'transport', 'httpAgent',
    'httpsAgent', 'cancelToken', 'socketPath', 'responseEncoding'
  ];
  var directMergeKeys = ['validateStatus'];

  function getMergedValue(target, source) {
    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {
      return utils.merge(target, source);
    } else if (utils.isPlainObject(source)) {
      return utils.merge({}, source);
    } else if (utils.isArray(source)) {
      return source.slice();
    }
    return source;
  }

  function mergeDeepProperties(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  }

  utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    }
  });

  utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);

  utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
    if (!utils.isUndefined(config2[prop])) {
      config[prop] = getMergedValue(undefined, config2[prop]);
    } else if (!utils.isUndefined(config1[prop])) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  utils.forEach(directMergeKeys, function merge(prop) {
    if (prop in config2) {
      config[prop] = getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      config[prop] = getMergedValue(undefined, config1[prop]);
    }
  });

  var axiosKeys = valueFromConfig2Keys
    .concat(mergeDeepPropertiesKeys)
    .concat(defaultToConfig2Keys)
    .concat(directMergeKeys);

  var otherKeys = Object
    .keys(config1)
    .concat(Object.keys(config2))
    .filter(function filterAxiosKeys(key) {
      return axiosKeys.indexOf(key) === -1;
    });

  utils.forEach(otherKeys, mergeDeepProperties);

  return config;
};


/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var createError = __webpack_require__(/*! ./createError */ "./node_modules/axios/lib/core/createError.js");

/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */
module.exports = function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(createError(
      'Request failed with status code ' + response.status,
      response.config,
      null,
      response.request,
      response
    ));
  }
};


/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");
var defaults = __webpack_require__(/*! ./../defaults */ "./node_modules/axios/lib/defaults.js");

/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */
module.exports = function transformData(data, headers, fns) {
  var context = this || defaults;
  /*eslint no-param-reassign:0*/
  utils.forEach(fns, function transform(fn) {
    data = fn.call(context, data, headers);
  });

  return data;
};


/***/ }),

/***/ "./node_modules/axios/lib/defaults.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");
var normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ "./node_modules/axios/lib/helpers/normalizeHeaderName.js");
var enhanceError = __webpack_require__(/*! ./core/enhanceError */ "./node_modules/axios/lib/core/enhanceError.js");

var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

function setContentTypeIfUnset(headers, value) {
  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {
    headers['Content-Type'] = value;
  }
}

function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = __webpack_require__(/*! ./adapters/xhr */ "./node_modules/axios/lib/adapters/xhr.js");
  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
    // For node use HTTP adapter
    adapter = __webpack_require__(/*! ./adapters/http */ "./node_modules/axios/lib/adapters/xhr.js");
  }
  return adapter;
}

function stringifySafely(rawValue, parser, encoder) {
  if (utils.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils.trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }

  return (encoder || JSON.stringify)(rawValue);
}

var defaults = {

  transitional: {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  },

  adapter: getDefaultAdapter(),

  transformRequest: [function transformRequest(data, headers) {
    normalizeHeaderName(headers, 'Accept');
    normalizeHeaderName(headers, 'Content-Type');

    if (utils.isFormData(data) ||
      utils.isArrayBuffer(data) ||
      utils.isBuffer(data) ||
      utils.isStream(data) ||
      utils.isFile(data) ||
      utils.isBlob(data)
    ) {
      return data;
    }
    if (utils.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils.isURLSearchParams(data)) {
      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
      return data.toString();
    }
    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
      setContentTypeIfUnset(headers, 'application/json');
      return stringifySafely(data);
    }
    return data;
  }],

  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional;
    var silentJSONParsing = transitional && transitional.silentJSONParsing;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw enhanceError(e, this, 'E_JSON_PARSE');
          }
          throw e;
        }
      }
    }

    return data;
  }],

  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,

  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',

  maxContentLength: -1,
  maxBodyLength: -1,

  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  }
};

defaults.headers = {
  common: {
    'Accept': 'application/json, text/plain, */*'
  }
};

utils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});

utils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});

module.exports = defaults;


/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/***/ ((module) => {

"use strict";


module.exports = function bind(fn, thisArg) {
  return function wrap() {
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }
    return fn.apply(thisArg, args);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

function encode(val) {
  return encodeURIComponent(val).
    replace(/%3A/gi, ':').
    replace(/%24/g, '$').
    replace(/%2C/gi, ',').
    replace(/%20/g, '+').
    replace(/%5B/gi, '[').
    replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */
module.exports = function buildURL(url, params, paramsSerializer) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }

  var serializedParams;
  if (paramsSerializer) {
    serializedParams = paramsSerializer(params);
  } else if (utils.isURLSearchParams(params)) {
    serializedParams = params.toString();
  } else {
    var parts = [];

    utils.forEach(params, function serialize(val, key) {
      if (val === null || typeof val === 'undefined') {
        return;
      }

      if (utils.isArray(val)) {
        key = key + '[]';
      } else {
        val = [val];
      }

      utils.forEach(val, function parseValue(v) {
        if (utils.isDate(v)) {
          v = v.toISOString();
        } else if (utils.isObject(v)) {
          v = JSON.stringify(v);
        }
        parts.push(encode(key) + '=' + encode(v));
      });
    });

    serializedParams = parts.join('&');
  }

  if (serializedParams) {
    var hashmarkIndex = url.indexOf('#');
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }

    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }

  return url;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/***/ ((module) => {

"use strict";


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */
module.exports = function combineURLs(baseURL, relativeURL) {
  return relativeURL
    ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
    : baseURL;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs support document.cookie
    (function standardBrowserEnv() {
      return {
        write: function write(name, value, expires, path, domain, secure) {
          var cookie = [];
          cookie.push(name + '=' + encodeURIComponent(value));

          if (utils.isNumber(expires)) {
            cookie.push('expires=' + new Date(expires).toGMTString());
          }

          if (utils.isString(path)) {
            cookie.push('path=' + path);
          }

          if (utils.isString(domain)) {
            cookie.push('domain=' + domain);
          }

          if (secure === true) {
            cookie.push('secure');
          }

          document.cookie = cookie.join('; ');
        },

        read: function read(name) {
          var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
          return (match ? decodeURIComponent(match[3]) : null);
        },

        remove: function remove(name) {
          this.write(name, '', Date.now() - 86400000);
        }
      };
    })() :

  // Non standard browser env (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return {
        write: function write() {},
        read: function read() { return null; },
        remove: function remove() {}
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/***/ ((module) => {

"use strict";


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
module.exports = function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAxiosError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/
/***/ ((module) => {

"use strict";


/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
module.exports = function isAxiosError(payload) {
  return (typeof payload === 'object') && (payload.isAxiosError === true);
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

module.exports = (
  utils.isStandardBrowserEnv() ?

  // Standard browser envs have full support of the APIs needed to test
  // whether the request URL is of the same origin as current location.
    (function standardBrowserEnv() {
      var msie = /(msie|trident)/i.test(navigator.userAgent);
      var urlParsingNode = document.createElement('a');
      var originURL;

      /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */
      function resolveURL(url) {
        var href = url;

        if (msie) {
        // IE needs attribute set twice to normalize properties
          urlParsingNode.setAttribute('href', href);
          href = urlParsingNode.href;
        }

        urlParsingNode.setAttribute('href', href);

        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
            urlParsingNode.pathname :
            '/' + urlParsingNode.pathname
        };
      }

      originURL = resolveURL(window.location.href);

      /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */
      return function isURLSameOrigin(requestURL) {
        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
        return (parsed.protocol === originURL.protocol &&
            parsed.host === originURL.host);
      };
    })() :

  // Non standard browser envs (web workers, react-native) lack needed support.
    (function nonStandardBrowserEnv() {
      return function isURLSameOrigin() {
        return true;
      };
    })()
);


/***/ }),

/***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
/*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");

module.exports = function normalizeHeaderName(headers, normalizedName) {
  utils.forEach(headers, function processHeader(value, name) {
    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
      headers[normalizedName] = value;
      delete headers[name];
    }
  });
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");

// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
  'age', 'authorization', 'content-length', 'content-type', 'etag',
  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
  'last-modified', 'location', 'max-forwards', 'proxy-authorization',
  'referer', 'retry-after', 'user-agent'
];

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */
module.exports = function parseHeaders(headers) {
  var parsed = {};
  var key;
  var val;
  var i;

  if (!headers) { return parsed; }

  utils.forEach(headers.split('\n'), function parser(line) {
    i = line.indexOf(':');
    key = utils.trim(line.substr(0, i)).toLowerCase();
    val = utils.trim(line.substr(i + 1));

    if (key) {
      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
        return;
      }
      if (key === 'set-cookie') {
        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
      }
    }
  });

  return parsed;
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */
module.exports = function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
};


/***/ }),

/***/ "./node_modules/axios/lib/helpers/validator.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/validator.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var pkg = __webpack_require__(/*! ./../../package.json */ "./node_modules/axios/package.json");

var validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
  validators[type] = function validator(thing) {
    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});

var deprecatedWarnings = {};
var currentVerArr = pkg.version.split('.');

/**
 * Compare package versions
 * @param {string} version
 * @param {string?} thanVersion
 * @returns {boolean}
 */
function isOlderVersion(version, thanVersion) {
  var pkgVersionArr = thanVersion ? thanVersion.split('.') : currentVerArr;
  var destVer = version.split('.');
  for (var i = 0; i < 3; i++) {
    if (pkgVersionArr[i] > destVer[i]) {
      return true;
    } else if (pkgVersionArr[i] < destVer[i]) {
      return false;
    }
  }
  return false;
}

/**
 * Transitional option validator
 * @param {function|boolean?} validator
 * @param {string?} version
 * @param {string} message
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  var isDeprecated = version && isOlderVersion(version);

  function formatMessage(opt, desc) {
    return '[Axios v' + pkg.version + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return function(value, opt, opts) {
    if (validator === false) {
      throw new Error(formatMessage(opt, ' has been removed in ' + version));
    }

    if (isDeprecated && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(
        formatMessage(
          opt,
          ' has been deprecated since v' + version + ' and will be removed in the near future'
        )
      );
    }

    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */

function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== 'object') {
    throw new TypeError('options must be an object');
  }
  var keys = Object.keys(options);
  var i = keys.length;
  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];
    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new TypeError('option ' + opt + ' must be ' + result);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw Error('Unknown option ' + opt);
    }
  }
}

module.exports = {
  isOlderVersion: isOlderVersion,
  assertOptions: assertOptions,
  validators: validators
};


/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");

// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */
function isArray(val) {
  return toString.call(val) === '[object Array]';
}

/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */
function isUndefined(val) {
  return typeof val === 'undefined';
}

/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
function isArrayBuffer(val) {
  return toString.call(val) === '[object ArrayBuffer]';
}

/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */
function isFormData(val) {
  return (typeof FormData !== 'undefined') && (val instanceof FormData);
}

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
    result = ArrayBuffer.isView(val);
  } else {
    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */
function isString(val) {
  return typeof val === 'string';
}

/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */
function isNumber(val) {
  return typeof val === 'number';
}

/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */
function isObject(val) {
  return val !== null && typeof val === 'object';
}

/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */
function isPlainObject(val) {
  if (toString.call(val) !== '[object Object]') {
    return false;
  }

  var prototype = Object.getPrototypeOf(val);
  return prototype === null || prototype === Object.prototype;
}

/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */
function isDate(val) {
  return toString.call(val) === '[object Date]';
}

/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */
function isFile(val) {
  return toString.call(val) === '[object File]';
}

/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */
function isBlob(val) {
  return toString.call(val) === '[object Blob]';
}

/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
function isFunction(val) {
  return toString.call(val) === '[object Function]';
}

/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */
function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
}

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
function isURLSearchParams(val) {
  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
}

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */
function trim(str) {
  return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
}

/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */
function isStandardBrowserEnv() {
  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                           navigator.product === 'NativeScript' ||
                                           navigator.product === 'NS')) {
    return false;
  }
  return (
    typeof window !== 'undefined' &&
    typeof document !== 'undefined'
  );
}

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */
function forEach(obj, fn) {
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }

  // Force an array if not already something iterable
  if (typeof obj !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }

  if (isArray(obj)) {
    // Iterate over array values
    for (var i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    for (var key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        fn.call(null, obj[key], key, obj);
      }
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */
function merge(/* obj1, obj2, obj3, ... */) {
  var result = {};
  function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  }

  for (var i = 0, l = arguments.length; i < l; i++) {
    forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */
function extend(a, b, thisArg) {
  forEach(b, function assignValue(val, key) {
    if (thisArg && typeof val === 'function') {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  });
  return a;
}

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */
function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
}

module.exports = {
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isStandardBrowserEnv: isStandardBrowserEnv,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM
};


/***/ }),

/***/ "./node_modules/itk/Image.js":
/*!***********************************!*\
  !*** ./node_modules/itk/Image.js ***!
  \***********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ImageType = __webpack_require__(/*! ./ImageType.js */ "./node_modules/itk/ImageType.js");

var Matrix = __webpack_require__(/*! ./Matrix.js */ "./node_modules/itk/Matrix.js");

var Image = function Image() {
  var imageType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new ImageType();
  this.imageType = imageType;
  this.name = 'Image';
  var dimension = imageType.dimension;
  this.origin = new Array(dimension);
  this.origin.fill(0.0);
  this.spacing = new Array(dimension);
  this.spacing.fill(1.0);
  this.direction = new Matrix(dimension, dimension);
  this.direction.setIdentity();
  this.size = new Array(dimension);
  this.size.fill(0);
  this.data = null;
};

module.exports = Image;

/***/ }),

/***/ "./node_modules/itk/ImageType.js":
/*!***************************************!*\
  !*** ./node_modules/itk/ImageType.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var IntTypes = __webpack_require__(/*! ./IntTypes.js */ "./node_modules/itk/IntTypes.js");

var PixelTypes = __webpack_require__(/*! ./PixelTypes.js */ "./node_modules/itk/PixelTypes.js");

var ImageType = function ImageType() {
  var dimension = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;
  var componentType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : IntTypes.UInt8;
  var pixelType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : PixelTypes.Scalar;
  var components = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  this.dimension = dimension;
  this.componentType = componentType;
  this.pixelType = pixelType;
  this.components = components;
};

module.exports = ImageType;

/***/ }),

/***/ "./node_modules/itk/IntTypes.js":
/*!**************************************!*\
  !*** ./node_modules/itk/IntTypes.js ***!
  \**************************************/
/***/ ((module) => {

var Int8 = 'int8_t';
var UInt8 = 'uint8_t';
var Int16 = 'int16_t';
var UInt16 = 'uint16_t';
var Int32 = 'int32_t';
var UInt32 = 'uint32_t';
var Int64 = 'int64_t';
var UInt64 = 'uint64_t';
var SizeValueType = UInt64;
var IdentifierType = SizeValueType;
var IndexValueType = Int64;
var OffsetValueType = Int64;
module.exports = {
  Int8: Int8,
  UInt8: UInt8,
  Int16: Int16,
  UInt16: UInt16,
  Int32: Int32,
  UInt32: UInt32,
  Int64: Int64,
  UInt64: UInt64,
  SizeValueType: SizeValueType,
  IdentifierType: IdentifierType,
  IndexValueType: IndexValueType,
  OffsetValueType: OffsetValueType
};

/***/ }),

/***/ "./node_modules/itk/Matrix.js":
/*!************************************!*\
  !*** ./node_modules/itk/Matrix.js ***!
  \************************************/
/***/ ((module) => {

function Matrix(rows, columns) {
  if (rows instanceof Matrix) {
    var other = rows;
    this.rows = other.rows;
    this.columns = other.columns;
    this.data = other.data.slice();
  } else {
    this.rows = rows;
    this.columns = columns;
    this.data = new Array(rows * columns);
    this.data.fill(0.0);
  }
}

Matrix.prototype.setIdentity = function () {
  for (var ii = 0; ii < this.rows; ++ii) {
    for (var jj = 0; jj < this.columns; ++jj) {
      if (ii === jj) {
        this.data[jj + ii * this.columns] = 1.0;
      } else {
        this.data[jj + ii * this.columns] = 0.0;
      }
    }
  }
};

Matrix.prototype.setElement = function (row, column, value) {
  this.data[column + row * this.columns] = value;
};

Matrix.prototype.getElement = function (row, column) {
  return this.data[column + row * this.columns];
};

module.exports = Matrix;

/***/ }),

/***/ "./node_modules/itk/PixelTypes.js":
/*!****************************************!*\
  !*** ./node_modules/itk/PixelTypes.js ***!
  \****************************************/
/***/ ((module) => {

var Unknown = 0;
var Scalar = 1;
var RGB = 2;
var RGBA = 3;
var Offset = 4;
var Vector = 5;
var Point = 6;
var CovariantVector = 7;
var SymmetricSecondRankTensor = 8;
var DiffusionTensor3D = 9;
var Complex = 10;
var FixedArray = 11;
var Array = 12;
var Matrix = 13;
var VariableLengthVector = 14;
var VariableSizeMatrix = 15;
module.exports = {
  Unknown: Unknown,
  Scalar: Scalar,
  RGB: RGB,
  RGBA: RGBA,
  Offset: Offset,
  Vector: Vector,
  Point: Point,
  CovariantVector: CovariantVector,
  SymmetricSecondRankTensor: SymmetricSecondRankTensor,
  DiffusionTensor3D: DiffusionTensor3D,
  Complex: Complex,
  FixedArray: FixedArray,
  Array: Array,
  Matrix: Matrix,
  VariableLengthVector: VariableLengthVector,
  VariableSizeMatrix: VariableSizeMatrix
};

/***/ }),

/***/ "./node_modules/itk/WorkerPool.js":
/*!****************************************!*\
  !*** ./node_modules/itk/WorkerPool.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/objectWithoutProperties */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js");
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/toConsumableArray */ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js");
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/@babel/runtime/helpers/esm/createClass.js");





var WorkerPool = /*#__PURE__*/function () {
  /* poolSize is the maximum number of web workers to create in the pool.
   *
   * The function, fcn, should accept null or an existing worker as its first argument.
   * It most also return and object with the used worker on the `webWorker`
   * property.  * Example: runPipelineBrowser.
   *
   **/
  function WorkerPool(poolSize, fcn) {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__["default"])(this, WorkerPool);

    this.fcn = fcn;
    this.workerQueue = new Array(poolSize);
    this.workerQueue.fill(null);
    this.runInfo = [];
  }
  /*
   * Run the tasks specified by the arguments in the taskArgsArray that will
   * be passed to the pool fcn.
   *
   * An optional progressCallback will be called with the number of complete
   * tasks and the total number of tasks as arguments every time a task has
   * completed.
   *
   * Returns an object containing a promise ('promise') to communicate results
   * as well as an id ('runId') which can be used to cancel any remaining pending
   * tasks before they complete.
   */


  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__["default"])(WorkerPool, [{
    key: "runTasks",
    value: function runTasks(taskArgsArray, progressCallback) {
      var _this = this;

      var info = {
        taskQueue: [],
        results: [],
        addingTasks: false,
        postponed: false,
        runningWorkers: 0,
        progressCallback: progressCallback,
        canceled: false
      };
      this.runInfo.push(info);
      info.index = this.runInfo.length - 1;
      return {
        promise: new Promise(function (resolve, reject) {
          info.resolve = resolve;
          info.reject = reject;
          info.results = new Array(taskArgsArray.length);
          info.completedTasks = 0;
          info.addingTasks = true;
          taskArgsArray.forEach(function (taskArg, index) {
            _this.addTask(info.index, index, taskArg);
          });
          info.addingTasks = false;
        }),
        runId: info.index
      };
    }
  }, {
    key: "terminateWorkers",
    value: function terminateWorkers() {
      for (var index = 0; index < this.workerQueue.length; index++) {
        var worker = this.workerQueue[index];

        if (worker) {
          worker.terminate();
        }

        this.workerQueue[index] = null;
      }
    }
  }, {
    key: "cancel",
    value: function cancel(runId) {
      var info = this.runInfo[runId];

      if (info) {
        info.canceled = true;
      }
    } // todo: change to #addTask(resultIndex, taskArgs) { after private methods
    // proposal accepted and supported by default in Babel.

  }, {
    key: "addTask",
    value: function addTask(infoIndex, resultIndex, taskArgs) {
      var _this2 = this;

      var info = this.runInfo[infoIndex];

      if (info && info.canceled) {
        this.clearTask(info.index);
        info.reject('Remaining tasks canceled');
        return;
      }

      if (this.workerQueue.length > 0) {
        var worker = this.workerQueue.pop();
        info.runningWorkers++;
        this.fcn.apply(this, [worker].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__["default"])(taskArgs))).then(function (_ref) {
          var webWorker = _ref.webWorker,
              result = (0,_babel_runtime_helpers_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__["default"])(_ref, ["webWorker"]);

          _this2.workerQueue.push(webWorker); // Check if this task was canceled while it was getting done


          if (_this2.runInfo[infoIndex] !== null) {
            info.runningWorkers--;
            info.results[resultIndex] = result;
            info.completedTasks++;

            if (info.progressCallback) {
              info.progressCallback(info.completedTasks, info.results.length);
            }

            if (info.taskQueue.length > 0) {
              var reTask = info.taskQueue.shift();

              _this2.addTask.apply(_this2, [infoIndex].concat((0,_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__["default"])(reTask)));
            } else if (!info.addingTasks && !info.runningWorkers) {
              var results = info.results;

              _this2.clearTask(info.index);

              info.resolve(results);
            }
          }
        })["catch"](function (error) {
          var reject = info.reject;

          _this2.clearTask(info.index);

          reject(error);
        });
      } else {
        if (info.runningWorkers || info.postponed === true) {
          // At least one worker is working on these tasks, and it will pick up
          // the next item in the taskQueue when done.
          info.taskQueue.push([resultIndex, taskArgs]);
        } else {
          // Try again later.
          info.postponed = true;
          setTimeout(function () {
            info.postponed = false;

            _this2.addTask(info.index, resultIndex, taskArgs);
          }, 50);
        }
      }
    } // todo: change to #clearTask(clearIndex) { after private methods
    // proposal accepted and supported by default in Babel.

  }, {
    key: "clearTask",
    value: function clearTask(clearIndex) {
      this.runInfo[clearIndex].results = null;
      this.runInfo[clearIndex].taskQueue = null;
      this.runInfo[clearIndex].progressCallback = null;
      this.runInfo[clearIndex].canceled = null;
      this.runInfo[clearIndex] = null;
    }
  }]);

  return WorkerPool;
}();

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WorkerPool);

/***/ }),

/***/ "./node_modules/itk/createWebworkerPromise.js":
/*!****************************************************!*\
  !*** ./node_modules/itk/createWebworkerPromise.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var webworker_promise__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! webworker-promise */ "./node_modules/webworker-promise/src/index.js");
/* harmony import */ var webworker_promise__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(webworker_promise__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _itkConfig__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./itkConfig */ "./node_modules/itk/itkConfig.js");


 // Internal function to create a web worker promise

var createWebworkerPromise = function createWebworkerPromise(name, existingWorker) {
  if (existingWorker) {
    var _webworkerPromise = new (webworker_promise__WEBPACK_IMPORTED_MODULE_0___default())(existingWorker);

    return Promise.resolve({
      webworkerPromise: _webworkerPromise,
      worker: existingWorker
    });
  }

  var webWorkerUrl = "".concat(_itkConfig__WEBPACK_IMPORTED_MODULE_2__["default"].itkModulesPath, "/WebWorkers/").concat(name, ".worker.js");

  if (webWorkerUrl.startsWith('http')) {
    return axios__WEBPACK_IMPORTED_MODULE_1___default().get(webWorkerUrl, {
      responseType: 'blob'
    }).then(function (response) {
      var worker = new window.Worker(URL.createObjectURL(response.data) // eslint-disable-line
      );
      var webworkerPromise = new (webworker_promise__WEBPACK_IMPORTED_MODULE_0___default())(worker);
      return {
        webworkerPromise: webworkerPromise,
        worker: worker
      };
    });
  }

  var worker = new window.Worker(webWorkerUrl);
  var webworkerPromise = new (webworker_promise__WEBPACK_IMPORTED_MODULE_0___default())(worker);
  return Promise.resolve({
    webworkerPromise: webworkerPromise,
    worker: worker
  });
};

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createWebworkerPromise);

/***/ }),

/***/ "./node_modules/itk/itkConfig.js":
/*!***************************************!*\
  !*** ./node_modules/itk/itkConfig.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
//
// itkModulesPath is the path that contains the directories
//
// - WebWorkers/
// - ImageIOs/
// - MeshIOs/
// - PolyDataIOs/
//
var itkConfig = {
  itkModulesPath: 'itk'
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (itkConfig);

/***/ }),

/***/ "./node_modules/itk/readImageDICOMFileSeries.js":
/*!******************************************************!*\
  !*** ./node_modules/itk/readImageDICOMFileSeries.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");
/* harmony import */ var regenerator_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! regenerator-runtime */ "./node_modules/regenerator-runtime/runtime.js");
/* harmony import */ var regenerator_runtime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(regenerator_runtime__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _createWebworkerPromise__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./createWebworkerPromise */ "./node_modules/itk/createWebworkerPromise.js");
/* harmony import */ var promise_file_reader__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! promise-file-reader */ "./node_modules/promise-file-reader/PromiseFileReader.js");
/* harmony import */ var promise_file_reader__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(promise_file_reader__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _WorkerPool__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./WorkerPool */ "./node_modules/itk/WorkerPool.js");
/* harmony import */ var _stackImages__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./stackImages */ "./node_modules/itk/stackImages.js");
/* harmony import */ var _itkConfig__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./itkConfig */ "./node_modules/itk/itkConfig.js");


/* eslint-disable-next-line no-unused-vars */







var workerFunction = /*#__PURE__*/function () {
  var _ref = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/regenerator_runtime__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee(webWorker, fileDescriptions) {
    var singleSortedSeries,
        worker,
        _yield$createWebworke,
        webworkerPromise,
        usedWorker,
        transferables,
        message,
        image,
        _args = arguments;

    return regenerator_runtime__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            singleSortedSeries = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;
            worker = webWorker;
            _context.next = 4;
            return (0,_createWebworkerPromise__WEBPACK_IMPORTED_MODULE_2__["default"])('ImageIO', worker);

          case 4:
            _yield$createWebworke = _context.sent;
            webworkerPromise = _yield$createWebworke.webworkerPromise;
            usedWorker = _yield$createWebworke.worker;
            worker = usedWorker;
            transferables = fileDescriptions.map(function (description) {
              return description.data;
            });
            message = {
              operation: 'readDICOMImageSeries',
              fileDescriptions: fileDescriptions,
              singleSortedSeries: singleSortedSeries,
              config: _itkConfig__WEBPACK_IMPORTED_MODULE_6__["default"]
            };
            _context.next = 12;
            return webworkerPromise.postMessage(message, transferables);

          case 12:
            image = _context.sent;
            return _context.abrupt("return", {
              image: image,
              webWorker: worker
            });

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function workerFunction(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var numberOfWorkers = navigator.hardwareConcurrency ? navigator.hardwareConcurrency : 4;
var workerPool = new _WorkerPool__WEBPACK_IMPORTED_MODULE_4__["default"](numberOfWorkers, workerFunction);
var seriesBlockSize = 8;

var readImageDICOMFileSeries = /*#__PURE__*/function () {
  var _ref2 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__["default"])( /*#__PURE__*/regenerator_runtime__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee2(fileList) {
    var singleSortedSeries,
        fetchFileDescriptions,
        fileDescriptions,
        taskArgsArray,
        index,
        block,
        results,
        images,
        stacked,
        _taskArgsArray,
        _results,
        _args2 = arguments;

    return regenerator_runtime__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            singleSortedSeries = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : false;
            fetchFileDescriptions = Array.from(fileList, function (file) {
              return promise_file_reader__WEBPACK_IMPORTED_MODULE_3___default().readAsArrayBuffer(file).then(function (arrayBuffer) {
                var fileDescription = {
                  name: file.name,
                  type: file.type,
                  data: arrayBuffer
                };
                return fileDescription;
              });
            });
            _context2.next = 4;
            return Promise.all(fetchFileDescriptions);

          case 4:
            fileDescriptions = _context2.sent;

            if (!singleSortedSeries) {
              _context2.next = 16;
              break;
            }

            taskArgsArray = [];

            for (index = 0; index < fileDescriptions.length; index += seriesBlockSize) {
              block = fileDescriptions.slice(index, index + seriesBlockSize);
              taskArgsArray.push([block, singleSortedSeries]);
            }

            _context2.next = 10;
            return workerPool.runTasks(taskArgsArray).promise;

          case 10:
            results = _context2.sent;
            images = results.map(function (result) {
              return result.image;
            });
            stacked = (0,_stackImages__WEBPACK_IMPORTED_MODULE_5__["default"])(images);
            return _context2.abrupt("return", {
              image: stacked,
              webWorkerPool: workerPool
            });

          case 16:
            _taskArgsArray = [[fileDescriptions, singleSortedSeries]];
            _context2.next = 19;
            return workerPool.runTasks(_taskArgsArray).promise;

          case 19:
            _results = _context2.sent;
            return _context2.abrupt("return", {
              image: _results[0].image,
              webWorkerPool: workerPool
            });

          case 21:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function readImageDICOMFileSeries(_x3) {
    return _ref2.apply(this, arguments);
  };
}();

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (readImageDICOMFileSeries);

/***/ }),

/***/ "./node_modules/itk/stackImages.js":
/*!*****************************************!*\
  !*** ./node_modules/itk/stackImages.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var Image = __webpack_require__(/*! ./Image.js */ "./node_modules/itk/Image.js");

var Matrix = __webpack_require__(/*! ./Matrix.js */ "./node_modules/itk/Matrix.js");
/** Join an array of sequential image slabs into a single image */


function stackImages(images) {
  var result = new Image(images[0].imageType);
  result.origin = Array.from(images[0].origin);
  result.spacing = Array.from(images[0].spacing);
  var dimension = result.imageType.dimension;
  result.direction = new Matrix(dimension, dimension);
  result.direction.data = Array.from(images[0].direction.data);
  var stackOn = dimension - 1;
  result.size = Array.from(images[0].size);
  var stackedSize = images.reduce(function (accumulator, currentValue) {
    return accumulator + currentValue.size[stackOn];
  }, 0);
  result.size[stackOn] = stackedSize;
  var dataSize = result.size.reduce(function (accumulator, currentValue) {
    return accumulator * currentValue;
  }, 1) * result.imageType.components;
  result.data = new images[0].data.constructor(dataSize);
  var offsetBase = result.imageType.components;

  for (var subIndex = 0; subIndex < result.size.length - 1; subIndex++) {
    offsetBase *= result.size[subIndex];
  }

  var stackIndex = 0;

  for (var index = 0; index < images.length; index++) {
    result.data.set(images[index].data, offsetBase * stackIndex);
    stackIndex += images[index].size[stackOn];
  }

  return result;
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (stackImages);

/***/ }),

/***/ "./node_modules/promise-file-reader/PromiseFileReader.js":
/*!***************************************************************!*\
  !*** ./node_modules/promise-file-reader/PromiseFileReader.js ***!
  \***************************************************************/
/***/ ((module) => {

function readAs (file, as) {
  if (!(file instanceof Blob)) {
    throw new TypeError('Must be a File or Blob')
  }
  return new Promise(function(resolve, reject) {
    var reader = new FileReader()
    reader.onload = function(e) { resolve(e.target.result) }
    reader.onerror = function(e) { reject(new Error('Error reading' + file.name + ': ' + e.target.result)) }
    reader['readAs' + as](file)
  })
}

function readAsDataURL (file) {
  return readAs(file, 'DataURL')
}

function readAsText (file) {
  return readAs(file, 'Text')
}

function readAsArrayBuffer (file) {
  return readAs(file, 'ArrayBuffer')
}

module.exports = {
  readAsDataURL: readAsDataURL,
  readAsText: readAsText,
  readAsArrayBuffer: readAsArrayBuffer,
}


/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/***/ ((module) => {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  define(Gp, "constructor", GeneratorFunctionPrototype);
  define(GeneratorFunctionPrototype, "constructor", GeneratorFunction);
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : 0
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}


/***/ }),

/***/ "./node_modules/webworker-promise/src/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/webworker-promise/src/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

const TinyEmitter = __webpack_require__(/*! ./tiny-emitter */ "./node_modules/webworker-promise/src/tiny-emitter.js");

const MESSAGE_RESULT = 0;
const MESSAGE_EVENT = 1;

const RESULT_ERROR = 0;
const RESULT_SUCCESS = 1;

class Worker extends TinyEmitter {
  /**
   *
   * @param worker {Worker}
   */
  constructor(worker) {
    super();

    this._messageId = 1;
    this._messages = new Map();

    this._worker = worker;
    this._worker.onmessage = this._onMessage.bind(this);
    this._id = Math.ceil(Math.random() * 10000000);
  }

  terminate() {
    this._worker.terminate();
  }

  /**
   * return true if there is no unresolved jobs
   * @returns {boolean}
   */
  isFree() {
    return this._messages.size === 0;
  }

  jobsLength() {
    return this._messages.size;
  }

  /**
   * @param operationName string
   * @param data any
   * @param transferable array
   * @param onEvent function
   * @returns {Promise}
   */
  exec(operationName, data = null, transferable = [], onEvent) {
    return new Promise((res, rej) => {
      const messageId = this._messageId++;
      this._messages.set(messageId, [res, rej, onEvent]);
      this._worker.postMessage([messageId, data, operationName], transferable || []);
    });
  }

  /**
   *
   * @param data any
   * @param transferable array
   * @param onEvent function
   * @returns {Promise}
   */
  postMessage(data = null, transferable = [], onEvent) {
    return new Promise((res, rej) => {
      const messageId = this._messageId++;
      this._messages.set(messageId, [res, rej, onEvent]);
      this._worker.postMessage([messageId, data], transferable || []);
    });
  }

  emit(eventName, ...args) {
    this._worker.postMessage({eventName, args});
  }

  _onMessage(e) {
    //if we got usual event, just emit it locally
    if(!Array.isArray(e.data) && e.data.eventName) {
      return super.emit(e.data.eventName, ...e.data.args);
    }

    const [type, ...args] = e.data;

    if(type === MESSAGE_EVENT)
      this._onEvent(...args);
    else if(type === MESSAGE_RESULT)
      this._onResult(...args);
    else
      throw new Error(`Wrong message type '${type}'`);
  }

  _onResult(messageId, success, payload) {
    const [res, rej] = this._messages.get(messageId);
    this._messages.delete(messageId);

    return success === RESULT_SUCCESS ? res(payload) : rej(payload);
  }

  _onEvent(messageId, eventName, data) {
    const [,,onEvent] = this._messages.get(messageId);

    if(onEvent) {
      onEvent(eventName, data);
    }
  }

}

module.exports = Worker;


/***/ }),

/***/ "./node_modules/webworker-promise/src/tiny-emitter.js":
/*!************************************************************!*\
  !*** ./node_modules/webworker-promise/src/tiny-emitter.js ***!
  \************************************************************/
/***/ ((module) => {

class TinyEmitter {
  constructor() {
    Object.defineProperty(this, '__listeners', {
      value: {},
      enumerable: false,
      writable: false
    });
  }

  emit(eventName, ...args) {
    if(!this.__listeners[eventName])
      return this;

    for(const handler of this.__listeners[eventName]) {
      handler(...args);
    }

    return this;
  }

  once(eventName, handler) {
    const once = (...args) => {
      this.off(eventName, once);
      handler(...args);
    };

    return this.on(eventName, once);
  }

  on(eventName, handler) {
    if(!this.__listeners[eventName])
      this.__listeners[eventName] = [];

    this.__listeners[eventName].push(handler);

    return this;
  }

  off(eventName, handler) {
    if(handler)
      this.__listeners[eventName] = this.__listeners[eventName].filter(h => h !== handler);
    else
      this.__listeners[eventName] = [];

    return this;
  }
}

module.exports = TinyEmitter;


/***/ }),

/***/ "./src/viewer.js":
/*!***********************!*\
  !*** ./src/viewer.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _kitware_vtk_js_Rendering_Profiles_Volume__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @kitware/vtk.js/Rendering/Profiles/Volume */ "./node_modules/@kitware/vtk.js/Rendering/Profiles/Volume.js");
/* harmony import */ var _kitware_vtk_js_Rendering_Profiles_Geometry__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @kitware/vtk.js/Rendering/Profiles/Geometry */ "./node_modules/@kitware/vtk.js/Rendering/Profiles/Geometry.js");
/* harmony import */ var _kitware_vtk_js_Rendering_Misc_GenericRenderWindow__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @kitware/vtk.js/Rendering/Misc/GenericRenderWindow */ "./node_modules/@kitware/vtk.js/Rendering/Misc/GenericRenderWindow.js");
/* harmony import */ var _kitware_vtk_js_Interaction_Style_InteractorStyleManipulator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @kitware/vtk.js/Interaction/Style/InteractorStyleManipulator */ "./node_modules/@kitware/vtk.js/Interaction/Style/InteractorStyleManipulator.js");
/* harmony import */ var _kitware_vtk_js_Interaction_Manipulators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @kitware/vtk.js/Interaction/Manipulators */ "./node_modules/@kitware/vtk.js/Interaction/Manipulators.js");
/* harmony import */ var _kitware_vtk_js_Common_DataModel_ITKHelper__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @kitware/vtk.js/Common/DataModel/ITKHelper */ "./node_modules/@kitware/vtk.js/Common/DataModel/ITKHelper.js");
/* harmony import */ var _kitware_vtk_js_Rendering_Core_ImageMapper__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @kitware/vtk.js/Rendering/Core/ImageMapper */ "./node_modules/@kitware/vtk.js/Rendering/Core/ImageMapper.js");
/* harmony import */ var _kitware_vtk_js_Rendering_Core_ImageSlice__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @kitware/vtk.js/Rendering/Core/ImageSlice */ "./node_modules/@kitware/vtk.js/Rendering/Core/ImageSlice.js");
/* harmony import */ var _kitware_vtk_js_Rendering_Core_AnnotatedCubeActor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @kitware/vtk.js/Rendering/Core/AnnotatedCubeActor */ "./node_modules/@kitware/vtk.js/Rendering/Core/AnnotatedCubeActor.js");
/* harmony import */ var _kitware_vtk_js_Rendering_Core_AnnotatedCubeActor_Presets__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @kitware/vtk.js/Rendering/Core/AnnotatedCubeActor/Presets */ "./node_modules/@kitware/vtk.js/Rendering/Core/AnnotatedCubeActor/Presets.js");
/* harmony import */ var _kitware_vtk_js_Interaction_Widgets_OrientationMarkerWidget__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget */ "./node_modules/@kitware/vtk.js/Interaction/Widgets/OrientationMarkerWidget.js");
/* harmony import */ var _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @kitware/vtk.js/Common/Core/Math */ "./node_modules/@kitware/vtk.js/Common/Core/Math.js");
/* harmony import */ var _kitware_vtk_js_Filters_Sources_CubeSource__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @kitware/vtk.js/Filters/Sources/CubeSource */ "./node_modules/@kitware/vtk.js/Filters/Sources/CubeSource.js");
/* harmony import */ var _kitware_vtk_js_Rendering_Core_Mapper__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @kitware/vtk.js/Rendering/Core/Mapper */ "./node_modules/@kitware/vtk.js/Rendering/Core/Mapper.js");
/* harmony import */ var _kitware_vtk_js_Rendering_Core_Actor__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @kitware/vtk.js/Rendering/Core/Actor */ "./node_modules/@kitware/vtk.js/Rendering/Core/Actor.js");

















function screenAnatomyLabelAlong(vec) {
  const threshold = Math.sqrt(0.5);
  if (_kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_11__["default"].dot(vec, [1, 0, 0]) > threshold) return 'L'
  if (_kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_11__["default"].dot(vec, [-1, 0, 0]) > threshold) return 'R'
  if (_kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_11__["default"].dot(vec, [0, 1, 0]) > threshold) return 'P'
  if (_kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_11__["default"].dot(vec, [0, -1, 0]) > threshold) return 'A'
  if (_kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_11__["default"].dot(vec, [0, 0, 1]) > threshold) return 'S'
  if (_kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_11__["default"].dot(vec, [0, 0, -1]) > threshold) return 'I'
  throw 'Invalid vector';
}

function screenAnatomyLabelsForCamera(camera) {
  let up = camera.getViewUp();
  let down = up.map(val => -val);
  let normal = camera.getDirectionOfProjection();
  let right = [0, 0, 0];
  _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_11__["default"].cross(normal, up, right);
  let left = right.map(val => -val);
  return {
    top: screenAnatomyLabelAlong(up),
    bottom: screenAnatomyLabelAlong(down),
    right: screenAnatomyLabelAlong(right),
    left: screenAnatomyLabelAlong(left),
  }
}

class Viewer {
  constructor(container, anatomyLabels) {
    this.anatomyLabels = anatomyLabels;

    const genericRenderWindow = _kitware_vtk_js_Rendering_Misc_GenericRenderWindow__WEBPACK_IMPORTED_MODULE_2__["default"].newInstance();
    genericRenderWindow.setContainer(container);
    genericRenderWindow.resize();

    this.vtk = {};

    this.vtk.renderer = genericRenderWindow.getRenderer();
    this.vtk.renderer.setBackground([0.2, 0.2, 0.2]);
    this.vtk.renderer.getActiveCamera().setParallelProjection(true);

    this.vtk.renderWindow = genericRenderWindow.getRenderWindow();
    this.vtk.renderWindow.render();

    this.vtk.mapper = _kitware_vtk_js_Rendering_Core_ImageMapper__WEBPACK_IMPORTED_MODULE_6__["default"].newInstance();

    this.vtk.actor = _kitware_vtk_js_Rendering_Core_ImageSlice__WEBPACK_IMPORTED_MODULE_7__["default"].newInstance();
    this.vtk.actor.setMapper(this.vtk.mapper);

    this.vtk.iStyle = _kitware_vtk_js_Interaction_Style_InteractorStyleManipulator__WEBPACK_IMPORTED_MODULE_3__["default"].newInstance();
    const interactor = this.vtk.renderWindow.getInteractor()
    interactor.setInteractorStyle(this.vtk.iStyle);

    const lpsCube = _kitware_vtk_js_Rendering_Core_AnnotatedCubeActor__WEBPACK_IMPORTED_MODULE_8__["default"].newInstance();
    _kitware_vtk_js_Rendering_Core_AnnotatedCubeActor_Presets__WEBPACK_IMPORTED_MODULE_9__["default"].applyPreset('lps', lpsCube);
    this.vtk.lpsMarker = _kitware_vtk_js_Interaction_Widgets_OrientationMarkerWidget__WEBPACK_IMPORTED_MODULE_10__["default"].newInstance({
      actor: lpsCube,
      interactor: interactor,
    });
    this.vtk.lpsMarker.setEnabled(true);
    this.vtk.lpsMarker.setViewportCorner(
      _kitware_vtk_js_Interaction_Widgets_OrientationMarkerWidget__WEBPACK_IMPORTED_MODULE_10__["default"].Corners.TOP_RIGHT
    );
    this.vtk.lpsMarker.setViewportSize(0.15);

    this.vtk.renderWindow.render();
  }



  setSlicingMode(slicingMode) {
    // Slicing direction
    this.vtk.mapper.setSlicingMode(slicingMode);

    // Setup camera
    const threshold = Math.sqrt(0.5);
    function roundToUnitVector(inVec, outVec) {
      for (let axis = 0; axis < inVec.length; ++axis) {
        const val = inVec[axis];
        outVec[axis] = (val < -threshold) ? -1 : (val > threshold) ? 1 : 0;
      }
    }
    const d9 = this.vtk.data.getDirection();
    const d3x3 = [
      [d9[0], d9[3], d9[6]],
      [d9[1], d9[4], d9[7]],
      [d9[2], d9[5], d9[8]],
    ];
    const d3x3_inv = [ // rotation: inverse = transpose
      [d9[0], d9[1], d9[2]],
      [d9[3], d9[4], d9[5]],
      [d9[6], d9[7], d9[8]],
    ];
    let normal = [0, 0, 0];
    let viewUp = [0, 0, 0];
    // VTK is in LPS, therefore +X = L; -X = R; +Y = P; -Y = A; +Z = S; -Z = I
    switch (slicingMode) {
      case _kitware_vtk_js_Rendering_Core_ImageMapper__WEBPACK_IMPORTED_MODULE_6__["default"].SlicingMode.I:
        normal = [-1, 0, 0]; // -I
        viewUp = [0, 0, +1]; // +K
        break;
      case _kitware_vtk_js_Rendering_Core_ImageMapper__WEBPACK_IMPORTED_MODULE_6__["default"].SlicingMode.J:
        normal = [0, -1, 0]; // -J
        viewUp = [+1, 0, 0]; // +I
        break;
      case _kitware_vtk_js_Rendering_Core_ImageMapper__WEBPACK_IMPORTED_MODULE_6__["default"].SlicingMode.K:
        normal = [0, 0, -1]; // -K
        viewUp = [0, +1, 0]; // +J
        break;
      case _kitware_vtk_js_Rendering_Core_ImageMapper__WEBPACK_IMPORTED_MODULE_6__["default"].SlicingMode.X:
        // X = RL axis = sagittal
        /* In a perfect sagittal scenario, we'd use the values below directly.
         * Since XYZ slicing does not do reformat, we find the closest IJK
         * axes instead to stay aligned with the slice representation
         */
        normal = [-1, 0, 0]; // -X (Right)
        viewUp = [0, 0, +1]; // +Z (Superior)
        _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_11__["default"].multiply3x3_vect3(d3x3_inv, normal, normal);
        _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_11__["default"].multiply3x3_vect3(d3x3_inv, viewUp, viewUp);
        roundToUnitVector(normal, normal)
        roundToUnitVector(viewUp, viewUp)
        break;
      case _kitware_vtk_js_Rendering_Core_ImageMapper__WEBPACK_IMPORTED_MODULE_6__["default"].SlicingMode.Y:
        // Y = AP axis = coronal
        /* In a perfect coronal scenario, we'd use the values below directly.
         * Since XYZ slicing does not do reformat, we find the closest IJK
         * axes instead to stay aligned with the slice representation
         */
        normal = [0, +1, 0]; // +Y (Posterior)
        viewUp = [0, 0, +1]; // +Z (Superior)
        _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_11__["default"].multiply3x3_vect3(d3x3_inv, normal, normal);
        _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_11__["default"].multiply3x3_vect3(d3x3_inv, viewUp, viewUp);
        roundToUnitVector(normal, normal)
        roundToUnitVector(viewUp, viewUp)
        break;
      case _kitware_vtk_js_Rendering_Core_ImageMapper__WEBPACK_IMPORTED_MODULE_6__["default"].SlicingMode.Z:
        // Z = IS axis = axial
        /* In a perfect axial scenario, we'd use the values below directly.
         * Since XYZ slicing does not do reformat, we find the closest IJK
         * axes instead to stay aligned with the slice representation
         */
        normal = [0, 0, +1]; // +Z (Superior)
        viewUp = [0, -1, 0]; // -Y (Anterior)
        _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_11__["default"].multiply3x3_vect3(d3x3_inv, normal, normal);
        _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_11__["default"].multiply3x3_vect3(d3x3_inv, viewUp, viewUp);
        roundToUnitVector(normal, normal)
        roundToUnitVector(viewUp, viewUp)
        break;
    }
    _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_11__["default"].multiply3x3_vect3(d3x3, normal, normal);
    _kitware_vtk_js_Common_Core_Math__WEBPACK_IMPORTED_MODULE_11__["default"].multiply3x3_vect3(d3x3, viewUp, viewUp);
    const camera = this.vtk.renderer.getActiveCamera();
    let focalPoint = this.vtk.data.getCenter();
    let position = focalPoint.map((e, i) => e - normal[i]); // offset along the slicing axis
    camera.setPosition(...position);
    camera.setFocalPoint(...focalPoint);
    camera.setViewUp(viewUp);
    this.vtk.renderer.resetCamera(); // adjust position along normal + zoom (parallel scale)

    // Setup anatomy labels
    // Note: also update when you plan to rotate the camera
    const labels = screenAnatomyLabelsForCamera(camera);
    this.anatomyLabels.topLabel.innerHTML = labels.top;
    this.anatomyLabels.bottomLabel.innerHTML = labels.bottom;
    this.anatomyLabels.leftLabel.innerHTML = labels.left;
    this.anatomyLabels.rightLabel.innerHTML = labels.right;

    // Initial slice
    let minSlice;
    let maxSlice;
    let sliceStep;
    let axisIndex;
    const extent = this.vtk.data.getExtent();
    const bounds = this.vtk.data.getBounds();
    const spacing = this.vtk.data.getSpacing();
    const sliceModeLabel = 'IJKXYZ'[slicingMode];
    switch (slicingMode) {
      case _kitware_vtk_js_Rendering_Core_ImageMapper__WEBPACK_IMPORTED_MODULE_6__["default"].SlicingMode.I:
      case _kitware_vtk_js_Rendering_Core_ImageMapper__WEBPACK_IMPORTED_MODULE_6__["default"].SlicingMode.J:
      case _kitware_vtk_js_Rendering_Core_ImageMapper__WEBPACK_IMPORTED_MODULE_6__["default"].SlicingMode.K:
        axisIndex = 'IJK'.indexOf(sliceModeLabel);
        minSlice = extent[axisIndex * 2];
        maxSlice = extent[axisIndex * 2 + 1];
        sliceStep = 1;
        break;
      case _kitware_vtk_js_Rendering_Core_ImageMapper__WEBPACK_IMPORTED_MODULE_6__["default"].SlicingMode.X:
      case _kitware_vtk_js_Rendering_Core_ImageMapper__WEBPACK_IMPORTED_MODULE_6__["default"].SlicingMode.Y:
      case _kitware_vtk_js_Rendering_Core_ImageMapper__WEBPACK_IMPORTED_MODULE_6__["default"].SlicingMode.Z:
        {
          axisIndex = 'XYZ'.indexOf(sliceModeLabel);
          minSlice = bounds[axisIndex * 2];
          maxSlice = bounds[axisIndex * 2 + 1];
          const { ijkMode } = this.vtk.mapper.getClosestIJKAxis();
          sliceStep = spacing[ijkMode];
        }
        break;
    }
    let midSlice = (minSlice + maxSlice) / 2;
    midSlice = Math.round(midSlice / sliceStep) * sliceStep;
    this.vtk.mapper.setSlice(midSlice);

    // Slicing bounds for manipulator
    this.vtk.mouseSlicing.setScrollListener(
      minSlice, maxSlice, sliceStep,
      () => this.slice,
      (val) => { this.slice = val; },
    );

    // Render
    this.vtk.lpsMarker.updateMarkerOrientation();
    this.vtk.ijkMarker.updateMarkerOrientation();
    this.vtk.renderWindow.render();
  }

  load(itkImageData, slicingMode = _kitware_vtk_js_Rendering_Core_ImageMapper__WEBPACK_IMPORTED_MODULE_6__["default"].SlicingMode.J) {
    // Convert image data
    this.vtk.data = _kitware_vtk_js_Common_DataModel_ITKHelper__WEBPACK_IMPORTED_MODULE_5__["default"].convertItkToVtkImage(itkImageData);

    // Slice representation
    this.vtk.mapper.setInputData(this.vtk.data);

    // Slice rendering
    this.vtk.renderer.addActor(this.vtk.actor);

    // Initial windowing
    const range = this.vtk.data.getPointData().getScalars().getRange();
    const maxWidth = range[1] - range[0];
    this.vtk.actor.getProperty().setColorWindow(maxWidth);
    const center = Math.round((range[0] + range[1]) / 2);
    this.vtk.actor.getProperty().setColorLevel(center);

    // Add manipulators
    const mousePanning = _kitware_vtk_js_Interaction_Manipulators__WEBPACK_IMPORTED_MODULE_4__["default"].vtkMouseCameraTrackballPanManipulator.newInstance({
      button: 1,
    });
    this.vtk.iStyle.addMouseManipulator(mousePanning);

    const mouseRotating = _kitware_vtk_js_Interaction_Manipulators__WEBPACK_IMPORTED_MODULE_4__["default"].vtkMouseCameraTrackballRotateManipulator.newInstance({
      button: 2,
    });
    this.vtk.iStyle.addMouseManipulator(mouseRotating);

    const mouseZooming = _kitware_vtk_js_Interaction_Manipulators__WEBPACK_IMPORTED_MODULE_4__["default"].vtkMouseCameraTrackballZoomManipulator.newInstance({
      button: 3,
    });
    this.vtk.iStyle.addMouseManipulator(mouseZooming);

    const mouseWindowing = _kitware_vtk_js_Interaction_Manipulators__WEBPACK_IMPORTED_MODULE_4__["default"].vtkMouseRangeManipulator.newInstance({
      button: 1,
      control: true,
    });
    mouseWindowing.setHorizontalListener(
      1, maxWidth, 1,
      () => maxWidth + 1 - this.windowWidth,
      (val) => { this.windowWidth = maxWidth + 1 - val; },
    );
    mouseWindowing.setVerticalListener(
      range[0], range[1], 1,
      () => range[1] + range[0] - this.windowLevel,
      (val) => { this.windowLevel = range[1] + range[0] - val; },
    );
    this.vtk.iStyle.addMouseManipulator(mouseWindowing);

    this.vtk.mouseSlicing = _kitware_vtk_js_Interaction_Manipulators__WEBPACK_IMPORTED_MODULE_4__["default"].vtkMouseRangeManipulator.newInstance({
      scrollEnabled: true,
    });
    this.vtk.iStyle.addMouseManipulator(this.vtk.mouseSlicing);

    // Add bounding box
    const bb = _kitware_vtk_js_Filters_Sources_CubeSource__WEBPACK_IMPORTED_MODULE_12__["default"].newInstance();
    bb.setBounds(this.vtk.data.getExtent());
    const bbMapper = _kitware_vtk_js_Rendering_Core_Mapper__WEBPACK_IMPORTED_MODULE_13__["default"].newInstance();
    bbMapper.setInputData(bb.getOutputData());
    const bbActor = _kitware_vtk_js_Rendering_Core_Actor__WEBPACK_IMPORTED_MODULE_14__["default"].newInstance();
    bbActor.setMapper(bbMapper);
    bbActor.setUserMatrix(this.vtk.data.getIndexToWorld())
    bbActor.getProperty().setRepresentationToWireframe();
    bbActor.getProperty().setInterpolationToFlat();
    bbActor.getProperty().setColor(1, 0, 0);
    this.vtk.renderer.addActor(bbActor);

    // Add IJK cube axes
    const ijkCube = _kitware_vtk_js_Rendering_Core_AnnotatedCubeActor__WEBPACK_IMPORTED_MODULE_8__["default"].newInstance();
    ijkCube.setDefaultStyle({
      fontStyle: 'bold',
      fontFamily: 'Arial',
      fontColor: 'black',
      fontSizeScale: (res) => res / 2,
      faceRotation: 0,
      edgeThickness: 0.1,
      edgeColor: 'black',
      resolution: 400,
    });
    ijkCube.setXPlusFaceProperty({ text: '+I' });
    ijkCube.setXMinusFaceProperty({ text: '-I' });
    ijkCube.setYPlusFaceProperty({ text: '+J' });
    ijkCube.setYMinusFaceProperty({ text: '-J' });
    ijkCube.setZPlusFaceProperty({ text: '+K' });
    ijkCube.setZMinusFaceProperty({ text: '-K' });
    ijkCube.setUserMatrix(this.vtk.data.getIndexToWorld());
    ijkCube.setScale(this.vtk.data.getDimensions());
    this.vtk.ijkMarker = _kitware_vtk_js_Interaction_Widgets_OrientationMarkerWidget__WEBPACK_IMPORTED_MODULE_10__["default"].newInstance({
      actor: ijkCube,
      interactor: this.vtk.renderWindow.getInteractor(),
    });
    this.vtk.ijkMarker.setEnabled(true);
    this.vtk.ijkMarker.setViewportCorner(
      _kitware_vtk_js_Interaction_Widgets_OrientationMarkerWidget__WEBPACK_IMPORTED_MODULE_10__["default"].Corners.BOTTOM_RIGHT
    );
    this.vtk.ijkMarker.setViewportSize(0.15);

    // Slicing mode
    this.setSlicingMode(slicingMode)
  }

  get windowWidth() {
    return this.vtk.actor.getProperty().getColorWindow();
  }

  set windowWidth(w) {
    if (w === this.windowWidth) return;
    this.vtk.actor.getProperty().setColorWindow(w);
    this.vtk.renderWindow.render();
  }

  get windowLevel() {
    return this.vtk.actor.getProperty().getColorLevel();
  }

  set windowLevel(l) {
    if (l === this.windowLevel) return;
    this.vtk.actor.getProperty().setColorLevel(l);
    this.vtk.renderWindow.render();
  }

  get slice() {
    return this.vtk.mapper.getSlice();
  }

  set slice(s) {
    if (s === this.slice) return;
    this.vtk.mapper.setSlice(s);
    this.vtk.renderWindow.render();
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Viewer);

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _arrayLikeToArray)
/* harmony export */ });
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _arrayWithHoles)
/* harmony export */ });
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _arrayWithoutHoles)
/* harmony export */ });
/* harmony import */ var _arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayLikeToArray.js */ "./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js");

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(arr);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _assertThisInitialized)
/* harmony export */ });
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _asyncToGenerator)
/* harmony export */ });
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/classCallCheck.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _classCallCheck)
/* harmony export */ });
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/construct.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/construct.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _construct)
/* harmony export */ });
/* harmony import */ var _setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setPrototypeOf.js */ "./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js");
/* harmony import */ var _isNativeReflectConstruct_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./isNativeReflectConstruct.js */ "./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js");


function _construct(Parent, args, Class) {
  if ((0,_isNativeReflectConstruct_js__WEBPACK_IMPORTED_MODULE_1__["default"])()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) (0,_setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__["default"])(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/createClass.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/createClass.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _createClass)
/* harmony export */ });
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _defineProperty)
/* harmony export */ });
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/get.js":
/*!********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/get.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _get)
/* harmony export */ });
/* harmony import */ var _superPropBase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./superPropBase.js */ "./node_modules/@babel/runtime/helpers/esm/superPropBase.js");

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get(target, property, receiver) {
      var base = (0,_superPropBase_js__WEBPACK_IMPORTED_MODULE_0__["default"])(target, property);
      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _getPrototypeOf)
/* harmony export */ });
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/inherits.js":
/*!*************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/inherits.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _inherits)
/* harmony export */ });
/* harmony import */ var _setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setPrototypeOf.js */ "./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js");

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) (0,_setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__["default"])(subClass, superClass);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _isNativeFunction)
/* harmony export */ });
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _isNativeReflectConstruct)
/* harmony export */ });
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/iterableToArray.js":
/*!********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _iterableToArray)
/* harmony export */ });
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _iterableToArrayLimit)
/* harmony export */ });
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js":
/*!********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _nonIterableRest)
/* harmony export */ });
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _nonIterableSpread)
/* harmony export */ });
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _objectWithoutProperties)
/* harmony export */ });
/* harmony import */ var _objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objectWithoutPropertiesLoose.js */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = (0,_objectWithoutPropertiesLoose_js__WEBPACK_IMPORTED_MODULE_0__["default"])(source, excluded);
  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _objectWithoutPropertiesLoose)
/* harmony export */ });
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _possibleConstructorReturn)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/esm/typeof.js");
/* harmony import */ var _assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./assertThisInitialized.js */ "./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js");


function _possibleConstructorReturn(self, call) {
  if (call && ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return (0,_assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_1__["default"])(self);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _setPrototypeOf)
/* harmony export */ });
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _slicedToArray)
/* harmony export */ });
/* harmony import */ var _arrayWithHoles_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayWithHoles.js */ "./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js");
/* harmony import */ var _iterableToArrayLimit_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterableToArrayLimit.js */ "./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js");
/* harmony import */ var _unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./unsupportedIterableToArray.js */ "./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js");
/* harmony import */ var _nonIterableRest_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nonIterableRest.js */ "./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js");




function _slicedToArray(arr, i) {
  return (0,_arrayWithHoles_js__WEBPACK_IMPORTED_MODULE_0__["default"])(arr) || (0,_iterableToArrayLimit_js__WEBPACK_IMPORTED_MODULE_1__["default"])(arr, i) || (0,_unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__["default"])(arr, i) || (0,_nonIterableRest_js__WEBPACK_IMPORTED_MODULE_3__["default"])();
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/superPropBase.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/superPropBase.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _superPropBase)
/* harmony export */ });
/* harmony import */ var _getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getPrototypeOf.js */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = (0,_getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__["default"])(object);
    if (object === null) break;
  }

  return object;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _toConsumableArray)
/* harmony export */ });
/* harmony import */ var _arrayWithoutHoles_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayWithoutHoles.js */ "./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js");
/* harmony import */ var _iterableToArray_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterableToArray.js */ "./node_modules/@babel/runtime/helpers/esm/iterableToArray.js");
/* harmony import */ var _unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./unsupportedIterableToArray.js */ "./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js");
/* harmony import */ var _nonIterableSpread_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./nonIterableSpread.js */ "./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js");




function _toConsumableArray(arr) {
  return (0,_arrayWithoutHoles_js__WEBPACK_IMPORTED_MODULE_0__["default"])(arr) || (0,_iterableToArray_js__WEBPACK_IMPORTED_MODULE_1__["default"])(arr) || (0,_unsupportedIterableToArray_js__WEBPACK_IMPORTED_MODULE_2__["default"])(arr) || (0,_nonIterableSpread_js__WEBPACK_IMPORTED_MODULE_3__["default"])();
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/typeof.js":
/*!***********************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/typeof.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _typeof)
/* harmony export */ });
function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _unsupportedIterableToArray)
/* harmony export */ });
/* harmony import */ var _arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayLikeToArray.js */ "./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js");

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0,_arrayLikeToArray_js__WEBPACK_IMPORTED_MODULE_0__["default"])(o, minLen);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js":
/*!********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js ***!
  \********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _wrapNativeSuper)
/* harmony export */ });
/* harmony import */ var _getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getPrototypeOf.js */ "./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var _setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./setPrototypeOf.js */ "./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js");
/* harmony import */ var _isNativeFunction_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./isNativeFunction.js */ "./node_modules/@babel/runtime/helpers/esm/isNativeFunction.js");
/* harmony import */ var _construct_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./construct.js */ "./node_modules/@babel/runtime/helpers/esm/construct.js");




function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : undefined;

  _wrapNativeSuper = function _wrapNativeSuper(Class) {
    if (Class === null || !(0,_isNativeFunction_js__WEBPACK_IMPORTED_MODULE_2__["default"])(Class)) return Class;

    if (typeof Class !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }

    if (typeof _cache !== "undefined") {
      if (_cache.has(Class)) return _cache.get(Class);

      _cache.set(Class, Wrapper);
    }

    function Wrapper() {
      return (0,_construct_js__WEBPACK_IMPORTED_MODULE_3__["default"])(Class, arguments, (0,_getPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__["default"])(this).constructor);
    }

    Wrapper.prototype = Object.create(Class.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return (0,_setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_1__["default"])(Wrapper, Class);
  };

  return _wrapNativeSuper(Class);
}

/***/ }),

/***/ "./node_modules/axios/package.json":
/*!*****************************************!*\
  !*** ./node_modules/axios/package.json ***!
  \*****************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"axios","version":"0.21.4","description":"Promise based HTTP client for the browser and node.js","main":"index.js","scripts":{"test":"grunt test","start":"node ./sandbox/server.js","build":"NODE_ENV=production grunt build","preversion":"npm test","version":"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json","postversion":"git push && git push --tags","examples":"node ./examples/server.js","coveralls":"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","fix":"eslint --fix lib/**/*.js"},"repository":{"type":"git","url":"https://github.com/axios/axios.git"},"keywords":["xhr","http","ajax","promise","node"],"author":"Matt Zabriskie","license":"MIT","bugs":{"url":"https://github.com/axios/axios/issues"},"homepage":"https://axios-http.com","devDependencies":{"coveralls":"^3.0.0","es6-promise":"^4.2.4","grunt":"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","mocha":"^8.2.1","sinon":"^4.5.0","terser-webpack-plugin":"^4.2.3","typescript":"^4.0.5","url-search-params":"^0.10.0","webpack":"^4.44.2","webpack-dev-server":"^3.11.0"},"browser":{"./lib/adapters/http.js":"./lib/adapters/xhr.js"},"jsdelivr":"dist/axios.min.js","unpkg":"dist/axios.min.js","typings":"./index.d.ts","dependencies":{"follow-redirects":"^1.14.0"},"bundlesize":[{"path":"./dist/axios.min.js","threshold":"5kB"}]}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var itk_readImageDICOMFileSeries__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! itk/readImageDICOMFileSeries */ "./node_modules/itk/readImageDICOMFileSeries.js");
/* harmony import */ var _viewer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./viewer */ "./src/viewer.js");



// Setup viewer with DOM
const viewerContainer = document.getElementById('viewer');
const topLabel = document.getElementById('top');
const bottomLabel = document.getElementById('bottom');
const leftLabel = document.getElementById('left');
const rightLabel = document.getElementById('right');
const viewer = new _viewer__WEBPACK_IMPORTED_MODULE_1__["default"](
  viewerContainer,
  { topLabel, bottomLabel, leftLabel, rightLabel },
);

// Files
const fileInput = document.querySelector('input');
fileInput.addEventListener('change', async (event) => {

  // Get files
  const { dataTransfer } = event;
  const files = event.target.files || dataTransfer.files;

  fileInput.setAttribute("hidden", "");

  // Read series
  const itkReader = await (0,itk_readImageDICOMFileSeries__WEBPACK_IMPORTED_MODULE_0__["default"])(files)

  // Load in viewer
  const selector = document.getElementById('slicingModeSelector')
  viewer.load(itkReader.image, parseInt(selector.value));

  selector.removeAttribute("hidden");
  selector.onchange = () => {
    viewer.load(itkReader.image, parseInt(selector.value));
  }
});

})();

/******/ })()
;
//# sourceMappingURL=index.js.map